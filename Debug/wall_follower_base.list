
wall_follower_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b248  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800b300  0800b300  0001b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b88c  0800b88c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800b88c  0800b88c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b88c  0800b88c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000074  0800b908  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800b908  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae6  00000000  00000000  0003937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c26  00000000  00000000  0003f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baa8  00000000  00000000  000570d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbae  00000000  00000000  00072b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010072c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  0010077c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b2e8 	.word	0x0800b2e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	0800b2e8 	.word	0x0800b2e8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fb6d 	bl	8000ad4 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 faf9 	bl	80009fc <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fb5f 	bl	8000ad4 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb55 	bl	8000ad4 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb05 	bl	8000a48 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fafb 	bl	8000a48 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_f2uiz>:
 8000460:	219e      	movs	r1, #158	; 0x9e
 8000462:	b510      	push	{r4, lr}
 8000464:	05c9      	lsls	r1, r1, #23
 8000466:	1c04      	adds	r4, r0, #0
 8000468:	f7ff fff0 	bl	800044c <__aeabi_fcmpge>
 800046c:	2800      	cmp	r0, #0
 800046e:	d103      	bne.n	8000478 <__aeabi_f2uiz+0x18>
 8000470:	1c20      	adds	r0, r4, #0
 8000472:	f000 fe5d 	bl	8001130 <__aeabi_f2iz>
 8000476:	bd10      	pop	{r4, pc}
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	1c20      	adds	r0, r4, #0
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	f000 fc93 	bl	8000da8 <__aeabi_fsub>
 8000482:	f000 fe55 	bl	8001130 <__aeabi_f2iz>
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	469c      	mov	ip, r3
 800048c:	4460      	add	r0, ip
 800048e:	e7f2      	b.n	8000476 <__aeabi_f2uiz+0x16>

08000490 <__aeabi_fadd>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	46c6      	mov	lr, r8
 8000494:	0243      	lsls	r3, r0, #9
 8000496:	0a5b      	lsrs	r3, r3, #9
 8000498:	024e      	lsls	r6, r1, #9
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	004f      	lsls	r7, r1, #1
 800049e:	00da      	lsls	r2, r3, #3
 80004a0:	0fc4      	lsrs	r4, r0, #31
 80004a2:	469c      	mov	ip, r3
 80004a4:	0a70      	lsrs	r0, r6, #9
 80004a6:	4690      	mov	r8, r2
 80004a8:	b500      	push	{lr}
 80004aa:	0e2d      	lsrs	r5, r5, #24
 80004ac:	0e3f      	lsrs	r7, r7, #24
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	09b6      	lsrs	r6, r6, #6
 80004b2:	428c      	cmp	r4, r1
 80004b4:	d04b      	beq.n	800054e <__aeabi_fadd+0xbe>
 80004b6:	1bea      	subs	r2, r5, r7
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	dd36      	ble.n	800052a <__aeabi_fadd+0x9a>
 80004bc:	2f00      	cmp	r7, #0
 80004be:	d061      	beq.n	8000584 <__aeabi_fadd+0xf4>
 80004c0:	2dff      	cmp	r5, #255	; 0xff
 80004c2:	d100      	bne.n	80004c6 <__aeabi_fadd+0x36>
 80004c4:	e0ad      	b.n	8000622 <__aeabi_fadd+0x192>
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	04db      	lsls	r3, r3, #19
 80004ca:	431e      	orrs	r6, r3
 80004cc:	2a1b      	cmp	r2, #27
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fadd+0x42>
 80004d0:	e0d3      	b.n	800067a <__aeabi_fadd+0x1ea>
 80004d2:	2001      	movs	r0, #1
 80004d4:	4643      	mov	r3, r8
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	0143      	lsls	r3, r0, #5
 80004da:	d400      	bmi.n	80004de <__aeabi_fadd+0x4e>
 80004dc:	e08c      	b.n	80005f8 <__aeabi_fadd+0x168>
 80004de:	0180      	lsls	r0, r0, #6
 80004e0:	0987      	lsrs	r7, r0, #6
 80004e2:	0038      	movs	r0, r7
 80004e4:	f000 fed4 	bl	8001290 <__clzsi2>
 80004e8:	3805      	subs	r0, #5
 80004ea:	4087      	lsls	r7, r0
 80004ec:	4285      	cmp	r5, r0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_fadd+0x62>
 80004f0:	e0b6      	b.n	8000660 <__aeabi_fadd+0x1d0>
 80004f2:	1a2d      	subs	r5, r5, r0
 80004f4:	48b3      	ldr	r0, [pc, #716]	; (80007c4 <__aeabi_fadd+0x334>)
 80004f6:	4038      	ands	r0, r7
 80004f8:	0743      	lsls	r3, r0, #29
 80004fa:	d004      	beq.n	8000506 <__aeabi_fadd+0x76>
 80004fc:	230f      	movs	r3, #15
 80004fe:	4003      	ands	r3, r0
 8000500:	2b04      	cmp	r3, #4
 8000502:	d000      	beq.n	8000506 <__aeabi_fadd+0x76>
 8000504:	3004      	adds	r0, #4
 8000506:	0143      	lsls	r3, r0, #5
 8000508:	d400      	bmi.n	800050c <__aeabi_fadd+0x7c>
 800050a:	e078      	b.n	80005fe <__aeabi_fadd+0x16e>
 800050c:	1c6a      	adds	r2, r5, #1
 800050e:	2dfe      	cmp	r5, #254	; 0xfe
 8000510:	d065      	beq.n	80005de <__aeabi_fadd+0x14e>
 8000512:	0180      	lsls	r0, r0, #6
 8000514:	0a43      	lsrs	r3, r0, #9
 8000516:	469c      	mov	ip, r3
 8000518:	b2d2      	uxtb	r2, r2
 800051a:	4663      	mov	r3, ip
 800051c:	05d0      	lsls	r0, r2, #23
 800051e:	4318      	orrs	r0, r3
 8000520:	07e4      	lsls	r4, r4, #31
 8000522:	4320      	orrs	r0, r4
 8000524:	bc80      	pop	{r7}
 8000526:	46b8      	mov	r8, r7
 8000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052a:	2a00      	cmp	r2, #0
 800052c:	d035      	beq.n	800059a <__aeabi_fadd+0x10a>
 800052e:	1b7a      	subs	r2, r7, r5
 8000530:	2d00      	cmp	r5, #0
 8000532:	d000      	beq.n	8000536 <__aeabi_fadd+0xa6>
 8000534:	e0af      	b.n	8000696 <__aeabi_fadd+0x206>
 8000536:	4643      	mov	r3, r8
 8000538:	2b00      	cmp	r3, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0xae>
 800053c:	e0a7      	b.n	800068e <__aeabi_fadd+0x1fe>
 800053e:	1e53      	subs	r3, r2, #1
 8000540:	2a01      	cmp	r2, #1
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0xb6>
 8000544:	e12f      	b.n	80007a6 <__aeabi_fadd+0x316>
 8000546:	2aff      	cmp	r2, #255	; 0xff
 8000548:	d069      	beq.n	800061e <__aeabi_fadd+0x18e>
 800054a:	001a      	movs	r2, r3
 800054c:	e0aa      	b.n	80006a4 <__aeabi_fadd+0x214>
 800054e:	1be9      	subs	r1, r5, r7
 8000550:	2900      	cmp	r1, #0
 8000552:	dd70      	ble.n	8000636 <__aeabi_fadd+0x1a6>
 8000554:	2f00      	cmp	r7, #0
 8000556:	d037      	beq.n	80005c8 <__aeabi_fadd+0x138>
 8000558:	2dff      	cmp	r5, #255	; 0xff
 800055a:	d062      	beq.n	8000622 <__aeabi_fadd+0x192>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	04db      	lsls	r3, r3, #19
 8000560:	431e      	orrs	r6, r3
 8000562:	291b      	cmp	r1, #27
 8000564:	dc00      	bgt.n	8000568 <__aeabi_fadd+0xd8>
 8000566:	e0b0      	b.n	80006ca <__aeabi_fadd+0x23a>
 8000568:	2001      	movs	r0, #1
 800056a:	4440      	add	r0, r8
 800056c:	0143      	lsls	r3, r0, #5
 800056e:	d543      	bpl.n	80005f8 <__aeabi_fadd+0x168>
 8000570:	3501      	adds	r5, #1
 8000572:	2dff      	cmp	r5, #255	; 0xff
 8000574:	d033      	beq.n	80005de <__aeabi_fadd+0x14e>
 8000576:	2301      	movs	r3, #1
 8000578:	4a93      	ldr	r2, [pc, #588]	; (80007c8 <__aeabi_fadd+0x338>)
 800057a:	4003      	ands	r3, r0
 800057c:	0840      	lsrs	r0, r0, #1
 800057e:	4010      	ands	r0, r2
 8000580:	4318      	orrs	r0, r3
 8000582:	e7b9      	b.n	80004f8 <__aeabi_fadd+0x68>
 8000584:	2e00      	cmp	r6, #0
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0xfa>
 8000588:	e083      	b.n	8000692 <__aeabi_fadd+0x202>
 800058a:	1e51      	subs	r1, r2, #1
 800058c:	2a01      	cmp	r2, #1
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x102>
 8000590:	e0d8      	b.n	8000744 <__aeabi_fadd+0x2b4>
 8000592:	2aff      	cmp	r2, #255	; 0xff
 8000594:	d045      	beq.n	8000622 <__aeabi_fadd+0x192>
 8000596:	000a      	movs	r2, r1
 8000598:	e798      	b.n	80004cc <__aeabi_fadd+0x3c>
 800059a:	27fe      	movs	r7, #254	; 0xfe
 800059c:	1c6a      	adds	r2, r5, #1
 800059e:	4217      	tst	r7, r2
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fadd+0x114>
 80005a2:	e086      	b.n	80006b2 <__aeabi_fadd+0x222>
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_fadd+0x11a>
 80005a8:	e0b7      	b.n	800071a <__aeabi_fadd+0x28a>
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x122>
 80005b0:	e0f3      	b.n	800079a <__aeabi_fadd+0x30a>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d0b0      	beq.n	800051a <__aeabi_fadd+0x8a>
 80005b8:	1b98      	subs	r0, r3, r6
 80005ba:	0143      	lsls	r3, r0, #5
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_fadd+0x130>
 80005be:	e0fa      	b.n	80007b6 <__aeabi_fadd+0x326>
 80005c0:	4643      	mov	r3, r8
 80005c2:	000c      	movs	r4, r1
 80005c4:	1af0      	subs	r0, r6, r3
 80005c6:	e797      	b.n	80004f8 <__aeabi_fadd+0x68>
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x13e>
 80005cc:	e0c8      	b.n	8000760 <__aeabi_fadd+0x2d0>
 80005ce:	1e4a      	subs	r2, r1, #1
 80005d0:	2901      	cmp	r1, #1
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x146>
 80005d4:	e0ae      	b.n	8000734 <__aeabi_fadd+0x2a4>
 80005d6:	29ff      	cmp	r1, #255	; 0xff
 80005d8:	d023      	beq.n	8000622 <__aeabi_fadd+0x192>
 80005da:	0011      	movs	r1, r2
 80005dc:	e7c1      	b.n	8000562 <__aeabi_fadd+0xd2>
 80005de:	2300      	movs	r3, #0
 80005e0:	22ff      	movs	r2, #255	; 0xff
 80005e2:	469c      	mov	ip, r3
 80005e4:	e799      	b.n	800051a <__aeabi_fadd+0x8a>
 80005e6:	21fe      	movs	r1, #254	; 0xfe
 80005e8:	1c6a      	adds	r2, r5, #1
 80005ea:	4211      	tst	r1, r2
 80005ec:	d077      	beq.n	80006de <__aeabi_fadd+0x24e>
 80005ee:	2aff      	cmp	r2, #255	; 0xff
 80005f0:	d0f5      	beq.n	80005de <__aeabi_fadd+0x14e>
 80005f2:	0015      	movs	r5, r2
 80005f4:	4446      	add	r6, r8
 80005f6:	0870      	lsrs	r0, r6, #1
 80005f8:	0743      	lsls	r3, r0, #29
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x16e>
 80005fc:	e77e      	b.n	80004fc <__aeabi_fadd+0x6c>
 80005fe:	08c3      	lsrs	r3, r0, #3
 8000600:	2dff      	cmp	r5, #255	; 0xff
 8000602:	d00e      	beq.n	8000622 <__aeabi_fadd+0x192>
 8000604:	025b      	lsls	r3, r3, #9
 8000606:	0a5b      	lsrs	r3, r3, #9
 8000608:	469c      	mov	ip, r3
 800060a:	b2ea      	uxtb	r2, r5
 800060c:	e785      	b.n	800051a <__aeabi_fadd+0x8a>
 800060e:	2e00      	cmp	r6, #0
 8000610:	d007      	beq.n	8000622 <__aeabi_fadd+0x192>
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	03d2      	lsls	r2, r2, #15
 8000616:	4213      	tst	r3, r2
 8000618:	d003      	beq.n	8000622 <__aeabi_fadd+0x192>
 800061a:	4210      	tst	r0, r2
 800061c:	d101      	bne.n	8000622 <__aeabi_fadd+0x192>
 800061e:	000c      	movs	r4, r1
 8000620:	0003      	movs	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0db      	beq.n	80005de <__aeabi_fadd+0x14e>
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	03c0      	lsls	r0, r0, #15
 800062a:	4318      	orrs	r0, r3
 800062c:	0240      	lsls	r0, r0, #9
 800062e:	0a43      	lsrs	r3, r0, #9
 8000630:	469c      	mov	ip, r3
 8000632:	22ff      	movs	r2, #255	; 0xff
 8000634:	e771      	b.n	800051a <__aeabi_fadd+0x8a>
 8000636:	2900      	cmp	r1, #0
 8000638:	d0d5      	beq.n	80005e6 <__aeabi_fadd+0x156>
 800063a:	1b7a      	subs	r2, r7, r5
 800063c:	2d00      	cmp	r5, #0
 800063e:	d160      	bne.n	8000702 <__aeabi_fadd+0x272>
 8000640:	4643      	mov	r3, r8
 8000642:	2b00      	cmp	r3, #0
 8000644:	d024      	beq.n	8000690 <__aeabi_fadd+0x200>
 8000646:	1e53      	subs	r3, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d073      	beq.n	8000734 <__aeabi_fadd+0x2a4>
 800064c:	2aff      	cmp	r2, #255	; 0xff
 800064e:	d0e7      	beq.n	8000620 <__aeabi_fadd+0x190>
 8000650:	001a      	movs	r2, r3
 8000652:	2a1b      	cmp	r2, #27
 8000654:	dc00      	bgt.n	8000658 <__aeabi_fadd+0x1c8>
 8000656:	e085      	b.n	8000764 <__aeabi_fadd+0x2d4>
 8000658:	2001      	movs	r0, #1
 800065a:	003d      	movs	r5, r7
 800065c:	1980      	adds	r0, r0, r6
 800065e:	e785      	b.n	800056c <__aeabi_fadd+0xdc>
 8000660:	2320      	movs	r3, #32
 8000662:	003a      	movs	r2, r7
 8000664:	1b45      	subs	r5, r0, r5
 8000666:	0038      	movs	r0, r7
 8000668:	3501      	adds	r5, #1
 800066a:	40ea      	lsrs	r2, r5
 800066c:	1b5d      	subs	r5, r3, r5
 800066e:	40a8      	lsls	r0, r5
 8000670:	1e43      	subs	r3, r0, #1
 8000672:	4198      	sbcs	r0, r3
 8000674:	2500      	movs	r5, #0
 8000676:	4310      	orrs	r0, r2
 8000678:	e73e      	b.n	80004f8 <__aeabi_fadd+0x68>
 800067a:	2320      	movs	r3, #32
 800067c:	0030      	movs	r0, r6
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	0031      	movs	r1, r6
 8000682:	4098      	lsls	r0, r3
 8000684:	40d1      	lsrs	r1, r2
 8000686:	1e43      	subs	r3, r0, #1
 8000688:	4198      	sbcs	r0, r3
 800068a:	4308      	orrs	r0, r1
 800068c:	e722      	b.n	80004d4 <__aeabi_fadd+0x44>
 800068e:	000c      	movs	r4, r1
 8000690:	0003      	movs	r3, r0
 8000692:	0015      	movs	r5, r2
 8000694:	e7b4      	b.n	8000600 <__aeabi_fadd+0x170>
 8000696:	2fff      	cmp	r7, #255	; 0xff
 8000698:	d0c1      	beq.n	800061e <__aeabi_fadd+0x18e>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4640      	mov	r0, r8
 800069e:	04db      	lsls	r3, r3, #19
 80006a0:	4318      	orrs	r0, r3
 80006a2:	4680      	mov	r8, r0
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dd51      	ble.n	800074c <__aeabi_fadd+0x2bc>
 80006a8:	2001      	movs	r0, #1
 80006aa:	000c      	movs	r4, r1
 80006ac:	003d      	movs	r5, r7
 80006ae:	1a30      	subs	r0, r6, r0
 80006b0:	e712      	b.n	80004d8 <__aeabi_fadd+0x48>
 80006b2:	4643      	mov	r3, r8
 80006b4:	1b9f      	subs	r7, r3, r6
 80006b6:	017b      	lsls	r3, r7, #5
 80006b8:	d42b      	bmi.n	8000712 <__aeabi_fadd+0x282>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	d000      	beq.n	80006c0 <__aeabi_fadd+0x230>
 80006be:	e710      	b.n	80004e2 <__aeabi_fadd+0x52>
 80006c0:	2300      	movs	r3, #0
 80006c2:	2400      	movs	r4, #0
 80006c4:	2200      	movs	r2, #0
 80006c6:	469c      	mov	ip, r3
 80006c8:	e727      	b.n	800051a <__aeabi_fadd+0x8a>
 80006ca:	2320      	movs	r3, #32
 80006cc:	0032      	movs	r2, r6
 80006ce:	0030      	movs	r0, r6
 80006d0:	40ca      	lsrs	r2, r1
 80006d2:	1a59      	subs	r1, r3, r1
 80006d4:	4088      	lsls	r0, r1
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	4310      	orrs	r0, r2
 80006dc:	e745      	b.n	800056a <__aeabi_fadd+0xda>
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d14a      	bne.n	8000778 <__aeabi_fadd+0x2e8>
 80006e2:	4643      	mov	r3, r8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d063      	beq.n	80007b0 <__aeabi_fadd+0x320>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fadd+0x260>
 80006ee:	e714      	b.n	800051a <__aeabi_fadd+0x8a>
 80006f0:	0030      	movs	r0, r6
 80006f2:	4440      	add	r0, r8
 80006f4:	0143      	lsls	r3, r0, #5
 80006f6:	d400      	bmi.n	80006fa <__aeabi_fadd+0x26a>
 80006f8:	e77e      	b.n	80005f8 <__aeabi_fadd+0x168>
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <__aeabi_fadd+0x334>)
 80006fc:	3501      	adds	r5, #1
 80006fe:	4018      	ands	r0, r3
 8000700:	e77a      	b.n	80005f8 <__aeabi_fadd+0x168>
 8000702:	2fff      	cmp	r7, #255	; 0xff
 8000704:	d08c      	beq.n	8000620 <__aeabi_fadd+0x190>
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	4641      	mov	r1, r8
 800070a:	04db      	lsls	r3, r3, #19
 800070c:	4319      	orrs	r1, r3
 800070e:	4688      	mov	r8, r1
 8000710:	e79f      	b.n	8000652 <__aeabi_fadd+0x1c2>
 8000712:	4643      	mov	r3, r8
 8000714:	000c      	movs	r4, r1
 8000716:	1af7      	subs	r7, r6, r3
 8000718:	e6e3      	b.n	80004e2 <__aeabi_fadd+0x52>
 800071a:	4642      	mov	r2, r8
 800071c:	2a00      	cmp	r2, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x292>
 8000720:	e775      	b.n	800060e <__aeabi_fadd+0x17e>
 8000722:	2e00      	cmp	r6, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x298>
 8000726:	e77a      	b.n	800061e <__aeabi_fadd+0x18e>
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	03db      	lsls	r3, r3, #15
 800072c:	2400      	movs	r4, #0
 800072e:	469c      	mov	ip, r3
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	e6f2      	b.n	800051a <__aeabi_fadd+0x8a>
 8000734:	0030      	movs	r0, r6
 8000736:	4440      	add	r0, r8
 8000738:	2501      	movs	r5, #1
 800073a:	0143      	lsls	r3, r0, #5
 800073c:	d400      	bmi.n	8000740 <__aeabi_fadd+0x2b0>
 800073e:	e75b      	b.n	80005f8 <__aeabi_fadd+0x168>
 8000740:	2502      	movs	r5, #2
 8000742:	e718      	b.n	8000576 <__aeabi_fadd+0xe6>
 8000744:	4643      	mov	r3, r8
 8000746:	2501      	movs	r5, #1
 8000748:	1b98      	subs	r0, r3, r6
 800074a:	e6c5      	b.n	80004d8 <__aeabi_fadd+0x48>
 800074c:	2320      	movs	r3, #32
 800074e:	4644      	mov	r4, r8
 8000750:	4640      	mov	r0, r8
 8000752:	40d4      	lsrs	r4, r2
 8000754:	1a9a      	subs	r2, r3, r2
 8000756:	4090      	lsls	r0, r2
 8000758:	1e43      	subs	r3, r0, #1
 800075a:	4198      	sbcs	r0, r3
 800075c:	4320      	orrs	r0, r4
 800075e:	e7a4      	b.n	80006aa <__aeabi_fadd+0x21a>
 8000760:	000d      	movs	r5, r1
 8000762:	e74d      	b.n	8000600 <__aeabi_fadd+0x170>
 8000764:	2320      	movs	r3, #32
 8000766:	4641      	mov	r1, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d1      	lsrs	r1, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4308      	orrs	r0, r1
 8000776:	e770      	b.n	800065a <__aeabi_fadd+0x1ca>
 8000778:	4642      	mov	r2, r8
 800077a:	2a00      	cmp	r2, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x2f0>
 800077e:	e74f      	b.n	8000620 <__aeabi_fadd+0x190>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x2f6>
 8000784:	e74d      	b.n	8000622 <__aeabi_fadd+0x192>
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	03d2      	lsls	r2, r2, #15
 800078a:	4213      	tst	r3, r2
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x300>
 800078e:	e748      	b.n	8000622 <__aeabi_fadd+0x192>
 8000790:	4210      	tst	r0, r2
 8000792:	d000      	beq.n	8000796 <__aeabi_fadd+0x306>
 8000794:	e745      	b.n	8000622 <__aeabi_fadd+0x192>
 8000796:	0003      	movs	r3, r0
 8000798:	e743      	b.n	8000622 <__aeabi_fadd+0x192>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d090      	beq.n	80006c0 <__aeabi_fadd+0x230>
 800079e:	000c      	movs	r4, r1
 80007a0:	4684      	mov	ip, r0
 80007a2:	2200      	movs	r2, #0
 80007a4:	e6b9      	b.n	800051a <__aeabi_fadd+0x8a>
 80007a6:	4643      	mov	r3, r8
 80007a8:	000c      	movs	r4, r1
 80007aa:	1af0      	subs	r0, r6, r3
 80007ac:	3501      	adds	r5, #1
 80007ae:	e693      	b.n	80004d8 <__aeabi_fadd+0x48>
 80007b0:	4684      	mov	ip, r0
 80007b2:	2200      	movs	r2, #0
 80007b4:	e6b1      	b.n	800051a <__aeabi_fadd+0x8a>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d000      	beq.n	80007bc <__aeabi_fadd+0x32c>
 80007ba:	e71d      	b.n	80005f8 <__aeabi_fadd+0x168>
 80007bc:	2300      	movs	r3, #0
 80007be:	2400      	movs	r4, #0
 80007c0:	469c      	mov	ip, r3
 80007c2:	e6aa      	b.n	800051a <__aeabi_fadd+0x8a>
 80007c4:	fbffffff 	.word	0xfbffffff
 80007c8:	7dffffff 	.word	0x7dffffff

080007cc <__aeabi_fdiv>:
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	464f      	mov	r7, r9
 80007d0:	4646      	mov	r6, r8
 80007d2:	46d6      	mov	lr, sl
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	b5c0      	push	{r6, r7, lr}
 80007d8:	0047      	lsls	r7, r0, #1
 80007da:	1c0c      	adds	r4, r1, #0
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	0e3f      	lsrs	r7, r7, #24
 80007e0:	0fc6      	lsrs	r6, r0, #31
 80007e2:	2f00      	cmp	r7, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fdiv+0x1c>
 80007e6:	e070      	b.n	80008ca <__aeabi_fdiv+0xfe>
 80007e8:	2fff      	cmp	r7, #255	; 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fdiv+0x22>
 80007ec:	e075      	b.n	80008da <__aeabi_fdiv+0x10e>
 80007ee:	00eb      	lsls	r3, r5, #3
 80007f0:	2580      	movs	r5, #128	; 0x80
 80007f2:	04ed      	lsls	r5, r5, #19
 80007f4:	431d      	orrs	r5, r3
 80007f6:	2300      	movs	r3, #0
 80007f8:	4699      	mov	r9, r3
 80007fa:	469a      	mov	sl, r3
 80007fc:	3f7f      	subs	r7, #127	; 0x7f
 80007fe:	0260      	lsls	r0, r4, #9
 8000800:	0a43      	lsrs	r3, r0, #9
 8000802:	4698      	mov	r8, r3
 8000804:	0063      	lsls	r3, r4, #1
 8000806:	0e1b      	lsrs	r3, r3, #24
 8000808:	0fe4      	lsrs	r4, r4, #31
 800080a:	2b00      	cmp	r3, #0
 800080c:	d04e      	beq.n	80008ac <__aeabi_fdiv+0xe0>
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d046      	beq.n	80008a0 <__aeabi_fdiv+0xd4>
 8000812:	4642      	mov	r2, r8
 8000814:	00d0      	lsls	r0, r2, #3
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	04d2      	lsls	r2, r2, #19
 800081a:	4302      	orrs	r2, r0
 800081c:	4690      	mov	r8, r2
 800081e:	2200      	movs	r2, #0
 8000820:	3b7f      	subs	r3, #127	; 0x7f
 8000822:	0031      	movs	r1, r6
 8000824:	1aff      	subs	r7, r7, r3
 8000826:	464b      	mov	r3, r9
 8000828:	4061      	eors	r1, r4
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	4313      	orrs	r3, r2
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d900      	bls.n	8000834 <__aeabi_fdiv+0x68>
 8000832:	e0b5      	b.n	80009a0 <__aeabi_fdiv+0x1d4>
 8000834:	486e      	ldr	r0, [pc, #440]	; (80009f0 <__aeabi_fdiv+0x224>)
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	58c3      	ldr	r3, [r0, r3]
 800083a:	469f      	mov	pc, r3
 800083c:	2300      	movs	r3, #0
 800083e:	4698      	mov	r8, r3
 8000840:	0026      	movs	r6, r4
 8000842:	4645      	mov	r5, r8
 8000844:	4692      	mov	sl, r2
 8000846:	4653      	mov	r3, sl
 8000848:	2b02      	cmp	r3, #2
 800084a:	d100      	bne.n	800084e <__aeabi_fdiv+0x82>
 800084c:	e089      	b.n	8000962 <__aeabi_fdiv+0x196>
 800084e:	2b03      	cmp	r3, #3
 8000850:	d100      	bne.n	8000854 <__aeabi_fdiv+0x88>
 8000852:	e09e      	b.n	8000992 <__aeabi_fdiv+0x1c6>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d018      	beq.n	800088a <__aeabi_fdiv+0xbe>
 8000858:	003b      	movs	r3, r7
 800085a:	337f      	adds	r3, #127	; 0x7f
 800085c:	2b00      	cmp	r3, #0
 800085e:	dd69      	ble.n	8000934 <__aeabi_fdiv+0x168>
 8000860:	076a      	lsls	r2, r5, #29
 8000862:	d004      	beq.n	800086e <__aeabi_fdiv+0xa2>
 8000864:	220f      	movs	r2, #15
 8000866:	402a      	ands	r2, r5
 8000868:	2a04      	cmp	r2, #4
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0xa2>
 800086c:	3504      	adds	r5, #4
 800086e:	012a      	lsls	r2, r5, #4
 8000870:	d503      	bpl.n	800087a <__aeabi_fdiv+0xae>
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <__aeabi_fdiv+0x228>)
 8000874:	401d      	ands	r5, r3
 8000876:	003b      	movs	r3, r7
 8000878:	3380      	adds	r3, #128	; 0x80
 800087a:	2bfe      	cmp	r3, #254	; 0xfe
 800087c:	dd00      	ble.n	8000880 <__aeabi_fdiv+0xb4>
 800087e:	e070      	b.n	8000962 <__aeabi_fdiv+0x196>
 8000880:	01ad      	lsls	r5, r5, #6
 8000882:	0a6d      	lsrs	r5, r5, #9
 8000884:	b2d8      	uxtb	r0, r3
 8000886:	e002      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000888:	000e      	movs	r6, r1
 800088a:	2000      	movs	r0, #0
 800088c:	2500      	movs	r5, #0
 800088e:	05c0      	lsls	r0, r0, #23
 8000890:	4328      	orrs	r0, r5
 8000892:	07f6      	lsls	r6, r6, #31
 8000894:	4330      	orrs	r0, r6
 8000896:	bce0      	pop	{r5, r6, r7}
 8000898:	46ba      	mov	sl, r7
 800089a:	46b1      	mov	r9, r6
 800089c:	46a8      	mov	r8, r5
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	4643      	mov	r3, r8
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d13f      	bne.n	8000926 <__aeabi_fdiv+0x15a>
 80008a6:	2202      	movs	r2, #2
 80008a8:	3fff      	subs	r7, #255	; 0xff
 80008aa:	e003      	b.n	80008b4 <__aeabi_fdiv+0xe8>
 80008ac:	4643      	mov	r3, r8
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d12d      	bne.n	800090e <__aeabi_fdiv+0x142>
 80008b2:	2201      	movs	r2, #1
 80008b4:	0031      	movs	r1, r6
 80008b6:	464b      	mov	r3, r9
 80008b8:	4061      	eors	r1, r4
 80008ba:	b2c9      	uxtb	r1, r1
 80008bc:	4313      	orrs	r3, r2
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d834      	bhi.n	800092c <__aeabi_fdiv+0x160>
 80008c2:	484d      	ldr	r0, [pc, #308]	; (80009f8 <__aeabi_fdiv+0x22c>)
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	58c3      	ldr	r3, [r0, r3]
 80008c8:	469f      	mov	pc, r3
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d113      	bne.n	80008f6 <__aeabi_fdiv+0x12a>
 80008ce:	2304      	movs	r3, #4
 80008d0:	4699      	mov	r9, r3
 80008d2:	3b03      	subs	r3, #3
 80008d4:	2700      	movs	r7, #0
 80008d6:	469a      	mov	sl, r3
 80008d8:	e791      	b.n	80007fe <__aeabi_fdiv+0x32>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d105      	bne.n	80008ea <__aeabi_fdiv+0x11e>
 80008de:	2308      	movs	r3, #8
 80008e0:	4699      	mov	r9, r3
 80008e2:	3b06      	subs	r3, #6
 80008e4:	27ff      	movs	r7, #255	; 0xff
 80008e6:	469a      	mov	sl, r3
 80008e8:	e789      	b.n	80007fe <__aeabi_fdiv+0x32>
 80008ea:	230c      	movs	r3, #12
 80008ec:	4699      	mov	r9, r3
 80008ee:	3b09      	subs	r3, #9
 80008f0:	27ff      	movs	r7, #255	; 0xff
 80008f2:	469a      	mov	sl, r3
 80008f4:	e783      	b.n	80007fe <__aeabi_fdiv+0x32>
 80008f6:	0028      	movs	r0, r5
 80008f8:	f000 fcca 	bl	8001290 <__clzsi2>
 80008fc:	2776      	movs	r7, #118	; 0x76
 80008fe:	1f43      	subs	r3, r0, #5
 8000900:	409d      	lsls	r5, r3
 8000902:	2300      	movs	r3, #0
 8000904:	427f      	negs	r7, r7
 8000906:	4699      	mov	r9, r3
 8000908:	469a      	mov	sl, r3
 800090a:	1a3f      	subs	r7, r7, r0
 800090c:	e777      	b.n	80007fe <__aeabi_fdiv+0x32>
 800090e:	4640      	mov	r0, r8
 8000910:	f000 fcbe 	bl	8001290 <__clzsi2>
 8000914:	4642      	mov	r2, r8
 8000916:	1f43      	subs	r3, r0, #5
 8000918:	409a      	lsls	r2, r3
 800091a:	2376      	movs	r3, #118	; 0x76
 800091c:	425b      	negs	r3, r3
 800091e:	4690      	mov	r8, r2
 8000920:	1a1b      	subs	r3, r3, r0
 8000922:	2200      	movs	r2, #0
 8000924:	e77d      	b.n	8000822 <__aeabi_fdiv+0x56>
 8000926:	23ff      	movs	r3, #255	; 0xff
 8000928:	2203      	movs	r2, #3
 800092a:	e77a      	b.n	8000822 <__aeabi_fdiv+0x56>
 800092c:	000e      	movs	r6, r1
 800092e:	20ff      	movs	r0, #255	; 0xff
 8000930:	2500      	movs	r5, #0
 8000932:	e7ac      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000934:	2001      	movs	r0, #1
 8000936:	1ac0      	subs	r0, r0, r3
 8000938:	281b      	cmp	r0, #27
 800093a:	dca6      	bgt.n	800088a <__aeabi_fdiv+0xbe>
 800093c:	379e      	adds	r7, #158	; 0x9e
 800093e:	002a      	movs	r2, r5
 8000940:	40bd      	lsls	r5, r7
 8000942:	40c2      	lsrs	r2, r0
 8000944:	1e6b      	subs	r3, r5, #1
 8000946:	419d      	sbcs	r5, r3
 8000948:	4315      	orrs	r5, r2
 800094a:	076b      	lsls	r3, r5, #29
 800094c:	d004      	beq.n	8000958 <__aeabi_fdiv+0x18c>
 800094e:	230f      	movs	r3, #15
 8000950:	402b      	ands	r3, r5
 8000952:	2b04      	cmp	r3, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_fdiv+0x18c>
 8000956:	3504      	adds	r5, #4
 8000958:	016b      	lsls	r3, r5, #5
 800095a:	d544      	bpl.n	80009e6 <__aeabi_fdiv+0x21a>
 800095c:	2001      	movs	r0, #1
 800095e:	2500      	movs	r5, #0
 8000960:	e795      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	2500      	movs	r5, #0
 8000966:	e792      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000968:	2580      	movs	r5, #128	; 0x80
 800096a:	2600      	movs	r6, #0
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	03ed      	lsls	r5, r5, #15
 8000970:	e78d      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000972:	2300      	movs	r3, #0
 8000974:	4698      	mov	r8, r3
 8000976:	2080      	movs	r0, #128	; 0x80
 8000978:	03c0      	lsls	r0, r0, #15
 800097a:	4205      	tst	r5, r0
 800097c:	d009      	beq.n	8000992 <__aeabi_fdiv+0x1c6>
 800097e:	4643      	mov	r3, r8
 8000980:	4203      	tst	r3, r0
 8000982:	d106      	bne.n	8000992 <__aeabi_fdiv+0x1c6>
 8000984:	4645      	mov	r5, r8
 8000986:	4305      	orrs	r5, r0
 8000988:	026d      	lsls	r5, r5, #9
 800098a:	0026      	movs	r6, r4
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	0a6d      	lsrs	r5, r5, #9
 8000990:	e77d      	b.n	800088e <__aeabi_fdiv+0xc2>
 8000992:	2080      	movs	r0, #128	; 0x80
 8000994:	03c0      	lsls	r0, r0, #15
 8000996:	4305      	orrs	r5, r0
 8000998:	026d      	lsls	r5, r5, #9
 800099a:	20ff      	movs	r0, #255	; 0xff
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	e776      	b.n	800088e <__aeabi_fdiv+0xc2>
 80009a0:	4642      	mov	r2, r8
 80009a2:	016b      	lsls	r3, r5, #5
 80009a4:	0150      	lsls	r0, r2, #5
 80009a6:	4283      	cmp	r3, r0
 80009a8:	d219      	bcs.n	80009de <__aeabi_fdiv+0x212>
 80009aa:	221b      	movs	r2, #27
 80009ac:	2500      	movs	r5, #0
 80009ae:	3f01      	subs	r7, #1
 80009b0:	2601      	movs	r6, #1
 80009b2:	001c      	movs	r4, r3
 80009b4:	006d      	lsls	r5, r5, #1
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2c00      	cmp	r4, #0
 80009ba:	db01      	blt.n	80009c0 <__aeabi_fdiv+0x1f4>
 80009bc:	4298      	cmp	r0, r3
 80009be:	d801      	bhi.n	80009c4 <__aeabi_fdiv+0x1f8>
 80009c0:	1a1b      	subs	r3, r3, r0
 80009c2:	4335      	orrs	r5, r6
 80009c4:	3a01      	subs	r2, #1
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d1f3      	bne.n	80009b2 <__aeabi_fdiv+0x1e6>
 80009ca:	1e5a      	subs	r2, r3, #1
 80009cc:	4193      	sbcs	r3, r2
 80009ce:	431d      	orrs	r5, r3
 80009d0:	003b      	movs	r3, r7
 80009d2:	337f      	adds	r3, #127	; 0x7f
 80009d4:	000e      	movs	r6, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fdiv+0x210>
 80009da:	e741      	b.n	8000860 <__aeabi_fdiv+0x94>
 80009dc:	e7aa      	b.n	8000934 <__aeabi_fdiv+0x168>
 80009de:	221a      	movs	r2, #26
 80009e0:	2501      	movs	r5, #1
 80009e2:	1a1b      	subs	r3, r3, r0
 80009e4:	e7e4      	b.n	80009b0 <__aeabi_fdiv+0x1e4>
 80009e6:	01ad      	lsls	r5, r5, #6
 80009e8:	2000      	movs	r0, #0
 80009ea:	0a6d      	lsrs	r5, r5, #9
 80009ec:	e74f      	b.n	800088e <__aeabi_fdiv+0xc2>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	0800b300 	.word	0x0800b300
 80009f4:	f7ffffff 	.word	0xf7ffffff
 80009f8:	0800b340 	.word	0x0800b340

080009fc <__eqsf2>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	0042      	lsls	r2, r0, #1
 8000a00:	0245      	lsls	r5, r0, #9
 8000a02:	024e      	lsls	r6, r1, #9
 8000a04:	004c      	lsls	r4, r1, #1
 8000a06:	0fc3      	lsrs	r3, r0, #31
 8000a08:	0a6d      	lsrs	r5, r5, #9
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	0e12      	lsrs	r2, r2, #24
 8000a0e:	0a76      	lsrs	r6, r6, #9
 8000a10:	0e24      	lsrs	r4, r4, #24
 8000a12:	0fc9      	lsrs	r1, r1, #31
 8000a14:	2aff      	cmp	r2, #255	; 0xff
 8000a16:	d006      	beq.n	8000a26 <__eqsf2+0x2a>
 8000a18:	2cff      	cmp	r4, #255	; 0xff
 8000a1a:	d003      	beq.n	8000a24 <__eqsf2+0x28>
 8000a1c:	42a2      	cmp	r2, r4
 8000a1e:	d101      	bne.n	8000a24 <__eqsf2+0x28>
 8000a20:	42b5      	cmp	r5, r6
 8000a22:	d006      	beq.n	8000a32 <__eqsf2+0x36>
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d1fc      	bne.n	8000a24 <__eqsf2+0x28>
 8000a2a:	2cff      	cmp	r4, #255	; 0xff
 8000a2c:	d1fa      	bne.n	8000a24 <__eqsf2+0x28>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1f8      	bne.n	8000a24 <__eqsf2+0x28>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d006      	beq.n	8000a44 <__eqsf2+0x48>
 8000a36:	2001      	movs	r0, #1
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__eqsf2+0x28>
 8000a3c:	0028      	movs	r0, r5
 8000a3e:	1e43      	subs	r3, r0, #1
 8000a40:	4198      	sbcs	r0, r3
 8000a42:	e7ef      	b.n	8000a24 <__eqsf2+0x28>
 8000a44:	2000      	movs	r0, #0
 8000a46:	e7ed      	b.n	8000a24 <__eqsf2+0x28>

08000a48 <__gesf2>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	0042      	lsls	r2, r0, #1
 8000a4c:	0245      	lsls	r5, r0, #9
 8000a4e:	024e      	lsls	r6, r1, #9
 8000a50:	004c      	lsls	r4, r1, #1
 8000a52:	0fc3      	lsrs	r3, r0, #31
 8000a54:	0a6d      	lsrs	r5, r5, #9
 8000a56:	0e12      	lsrs	r2, r2, #24
 8000a58:	0a76      	lsrs	r6, r6, #9
 8000a5a:	0e24      	lsrs	r4, r4, #24
 8000a5c:	0fc8      	lsrs	r0, r1, #31
 8000a5e:	2aff      	cmp	r2, #255	; 0xff
 8000a60:	d01b      	beq.n	8000a9a <__gesf2+0x52>
 8000a62:	2cff      	cmp	r4, #255	; 0xff
 8000a64:	d00e      	beq.n	8000a84 <__gesf2+0x3c>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d11b      	bne.n	8000aa2 <__gesf2+0x5a>
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d101      	bne.n	8000a72 <__gesf2+0x2a>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d01c      	beq.n	8000aac <__gesf2+0x64>
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d00c      	beq.n	8000a90 <__gesf2+0x48>
 8000a76:	4283      	cmp	r3, r0
 8000a78:	d01c      	beq.n	8000ab4 <__gesf2+0x6c>
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	1e58      	subs	r0, r3, #1
 8000a7e:	4008      	ands	r0, r1
 8000a80:	3801      	subs	r0, #1
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d122      	bne.n	8000ace <__gesf2+0x86>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d1f4      	bne.n	8000a76 <__gesf2+0x2e>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d1f2      	bne.n	8000a76 <__gesf2+0x2e>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1f6      	bne.n	8000a82 <__gesf2+0x3a>
 8000a94:	2001      	movs	r0, #1
 8000a96:	4240      	negs	r0, r0
 8000a98:	e7f3      	b.n	8000a82 <__gesf2+0x3a>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d117      	bne.n	8000ace <__gesf2+0x86>
 8000a9e:	2cff      	cmp	r4, #255	; 0xff
 8000aa0:	d0f0      	beq.n	8000a84 <__gesf2+0x3c>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d1e7      	bne.n	8000a76 <__gesf2+0x2e>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d1e5      	bne.n	8000a76 <__gesf2+0x2e>
 8000aaa:	e7e6      	b.n	8000a7a <__gesf2+0x32>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0e7      	beq.n	8000a82 <__gesf2+0x3a>
 8000ab2:	e7e2      	b.n	8000a7a <__gesf2+0x32>
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	dc05      	bgt.n	8000ac4 <__gesf2+0x7c>
 8000ab8:	dbea      	blt.n	8000a90 <__gesf2+0x48>
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d802      	bhi.n	8000ac4 <__gesf2+0x7c>
 8000abe:	d3e7      	bcc.n	8000a90 <__gesf2+0x48>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e7de      	b.n	8000a82 <__gesf2+0x3a>
 8000ac4:	4243      	negs	r3, r0
 8000ac6:	4158      	adcs	r0, r3
 8000ac8:	0040      	lsls	r0, r0, #1
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7d9      	b.n	8000a82 <__gesf2+0x3a>
 8000ace:	2002      	movs	r0, #2
 8000ad0:	4240      	negs	r0, r0
 8000ad2:	e7d6      	b.n	8000a82 <__gesf2+0x3a>

08000ad4 <__lesf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e24      	lsrs	r4, r4, #24
 8000ae8:	0fc8      	lsrs	r0, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d00b      	beq.n	8000b06 <__lesf2+0x32>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d00d      	beq.n	8000b0e <__lesf2+0x3a>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11f      	bne.n	8000b36 <__lesf2+0x62>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d116      	bne.n	8000b28 <__lesf2+0x54>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d114      	bne.n	8000b28 <__lesf2+0x54>
 8000afe:	2000      	movs	r0, #0
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d010      	beq.n	8000b26 <__lesf2+0x52>
 8000b04:	e009      	b.n	8000b1a <__lesf2+0x46>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d10c      	bne.n	8000b24 <__lesf2+0x50>
 8000b0a:	2cff      	cmp	r4, #255	; 0xff
 8000b0c:	d113      	bne.n	8000b36 <__lesf2+0x62>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d108      	bne.n	8000b24 <__lesf2+0x50>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d008      	beq.n	8000b28 <__lesf2+0x54>
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d012      	beq.n	8000b40 <__lesf2+0x6c>
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	1e58      	subs	r0, r3, #1
 8000b1e:	4008      	ands	r0, r1
 8000b20:	3801      	subs	r0, #1
 8000b22:	e000      	b.n	8000b26 <__lesf2+0x52>
 8000b24:	2002      	movs	r0, #2
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d1f4      	bne.n	8000b16 <__lesf2+0x42>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1fa      	bne.n	8000b26 <__lesf2+0x52>
 8000b30:	2001      	movs	r0, #1
 8000b32:	4240      	negs	r0, r0
 8000b34:	e7f7      	b.n	8000b26 <__lesf2+0x52>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d1ed      	bne.n	8000b16 <__lesf2+0x42>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d1eb      	bne.n	8000b16 <__lesf2+0x42>
 8000b3e:	e7ec      	b.n	8000b1a <__lesf2+0x46>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__lesf2+0x7c>
 8000b44:	dbf2      	blt.n	8000b2c <__lesf2+0x58>
 8000b46:	42b5      	cmp	r5, r6
 8000b48:	d802      	bhi.n	8000b50 <__lesf2+0x7c>
 8000b4a:	d3ef      	bcc.n	8000b2c <__lesf2+0x58>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7ea      	b.n	8000b26 <__lesf2+0x52>
 8000b50:	4243      	negs	r3, r0
 8000b52:	4158      	adcs	r0, r3
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7e5      	b.n	8000b26 <__lesf2+0x52>
 8000b5a:	46c0      	nop			; (mov r8, r8)

08000b5c <__aeabi_fmul>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	0244      	lsls	r4, r0, #9
 8000b66:	0045      	lsls	r5, r0, #1
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a64      	lsrs	r4, r4, #9
 8000b6c:	1c0f      	adds	r7, r1, #0
 8000b6e:	0e2d      	lsrs	r5, r5, #24
 8000b70:	0fc6      	lsrs	r6, r0, #31
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fmul+0x1c>
 8000b76:	e08d      	b.n	8000c94 <__aeabi_fmul+0x138>
 8000b78:	2dff      	cmp	r5, #255	; 0xff
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fmul+0x22>
 8000b7c:	e092      	b.n	8000ca4 <__aeabi_fmul+0x148>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2080      	movs	r0, #128	; 0x80
 8000b82:	4699      	mov	r9, r3
 8000b84:	469a      	mov	sl, r3
 8000b86:	00e4      	lsls	r4, r4, #3
 8000b88:	04c0      	lsls	r0, r0, #19
 8000b8a:	4304      	orrs	r4, r0
 8000b8c:	3d7f      	subs	r5, #127	; 0x7f
 8000b8e:	0278      	lsls	r0, r7, #9
 8000b90:	0a43      	lsrs	r3, r0, #9
 8000b92:	4698      	mov	r8, r3
 8000b94:	007b      	lsls	r3, r7, #1
 8000b96:	0e1b      	lsrs	r3, r3, #24
 8000b98:	0fff      	lsrs	r7, r7, #31
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fmul+0x44>
 8000b9e:	e070      	b.n	8000c82 <__aeabi_fmul+0x126>
 8000ba0:	2bff      	cmp	r3, #255	; 0xff
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fmul+0x4a>
 8000ba4:	e086      	b.n	8000cb4 <__aeabi_fmul+0x158>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	00d0      	lsls	r0, r2, #3
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	3b7f      	subs	r3, #127	; 0x7f
 8000bae:	18ed      	adds	r5, r5, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	04d2      	lsls	r2, r2, #19
 8000bb4:	4302      	orrs	r2, r0
 8000bb6:	4690      	mov	r8, r2
 8000bb8:	469c      	mov	ip, r3
 8000bba:	0031      	movs	r1, r6
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	4079      	eors	r1, r7
 8000bc0:	1c68      	adds	r0, r5, #1
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d81c      	bhi.n	8000c00 <__aeabi_fmul+0xa4>
 8000bc6:	4a76      	ldr	r2, [pc, #472]	; (8000da0 <__aeabi_fmul+0x244>)
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	58d3      	ldr	r3, [r2, r3]
 8000bcc:	469f      	mov	pc, r3
 8000bce:	0039      	movs	r1, r7
 8000bd0:	4644      	mov	r4, r8
 8000bd2:	46e2      	mov	sl, ip
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d00f      	beq.n	8000bfa <__aeabi_fmul+0x9e>
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fmul+0x84>
 8000bde:	e0d7      	b.n	8000d90 <__aeabi_fmul+0x234>
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d137      	bne.n	8000c54 <__aeabi_fmul+0xf8>
 8000be4:	2000      	movs	r0, #0
 8000be6:	2400      	movs	r4, #0
 8000be8:	05c0      	lsls	r0, r0, #23
 8000bea:	4320      	orrs	r0, r4
 8000bec:	07c9      	lsls	r1, r1, #31
 8000bee:	4308      	orrs	r0, r1
 8000bf0:	bce0      	pop	{r5, r6, r7}
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46b1      	mov	r9, r6
 8000bf6:	46a8      	mov	r8, r5
 8000bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfa:	20ff      	movs	r0, #255	; 0xff
 8000bfc:	2400      	movs	r4, #0
 8000bfe:	e7f3      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000c00:	0c26      	lsrs	r6, r4, #16
 8000c02:	0424      	lsls	r4, r4, #16
 8000c04:	0c22      	lsrs	r2, r4, #16
 8000c06:	4644      	mov	r4, r8
 8000c08:	0424      	lsls	r4, r4, #16
 8000c0a:	0c24      	lsrs	r4, r4, #16
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	0027      	movs	r7, r4
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	4357      	muls	r7, r2
 8000c14:	4374      	muls	r4, r6
 8000c16:	435a      	muls	r2, r3
 8000c18:	435e      	muls	r6, r3
 8000c1a:	1912      	adds	r2, r2, r4
 8000c1c:	0c3b      	lsrs	r3, r7, #16
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	429c      	cmp	r4, r3
 8000c22:	d903      	bls.n	8000c2c <__aeabi_fmul+0xd0>
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0252      	lsls	r2, r2, #9
 8000c28:	4694      	mov	ip, r2
 8000c2a:	4466      	add	r6, ip
 8000c2c:	043f      	lsls	r7, r7, #16
 8000c2e:	041a      	lsls	r2, r3, #16
 8000c30:	0c3f      	lsrs	r7, r7, #16
 8000c32:	19d2      	adds	r2, r2, r7
 8000c34:	0194      	lsls	r4, r2, #6
 8000c36:	1e67      	subs	r7, r4, #1
 8000c38:	41bc      	sbcs	r4, r7
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	0e92      	lsrs	r2, r2, #26
 8000c3e:	199b      	adds	r3, r3, r6
 8000c40:	4314      	orrs	r4, r2
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	431c      	orrs	r4, r3
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	d400      	bmi.n	8000c4c <__aeabi_fmul+0xf0>
 8000c4a:	e09b      	b.n	8000d84 <__aeabi_fmul+0x228>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	0862      	lsrs	r2, r4, #1
 8000c50:	401c      	ands	r4, r3
 8000c52:	4314      	orrs	r4, r2
 8000c54:	0002      	movs	r2, r0
 8000c56:	327f      	adds	r2, #127	; 0x7f
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	dd64      	ble.n	8000d26 <__aeabi_fmul+0x1ca>
 8000c5c:	0763      	lsls	r3, r4, #29
 8000c5e:	d004      	beq.n	8000c6a <__aeabi_fmul+0x10e>
 8000c60:	230f      	movs	r3, #15
 8000c62:	4023      	ands	r3, r4
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0x10e>
 8000c68:	3404      	adds	r4, #4
 8000c6a:	0123      	lsls	r3, r4, #4
 8000c6c:	d503      	bpl.n	8000c76 <__aeabi_fmul+0x11a>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <__aeabi_fmul+0x248>)
 8000c72:	3280      	adds	r2, #128	; 0x80
 8000c74:	401c      	ands	r4, r3
 8000c76:	2afe      	cmp	r2, #254	; 0xfe
 8000c78:	dcbf      	bgt.n	8000bfa <__aeabi_fmul+0x9e>
 8000c7a:	01a4      	lsls	r4, r4, #6
 8000c7c:	0a64      	lsrs	r4, r4, #9
 8000c7e:	b2d0      	uxtb	r0, r2
 8000c80:	e7b2      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000c82:	4643      	mov	r3, r8
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d13d      	bne.n	8000d04 <__aeabi_fmul+0x1a8>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	4691      	mov	r9, r2
 8000c90:	469c      	mov	ip, r3
 8000c92:	e792      	b.n	8000bba <__aeabi_fmul+0x5e>
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d129      	bne.n	8000cec <__aeabi_fmul+0x190>
 8000c98:	2304      	movs	r3, #4
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	e774      	b.n	8000b8e <__aeabi_fmul+0x32>
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d11b      	bne.n	8000ce0 <__aeabi_fmul+0x184>
 8000ca8:	2308      	movs	r3, #8
 8000caa:	4699      	mov	r9, r3
 8000cac:	3b06      	subs	r3, #6
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	e76c      	b.n	8000b8e <__aeabi_fmul+0x32>
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	35ff      	adds	r5, #255	; 0xff
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10b      	bne.n	8000cd4 <__aeabi_fmul+0x178>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	469c      	mov	ip, r3
 8000cc6:	e778      	b.n	8000bba <__aeabi_fmul+0x5e>
 8000cc8:	4653      	mov	r3, sl
 8000cca:	0031      	movs	r1, r6
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fmul+0x176>
 8000cd0:	e783      	b.n	8000bda <__aeabi_fmul+0x7e>
 8000cd2:	e792      	b.n	8000bfa <__aeabi_fmul+0x9e>
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	4691      	mov	r9, r2
 8000cdc:	469c      	mov	ip, r3
 8000cde:	e76c      	b.n	8000bba <__aeabi_fmul+0x5e>
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	3b09      	subs	r3, #9
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469a      	mov	sl, r3
 8000cea:	e750      	b.n	8000b8e <__aeabi_fmul+0x32>
 8000cec:	0020      	movs	r0, r4
 8000cee:	f000 facf 	bl	8001290 <__clzsi2>
 8000cf2:	2576      	movs	r5, #118	; 0x76
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	409c      	lsls	r4, r3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	426d      	negs	r5, r5
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	469a      	mov	sl, r3
 8000d00:	1a2d      	subs	r5, r5, r0
 8000d02:	e744      	b.n	8000b8e <__aeabi_fmul+0x32>
 8000d04:	4640      	mov	r0, r8
 8000d06:	f000 fac3 	bl	8001290 <__clzsi2>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	1f43      	subs	r3, r0, #5
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	1a2d      	subs	r5, r5, r0
 8000d14:	4690      	mov	r8, r2
 8000d16:	469c      	mov	ip, r3
 8000d18:	3d76      	subs	r5, #118	; 0x76
 8000d1a:	e74e      	b.n	8000bba <__aeabi_fmul+0x5e>
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	2100      	movs	r1, #0
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	03e4      	lsls	r4, r4, #15
 8000d24:	e760      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d26:	2301      	movs	r3, #1
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	2b1b      	cmp	r3, #27
 8000d2c:	dd00      	ble.n	8000d30 <__aeabi_fmul+0x1d4>
 8000d2e:	e759      	b.n	8000be4 <__aeabi_fmul+0x88>
 8000d30:	0022      	movs	r2, r4
 8000d32:	309e      	adds	r0, #158	; 0x9e
 8000d34:	40da      	lsrs	r2, r3
 8000d36:	4084      	lsls	r4, r0
 8000d38:	0013      	movs	r3, r2
 8000d3a:	1e62      	subs	r2, r4, #1
 8000d3c:	4194      	sbcs	r4, r2
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	0763      	lsls	r3, r4, #29
 8000d42:	d004      	beq.n	8000d4e <__aeabi_fmul+0x1f2>
 8000d44:	230f      	movs	r3, #15
 8000d46:	4023      	ands	r3, r4
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fmul+0x1f2>
 8000d4c:	3404      	adds	r4, #4
 8000d4e:	0163      	lsls	r3, r4, #5
 8000d50:	d51a      	bpl.n	8000d88 <__aeabi_fmul+0x22c>
 8000d52:	2001      	movs	r0, #1
 8000d54:	2400      	movs	r4, #0
 8000d56:	e747      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d58:	2080      	movs	r0, #128	; 0x80
 8000d5a:	03c0      	lsls	r0, r0, #15
 8000d5c:	4204      	tst	r4, r0
 8000d5e:	d009      	beq.n	8000d74 <__aeabi_fmul+0x218>
 8000d60:	4643      	mov	r3, r8
 8000d62:	4203      	tst	r3, r0
 8000d64:	d106      	bne.n	8000d74 <__aeabi_fmul+0x218>
 8000d66:	4644      	mov	r4, r8
 8000d68:	4304      	orrs	r4, r0
 8000d6a:	0264      	lsls	r4, r4, #9
 8000d6c:	0039      	movs	r1, r7
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	0a64      	lsrs	r4, r4, #9
 8000d72:	e739      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	03c0      	lsls	r0, r0, #15
 8000d78:	4304      	orrs	r4, r0
 8000d7a:	0264      	lsls	r4, r4, #9
 8000d7c:	0031      	movs	r1, r6
 8000d7e:	20ff      	movs	r0, #255	; 0xff
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	e731      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d84:	0028      	movs	r0, r5
 8000d86:	e765      	b.n	8000c54 <__aeabi_fmul+0xf8>
 8000d88:	01a4      	lsls	r4, r4, #6
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	e72b      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d90:	2080      	movs	r0, #128	; 0x80
 8000d92:	03c0      	lsls	r0, r0, #15
 8000d94:	4304      	orrs	r4, r0
 8000d96:	0264      	lsls	r4, r4, #9
 8000d98:	20ff      	movs	r0, #255	; 0xff
 8000d9a:	0a64      	lsrs	r4, r4, #9
 8000d9c:	e724      	b.n	8000be8 <__aeabi_fmul+0x8c>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	0800b380 	.word	0x0800b380
 8000da4:	f7ffffff 	.word	0xf7ffffff

08000da8 <__aeabi_fsub>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	46ce      	mov	lr, r9
 8000dac:	4647      	mov	r7, r8
 8000dae:	0243      	lsls	r3, r0, #9
 8000db0:	0a5b      	lsrs	r3, r3, #9
 8000db2:	024e      	lsls	r6, r1, #9
 8000db4:	00da      	lsls	r2, r3, #3
 8000db6:	4694      	mov	ip, r2
 8000db8:	0a72      	lsrs	r2, r6, #9
 8000dba:	4691      	mov	r9, r2
 8000dbc:	0045      	lsls	r5, r0, #1
 8000dbe:	004a      	lsls	r2, r1, #1
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	0e2d      	lsrs	r5, r5, #24
 8000dc4:	001f      	movs	r7, r3
 8000dc6:	0fc4      	lsrs	r4, r0, #31
 8000dc8:	0e12      	lsrs	r2, r2, #24
 8000dca:	0fc9      	lsrs	r1, r1, #31
 8000dcc:	09b6      	lsrs	r6, r6, #6
 8000dce:	2aff      	cmp	r2, #255	; 0xff
 8000dd0:	d05b      	beq.n	8000e8a <__aeabi_fsub+0xe2>
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4041      	eors	r1, r0
 8000dd6:	428c      	cmp	r4, r1
 8000dd8:	d039      	beq.n	8000e4e <__aeabi_fsub+0xa6>
 8000dda:	1aa8      	subs	r0, r5, r2
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	dd5a      	ble.n	8000e96 <__aeabi_fsub+0xee>
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	d06a      	beq.n	8000eba <__aeabi_fsub+0x112>
 8000de4:	2dff      	cmp	r5, #255	; 0xff
 8000de6:	d100      	bne.n	8000dea <__aeabi_fsub+0x42>
 8000de8:	e0d9      	b.n	8000f9e <__aeabi_fsub+0x1f6>
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	04d2      	lsls	r2, r2, #19
 8000dee:	4316      	orrs	r6, r2
 8000df0:	281b      	cmp	r0, #27
 8000df2:	dc00      	bgt.n	8000df6 <__aeabi_fsub+0x4e>
 8000df4:	e0e9      	b.n	8000fca <__aeabi_fsub+0x222>
 8000df6:	2001      	movs	r0, #1
 8000df8:	4663      	mov	r3, ip
 8000dfa:	1a18      	subs	r0, r3, r0
 8000dfc:	0143      	lsls	r3, r0, #5
 8000dfe:	d400      	bmi.n	8000e02 <__aeabi_fsub+0x5a>
 8000e00:	e0b4      	b.n	8000f6c <__aeabi_fsub+0x1c4>
 8000e02:	0180      	lsls	r0, r0, #6
 8000e04:	0987      	lsrs	r7, r0, #6
 8000e06:	0038      	movs	r0, r7
 8000e08:	f000 fa42 	bl	8001290 <__clzsi2>
 8000e0c:	3805      	subs	r0, #5
 8000e0e:	4087      	lsls	r7, r0
 8000e10:	4285      	cmp	r5, r0
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_fsub+0x6e>
 8000e14:	e0cc      	b.n	8000fb0 <__aeabi_fsub+0x208>
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	48b5      	ldr	r0, [pc, #724]	; (80010f0 <__aeabi_fsub+0x348>)
 8000e1a:	4038      	ands	r0, r7
 8000e1c:	0743      	lsls	r3, r0, #29
 8000e1e:	d004      	beq.n	8000e2a <__aeabi_fsub+0x82>
 8000e20:	230f      	movs	r3, #15
 8000e22:	4003      	ands	r3, r0
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d000      	beq.n	8000e2a <__aeabi_fsub+0x82>
 8000e28:	3004      	adds	r0, #4
 8000e2a:	0143      	lsls	r3, r0, #5
 8000e2c:	d400      	bmi.n	8000e30 <__aeabi_fsub+0x88>
 8000e2e:	e0a0      	b.n	8000f72 <__aeabi_fsub+0x1ca>
 8000e30:	1c6a      	adds	r2, r5, #1
 8000e32:	2dfe      	cmp	r5, #254	; 0xfe
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x90>
 8000e36:	e08d      	b.n	8000f54 <__aeabi_fsub+0x1ac>
 8000e38:	0180      	lsls	r0, r0, #6
 8000e3a:	0a47      	lsrs	r7, r0, #9
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	05d0      	lsls	r0, r2, #23
 8000e40:	4338      	orrs	r0, r7
 8000e42:	07e4      	lsls	r4, r4, #31
 8000e44:	4320      	orrs	r0, r4
 8000e46:	bcc0      	pop	{r6, r7}
 8000e48:	46b9      	mov	r9, r7
 8000e4a:	46b0      	mov	r8, r6
 8000e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e4e:	1aa8      	subs	r0, r5, r2
 8000e50:	4680      	mov	r8, r0
 8000e52:	2800      	cmp	r0, #0
 8000e54:	dd45      	ble.n	8000ee2 <__aeabi_fsub+0x13a>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d070      	beq.n	8000f3c <__aeabi_fsub+0x194>
 8000e5a:	2dff      	cmp	r5, #255	; 0xff
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0xb8>
 8000e5e:	e09e      	b.n	8000f9e <__aeabi_fsub+0x1f6>
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	04db      	lsls	r3, r3, #19
 8000e64:	431e      	orrs	r6, r3
 8000e66:	4643      	mov	r3, r8
 8000e68:	2b1b      	cmp	r3, #27
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_fsub+0xc6>
 8000e6c:	e0d2      	b.n	8001014 <__aeabi_fsub+0x26c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4460      	add	r0, ip
 8000e72:	0143      	lsls	r3, r0, #5
 8000e74:	d57a      	bpl.n	8000f6c <__aeabi_fsub+0x1c4>
 8000e76:	3501      	adds	r5, #1
 8000e78:	2dff      	cmp	r5, #255	; 0xff
 8000e7a:	d06b      	beq.n	8000f54 <__aeabi_fsub+0x1ac>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4a9d      	ldr	r2, [pc, #628]	; (80010f4 <__aeabi_fsub+0x34c>)
 8000e80:	4003      	ands	r3, r0
 8000e82:	0840      	lsrs	r0, r0, #1
 8000e84:	4010      	ands	r0, r2
 8000e86:	4318      	orrs	r0, r3
 8000e88:	e7c8      	b.n	8000e1c <__aeabi_fsub+0x74>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d020      	beq.n	8000ed0 <__aeabi_fsub+0x128>
 8000e8e:	428c      	cmp	r4, r1
 8000e90:	d023      	beq.n	8000eda <__aeabi_fsub+0x132>
 8000e92:	0028      	movs	r0, r5
 8000e94:	38ff      	subs	r0, #255	; 0xff
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d039      	beq.n	8000f0e <__aeabi_fsub+0x166>
 8000e9a:	1b57      	subs	r7, r2, r5
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_fsub+0xfa>
 8000ea0:	e09d      	b.n	8000fde <__aeabi_fsub+0x236>
 8000ea2:	4663      	mov	r3, ip
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fsub+0x102>
 8000ea8:	e0db      	b.n	8001062 <__aeabi_fsub+0x2ba>
 8000eaa:	1e7b      	subs	r3, r7, #1
 8000eac:	2f01      	cmp	r7, #1
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_fsub+0x10a>
 8000eb0:	e10d      	b.n	80010ce <__aeabi_fsub+0x326>
 8000eb2:	2fff      	cmp	r7, #255	; 0xff
 8000eb4:	d071      	beq.n	8000f9a <__aeabi_fsub+0x1f2>
 8000eb6:	001f      	movs	r7, r3
 8000eb8:	e098      	b.n	8000fec <__aeabi_fsub+0x244>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0x118>
 8000ebe:	e0a7      	b.n	8001010 <__aeabi_fsub+0x268>
 8000ec0:	1e42      	subs	r2, r0, #1
 8000ec2:	2801      	cmp	r0, #1
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x120>
 8000ec6:	e0e6      	b.n	8001096 <__aeabi_fsub+0x2ee>
 8000ec8:	28ff      	cmp	r0, #255	; 0xff
 8000eca:	d068      	beq.n	8000f9e <__aeabi_fsub+0x1f6>
 8000ecc:	0010      	movs	r0, r2
 8000ece:	e78f      	b.n	8000df0 <__aeabi_fsub+0x48>
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	4041      	eors	r1, r0
 8000ed4:	42a1      	cmp	r1, r4
 8000ed6:	d000      	beq.n	8000eda <__aeabi_fsub+0x132>
 8000ed8:	e77f      	b.n	8000dda <__aeabi_fsub+0x32>
 8000eda:	20ff      	movs	r0, #255	; 0xff
 8000edc:	4240      	negs	r0, r0
 8000ede:	4680      	mov	r8, r0
 8000ee0:	44a8      	add	r8, r5
 8000ee2:	4640      	mov	r0, r8
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d038      	beq.n	8000f5a <__aeabi_fsub+0x1b2>
 8000ee8:	1b51      	subs	r1, r2, r5
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x148>
 8000eee:	e0ae      	b.n	800104e <__aeabi_fsub+0x2a6>
 8000ef0:	2aff      	cmp	r2, #255	; 0xff
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fsub+0x14e>
 8000ef4:	e0df      	b.n	80010b6 <__aeabi_fsub+0x30e>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	4660      	mov	r0, ip
 8000efa:	04db      	lsls	r3, r3, #19
 8000efc:	4318      	orrs	r0, r3
 8000efe:	4684      	mov	ip, r0
 8000f00:	291b      	cmp	r1, #27
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_fsub+0x15e>
 8000f04:	e0d9      	b.n	80010ba <__aeabi_fsub+0x312>
 8000f06:	2001      	movs	r0, #1
 8000f08:	0015      	movs	r5, r2
 8000f0a:	1980      	adds	r0, r0, r6
 8000f0c:	e7b1      	b.n	8000e72 <__aeabi_fsub+0xca>
 8000f0e:	20fe      	movs	r0, #254	; 0xfe
 8000f10:	1c6a      	adds	r2, r5, #1
 8000f12:	4210      	tst	r0, r2
 8000f14:	d171      	bne.n	8000ffa <__aeabi_fsub+0x252>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fsub+0x174>
 8000f1a:	e0a6      	b.n	800106a <__aeabi_fsub+0x2c2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0x17c>
 8000f22:	e0d9      	b.n	80010d8 <__aeabi_fsub+0x330>
 8000f24:	2200      	movs	r2, #0
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x184>
 8000f2a:	e788      	b.n	8000e3e <__aeabi_fsub+0x96>
 8000f2c:	1b98      	subs	r0, r3, r6
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x18c>
 8000f32:	e0e1      	b.n	80010f8 <__aeabi_fsub+0x350>
 8000f34:	4663      	mov	r3, ip
 8000f36:	000c      	movs	r4, r1
 8000f38:	1af0      	subs	r0, r6, r3
 8000f3a:	e76f      	b.n	8000e1c <__aeabi_fsub+0x74>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x19a>
 8000f40:	e0b7      	b.n	80010b2 <__aeabi_fsub+0x30a>
 8000f42:	0002      	movs	r2, r0
 8000f44:	3a01      	subs	r2, #1
 8000f46:	2801      	cmp	r0, #1
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x1a4>
 8000f4a:	e09c      	b.n	8001086 <__aeabi_fsub+0x2de>
 8000f4c:	28ff      	cmp	r0, #255	; 0xff
 8000f4e:	d026      	beq.n	8000f9e <__aeabi_fsub+0x1f6>
 8000f50:	4690      	mov	r8, r2
 8000f52:	e788      	b.n	8000e66 <__aeabi_fsub+0xbe>
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	2700      	movs	r7, #0
 8000f58:	e771      	b.n	8000e3e <__aeabi_fsub+0x96>
 8000f5a:	20fe      	movs	r0, #254	; 0xfe
 8000f5c:	1c6a      	adds	r2, r5, #1
 8000f5e:	4210      	tst	r0, r2
 8000f60:	d064      	beq.n	800102c <__aeabi_fsub+0x284>
 8000f62:	2aff      	cmp	r2, #255	; 0xff
 8000f64:	d0f6      	beq.n	8000f54 <__aeabi_fsub+0x1ac>
 8000f66:	0015      	movs	r5, r2
 8000f68:	4466      	add	r6, ip
 8000f6a:	0870      	lsrs	r0, r6, #1
 8000f6c:	0743      	lsls	r3, r0, #29
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_fsub+0x1ca>
 8000f70:	e756      	b.n	8000e20 <__aeabi_fsub+0x78>
 8000f72:	08c3      	lsrs	r3, r0, #3
 8000f74:	2dff      	cmp	r5, #255	; 0xff
 8000f76:	d012      	beq.n	8000f9e <__aeabi_fsub+0x1f6>
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	0a5f      	lsrs	r7, r3, #9
 8000f7c:	b2ea      	uxtb	r2, r5
 8000f7e:	e75e      	b.n	8000e3e <__aeabi_fsub+0x96>
 8000f80:	4662      	mov	r2, ip
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x1e0>
 8000f86:	e096      	b.n	80010b6 <__aeabi_fsub+0x30e>
 8000f88:	2e00      	cmp	r6, #0
 8000f8a:	d008      	beq.n	8000f9e <__aeabi_fsub+0x1f6>
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	03d2      	lsls	r2, r2, #15
 8000f90:	4213      	tst	r3, r2
 8000f92:	d004      	beq.n	8000f9e <__aeabi_fsub+0x1f6>
 8000f94:	4648      	mov	r0, r9
 8000f96:	4210      	tst	r0, r2
 8000f98:	d101      	bne.n	8000f9e <__aeabi_fsub+0x1f6>
 8000f9a:	000c      	movs	r4, r1
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0d8      	beq.n	8000f54 <__aeabi_fsub+0x1ac>
 8000fa2:	2780      	movs	r7, #128	; 0x80
 8000fa4:	03ff      	lsls	r7, r7, #15
 8000fa6:	431f      	orrs	r7, r3
 8000fa8:	027f      	lsls	r7, r7, #9
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	0a7f      	lsrs	r7, r7, #9
 8000fae:	e746      	b.n	8000e3e <__aeabi_fsub+0x96>
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	1b45      	subs	r5, r0, r5
 8000fb6:	0038      	movs	r0, r7
 8000fb8:	3501      	adds	r5, #1
 8000fba:	40ea      	lsrs	r2, r5
 8000fbc:	1b5d      	subs	r5, r3, r5
 8000fbe:	40a8      	lsls	r0, r5
 8000fc0:	1e43      	subs	r3, r0, #1
 8000fc2:	4198      	sbcs	r0, r3
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	4310      	orrs	r0, r2
 8000fc8:	e728      	b.n	8000e1c <__aeabi_fsub+0x74>
 8000fca:	2320      	movs	r3, #32
 8000fcc:	1a1b      	subs	r3, r3, r0
 8000fce:	0032      	movs	r2, r6
 8000fd0:	409e      	lsls	r6, r3
 8000fd2:	40c2      	lsrs	r2, r0
 8000fd4:	0030      	movs	r0, r6
 8000fd6:	1e43      	subs	r3, r0, #1
 8000fd8:	4198      	sbcs	r0, r3
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	e70c      	b.n	8000df8 <__aeabi_fsub+0x50>
 8000fde:	2aff      	cmp	r2, #255	; 0xff
 8000fe0:	d0db      	beq.n	8000f9a <__aeabi_fsub+0x1f2>
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	4660      	mov	r0, ip
 8000fe6:	04db      	lsls	r3, r3, #19
 8000fe8:	4318      	orrs	r0, r3
 8000fea:	4684      	mov	ip, r0
 8000fec:	2f1b      	cmp	r7, #27
 8000fee:	dd56      	ble.n	800109e <__aeabi_fsub+0x2f6>
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	0015      	movs	r5, r2
 8000ff6:	1a30      	subs	r0, r6, r0
 8000ff8:	e700      	b.n	8000dfc <__aeabi_fsub+0x54>
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	1b9f      	subs	r7, r3, r6
 8000ffe:	017b      	lsls	r3, r7, #5
 8001000:	d43d      	bmi.n	800107e <__aeabi_fsub+0x2d6>
 8001002:	2f00      	cmp	r7, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_fsub+0x260>
 8001006:	e6fe      	b.n	8000e06 <__aeabi_fsub+0x5e>
 8001008:	2400      	movs	r4, #0
 800100a:	2200      	movs	r2, #0
 800100c:	2700      	movs	r7, #0
 800100e:	e716      	b.n	8000e3e <__aeabi_fsub+0x96>
 8001010:	0005      	movs	r5, r0
 8001012:	e7af      	b.n	8000f74 <__aeabi_fsub+0x1cc>
 8001014:	0032      	movs	r2, r6
 8001016:	4643      	mov	r3, r8
 8001018:	4641      	mov	r1, r8
 800101a:	40da      	lsrs	r2, r3
 800101c:	2320      	movs	r3, #32
 800101e:	1a5b      	subs	r3, r3, r1
 8001020:	409e      	lsls	r6, r3
 8001022:	0030      	movs	r0, r6
 8001024:	1e43      	subs	r3, r0, #1
 8001026:	4198      	sbcs	r0, r3
 8001028:	4310      	orrs	r0, r2
 800102a:	e721      	b.n	8000e70 <__aeabi_fsub+0xc8>
 800102c:	2d00      	cmp	r5, #0
 800102e:	d1a7      	bne.n	8000f80 <__aeabi_fsub+0x1d8>
 8001030:	4663      	mov	r3, ip
 8001032:	2b00      	cmp	r3, #0
 8001034:	d059      	beq.n	80010ea <__aeabi_fsub+0x342>
 8001036:	2200      	movs	r2, #0
 8001038:	2e00      	cmp	r6, #0
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x296>
 800103c:	e6ff      	b.n	8000e3e <__aeabi_fsub+0x96>
 800103e:	0030      	movs	r0, r6
 8001040:	4460      	add	r0, ip
 8001042:	0143      	lsls	r3, r0, #5
 8001044:	d592      	bpl.n	8000f6c <__aeabi_fsub+0x1c4>
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <__aeabi_fsub+0x348>)
 8001048:	3501      	adds	r5, #1
 800104a:	4018      	ands	r0, r3
 800104c:	e78e      	b.n	8000f6c <__aeabi_fsub+0x1c4>
 800104e:	4663      	mov	r3, ip
 8001050:	2b00      	cmp	r3, #0
 8001052:	d047      	beq.n	80010e4 <__aeabi_fsub+0x33c>
 8001054:	1e4b      	subs	r3, r1, #1
 8001056:	2901      	cmp	r1, #1
 8001058:	d015      	beq.n	8001086 <__aeabi_fsub+0x2de>
 800105a:	29ff      	cmp	r1, #255	; 0xff
 800105c:	d02b      	beq.n	80010b6 <__aeabi_fsub+0x30e>
 800105e:	0019      	movs	r1, r3
 8001060:	e74e      	b.n	8000f00 <__aeabi_fsub+0x158>
 8001062:	000c      	movs	r4, r1
 8001064:	464b      	mov	r3, r9
 8001066:	003d      	movs	r5, r7
 8001068:	e784      	b.n	8000f74 <__aeabi_fsub+0x1cc>
 800106a:	4662      	mov	r2, ip
 800106c:	2a00      	cmp	r2, #0
 800106e:	d18b      	bne.n	8000f88 <__aeabi_fsub+0x1e0>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d192      	bne.n	8000f9a <__aeabi_fsub+0x1f2>
 8001074:	2780      	movs	r7, #128	; 0x80
 8001076:	2400      	movs	r4, #0
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	03ff      	lsls	r7, r7, #15
 800107c:	e6df      	b.n	8000e3e <__aeabi_fsub+0x96>
 800107e:	4663      	mov	r3, ip
 8001080:	000c      	movs	r4, r1
 8001082:	1af7      	subs	r7, r6, r3
 8001084:	e6bf      	b.n	8000e06 <__aeabi_fsub+0x5e>
 8001086:	0030      	movs	r0, r6
 8001088:	4460      	add	r0, ip
 800108a:	2501      	movs	r5, #1
 800108c:	0143      	lsls	r3, r0, #5
 800108e:	d400      	bmi.n	8001092 <__aeabi_fsub+0x2ea>
 8001090:	e76c      	b.n	8000f6c <__aeabi_fsub+0x1c4>
 8001092:	2502      	movs	r5, #2
 8001094:	e6f2      	b.n	8000e7c <__aeabi_fsub+0xd4>
 8001096:	4663      	mov	r3, ip
 8001098:	2501      	movs	r5, #1
 800109a:	1b98      	subs	r0, r3, r6
 800109c:	e6ae      	b.n	8000dfc <__aeabi_fsub+0x54>
 800109e:	2320      	movs	r3, #32
 80010a0:	4664      	mov	r4, ip
 80010a2:	4660      	mov	r0, ip
 80010a4:	40fc      	lsrs	r4, r7
 80010a6:	1bdf      	subs	r7, r3, r7
 80010a8:	40b8      	lsls	r0, r7
 80010aa:	1e43      	subs	r3, r0, #1
 80010ac:	4198      	sbcs	r0, r3
 80010ae:	4320      	orrs	r0, r4
 80010b0:	e79f      	b.n	8000ff2 <__aeabi_fsub+0x24a>
 80010b2:	0005      	movs	r5, r0
 80010b4:	e75e      	b.n	8000f74 <__aeabi_fsub+0x1cc>
 80010b6:	464b      	mov	r3, r9
 80010b8:	e771      	b.n	8000f9e <__aeabi_fsub+0x1f6>
 80010ba:	2320      	movs	r3, #32
 80010bc:	4665      	mov	r5, ip
 80010be:	4660      	mov	r0, ip
 80010c0:	40cd      	lsrs	r5, r1
 80010c2:	1a59      	subs	r1, r3, r1
 80010c4:	4088      	lsls	r0, r1
 80010c6:	1e43      	subs	r3, r0, #1
 80010c8:	4198      	sbcs	r0, r3
 80010ca:	4328      	orrs	r0, r5
 80010cc:	e71c      	b.n	8000f08 <__aeabi_fsub+0x160>
 80010ce:	4663      	mov	r3, ip
 80010d0:	000c      	movs	r4, r1
 80010d2:	2501      	movs	r5, #1
 80010d4:	1af0      	subs	r0, r6, r3
 80010d6:	e691      	b.n	8000dfc <__aeabi_fsub+0x54>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d095      	beq.n	8001008 <__aeabi_fsub+0x260>
 80010dc:	000c      	movs	r4, r1
 80010de:	464f      	mov	r7, r9
 80010e0:	2200      	movs	r2, #0
 80010e2:	e6ac      	b.n	8000e3e <__aeabi_fsub+0x96>
 80010e4:	464b      	mov	r3, r9
 80010e6:	000d      	movs	r5, r1
 80010e8:	e744      	b.n	8000f74 <__aeabi_fsub+0x1cc>
 80010ea:	464f      	mov	r7, r9
 80010ec:	2200      	movs	r2, #0
 80010ee:	e6a6      	b.n	8000e3e <__aeabi_fsub+0x96>
 80010f0:	fbffffff 	.word	0xfbffffff
 80010f4:	7dffffff 	.word	0x7dffffff
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d000      	beq.n	80010fe <__aeabi_fsub+0x356>
 80010fc:	e736      	b.n	8000f6c <__aeabi_fsub+0x1c4>
 80010fe:	2400      	movs	r4, #0
 8001100:	2700      	movs	r7, #0
 8001102:	e69c      	b.n	8000e3e <__aeabi_fsub+0x96>

08001104 <__aeabi_fcmpun>:
 8001104:	0243      	lsls	r3, r0, #9
 8001106:	024a      	lsls	r2, r1, #9
 8001108:	0040      	lsls	r0, r0, #1
 800110a:	0049      	lsls	r1, r1, #1
 800110c:	0a5b      	lsrs	r3, r3, #9
 800110e:	0a52      	lsrs	r2, r2, #9
 8001110:	0e09      	lsrs	r1, r1, #24
 8001112:	0e00      	lsrs	r0, r0, #24
 8001114:	28ff      	cmp	r0, #255	; 0xff
 8001116:	d006      	beq.n	8001126 <__aeabi_fcmpun+0x22>
 8001118:	2000      	movs	r0, #0
 800111a:	29ff      	cmp	r1, #255	; 0xff
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x20>
 800111e:	1e53      	subs	r3, r2, #1
 8001120:	419a      	sbcs	r2, r3
 8001122:	0010      	movs	r0, r2
 8001124:	4770      	bx	lr
 8001126:	38fe      	subs	r0, #254	; 0xfe
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1fb      	bne.n	8001124 <__aeabi_fcmpun+0x20>
 800112c:	e7f4      	b.n	8001118 <__aeabi_fcmpun+0x14>
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <__aeabi_f2iz>:
 8001130:	0241      	lsls	r1, r0, #9
 8001132:	0042      	lsls	r2, r0, #1
 8001134:	0fc3      	lsrs	r3, r0, #31
 8001136:	0a49      	lsrs	r1, r1, #9
 8001138:	2000      	movs	r0, #0
 800113a:	0e12      	lsrs	r2, r2, #24
 800113c:	2a7e      	cmp	r2, #126	; 0x7e
 800113e:	dd03      	ble.n	8001148 <__aeabi_f2iz+0x18>
 8001140:	2a9d      	cmp	r2, #157	; 0x9d
 8001142:	dd02      	ble.n	800114a <__aeabi_f2iz+0x1a>
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <__aeabi_f2iz+0x3c>)
 8001146:	1898      	adds	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	2080      	movs	r0, #128	; 0x80
 800114c:	0400      	lsls	r0, r0, #16
 800114e:	4301      	orrs	r1, r0
 8001150:	2a95      	cmp	r2, #149	; 0x95
 8001152:	dc07      	bgt.n	8001164 <__aeabi_f2iz+0x34>
 8001154:	2096      	movs	r0, #150	; 0x96
 8001156:	1a82      	subs	r2, r0, r2
 8001158:	40d1      	lsrs	r1, r2
 800115a:	4248      	negs	r0, r1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f3      	bne.n	8001148 <__aeabi_f2iz+0x18>
 8001160:	0008      	movs	r0, r1
 8001162:	e7f1      	b.n	8001148 <__aeabi_f2iz+0x18>
 8001164:	3a96      	subs	r2, #150	; 0x96
 8001166:	4091      	lsls	r1, r2
 8001168:	e7f7      	b.n	800115a <__aeabi_f2iz+0x2a>
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	7fffffff 	.word	0x7fffffff

08001170 <__aeabi_i2f>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	2800      	cmp	r0, #0
 8001174:	d013      	beq.n	800119e <__aeabi_i2f+0x2e>
 8001176:	17c3      	asrs	r3, r0, #31
 8001178:	18c6      	adds	r6, r0, r3
 800117a:	405e      	eors	r6, r3
 800117c:	0fc4      	lsrs	r4, r0, #31
 800117e:	0030      	movs	r0, r6
 8001180:	f000 f886 	bl	8001290 <__clzsi2>
 8001184:	239e      	movs	r3, #158	; 0x9e
 8001186:	0005      	movs	r5, r0
 8001188:	1a1b      	subs	r3, r3, r0
 800118a:	2b96      	cmp	r3, #150	; 0x96
 800118c:	dc0f      	bgt.n	80011ae <__aeabi_i2f+0x3e>
 800118e:	2808      	cmp	r0, #8
 8001190:	dd01      	ble.n	8001196 <__aeabi_i2f+0x26>
 8001192:	3d08      	subs	r5, #8
 8001194:	40ae      	lsls	r6, r5
 8001196:	0276      	lsls	r6, r6, #9
 8001198:	0a76      	lsrs	r6, r6, #9
 800119a:	b2d8      	uxtb	r0, r3
 800119c:	e002      	b.n	80011a4 <__aeabi_i2f+0x34>
 800119e:	2400      	movs	r4, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	2600      	movs	r6, #0
 80011a4:	05c0      	lsls	r0, r0, #23
 80011a6:	4330      	orrs	r0, r6
 80011a8:	07e4      	lsls	r4, r4, #31
 80011aa:	4320      	orrs	r0, r4
 80011ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ae:	2b99      	cmp	r3, #153	; 0x99
 80011b0:	dd0c      	ble.n	80011cc <__aeabi_i2f+0x5c>
 80011b2:	2205      	movs	r2, #5
 80011b4:	0031      	movs	r1, r6
 80011b6:	1a12      	subs	r2, r2, r0
 80011b8:	40d1      	lsrs	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	0001      	movs	r1, r0
 80011be:	0030      	movs	r0, r6
 80011c0:	311b      	adds	r1, #27
 80011c2:	4088      	lsls	r0, r1
 80011c4:	1e41      	subs	r1, r0, #1
 80011c6:	4188      	sbcs	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	0016      	movs	r6, r2
 80011cc:	2d05      	cmp	r5, #5
 80011ce:	dc12      	bgt.n	80011f6 <__aeabi_i2f+0x86>
 80011d0:	0031      	movs	r1, r6
 80011d2:	4f0d      	ldr	r7, [pc, #52]	; (8001208 <__aeabi_i2f+0x98>)
 80011d4:	4039      	ands	r1, r7
 80011d6:	0772      	lsls	r2, r6, #29
 80011d8:	d009      	beq.n	80011ee <__aeabi_i2f+0x7e>
 80011da:	200f      	movs	r0, #15
 80011dc:	4030      	ands	r0, r6
 80011de:	2804      	cmp	r0, #4
 80011e0:	d005      	beq.n	80011ee <__aeabi_i2f+0x7e>
 80011e2:	3104      	adds	r1, #4
 80011e4:	014a      	lsls	r2, r1, #5
 80011e6:	d502      	bpl.n	80011ee <__aeabi_i2f+0x7e>
 80011e8:	239f      	movs	r3, #159	; 0x9f
 80011ea:	4039      	ands	r1, r7
 80011ec:	1b5b      	subs	r3, r3, r5
 80011ee:	0189      	lsls	r1, r1, #6
 80011f0:	0a4e      	lsrs	r6, r1, #9
 80011f2:	b2d8      	uxtb	r0, r3
 80011f4:	e7d6      	b.n	80011a4 <__aeabi_i2f+0x34>
 80011f6:	1f6a      	subs	r2, r5, #5
 80011f8:	4096      	lsls	r6, r2
 80011fa:	0031      	movs	r1, r6
 80011fc:	4f02      	ldr	r7, [pc, #8]	; (8001208 <__aeabi_i2f+0x98>)
 80011fe:	4039      	ands	r1, r7
 8001200:	0772      	lsls	r2, r6, #29
 8001202:	d0f4      	beq.n	80011ee <__aeabi_i2f+0x7e>
 8001204:	e7e9      	b.n	80011da <__aeabi_i2f+0x6a>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_ui2f>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	1e05      	subs	r5, r0, #0
 8001210:	d00e      	beq.n	8001230 <__aeabi_ui2f+0x24>
 8001212:	f000 f83d 	bl	8001290 <__clzsi2>
 8001216:	239e      	movs	r3, #158	; 0x9e
 8001218:	0004      	movs	r4, r0
 800121a:	1a1b      	subs	r3, r3, r0
 800121c:	2b96      	cmp	r3, #150	; 0x96
 800121e:	dc0c      	bgt.n	800123a <__aeabi_ui2f+0x2e>
 8001220:	2808      	cmp	r0, #8
 8001222:	dd01      	ble.n	8001228 <__aeabi_ui2f+0x1c>
 8001224:	3c08      	subs	r4, #8
 8001226:	40a5      	lsls	r5, r4
 8001228:	026d      	lsls	r5, r5, #9
 800122a:	0a6d      	lsrs	r5, r5, #9
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	e001      	b.n	8001234 <__aeabi_ui2f+0x28>
 8001230:	2000      	movs	r0, #0
 8001232:	2500      	movs	r5, #0
 8001234:	05c0      	lsls	r0, r0, #23
 8001236:	4328      	orrs	r0, r5
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	2b99      	cmp	r3, #153	; 0x99
 800123c:	dd09      	ble.n	8001252 <__aeabi_ui2f+0x46>
 800123e:	0002      	movs	r2, r0
 8001240:	0029      	movs	r1, r5
 8001242:	321b      	adds	r2, #27
 8001244:	4091      	lsls	r1, r2
 8001246:	1e4a      	subs	r2, r1, #1
 8001248:	4191      	sbcs	r1, r2
 800124a:	2205      	movs	r2, #5
 800124c:	1a12      	subs	r2, r2, r0
 800124e:	40d5      	lsrs	r5, r2
 8001250:	430d      	orrs	r5, r1
 8001252:	2c05      	cmp	r4, #5
 8001254:	dc12      	bgt.n	800127c <__aeabi_ui2f+0x70>
 8001256:	0029      	movs	r1, r5
 8001258:	4e0c      	ldr	r6, [pc, #48]	; (800128c <__aeabi_ui2f+0x80>)
 800125a:	4031      	ands	r1, r6
 800125c:	076a      	lsls	r2, r5, #29
 800125e:	d009      	beq.n	8001274 <__aeabi_ui2f+0x68>
 8001260:	200f      	movs	r0, #15
 8001262:	4028      	ands	r0, r5
 8001264:	2804      	cmp	r0, #4
 8001266:	d005      	beq.n	8001274 <__aeabi_ui2f+0x68>
 8001268:	3104      	adds	r1, #4
 800126a:	014a      	lsls	r2, r1, #5
 800126c:	d502      	bpl.n	8001274 <__aeabi_ui2f+0x68>
 800126e:	239f      	movs	r3, #159	; 0x9f
 8001270:	4031      	ands	r1, r6
 8001272:	1b1b      	subs	r3, r3, r4
 8001274:	0189      	lsls	r1, r1, #6
 8001276:	0a4d      	lsrs	r5, r1, #9
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	e7db      	b.n	8001234 <__aeabi_ui2f+0x28>
 800127c:	1f62      	subs	r2, r4, #5
 800127e:	4095      	lsls	r5, r2
 8001280:	0029      	movs	r1, r5
 8001282:	4e02      	ldr	r6, [pc, #8]	; (800128c <__aeabi_ui2f+0x80>)
 8001284:	4031      	ands	r1, r6
 8001286:	076a      	lsls	r2, r5, #29
 8001288:	d0f4      	beq.n	8001274 <__aeabi_ui2f+0x68>
 800128a:	e7e9      	b.n	8001260 <__aeabi_ui2f+0x54>
 800128c:	fbffffff 	.word	0xfbffffff

08001290 <__clzsi2>:
 8001290:	211c      	movs	r1, #28
 8001292:	2301      	movs	r3, #1
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	4298      	cmp	r0, r3
 8001298:	d301      	bcc.n	800129e <__clzsi2+0xe>
 800129a:	0c00      	lsrs	r0, r0, #16
 800129c:	3910      	subs	r1, #16
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d301      	bcc.n	80012a8 <__clzsi2+0x18>
 80012a4:	0a00      	lsrs	r0, r0, #8
 80012a6:	3908      	subs	r1, #8
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0x22>
 80012ae:	0900      	lsrs	r0, r0, #4
 80012b0:	3904      	subs	r1, #4
 80012b2:	a202      	add	r2, pc, #8	; (adr r2, 80012bc <__clzsi2+0x2c>)
 80012b4:	5c10      	ldrb	r0, [r2, r0]
 80012b6:	1840      	adds	r0, r0, r1
 80012b8:	4770      	bx	lr
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	02020304 	.word	0x02020304
 80012c0:	01010101 	.word	0x01010101
	...

080012cc <reverse_bytes>:
  ALGO_PHASECAL_LIM                           = 0x30,
  ALGO_PHASECAL_CONFIG_TIMEOUT                = 0x30,
};

void reverse_bytes(uint8_t* data, const uint8_t size)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	000a      	movs	r2, r1
 80012d6:	1cfb      	adds	r3, r7, #3
 80012d8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size / 2; ++i)
 80012da:	230f      	movs	r3, #15
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e029      	b.n	8001338 <reverse_bytes+0x6c>
	{
		const uint8_t tmp = data[i];
 80012e4:	200f      	movs	r0, #15
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	18d2      	adds	r2, r2, r3
 80012ee:	240e      	movs	r4, #14
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
		data[i] = data[size - 1 - i];
 80012f6:	1cfb      	adds	r3, r7, #3
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	001a      	movs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	189a      	adds	r2, r3, r2
 8001308:	183b      	adds	r3, r7, r0
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	18cb      	adds	r3, r1, r3
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	701a      	strb	r2, [r3, #0]
		data[size - 1 - i] = tmp;
 8001314:	1cfb      	adds	r3, r7, #3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	0001      	movs	r1, r0
 800131c:	187b      	adds	r3, r7, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	001a      	movs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	189b      	adds	r3, r3, r2
 8001328:	193a      	adds	r2, r7, r4
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size / 2; ++i)
 800132e:	187b      	adds	r3, r7, r1
 8001330:	187a      	adds	r2, r7, r1
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	3201      	adds	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	1cfb      	adds	r3, r7, #3
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	220f      	movs	r2, #15
 8001342:	18ba      	adds	r2, r7, r2
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3cc      	bcc.n	80012e4 <reverse_bytes+0x18>
	}
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b005      	add	sp, #20
 8001352:	bd90      	pop	{r4, r7, pc}

08001354 <laser_write>:

HAL_StatusTypeDef laser_write(laser_handle* laser, uint8_t reg, uint8_t* data, const uint8_t size)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	0008      	movs	r0, r1
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	0019      	movs	r1, r3
 8001362:	240b      	movs	r4, #11
 8001364:	193b      	adds	r3, r7, r4
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	260a      	movs	r6, #10
 800136c:	19bb      	adds	r3, r7, r6
 800136e:	1c0a      	adds	r2, r1, #0
 8001370:	701a      	strb	r2, [r3, #0]
	//Convert LSB first to MSB first
	reverse_bytes(data, size);
 8001372:	19bb      	adds	r3, r7, r6
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff ffa6 	bl	80012cc <reverse_bytes>

	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6818      	ldr	r0, [r3, #0]
													   laser->address,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	799b      	ldrb	r3, [r3, #6]
	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 8001388:	b299      	uxth	r1, r3
 800138a:	193b      	adds	r3, r7, r4
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b29d      	uxth	r5, r3
 8001390:	19bb      	adds	r3, r7, r6
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
													   reg,
													   sizeof(reg),
													   data,
													   size,
													   laser->timeout);
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	8892      	ldrh	r2, [r2, #4]
	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 800139a:	2417      	movs	r4, #23
 800139c:	193c      	adds	r4, r7, r4
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	002a      	movs	r2, r5
 80013aa:	f005 f929 	bl	8006600 <HAL_I2C_Mem_Write>
 80013ae:	0003      	movs	r3, r0
 80013b0:	7023      	strb	r3, [r4, #0]

	//Convert MSB first to LSB first
	reverse_bytes(data, size);
 80013b2:	19bb      	adds	r3, r7, r6
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff86 	bl	80012cc <reverse_bytes>

	return status;
 80013c0:	2417      	movs	r4, #23
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	781b      	ldrb	r3, [r3, #0]
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b007      	add	sp, #28
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ce <laser_read>:

HAL_StatusTypeDef laser_read(laser_handle* laser, uint8_t reg, uint8_t* data, const uint8_t size)
{
 80013ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d0:	b089      	sub	sp, #36	; 0x24
 80013d2:	af02      	add	r7, sp, #8
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	0008      	movs	r0, r1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	0019      	movs	r1, r3
 80013dc:	260b      	movs	r6, #11
 80013de:	19bb      	adds	r3, r7, r6
 80013e0:	1c02      	adds	r2, r0, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	230a      	movs	r3, #10
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	1c0a      	adds	r2, r1, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	//Select register
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6818      	ldr	r0, [r3, #0]
													   laser->address,
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	799b      	ldrb	r3, [r3, #6]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 80013f4:	b299      	uxth	r1, r3
													   &reg,
													   sizeof(reg),
													   laser->timeout);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 80013fa:	2517      	movs	r5, #23
 80013fc:	197c      	adds	r4, r7, r5
 80013fe:	19ba      	adds	r2, r7, r6
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	f004 feec 	bl	80061e0 <HAL_I2C_Master_Transmit>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 800140c:	197b      	adds	r3, r7, r5
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <laser_read+0x4c>
		return status;
 8001414:	197b      	adds	r3, r7, r5
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	e024      	b.n	8001464 <laser_read+0x96>

	//Read register contents
	status = HAL_I2C_Master_Receive(laser->hi2c,
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6818      	ldr	r0, [r3, #0]
									laser->address + 1,
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	799b      	ldrb	r3, [r3, #6]
 8001422:	b29b      	uxth	r3, r3
	status = HAL_I2C_Master_Receive(laser->hi2c,
 8001424:	3301      	adds	r3, #1
 8001426:	b299      	uxth	r1, r3
 8001428:	260a      	movs	r6, #10
 800142a:	19bb      	adds	r3, r7, r6
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b29d      	uxth	r5, r3
									data,
									size,
									laser->timeout);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	889b      	ldrh	r3, [r3, #4]
	status = HAL_I2C_Master_Receive(laser->hi2c,
 8001434:	2217      	movs	r2, #23
 8001436:	18bc      	adds	r4, r7, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	002b      	movs	r3, r5
 800143e:	f004 ffd7 	bl	80063f0 <HAL_I2C_Master_Receive>
 8001442:	0003      	movs	r3, r0
 8001444:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 8001446:	2217      	movs	r2, #23
 8001448:	18bb      	adds	r3, r7, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <laser_read+0x90>
	{
		//Convert MSB first to LSB first
		reverse_bytes(data, size);
 8001450:	19bb      	adds	r3, r7, r6
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ff37 	bl	80012cc <reverse_bytes>
	}

	return status;
 800145e:	2317      	movs	r3, #23
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b007      	add	sp, #28
 800146a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146c <laser_write_u8>:

HAL_StatusTypeDef laser_write_u8(laser_handle* laser, uint8_t reg, uint8_t data)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	0008      	movs	r0, r1
 8001476:	0011      	movs	r1, r2
 8001478:	1cfb      	adds	r3, r7, #3
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	1cbb      	adds	r3, r7, #2
 8001480:	1c0a      	adds	r2, r1, #0
 8001482:	701a      	strb	r2, [r3, #0]
	return laser_write(laser, reg, &data, sizeof(data));
 8001484:	1cba      	adds	r2, r7, #2
 8001486:	1cfb      	adds	r3, r7, #3
 8001488:	7819      	ldrb	r1, [r3, #0]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	2301      	movs	r3, #1
 800148e:	f7ff ff61 	bl	8001354 <laser_write>
 8001492:	0003      	movs	r3, r0
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}

0800149c <laser_write_u16>:

HAL_StatusTypeDef laser_write_u16(laser_handle* laser, uint8_t reg, uint16_t data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	0008      	movs	r0, r1
 80014a6:	0011      	movs	r1, r2
 80014a8:	1cfb      	adds	r3, r7, #3
 80014aa:	1c02      	adds	r2, r0, #0
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	003b      	movs	r3, r7
 80014b0:	1c0a      	adds	r2, r1, #0
 80014b2:	801a      	strh	r2, [r3, #0]
	return laser_write(laser, reg, (uint8_t*)&data, sizeof(data));
 80014b4:	003a      	movs	r2, r7
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	7819      	ldrb	r1, [r3, #0]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	2302      	movs	r3, #2
 80014be:	f7ff ff49 	bl	8001354 <laser_write>
 80014c2:	0003      	movs	r3, r0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <laser_read_u8>:

HAL_StatusTypeDef laser_read_u8(laser_handle* laser, uint8_t reg, uint8_t* data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	200b      	movs	r0, #11
 80014d8:	183b      	adds	r3, r7, r0
 80014da:	1c0a      	adds	r2, r1, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	return laser_read(laser, reg, data, sizeof(uint8_t));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	183b      	adds	r3, r7, r0
 80014e2:	7819      	ldrb	r1, [r3, #0]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	2301      	movs	r3, #1
 80014e8:	f7ff ff71 	bl	80013ce <laser_read>
 80014ec:	0003      	movs	r3, r0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <laser_read_u16>:

HAL_StatusTypeDef laser_read_u16(laser_handle* laser, uint8_t reg, uint16_t* data)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	200b      	movs	r0, #11
 8001502:	183b      	adds	r3, r7, r0
 8001504:	1c0a      	adds	r2, r1, #0
 8001506:	701a      	strb	r2, [r3, #0]
	return laser_read(laser, reg, (uint8_t*)data, sizeof(uint16_t));
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	183b      	adds	r3, r7, r0
 800150c:	7819      	ldrb	r1, [r3, #0]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	2302      	movs	r3, #2
 8001512:	f7ff ff5c 	bl	80013ce <laser_read>
 8001516:	0003      	movs	r3, r0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <laser_calibrate>:

HAL_StatusTypeDef laser_calibrate(laser_handle* laser, uint8_t vhv_init_byte)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	000a      	movs	r2, r1
 800152a:	1cfb      	adds	r3, r7, #3
 800152c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = laser_write_u8(laser, SYSRANGE_START, 0x01 | vhv_init_byte);
 800152e:	1cfb      	adds	r3, r7, #3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4313      	orrs	r3, r2
 8001536:	b2da      	uxtb	r2, r3
 8001538:	2517      	movs	r5, #23
 800153a:	197c      	adds	r4, r7, r5
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2100      	movs	r1, #0
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff93 	bl	800146c <laser_write_u8>
 8001546:	0003      	movs	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800154a:	197b      	adds	r3, r7, r5
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <laser_calibrate+0x38>
		return status;
 8001552:	197b      	adds	r3, r7, r5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	e03d      	b.n	80015d4 <laser_calibrate+0xb4>

	uint8_t tmp;
	const uint32_t tick = HAL_GetTick();
 8001558:	f004 f800 	bl	800555c <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]
	do
	{
	  status = laser_read_u8(laser, RESULT_INTERRUPT_STATUS, &tmp);
 8001560:	2517      	movs	r5, #23
 8001562:	197c      	adds	r4, r7, r5
 8001564:	230f      	movs	r3, #15
 8001566:	18fa      	adds	r2, r7, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2113      	movs	r1, #19
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff ffad 	bl	80014cc <laser_read_u8>
 8001572:	0003      	movs	r3, r0
 8001574:	7023      	strb	r3, [r4, #0]
	  if (status != HAL_OK)
 8001576:	197b      	adds	r3, r7, r5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <laser_calibrate+0x64>
		return status;
 800157e:	197b      	adds	r3, r7, r5
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	e027      	b.n	80015d4 <laser_calibrate+0xb4>

	  if (HAL_GetTick() - tick >= laser->timeout)
 8001584:	f003 ffea 	bl	800555c <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	8892      	ldrh	r2, [r2, #4]
 8001592:	4293      	cmp	r3, r2
 8001594:	d301      	bcc.n	800159a <laser_calibrate+0x7a>
		  return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e01c      	b.n	80015d4 <laser_calibrate+0xb4>

	} while (tmp == 0);
 800159a:	230f      	movs	r3, #15
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0dd      	beq.n	8001560 <laser_calibrate+0x40>

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015a4:	2517      	movs	r5, #23
 80015a6:	197c      	adds	r4, r7, r5
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	210b      	movs	r1, #11
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff5c 	bl	800146c <laser_write_u8>
 80015b4:	0003      	movs	r3, r0
 80015b6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80015b8:	197b      	adds	r3, r7, r5
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <laser_calibrate+0xa6>
		return status;
 80015c0:	197b      	adds	r3, r7, r5
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	e006      	b.n	80015d4 <laser_calibrate+0xb4>

	return laser_write_u8(laser, SYSRANGE_START, 0x00);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff4d 	bl	800146c <laser_write_u8>
 80015d2:	0003      	movs	r3, r0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b006      	add	sp, #24
 80015da:	bdb0      	pop	{r4, r5, r7, pc}

080015dc <laser_init>:

HAL_StatusTypeDef laser_init(laser_handle* laser)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	// "Set I2C standard mode"
	status = laser_write_u8(laser, 0x88, 0x00);
 80015e4:	251d      	movs	r5, #29
 80015e6:	197c      	adds	r4, r7, r5
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	2188      	movs	r1, #136	; 0x88
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff ff3c 	bl	800146c <laser_write_u8>
 80015f4:	0003      	movs	r3, r0
 80015f6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80015f8:	197b      	adds	r3, r7, r5
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <laser_init+0x2c>
		return status;
 8001600:	197b      	adds	r3, r7, r5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f000 fff6 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x01);
 8001608:	251d      	movs	r5, #29
 800160a:	197c      	adds	r4, r7, r5
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff ff2a 	bl	800146c <laser_write_u8>
 8001618:	0003      	movs	r3, r0
 800161a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800161c:	197b      	adds	r3, r7, r5
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <laser_init+0x50>
		return status;
 8001624:	197b      	adds	r3, r7, r5
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f000 ffe4 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800162c:	251d      	movs	r5, #29
 800162e:	197c      	adds	r4, r7, r5
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	21ff      	movs	r1, #255	; 0xff
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff ff18 	bl	800146c <laser_write_u8>
 800163c:	0003      	movs	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001640:	197b      	adds	r3, r7, r5
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <laser_init+0x74>
		return status;
 8001648:	197b      	adds	r3, r7, r5
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f000 ffd2 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x00);
 8001650:	251d      	movs	r5, #29
 8001652:	197c      	adds	r4, r7, r5
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff ff06 	bl	800146c <laser_write_u8>
 8001660:	0003      	movs	r3, r0
 8001662:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001664:	197b      	adds	r3, r7, r5
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <laser_init+0x98>
		return status;
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f000 ffc0 	bl	80025f4 <laser_init+0x1018>

	status = laser_read_u8(laser, 0x91, &laser->g_stop);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1dda      	adds	r2, r3, #7
 8001678:	251d      	movs	r5, #29
 800167a:	197c      	adds	r4, r7, r5
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2191      	movs	r1, #145	; 0x91
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff ff23 	bl	80014cc <laser_read_u8>
 8001686:	0003      	movs	r3, r0
 8001688:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800168a:	197b      	adds	r3, r7, r5
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <laser_init+0xbe>
		return status;
 8001692:	197b      	adds	r3, r7, r5
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f000 ffad 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x01);
 800169a:	251d      	movs	r5, #29
 800169c:	197c      	adds	r4, r7, r5
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	2100      	movs	r1, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fee1 	bl	800146c <laser_write_u8>
 80016aa:	0003      	movs	r3, r0
 80016ac:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016ae:	197b      	adds	r3, r7, r5
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <laser_init+0xe2>
		return status;
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f000 ff9b 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80016be:	251d      	movs	r5, #29
 80016c0:	197c      	adds	r4, r7, r5
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fecf 	bl	800146c <laser_write_u8>
 80016ce:	0003      	movs	r3, r0
 80016d0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016d2:	197b      	adds	r3, r7, r5
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <laser_init+0x106>
		return status;
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f000 ff89 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x00);
 80016e2:	251d      	movs	r5, #29
 80016e4:	197c      	adds	r4, r7, r5
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff febd 	bl	800146c <laser_write_u8>
 80016f2:	0003      	movs	r3, r0
 80016f4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <laser_init+0x12a>
		return status;
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f000 ff77 	bl	80025f4 <laser_init+0x1018>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	uint8_t msrc_ctrl;
	status = laser_read_u8(laser, MSRC_CONFIG_CONTROL, &msrc_ctrl);
 8001706:	251d      	movs	r5, #29
 8001708:	197c      	adds	r4, r7, r5
 800170a:	231b      	movs	r3, #27
 800170c:	18fa      	adds	r2, r7, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2160      	movs	r1, #96	; 0x60
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff feda 	bl	80014cc <laser_read_u8>
 8001718:	0003      	movs	r3, r0
 800171a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800171c:	197b      	adds	r3, r7, r5
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <laser_init+0x150>
		return status;
 8001724:	197b      	adds	r3, r7, r5
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f000 ff64 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, MSRC_CONFIG_CONTROL, msrc_ctrl | 0x12);
 800172c:	231b      	movs	r3, #27
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2212      	movs	r2, #18
 8001734:	4313      	orrs	r3, r2
 8001736:	b2da      	uxtb	r2, r3
 8001738:	251d      	movs	r5, #29
 800173a:	197c      	adds	r4, r7, r5
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2160      	movs	r1, #96	; 0x60
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff fe93 	bl	800146c <laser_write_u8>
 8001746:	0003      	movs	r3, r0
 8001748:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800174a:	197b      	adds	r3, r7, r5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <laser_init+0x17e>
		return status;
 8001752:	197b      	adds	r3, r7, r5
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f000 ff4d 	bl	80025f4 <laser_init+0x1018>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	status = laser_set_signal_rate(laser, SIGNAL_RATE);
 800175a:	251d      	movs	r5, #29
 800175c:	197c      	adds	r4, r7, r5
 800175e:	22fa      	movs	r2, #250	; 0xfa
 8001760:	0592      	lsls	r2, r2, #22
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1c11      	adds	r1, r2, #0
 8001766:	0018      	movs	r0, r3
 8001768:	f000 ff4a 	bl	8002600 <laser_set_signal_rate>
 800176c:	0003      	movs	r3, r0
 800176e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001770:	197b      	adds	r3, r7, r5
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <laser_init+0x1a4>
		return status;
 8001778:	197b      	adds	r3, r7, r5
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f000 ff3a 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001780:	251d      	movs	r5, #29
 8001782:	197c      	adds	r4, r7, r5
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	2101      	movs	r1, #1
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff fe6e 	bl	800146c <laser_write_u8>
 8001790:	0003      	movs	r3, r0
 8001792:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001794:	197b      	adds	r3, r7, r5
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <laser_init+0x1c8>
		return status;
 800179c:	197b      	adds	r3, r7, r5
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	f000 ff28 	bl	80025f4 <laser_init+0x1018>

	// VL53L0X_StaticInit() begin

	uint8_t spad_count;
	uint8_t spad_type_is_aperture;
	status = laser_get_spad(laser, &spad_count, &spad_type_is_aperture);
 80017a4:	251d      	movs	r5, #29
 80017a6:	197c      	adds	r4, r7, r5
 80017a8:	2319      	movs	r3, #25
 80017aa:	18fa      	adds	r2, r7, r3
 80017ac:	231a      	movs	r3, #26
 80017ae:	18f9      	adds	r1, r7, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 ff4e 	bl	8002654 <laser_get_spad>
 80017b8:	0003      	movs	r3, r0
 80017ba:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80017bc:	197b      	adds	r3, r7, r5
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <laser_init+0x1f0>
		return status;
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f000 ff14 	bl	80025f4 <laser_init+0x1018>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	status = laser_read(laser, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80017cc:	251d      	movs	r5, #29
 80017ce:	197c      	adds	r4, r7, r5
 80017d0:	2310      	movs	r3, #16
 80017d2:	18fa      	adds	r2, r7, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	2306      	movs	r3, #6
 80017d8:	21b0      	movs	r1, #176	; 0xb0
 80017da:	f7ff fdf8 	bl	80013ce <laser_read>
 80017de:	0003      	movs	r3, r0
 80017e0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80017e2:	197b      	adds	r3, r7, r5
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <laser_init+0x216>
		return status;
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f000 ff01 	bl	80025f4 <laser_init+0x1018>
	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	status = laser_write_u8(laser, 0xFF, 0x01);
 80017f2:	251d      	movs	r5, #29
 80017f4:	197c      	adds	r4, r7, r5
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff fe35 	bl	800146c <laser_write_u8>
 8001802:	0003      	movs	r3, r0
 8001804:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001806:	197b      	adds	r3, r7, r5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <laser_init+0x23a>
		return status;
 800180e:	197b      	adds	r3, r7, r5
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f000 feef 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001816:	251d      	movs	r5, #29
 8001818:	197c      	adds	r4, r7, r5
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	214f      	movs	r1, #79	; 0x4f
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fe23 	bl	800146c <laser_write_u8>
 8001826:	0003      	movs	r3, r0
 8001828:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800182a:	197b      	adds	r3, r7, r5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <laser_init+0x25e>
		return status;
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f000 fedd 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800183a:	251d      	movs	r5, #29
 800183c:	197c      	adds	r4, r7, r5
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	222c      	movs	r2, #44	; 0x2c
 8001842:	214e      	movs	r1, #78	; 0x4e
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff fe11 	bl	800146c <laser_write_u8>
 800184a:	0003      	movs	r3, r0
 800184c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800184e:	197b      	adds	r3, r7, r5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <laser_init+0x282>
		return status;
 8001856:	197b      	adds	r3, r7, r5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f000 fecb 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 800185e:	251d      	movs	r5, #29
 8001860:	197c      	adds	r4, r7, r5
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	21ff      	movs	r1, #255	; 0xff
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fdff 	bl	800146c <laser_write_u8>
 800186e:	0003      	movs	r3, r0
 8001870:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001872:	197b      	adds	r3, r7, r5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <laser_init+0x2a6>
		return status;
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f000 feb9 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001882:	251d      	movs	r5, #29
 8001884:	197c      	adds	r4, r7, r5
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	22b4      	movs	r2, #180	; 0xb4
 800188a:	21b6      	movs	r1, #182	; 0xb6
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fded 	bl	800146c <laser_write_u8>
 8001892:	0003      	movs	r3, r0
 8001894:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001896:	197b      	adds	r3, r7, r5
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <laser_init+0x2ca>
		return status;
 800189e:	197b      	adds	r3, r7, r5
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	f000 fea7 	bl	80025f4 <laser_init+0x1018>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80018a6:	2319      	movs	r3, #25
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <laser_init+0x2d8>
 80018b0:	220c      	movs	r2, #12
 80018b2:	e000      	b.n	80018b6 <laser_init+0x2da>
 80018b4:	2200      	movs	r2, #0
 80018b6:	231c      	movs	r3, #28
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	701a      	strb	r2, [r3, #0]
	uint8_t spads_enabled = 0;
 80018bc:	231f      	movs	r3, #31
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 48; i++)
 80018c4:	231e      	movs	r3, #30
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e049      	b.n	8001962 <laser_init+0x386>
	{
	if (i < first_spad_to_enable || spads_enabled == spad_count)
 80018ce:	231e      	movs	r3, #30
 80018d0:	18fa      	adds	r2, r7, r3
 80018d2:	231c      	movs	r3, #28
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d307      	bcc.n	80018ee <laser_init+0x312>
 80018de:	231a      	movs	r3, #26
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	221f      	movs	r2, #31
 80018e6:	18ba      	adds	r2, r7, r2
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11a      	bne.n	8001924 <laser_init+0x348>
	{
	  // This bit is lower than the first one that should be enabled, or
	  // (reference_spad_count) bits have already been enabled, so zero this bit
	  ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80018ee:	211e      	movs	r1, #30
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	b2d8      	uxtb	r0, r3
 80018f8:	0002      	movs	r2, r0
 80018fa:	2410      	movs	r4, #16
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b25b      	sxtb	r3, r3
 8001902:	187a      	adds	r2, r7, r1
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	2107      	movs	r1, #7
 8001908:	400a      	ands	r2, r1
 800190a:	2101      	movs	r1, #1
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	b252      	sxtb	r2, r2
 8001912:	43d2      	mvns	r2, r2
 8001914:	b252      	sxtb	r2, r2
 8001916:	4013      	ands	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	0002      	movs	r2, r0
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	193b      	adds	r3, r7, r4
 8001920:	5499      	strb	r1, [r3, r2]
 8001922:	e018      	b.n	8001956 <laser_init+0x37a>
	}
	else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001924:	201e      	movs	r0, #30
 8001926:	183b      	adds	r3, r7, r0
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	001a      	movs	r2, r3
 8001930:	2310      	movs	r3, #16
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	0019      	movs	r1, r3
 8001938:	183b      	adds	r3, r7, r0
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	4119      	asrs	r1, r3
 8001942:	000b      	movs	r3, r1
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d005      	beq.n	8001956 <laser_init+0x37a>
	{
	  spads_enabled++;
 800194a:	211f      	movs	r1, #31
 800194c:	187b      	adds	r3, r7, r1
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	187b      	adds	r3, r7, r1
 8001952:	3201      	adds	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 48; i++)
 8001956:	211e      	movs	r1, #30
 8001958:	187b      	adds	r3, r7, r1
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	187b      	adds	r3, r7, r1
 800195e:	3201      	adds	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	231e      	movs	r3, #30
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b2f      	cmp	r3, #47	; 0x2f
 800196a:	d9b0      	bls.n	80018ce <laser_init+0x2f2>
	}
	}

	status = laser_write(laser, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800196c:	251d      	movs	r5, #29
 800196e:	197c      	adds	r4, r7, r5
 8001970:	2310      	movs	r3, #16
 8001972:	18fa      	adds	r2, r7, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	2306      	movs	r3, #6
 8001978:	21b0      	movs	r1, #176	; 0xb0
 800197a:	f7ff fceb 	bl	8001354 <laser_write>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001982:	197b      	adds	r3, r7, r5
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <laser_init+0x3b6>
		return status;
 800198a:	197b      	adds	r3, r7, r5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f000 fe31 	bl	80025f4 <laser_init+0x1018>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001992:	251d      	movs	r5, #29
 8001994:	197c      	adds	r4, r7, r5
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	21ff      	movs	r1, #255	; 0xff
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fd65 	bl	800146c <laser_write_u8>
 80019a2:	0003      	movs	r3, r0
 80019a4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <laser_init+0x3da>
		return status;
 80019ae:	197b      	adds	r3, r7, r5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f000 fe1f 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x00);
 80019b6:	251d      	movs	r5, #29
 80019b8:	197c      	adds	r4, r7, r5
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff fd53 	bl	800146c <laser_write_u8>
 80019c6:	0003      	movs	r3, r0
 80019c8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80019ca:	197b      	adds	r3, r7, r5
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <laser_init+0x3fe>
		return status;
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f000 fe0d 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80019da:	251d      	movs	r5, #29
 80019dc:	197c      	adds	r4, r7, r5
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	21ff      	movs	r1, #255	; 0xff
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fd41 	bl	800146c <laser_write_u8>
 80019ea:	0003      	movs	r3, r0
 80019ec:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80019ee:	197b      	adds	r3, r7, r5
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <laser_init+0x422>
		return status;
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f000 fdfb 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x09, 0x00);
 80019fe:	251d      	movs	r5, #29
 8001a00:	197c      	adds	r4, r7, r5
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2109      	movs	r1, #9
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fd2f 	bl	800146c <laser_write_u8>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a12:	197b      	adds	r3, r7, r5
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <laser_init+0x446>
		return status;
 8001a1a:	197b      	adds	r3, r7, r5
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f000 fde9 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x10, 0x00);
 8001a22:	251d      	movs	r5, #29
 8001a24:	197c      	adds	r4, r7, r5
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fd1d 	bl	800146c <laser_write_u8>
 8001a32:	0003      	movs	r3, r0
 8001a34:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <laser_init+0x46a>
		return status;
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f000 fdd7 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x11, 0x00);
 8001a46:	251d      	movs	r5, #29
 8001a48:	197c      	adds	r4, r7, r5
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2111      	movs	r1, #17
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fd0b 	bl	800146c <laser_write_u8>
 8001a56:	0003      	movs	r3, r0
 8001a58:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a5a:	197b      	adds	r3, r7, r5
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <laser_init+0x48e>
		return status;
 8001a62:	197b      	adds	r3, r7, r5
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f000 fdc5 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x24, 0x01);
 8001a6a:	251d      	movs	r5, #29
 8001a6c:	197c      	adds	r4, r7, r5
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	2124      	movs	r1, #36	; 0x24
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fcf9 	bl	800146c <laser_write_u8>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a7e:	197b      	adds	r3, r7, r5
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <laser_init+0x4b2>
		return status;
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f000 fdb3 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x25, 0xFF);
 8001a8e:	251d      	movs	r5, #29
 8001a90:	197c      	adds	r4, r7, r5
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	22ff      	movs	r2, #255	; 0xff
 8001a96:	2125      	movs	r1, #37	; 0x25
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fce7 	bl	800146c <laser_write_u8>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <laser_init+0x4d6>
		return status;
 8001aaa:	197b      	adds	r3, r7, r5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f000 fda1 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x75, 0x00);
 8001ab2:	251d      	movs	r5, #29
 8001ab4:	197c      	adds	r4, r7, r5
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2175      	movs	r1, #117	; 0x75
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff fcd5 	bl	800146c <laser_write_u8>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ac6:	197b      	adds	r3, r7, r5
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <laser_init+0x4fa>
		return status;
 8001ace:	197b      	adds	r3, r7, r5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f000 fd8f 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001ad6:	251d      	movs	r5, #29
 8001ad8:	197c      	adds	r4, r7, r5
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	21ff      	movs	r1, #255	; 0xff
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fcc3 	bl	800146c <laser_write_u8>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001aea:	197b      	adds	r3, r7, r5
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <laser_init+0x51e>
		return status;
 8001af2:	197b      	adds	r3, r7, r5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f000 fd7d 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4E, 0x2C);
 8001afa:	251d      	movs	r5, #29
 8001afc:	197c      	adds	r4, r7, r5
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	222c      	movs	r2, #44	; 0x2c
 8001b02:	214e      	movs	r1, #78	; 0x4e
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fcb1 	bl	800146c <laser_write_u8>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b0e:	197b      	adds	r3, r7, r5
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <laser_init+0x542>
		return status;
 8001b16:	197b      	adds	r3, r7, r5
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f000 fd6b 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x48, 0x00);
 8001b1e:	251d      	movs	r5, #29
 8001b20:	197c      	adds	r4, r7, r5
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2148      	movs	r1, #72	; 0x48
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff fc9f 	bl	800146c <laser_write_u8>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b32:	197b      	adds	r3, r7, r5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <laser_init+0x566>
		return status;
 8001b3a:	197b      	adds	r3, r7, r5
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f000 fd59 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x30, 0x20);
 8001b42:	251d      	movs	r5, #29
 8001b44:	197c      	adds	r4, r7, r5
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2130      	movs	r1, #48	; 0x30
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fc8d 	bl	800146c <laser_write_u8>
 8001b52:	0003      	movs	r3, r0
 8001b54:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b56:	197b      	adds	r3, r7, r5
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <laser_init+0x58a>
		return status;
 8001b5e:	197b      	adds	r3, r7, r5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f000 fd47 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8001b66:	251d      	movs	r5, #29
 8001b68:	197c      	adds	r4, r7, r5
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	21ff      	movs	r1, #255	; 0xff
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fc7b 	bl	800146c <laser_write_u8>
 8001b76:	0003      	movs	r3, r0
 8001b78:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b7a:	197b      	adds	r3, r7, r5
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <laser_init+0x5ae>
		return status;
 8001b82:	197b      	adds	r3, r7, r5
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f000 fd35 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x30, 0x09);
 8001b8a:	251d      	movs	r5, #29
 8001b8c:	197c      	adds	r4, r7, r5
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2209      	movs	r2, #9
 8001b92:	2130      	movs	r1, #48	; 0x30
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fc69 	bl	800146c <laser_write_u8>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b9e:	197b      	adds	r3, r7, r5
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <laser_init+0x5d2>
		return status;
 8001ba6:	197b      	adds	r3, r7, r5
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	f000 fd23 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x54, 0x00);
 8001bae:	251d      	movs	r5, #29
 8001bb0:	197c      	adds	r4, r7, r5
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2154      	movs	r1, #84	; 0x54
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fc57 	bl	800146c <laser_write_u8>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001bc2:	197b      	adds	r3, r7, r5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <laser_init+0x5f6>
		return status;
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	f000 fd11 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x31, 0x04);
 8001bd2:	251d      	movs	r5, #29
 8001bd4:	197c      	adds	r4, r7, r5
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	2131      	movs	r1, #49	; 0x31
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fc45 	bl	800146c <laser_write_u8>
 8001be2:	0003      	movs	r3, r0
 8001be4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001be6:	197b      	adds	r3, r7, r5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <laser_init+0x61a>
		return status;
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f000 fcff 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x32, 0x03);
 8001bf6:	251d      	movs	r5, #29
 8001bf8:	197c      	adds	r4, r7, r5
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	2132      	movs	r1, #50	; 0x32
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff fc33 	bl	800146c <laser_write_u8>
 8001c06:	0003      	movs	r3, r0
 8001c08:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c0a:	197b      	adds	r3, r7, r5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <laser_init+0x63e>
		return status;
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	f000 fced 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x40, 0x83);
 8001c1a:	251d      	movs	r5, #29
 8001c1c:	197c      	adds	r4, r7, r5
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2283      	movs	r2, #131	; 0x83
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fc21 	bl	800146c <laser_write_u8>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c2e:	197b      	adds	r3, r7, r5
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <laser_init+0x662>
		return status;
 8001c36:	197b      	adds	r3, r7, r5
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f000 fcdb 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x46, 0x25);
 8001c3e:	251d      	movs	r5, #29
 8001c40:	197c      	adds	r4, r7, r5
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2225      	movs	r2, #37	; 0x25
 8001c46:	2146      	movs	r1, #70	; 0x46
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff fc0f 	bl	800146c <laser_write_u8>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c52:	197b      	adds	r3, r7, r5
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <laser_init+0x686>
		return status;
 8001c5a:	197b      	adds	r3, r7, r5
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f000 fcc9 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x60, 0x00);
 8001c62:	251d      	movs	r5, #29
 8001c64:	197c      	adds	r4, r7, r5
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2160      	movs	r1, #96	; 0x60
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fbfd 	bl	800146c <laser_write_u8>
 8001c72:	0003      	movs	r3, r0
 8001c74:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c76:	197b      	adds	r3, r7, r5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <laser_init+0x6aa>
		return status;
 8001c7e:	197b      	adds	r3, r7, r5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f000 fcb7 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x27, 0x00);
 8001c86:	251d      	movs	r5, #29
 8001c88:	197c      	adds	r4, r7, r5
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2127      	movs	r1, #39	; 0x27
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fbeb 	bl	800146c <laser_write_u8>
 8001c96:	0003      	movs	r3, r0
 8001c98:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <laser_init+0x6ce>
		return status;
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	f000 fca5 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x50, 0x06);
 8001caa:	251d      	movs	r5, #29
 8001cac:	197c      	adds	r4, r7, r5
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	2150      	movs	r1, #80	; 0x50
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fbd9 	bl	800146c <laser_write_u8>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001cbe:	197b      	adds	r3, r7, r5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <laser_init+0x6f2>
		return status;
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f000 fc93 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x51, 0x00);
 8001cce:	251d      	movs	r5, #29
 8001cd0:	197c      	adds	r4, r7, r5
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2151      	movs	r1, #81	; 0x51
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff fbc7 	bl	800146c <laser_write_u8>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ce2:	197b      	adds	r3, r7, r5
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <laser_init+0x716>
		return status;
 8001cea:	197b      	adds	r3, r7, r5
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f000 fc81 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x52, 0x96);
 8001cf2:	251d      	movs	r5, #29
 8001cf4:	197c      	adds	r4, r7, r5
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2296      	movs	r2, #150	; 0x96
 8001cfa:	2152      	movs	r1, #82	; 0x52
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fbb5 	bl	800146c <laser_write_u8>
 8001d02:	0003      	movs	r3, r0
 8001d04:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d06:	197b      	adds	r3, r7, r5
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <laser_init+0x73a>
		return status;
 8001d0e:	197b      	adds	r3, r7, r5
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f000 fc6f 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x56, 0x08);
 8001d16:	251d      	movs	r5, #29
 8001d18:	197c      	adds	r4, r7, r5
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	2156      	movs	r1, #86	; 0x56
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fba3 	bl	800146c <laser_write_u8>
 8001d26:	0003      	movs	r3, r0
 8001d28:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d2a:	197b      	adds	r3, r7, r5
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <laser_init+0x75e>
		return status;
 8001d32:	197b      	adds	r3, r7, r5
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f000 fc5d 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x57, 0x30);
 8001d3a:	251d      	movs	r5, #29
 8001d3c:	197c      	adds	r4, r7, r5
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2230      	movs	r2, #48	; 0x30
 8001d42:	2157      	movs	r1, #87	; 0x57
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fb91 	bl	800146c <laser_write_u8>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d4e:	197b      	adds	r3, r7, r5
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <laser_init+0x782>
		return status;
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f000 fc4b 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x61, 0x00);
 8001d5e:	251d      	movs	r5, #29
 8001d60:	197c      	adds	r4, r7, r5
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2161      	movs	r1, #97	; 0x61
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fb7f 	bl	800146c <laser_write_u8>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d72:	197b      	adds	r3, r7, r5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <laser_init+0x7a6>
		return status;
 8001d7a:	197b      	adds	r3, r7, r5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f000 fc39 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x62, 0x00);
 8001d82:	251d      	movs	r5, #29
 8001d84:	197c      	adds	r4, r7, r5
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2162      	movs	r1, #98	; 0x62
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fb6d 	bl	800146c <laser_write_u8>
 8001d92:	0003      	movs	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d96:	197b      	adds	r3, r7, r5
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <laser_init+0x7ca>
		return status;
 8001d9e:	197b      	adds	r3, r7, r5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f000 fc27 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x64, 0x00);
 8001da6:	251d      	movs	r5, #29
 8001da8:	197c      	adds	r4, r7, r5
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2164      	movs	r1, #100	; 0x64
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fb5b 	bl	800146c <laser_write_u8>
 8001db6:	0003      	movs	r3, r0
 8001db8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <laser_init+0x7ee>
		return status;
 8001dc2:	197b      	adds	r3, r7, r5
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f000 fc15 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x65, 0x00);
 8001dca:	251d      	movs	r5, #29
 8001dcc:	197c      	adds	r4, r7, r5
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2165      	movs	r1, #101	; 0x65
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fb49 	bl	800146c <laser_write_u8>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <laser_init+0x812>
		return status;
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f000 fc03 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x66, 0xA0);
 8001dee:	251d      	movs	r5, #29
 8001df0:	197c      	adds	r4, r7, r5
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	22a0      	movs	r2, #160	; 0xa0
 8001df6:	2166      	movs	r1, #102	; 0x66
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fb37 	bl	800146c <laser_write_u8>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <laser_init+0x836>
		return status;
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f000 fbf1 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001e12:	251d      	movs	r5, #29
 8001e14:	197c      	adds	r4, r7, r5
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	21ff      	movs	r1, #255	; 0xff
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fb25 	bl	800146c <laser_write_u8>
 8001e22:	0003      	movs	r3, r0
 8001e24:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e26:	197b      	adds	r3, r7, r5
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <laser_init+0x85a>
		return status;
 8001e2e:	197b      	adds	r3, r7, r5
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f000 fbdf 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x22, 0x32);
 8001e36:	251d      	movs	r5, #29
 8001e38:	197c      	adds	r4, r7, r5
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2232      	movs	r2, #50	; 0x32
 8001e3e:	2122      	movs	r1, #34	; 0x22
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff fb13 	bl	800146c <laser_write_u8>
 8001e46:	0003      	movs	r3, r0
 8001e48:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e4a:	197b      	adds	r3, r7, r5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <laser_init+0x87e>
		return status;
 8001e52:	197b      	adds	r3, r7, r5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f000 fbcd 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x47, 0x14);
 8001e5a:	251d      	movs	r5, #29
 8001e5c:	197c      	adds	r4, r7, r5
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2214      	movs	r2, #20
 8001e62:	2147      	movs	r1, #71	; 0x47
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff fb01 	bl	800146c <laser_write_u8>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <laser_init+0x8a2>
		return status;
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f000 fbbb 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x49, 0xFF);
 8001e7e:	251d      	movs	r5, #29
 8001e80:	197c      	adds	r4, r7, r5
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	2149      	movs	r1, #73	; 0x49
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff faef 	bl	800146c <laser_write_u8>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e92:	197b      	adds	r3, r7, r5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <laser_init+0x8c6>
		return status;
 8001e9a:	197b      	adds	r3, r7, r5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f000 fba9 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4A, 0x00);
 8001ea2:	251d      	movs	r5, #29
 8001ea4:	197c      	adds	r4, r7, r5
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	214a      	movs	r1, #74	; 0x4a
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fadd 	bl	800146c <laser_write_u8>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001eb6:	197b      	adds	r3, r7, r5
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <laser_init+0x8ea>
		return status;
 8001ebe:	197b      	adds	r3, r7, r5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	f000 fb97 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8001ec6:	251d      	movs	r5, #29
 8001ec8:	197c      	adds	r4, r7, r5
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	21ff      	movs	r1, #255	; 0xff
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff facb 	bl	800146c <laser_write_u8>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001eda:	197b      	adds	r3, r7, r5
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <laser_init+0x90e>
		return status;
 8001ee2:	197b      	adds	r3, r7, r5
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f000 fb85 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x7A, 0x0A);
 8001eea:	251d      	movs	r5, #29
 8001eec:	197c      	adds	r4, r7, r5
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	217a      	movs	r1, #122	; 0x7a
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff fab9 	bl	800146c <laser_write_u8>
 8001efa:	0003      	movs	r3, r0
 8001efc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001efe:	197b      	adds	r3, r7, r5
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <laser_init+0x932>
		return status;
 8001f06:	197b      	adds	r3, r7, r5
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f000 fb73 	bl	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x7B, 0x00);
 8001f0e:	251d      	movs	r5, #29
 8001f10:	197c      	adds	r4, r7, r5
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	217b      	movs	r1, #123	; 0x7b
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff faa7 	bl	800146c <laser_write_u8>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f22:	197b      	adds	r3, r7, r5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <laser_init+0x954>
		return status;
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	e361      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x78, 0x21);
 8001f30:	251d      	movs	r5, #29
 8001f32:	197c      	adds	r4, r7, r5
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff fa96 	bl	800146c <laser_write_u8>
 8001f40:	0003      	movs	r3, r0
 8001f42:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f44:	197b      	adds	r3, r7, r5
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <laser_init+0x976>
		return status;
 8001f4c:	197b      	adds	r3, r7, r5
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	e350      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001f52:	251d      	movs	r5, #29
 8001f54:	197c      	adds	r4, r7, r5
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	21ff      	movs	r1, #255	; 0xff
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff fa85 	bl	800146c <laser_write_u8>
 8001f62:	0003      	movs	r3, r0
 8001f64:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <laser_init+0x998>
		return status;
 8001f6e:	197b      	adds	r3, r7, r5
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	e33f      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x23, 0x34);
 8001f74:	251d      	movs	r5, #29
 8001f76:	197c      	adds	r4, r7, r5
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2234      	movs	r2, #52	; 0x34
 8001f7c:	2123      	movs	r1, #35	; 0x23
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff fa74 	bl	800146c <laser_write_u8>
 8001f84:	0003      	movs	r3, r0
 8001f86:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f88:	197b      	adds	r3, r7, r5
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <laser_init+0x9ba>
		return status;
 8001f90:	197b      	adds	r3, r7, r5
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	e32e      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x42, 0x00);
 8001f96:	251d      	movs	r5, #29
 8001f98:	197c      	adds	r4, r7, r5
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2142      	movs	r1, #66	; 0x42
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff fa63 	bl	800146c <laser_write_u8>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001faa:	197b      	adds	r3, r7, r5
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <laser_init+0x9dc>
		return status;
 8001fb2:	197b      	adds	r3, r7, r5
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	e31d      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x44, 0xFF);
 8001fb8:	251d      	movs	r5, #29
 8001fba:	197c      	adds	r4, r7, r5
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	2144      	movs	r1, #68	; 0x44
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7ff fa52 	bl	800146c <laser_write_u8>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001fcc:	197b      	adds	r3, r7, r5
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <laser_init+0x9fe>
		return status;
 8001fd4:	197b      	adds	r3, r7, r5
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	e30c      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x45, 0x26);
 8001fda:	251d      	movs	r5, #29
 8001fdc:	197c      	adds	r4, r7, r5
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2226      	movs	r2, #38	; 0x26
 8001fe2:	2145      	movs	r1, #69	; 0x45
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff fa41 	bl	800146c <laser_write_u8>
 8001fea:	0003      	movs	r3, r0
 8001fec:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001fee:	197b      	adds	r3, r7, r5
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <laser_init+0xa20>
		return status;
 8001ff6:	197b      	adds	r3, r7, r5
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	e2fb      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x46, 0x05);
 8001ffc:	251d      	movs	r5, #29
 8001ffe:	197c      	adds	r4, r7, r5
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2205      	movs	r2, #5
 8002004:	2146      	movs	r1, #70	; 0x46
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fa30 	bl	800146c <laser_write_u8>
 800200c:	0003      	movs	r3, r0
 800200e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002010:	197b      	adds	r3, r7, r5
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <laser_init+0xa42>
		return status;
 8002018:	197b      	adds	r3, r7, r5
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	e2ea      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x40, 0x40);
 800201e:	251d      	movs	r5, #29
 8002020:	197c      	adds	r4, r7, r5
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff fa1f 	bl	800146c <laser_write_u8>
 800202e:	0003      	movs	r3, r0
 8002030:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002032:	197b      	adds	r3, r7, r5
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <laser_init+0xa64>
		return status;
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	e2d9      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x0E, 0x06);
 8002040:	251d      	movs	r5, #29
 8002042:	197c      	adds	r4, r7, r5
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2206      	movs	r2, #6
 8002048:	210e      	movs	r1, #14
 800204a:	0018      	movs	r0, r3
 800204c:	f7ff fa0e 	bl	800146c <laser_write_u8>
 8002050:	0003      	movs	r3, r0
 8002052:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002054:	197b      	adds	r3, r7, r5
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <laser_init+0xa86>
		return status;
 800205c:	197b      	adds	r3, r7, r5
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	e2c8      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x20, 0x1A);
 8002062:	251d      	movs	r5, #29
 8002064:	197c      	adds	r4, r7, r5
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	221a      	movs	r2, #26
 800206a:	2120      	movs	r1, #32
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff f9fd 	bl	800146c <laser_write_u8>
 8002072:	0003      	movs	r3, r0
 8002074:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002076:	197b      	adds	r3, r7, r5
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <laser_init+0xaa8>
		return status;
 800207e:	197b      	adds	r3, r7, r5
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	e2b7      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x43, 0x40);
 8002084:	251d      	movs	r5, #29
 8002086:	197c      	adds	r4, r7, r5
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2240      	movs	r2, #64	; 0x40
 800208c:	2143      	movs	r1, #67	; 0x43
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff f9ec 	bl	800146c <laser_write_u8>
 8002094:	0003      	movs	r3, r0
 8002096:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002098:	197b      	adds	r3, r7, r5
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <laser_init+0xaca>
		return status;
 80020a0:	197b      	adds	r3, r7, r5
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	e2a6      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80020a6:	251d      	movs	r5, #29
 80020a8:	197c      	adds	r4, r7, r5
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	21ff      	movs	r1, #255	; 0xff
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff f9db 	bl	800146c <laser_write_u8>
 80020b6:	0003      	movs	r3, r0
 80020b8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020ba:	197b      	adds	r3, r7, r5
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <laser_init+0xaec>
		return status;
 80020c2:	197b      	adds	r3, r7, r5
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	e295      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x34, 0x03);
 80020c8:	251d      	movs	r5, #29
 80020ca:	197c      	adds	r4, r7, r5
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	2134      	movs	r1, #52	; 0x34
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff f9ca 	bl	800146c <laser_write_u8>
 80020d8:	0003      	movs	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020dc:	197b      	adds	r3, r7, r5
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <laser_init+0xb0e>
		return status;
 80020e4:	197b      	adds	r3, r7, r5
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	e284      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x35, 0x44);
 80020ea:	251d      	movs	r5, #29
 80020ec:	197c      	adds	r4, r7, r5
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2244      	movs	r2, #68	; 0x44
 80020f2:	2135      	movs	r1, #53	; 0x35
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff f9b9 	bl	800146c <laser_write_u8>
 80020fa:	0003      	movs	r3, r0
 80020fc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <laser_init+0xb30>
		return status;
 8002106:	197b      	adds	r3, r7, r5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	e273      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800210c:	251d      	movs	r5, #29
 800210e:	197c      	adds	r4, r7, r5
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	21ff      	movs	r1, #255	; 0xff
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff f9a8 	bl	800146c <laser_write_u8>
 800211c:	0003      	movs	r3, r0
 800211e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002120:	197b      	adds	r3, r7, r5
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <laser_init+0xb52>
		return status;
 8002128:	197b      	adds	r3, r7, r5
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	e262      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x31, 0x04);
 800212e:	251d      	movs	r5, #29
 8002130:	197c      	adds	r4, r7, r5
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	2131      	movs	r1, #49	; 0x31
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff f997 	bl	800146c <laser_write_u8>
 800213e:	0003      	movs	r3, r0
 8002140:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002142:	197b      	adds	r3, r7, r5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <laser_init+0xb74>
		return status;
 800214a:	197b      	adds	r3, r7, r5
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	e251      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4B, 0x09);
 8002150:	251d      	movs	r5, #29
 8002152:	197c      	adds	r4, r7, r5
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2209      	movs	r2, #9
 8002158:	214b      	movs	r1, #75	; 0x4b
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff f986 	bl	800146c <laser_write_u8>
 8002160:	0003      	movs	r3, r0
 8002162:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002164:	197b      	adds	r3, r7, r5
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <laser_init+0xb96>
		return status;
 800216c:	197b      	adds	r3, r7, r5
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	e240      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4C, 0x05);
 8002172:	251d      	movs	r5, #29
 8002174:	197c      	adds	r4, r7, r5
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	214c      	movs	r1, #76	; 0x4c
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff f975 	bl	800146c <laser_write_u8>
 8002182:	0003      	movs	r3, r0
 8002184:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002186:	197b      	adds	r3, r7, r5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <laser_init+0xbb8>
		return status;
 800218e:	197b      	adds	r3, r7, r5
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	e22f      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4D, 0x04);
 8002194:	251d      	movs	r5, #29
 8002196:	197c      	adds	r4, r7, r5
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	214d      	movs	r1, #77	; 0x4d
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff f964 	bl	800146c <laser_write_u8>
 80021a4:	0003      	movs	r3, r0
 80021a6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021a8:	197b      	adds	r3, r7, r5
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <laser_init+0xbda>
		return status;
 80021b0:	197b      	adds	r3, r7, r5
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	e21e      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80021b6:	251d      	movs	r5, #29
 80021b8:	197c      	adds	r4, r7, r5
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff f953 	bl	800146c <laser_write_u8>
 80021c6:	0003      	movs	r3, r0
 80021c8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021ca:	197b      	adds	r3, r7, r5
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <laser_init+0xbfc>
		return status;
 80021d2:	197b      	adds	r3, r7, r5
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	e20d      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x44, 0x00);
 80021d8:	251d      	movs	r5, #29
 80021da:	197c      	adds	r4, r7, r5
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	2144      	movs	r1, #68	; 0x44
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff f942 	bl	800146c <laser_write_u8>
 80021e8:	0003      	movs	r3, r0
 80021ea:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021ec:	197b      	adds	r3, r7, r5
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <laser_init+0xc1e>
		return status;
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	e1fc      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x45, 0x20);
 80021fa:	251d      	movs	r5, #29
 80021fc:	197c      	adds	r4, r7, r5
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	2145      	movs	r1, #69	; 0x45
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff f931 	bl	800146c <laser_write_u8>
 800220a:	0003      	movs	r3, r0
 800220c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800220e:	197b      	adds	r3, r7, r5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <laser_init+0xc40>
		return status;
 8002216:	197b      	adds	r3, r7, r5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	e1eb      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x47, 0x08);
 800221c:	251d      	movs	r5, #29
 800221e:	197c      	adds	r4, r7, r5
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2208      	movs	r2, #8
 8002224:	2147      	movs	r1, #71	; 0x47
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff f920 	bl	800146c <laser_write_u8>
 800222c:	0003      	movs	r3, r0
 800222e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002230:	197b      	adds	r3, r7, r5
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <laser_init+0xc62>
		return status;
 8002238:	197b      	adds	r3, r7, r5
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	e1da      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x48, 0x28);
 800223e:	251d      	movs	r5, #29
 8002240:	197c      	adds	r4, r7, r5
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2228      	movs	r2, #40	; 0x28
 8002246:	2148      	movs	r1, #72	; 0x48
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff f90f 	bl	800146c <laser_write_u8>
 800224e:	0003      	movs	r3, r0
 8002250:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002252:	197b      	adds	r3, r7, r5
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <laser_init+0xc84>
		return status;
 800225a:	197b      	adds	r3, r7, r5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	e1c9      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x67, 0x00);
 8002260:	251d      	movs	r5, #29
 8002262:	197c      	adds	r4, r7, r5
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	2167      	movs	r1, #103	; 0x67
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff f8fe 	bl	800146c <laser_write_u8>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002274:	197b      	adds	r3, r7, r5
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <laser_init+0xca6>
		return status;
 800227c:	197b      	adds	r3, r7, r5
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	e1b8      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x70, 0x04);
 8002282:	251d      	movs	r5, #29
 8002284:	197c      	adds	r4, r7, r5
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2204      	movs	r2, #4
 800228a:	2170      	movs	r1, #112	; 0x70
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff f8ed 	bl	800146c <laser_write_u8>
 8002292:	0003      	movs	r3, r0
 8002294:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002296:	197b      	adds	r3, r7, r5
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <laser_init+0xcc8>
		return status;
 800229e:	197b      	adds	r3, r7, r5
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	e1a7      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x71, 0x01);
 80022a4:	251d      	movs	r5, #29
 80022a6:	197c      	adds	r4, r7, r5
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	2171      	movs	r1, #113	; 0x71
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff f8dc 	bl	800146c <laser_write_u8>
 80022b4:	0003      	movs	r3, r0
 80022b6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022b8:	197b      	adds	r3, r7, r5
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <laser_init+0xcea>
		return status;
 80022c0:	197b      	adds	r3, r7, r5
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	e196      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x72, 0xFE);
 80022c6:	251d      	movs	r5, #29
 80022c8:	197c      	adds	r4, r7, r5
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	22fe      	movs	r2, #254	; 0xfe
 80022ce:	2172      	movs	r1, #114	; 0x72
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff f8cb 	bl	800146c <laser_write_u8>
 80022d6:	0003      	movs	r3, r0
 80022d8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022da:	197b      	adds	r3, r7, r5
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <laser_init+0xd0c>
		return status;
 80022e2:	197b      	adds	r3, r7, r5
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	e185      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x76, 0x00);
 80022e8:	251d      	movs	r5, #29
 80022ea:	197c      	adds	r4, r7, r5
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2176      	movs	r1, #118	; 0x76
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff f8ba 	bl	800146c <laser_write_u8>
 80022f8:	0003      	movs	r3, r0
 80022fa:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022fc:	197b      	adds	r3, r7, r5
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <laser_init+0xd2e>
		return status;
 8002304:	197b      	adds	r3, r7, r5
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	e174      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x77, 0x00);
 800230a:	251d      	movs	r5, #29
 800230c:	197c      	adds	r4, r7, r5
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	2177      	movs	r1, #119	; 0x77
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff f8a9 	bl	800146c <laser_write_u8>
 800231a:	0003      	movs	r3, r0
 800231c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800231e:	197b      	adds	r3, r7, r5
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <laser_init+0xd50>
		return status;
 8002326:	197b      	adds	r3, r7, r5
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	e163      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800232c:	251d      	movs	r5, #29
 800232e:	197c      	adds	r4, r7, r5
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	21ff      	movs	r1, #255	; 0xff
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff f898 	bl	800146c <laser_write_u8>
 800233c:	0003      	movs	r3, r0
 800233e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002340:	197b      	adds	r3, r7, r5
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <laser_init+0xd72>
		return status;
 8002348:	197b      	adds	r3, r7, r5
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	e152      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x0D, 0x01);
 800234e:	251d      	movs	r5, #29
 8002350:	197c      	adds	r4, r7, r5
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	210d      	movs	r1, #13
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff f887 	bl	800146c <laser_write_u8>
 800235e:	0003      	movs	r3, r0
 8002360:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002362:	197b      	adds	r3, r7, r5
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <laser_init+0xd94>
		return status;
 800236a:	197b      	adds	r3, r7, r5
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	e141      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8002370:	251d      	movs	r5, #29
 8002372:	197c      	adds	r4, r7, r5
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	21ff      	movs	r1, #255	; 0xff
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff f876 	bl	800146c <laser_write_u8>
 8002380:	0003      	movs	r3, r0
 8002382:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002384:	197b      	adds	r3, r7, r5
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <laser_init+0xdb6>
		return status;
 800238c:	197b      	adds	r3, r7, r5
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	e130      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x01);
 8002392:	251d      	movs	r5, #29
 8002394:	197c      	adds	r4, r7, r5
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff f865 	bl	800146c <laser_write_u8>
 80023a2:	0003      	movs	r3, r0
 80023a4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023a6:	197b      	adds	r3, r7, r5
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <laser_init+0xdd8>
		return status;
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	e11f      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x01, 0xF8);
 80023b4:	251d      	movs	r5, #29
 80023b6:	197c      	adds	r4, r7, r5
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	22f8      	movs	r2, #248	; 0xf8
 80023bc:	2101      	movs	r1, #1
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff f854 	bl	800146c <laser_write_u8>
 80023c4:	0003      	movs	r3, r0
 80023c6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023c8:	197b      	adds	r3, r7, r5
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <laser_init+0xdfa>
		return status;
 80023d0:	197b      	adds	r3, r7, r5
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	e10e      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 80023d6:	251d      	movs	r5, #29
 80023d8:	197c      	adds	r4, r7, r5
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	21ff      	movs	r1, #255	; 0xff
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff f843 	bl	800146c <laser_write_u8>
 80023e6:	0003      	movs	r3, r0
 80023e8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023ea:	197b      	adds	r3, r7, r5
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <laser_init+0xe1c>
		return status;
 80023f2:	197b      	adds	r3, r7, r5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	e0fd      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x8E, 0x01);
 80023f8:	251d      	movs	r5, #29
 80023fa:	197c      	adds	r4, r7, r5
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	218e      	movs	r1, #142	; 0x8e
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff f832 	bl	800146c <laser_write_u8>
 8002408:	0003      	movs	r3, r0
 800240a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800240c:	197b      	adds	r3, r7, r5
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <laser_init+0xe3e>
		return status;
 8002414:	197b      	adds	r3, r7, r5
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	e0ec      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x01);
 800241a:	251d      	movs	r5, #29
 800241c:	197c      	adds	r4, r7, r5
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	2100      	movs	r1, #0
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff f821 	bl	800146c <laser_write_u8>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <laser_init+0xe60>
		return status;
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	e0db      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 800243c:	251d      	movs	r5, #29
 800243e:	197c      	adds	r4, r7, r5
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	21ff      	movs	r1, #255	; 0xff
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff f810 	bl	800146c <laser_write_u8>
 800244c:	0003      	movs	r3, r0
 800244e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002450:	197b      	adds	r3, r7, r5
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <laser_init+0xe82>
		return status;
 8002458:	197b      	adds	r3, r7, r5
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	e0ca      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x00);
 800245e:	251d      	movs	r5, #29
 8002460:	197c      	adds	r4, r7, r5
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe ffff 	bl	800146c <laser_write_u8>
 800246e:	0003      	movs	r3, r0
 8002470:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002472:	197b      	adds	r3, r7, r5
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <laser_init+0xea4>
		return status;
 800247a:	197b      	adds	r3, r7, r5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	e0b9      	b.n	80025f4 <laser_init+0x1018>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002480:	251d      	movs	r5, #29
 8002482:	197c      	adds	r4, r7, r5
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	210a      	movs	r1, #10
 800248a:	0018      	movs	r0, r3
 800248c:	f7fe ffee 	bl	800146c <laser_write_u8>
 8002490:	0003      	movs	r3, r0
 8002492:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002494:	197b      	adds	r3, r7, r5
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <laser_init+0xec6>
		return status;
 800249c:	197b      	adds	r3, r7, r5
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	e0a8      	b.n	80025f4 <laser_init+0x1018>

	uint8_t tmp;
	status = laser_read_u8(laser, GPIO_HV_MUX_ACTIVE_HIGH, &tmp);
 80024a2:	251d      	movs	r5, #29
 80024a4:	197c      	adds	r4, r7, r5
 80024a6:	230f      	movs	r3, #15
 80024a8:	18fa      	adds	r2, r7, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2184      	movs	r1, #132	; 0x84
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7ff f80c 	bl	80014cc <laser_read_u8>
 80024b4:	0003      	movs	r3, r0
 80024b6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80024b8:	197b      	adds	r3, r7, r5
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <laser_init+0xeea>
		return status;
 80024c0:	197b      	adds	r3, r7, r5
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	e096      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, GPIO_HV_MUX_ACTIVE_HIGH, tmp & ~0x10); // active low
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	4393      	bics	r3, r2
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	251d      	movs	r5, #29
 80024d4:	197c      	adds	r4, r7, r5
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2184      	movs	r1, #132	; 0x84
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fe ffc6 	bl	800146c <laser_write_u8>
 80024e0:	0003      	movs	r3, r0
 80024e2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80024e4:	197b      	adds	r3, r7, r5
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <laser_init+0xf16>
		return status;
 80024ec:	197b      	adds	r3, r7, r5
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	e080      	b.n	80025f4 <laser_init+0x1018>

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80024f2:	251d      	movs	r5, #29
 80024f4:	197c      	adds	r4, r7, r5
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	210b      	movs	r1, #11
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe ffb5 	bl	800146c <laser_write_u8>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <laser_init+0xf38>
		return status;
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	e06f      	b.n	80025f4 <laser_init+0x1018>
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8002514:	251d      	movs	r5, #29
 8002516:	197c      	adds	r4, r7, r5
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	22e8      	movs	r2, #232	; 0xe8
 800251c:	2101      	movs	r1, #1
 800251e:	0018      	movs	r0, r3
 8002520:	f7fe ffa4 	bl	800146c <laser_write_u8>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002528:	197b      	adds	r3, r7, r5
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <laser_init+0xf5a>
		return status;
 8002530:	197b      	adds	r3, r7, r5
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	e05e      	b.n	80025f4 <laser_init+0x1018>

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	status = laser_set_timing_budget(laser, TIMING_BUDGET);
 8002536:	251d      	movs	r5, #29
 8002538:	197c      	adds	r4, r7, r5
 800253a:	4a30      	ldr	r2, [pc, #192]	; (80025fc <laser_init+0x1020>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fc75 	bl	8002e30 <laser_set_timing_budget>
 8002546:	0003      	movs	r3, r0
 8002548:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800254a:	197b      	adds	r3, r7, r5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <laser_init+0xf7c>
		return status;
 8002552:	197b      	adds	r3, r7, r5
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	e04d      	b.n	80025f4 <laser_init+0x1018>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002558:	251d      	movs	r5, #29
 800255a:	197c      	adds	r4, r7, r5
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	2101      	movs	r1, #1
 8002562:	0018      	movs	r0, r3
 8002564:	f7fe ff82 	bl	800146c <laser_write_u8>
 8002568:	0003      	movs	r3, r0
 800256a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800256c:	197b      	adds	r3, r7, r5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <laser_init+0xf9e>
		return status;
 8002574:	197b      	adds	r3, r7, r5
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	e03c      	b.n	80025f4 <laser_init+0x1018>

	status = laser_calibrate(laser, 0x40);
 800257a:	251d      	movs	r5, #29
 800257c:	197c      	adds	r4, r7, r5
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	0018      	movs	r0, r3
 8002584:	f7fe ffcc 	bl	8001520 <laser_calibrate>
 8002588:	0003      	movs	r3, r0
 800258a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800258c:	197b      	adds	r3, r7, r5
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <laser_init+0xfbe>
		return status;
 8002594:	197b      	adds	r3, r7, r5
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	e02c      	b.n	80025f4 <laser_init+0x1018>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0x02);
 800259a:	251d      	movs	r5, #29
 800259c:	197c      	adds	r4, r7, r5
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	2101      	movs	r1, #1
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7fe ff61 	bl	800146c <laser_write_u8>
 80025aa:	0003      	movs	r3, r0
 80025ac:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80025ae:	197b      	adds	r3, r7, r5
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <laser_init+0xfe0>
		return status;
 80025b6:	197b      	adds	r3, r7, r5
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	e01b      	b.n	80025f4 <laser_init+0x1018>

	status = laser_calibrate(laser, 0x00);
 80025bc:	251d      	movs	r5, #29
 80025be:	197c      	adds	r4, r7, r5
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2100      	movs	r1, #0
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fe ffab 	bl	8001520 <laser_calibrate>
 80025ca:	0003      	movs	r3, r0
 80025cc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80025ce:	197b      	adds	r3, r7, r5
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <laser_init+0x1000>
		return status;
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	e00b      	b.n	80025f4 <laser_init+0x1018>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80025dc:	251d      	movs	r5, #29
 80025de:	197c      	adds	r4, r7, r5
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	22e8      	movs	r2, #232	; 0xe8
 80025e4:	2101      	movs	r1, #1
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fe ff40 	bl	800146c <laser_write_u8>
 80025ec:	0003      	movs	r3, r0
 80025ee:	7023      	strb	r3, [r4, #0]
	// VL53L0X_PerformRefCalibration() end

	return status;
 80025f0:	197b      	adds	r3, r7, r5
 80025f2:	781b      	ldrb	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b008      	add	sp, #32
 80025fa:	bdb0      	pop	{r4, r5, r7, pc}
 80025fc:	0000c350 	.word	0x0000c350

08002600 <laser_set_signal_rate>:

HAL_StatusTypeDef laser_set_signal_rate(laser_handle* laser, float limit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	if (limit < 0.f || limit > 511.99f)
 800260a:	2100      	movs	r1, #0
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f7fd feff 	bl	8000410 <__aeabi_fcmplt>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d105      	bne.n	8002622 <laser_set_signal_rate+0x22>
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <laser_set_signal_rate+0x50>)
 8002618:	6838      	ldr	r0, [r7, #0]
 800261a:	f7fd ff0d 	bl	8000438 <__aeabi_fcmpgt>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <laser_set_signal_rate+0x26>
		return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e010      	b.n	8002648 <laser_set_signal_rate+0x48>

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	return laser_write_u16(laser, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit * (1 << 7));
 8002626:	2186      	movs	r1, #134	; 0x86
 8002628:	05c9      	lsls	r1, r1, #23
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f7fe fa96 	bl	8000b5c <__aeabi_fmul>
 8002630:	1c03      	adds	r3, r0, #0
 8002632:	1c18      	adds	r0, r3, #0
 8002634:	f7fd ff14 	bl	8000460 <__aeabi_f2uiz>
 8002638:	0003      	movs	r3, r0
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2144      	movs	r1, #68	; 0x44
 8002640:	0018      	movs	r0, r3
 8002642:	f7fe ff2b 	bl	800149c <laser_write_u16>
 8002646:	0003      	movs	r3, r0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}
 8002650:	43fffeb8 	.word	0x43fffeb8

08002654 <laser_get_spad>:

	return status;
}

HAL_StatusTypeDef laser_get_spad(laser_handle* laser, uint8_t* count, uint8_t* type_is_aperture)
{
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t tmp;

	status = laser_write_u8(laser, 0x80, 0x01);
 8002660:	251f      	movs	r5, #31
 8002662:	197c      	adds	r4, r7, r5
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0018      	movs	r0, r3
 800266c:	f7fe fefe 	bl	800146c <laser_write_u8>
 8002670:	0003      	movs	r3, r0
 8002672:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002674:	197b      	adds	r3, r7, r5
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <laser_get_spad+0x2e>
		return status;
 800267c:	197b      	adds	r3, r7, r5
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	e1a6      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8002682:	251f      	movs	r5, #31
 8002684:	197c      	adds	r4, r7, r5
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	21ff      	movs	r1, #255	; 0xff
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe feed 	bl	800146c <laser_write_u8>
 8002692:	0003      	movs	r3, r0
 8002694:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002696:	197b      	adds	r3, r7, r5
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <laser_get_spad+0x50>
		return status;
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	e195      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x00, 0x00);
 80026a4:	251f      	movs	r5, #31
 80026a6:	197c      	adds	r4, r7, r5
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7fe fedc 	bl	800146c <laser_write_u8>
 80026b4:	0003      	movs	r3, r0
 80026b6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80026b8:	197b      	adds	r3, r7, r5
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <laser_get_spad+0x72>
		return status;
 80026c0:	197b      	adds	r3, r7, r5
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	e184      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x06);
 80026c6:	251f      	movs	r5, #31
 80026c8:	197c      	adds	r4, r7, r5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2206      	movs	r2, #6
 80026ce:	21ff      	movs	r1, #255	; 0xff
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe fecb 	bl	800146c <laser_write_u8>
 80026d6:	0003      	movs	r3, r0
 80026d8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80026da:	197b      	adds	r3, r7, r5
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <laser_get_spad+0x94>
		return status;
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	e173      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x83, &tmp);
 80026e8:	251f      	movs	r5, #31
 80026ea:	197c      	adds	r4, r7, r5
 80026ec:	2317      	movs	r3, #23
 80026ee:	18fa      	adds	r2, r7, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2183      	movs	r1, #131	; 0x83
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fee9 	bl	80014cc <laser_read_u8>
 80026fa:	0003      	movs	r3, r0
 80026fc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80026fe:	197b      	adds	r3, r7, r5
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <laser_get_spad+0xb8>
		return status;
 8002706:	197b      	adds	r3, r7, r5
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	e161      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, tmp | 0x04);
 800270c:	2317      	movs	r3, #23
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2204      	movs	r2, #4
 8002714:	4313      	orrs	r3, r2
 8002716:	b2da      	uxtb	r2, r3
 8002718:	251f      	movs	r5, #31
 800271a:	197c      	adds	r4, r7, r5
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2183      	movs	r1, #131	; 0x83
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe fea3 	bl	800146c <laser_write_u8>
 8002726:	0003      	movs	r3, r0
 8002728:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800272a:	197b      	adds	r3, r7, r5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <laser_get_spad+0xe4>
		return status;
 8002732:	197b      	adds	r3, r7, r5
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	e14b      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x07);
 8002738:	251f      	movs	r5, #31
 800273a:	197c      	adds	r4, r7, r5
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2207      	movs	r2, #7
 8002740:	21ff      	movs	r1, #255	; 0xff
 8002742:	0018      	movs	r0, r3
 8002744:	f7fe fe92 	bl	800146c <laser_write_u8>
 8002748:	0003      	movs	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800274c:	197b      	adds	r3, r7, r5
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <laser_get_spad+0x106>
		return status;
 8002754:	197b      	adds	r3, r7, r5
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	e13a      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x81, 0x01);
 800275a:	251f      	movs	r5, #31
 800275c:	197c      	adds	r4, r7, r5
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	2181      	movs	r1, #129	; 0x81
 8002764:	0018      	movs	r0, r3
 8002766:	f7fe fe81 	bl	800146c <laser_write_u8>
 800276a:	0003      	movs	r3, r0
 800276c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800276e:	197b      	adds	r3, r7, r5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <laser_get_spad+0x128>
		return status;
 8002776:	197b      	adds	r3, r7, r5
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	e129      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x80, 0x01);
 800277c:	251f      	movs	r5, #31
 800277e:	197c      	adds	r4, r7, r5
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe fe70 	bl	800146c <laser_write_u8>
 800278c:	0003      	movs	r3, r0
 800278e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002790:	197b      	adds	r3, r7, r5
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <laser_get_spad+0x14a>
		return status;
 8002798:	197b      	adds	r3, r7, r5
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	e118      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x94, 0x6b);
 800279e:	251f      	movs	r5, #31
 80027a0:	197c      	adds	r4, r7, r5
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	226b      	movs	r2, #107	; 0x6b
 80027a6:	2194      	movs	r1, #148	; 0x94
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7fe fe5f 	bl	800146c <laser_write_u8>
 80027ae:	0003      	movs	r3, r0
 80027b0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80027b2:	197b      	adds	r3, r7, r5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <laser_get_spad+0x16c>
		return status;
 80027ba:	197b      	adds	r3, r7, r5
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	e107      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, 0x00);
 80027c0:	251f      	movs	r5, #31
 80027c2:	197c      	adds	r4, r7, r5
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2183      	movs	r1, #131	; 0x83
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7fe fe4e 	bl	800146c <laser_write_u8>
 80027d0:	0003      	movs	r3, r0
 80027d2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80027d4:	197b      	adds	r3, r7, r5
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <laser_get_spad+0x18e>
		return status;
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	e0f6      	b.n	80029d0 <laser_get_spad+0x37c>

	const uint32_t ticks = HAL_GetTick();
 80027e2:	f002 febb 	bl	800555c <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	61bb      	str	r3, [r7, #24]
	do
	{
		status = laser_read_u8(laser, 0x83, &tmp);
 80027ea:	251f      	movs	r5, #31
 80027ec:	197c      	adds	r4, r7, r5
 80027ee:	2317      	movs	r3, #23
 80027f0:	18fa      	adds	r2, r7, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2183      	movs	r1, #131	; 0x83
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fe fe68 	bl	80014cc <laser_read_u8>
 80027fc:	0003      	movs	r3, r0
 80027fe:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 8002800:	197b      	adds	r3, r7, r5
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <laser_get_spad+0x1ba>
			return status;
 8002808:	197b      	adds	r3, r7, r5
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	e0e0      	b.n	80029d0 <laser_get_spad+0x37c>

		if (HAL_GetTick() - ticks >= laser->timeout)
 800280e:	f002 fea5 	bl	800555c <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	8892      	ldrh	r2, [r2, #4]
 800281c:	4293      	cmp	r3, r2
 800281e:	d301      	bcc.n	8002824 <laser_get_spad+0x1d0>
			return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0d5      	b.n	80029d0 <laser_get_spad+0x37c>
	} while (tmp == 0x00);
 8002824:	2317      	movs	r3, #23
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0dd      	beq.n	80027ea <laser_get_spad+0x196>

	status = laser_write_u8(laser, 0x83, 0x01);
 800282e:	251f      	movs	r5, #31
 8002830:	197c      	adds	r4, r7, r5
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	2183      	movs	r1, #131	; 0x83
 8002838:	0018      	movs	r0, r3
 800283a:	f7fe fe17 	bl	800146c <laser_write_u8>
 800283e:	0003      	movs	r3, r0
 8002840:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002842:	197b      	adds	r3, r7, r5
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <laser_get_spad+0x1fc>
		return status;
 800284a:	197b      	adds	r3, r7, r5
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	e0bf      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, 0x01);
 8002850:	251f      	movs	r5, #31
 8002852:	197c      	adds	r4, r7, r5
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	2183      	movs	r1, #131	; 0x83
 800285a:	0018      	movs	r0, r3
 800285c:	f7fe fe06 	bl	800146c <laser_write_u8>
 8002860:	0003      	movs	r3, r0
 8002862:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002864:	197b      	adds	r3, r7, r5
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <laser_get_spad+0x21e>
		return status;
 800286c:	197b      	adds	r3, r7, r5
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	e0ae      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x92, &tmp);
 8002872:	251f      	movs	r5, #31
 8002874:	197c      	adds	r4, r7, r5
 8002876:	2317      	movs	r3, #23
 8002878:	18fa      	adds	r2, r7, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2192      	movs	r1, #146	; 0x92
 800287e:	0018      	movs	r0, r3
 8002880:	f7fe fe24 	bl	80014cc <laser_read_u8>
 8002884:	0003      	movs	r3, r0
 8002886:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002888:	197b      	adds	r3, r7, r5
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <laser_get_spad+0x242>
		return status;
 8002890:	197b      	adds	r3, r7, r5
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	e09c      	b.n	80029d0 <laser_get_spad+0x37c>

	*count = tmp & 0x7f;
 8002896:	2117      	movs	r1, #23
 8002898:	187b      	adds	r3, r7, r1
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	227f      	movs	r2, #127	; 0x7f
 800289e:	4013      	ands	r3, r2
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	09db      	lsrs	r3, r3, #7
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	701a      	strb	r2, [r3, #0]

	status = laser_write_u8(laser, 0x81, 0x00);
 80028b2:	251f      	movs	r5, #31
 80028b4:	197c      	adds	r4, r7, r5
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2181      	movs	r1, #129	; 0x81
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fe fdd5 	bl	800146c <laser_write_u8>
 80028c2:	0003      	movs	r3, r0
 80028c4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80028c6:	197b      	adds	r3, r7, r5
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <laser_get_spad+0x280>
		return status;
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	e07d      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x06);
 80028d4:	251f      	movs	r5, #31
 80028d6:	197c      	adds	r4, r7, r5
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2206      	movs	r2, #6
 80028dc:	21ff      	movs	r1, #255	; 0xff
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fe fdc4 	bl	800146c <laser_write_u8>
 80028e4:	0003      	movs	r3, r0
 80028e6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80028e8:	197b      	adds	r3, r7, r5
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <laser_get_spad+0x2a2>
		return status;
 80028f0:	197b      	adds	r3, r7, r5
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	e06c      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x83, &tmp);
 80028f6:	251f      	movs	r5, #31
 80028f8:	197c      	adds	r4, r7, r5
 80028fa:	2317      	movs	r3, #23
 80028fc:	18fa      	adds	r2, r7, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2183      	movs	r1, #131	; 0x83
 8002902:	0018      	movs	r0, r3
 8002904:	f7fe fde2 	bl	80014cc <laser_read_u8>
 8002908:	0003      	movs	r3, r0
 800290a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800290c:	197b      	adds	r3, r7, r5
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <laser_get_spad+0x2c6>
		return status;
 8002914:	197b      	adds	r3, r7, r5
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	e05a      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, tmp  & ~0x04);
 800291a:	2317      	movs	r3, #23
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	4393      	bics	r3, r2
 8002924:	b2da      	uxtb	r2, r3
 8002926:	251f      	movs	r5, #31
 8002928:	197c      	adds	r4, r7, r5
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2183      	movs	r1, #131	; 0x83
 800292e:	0018      	movs	r0, r3
 8002930:	f7fe fd9c 	bl	800146c <laser_write_u8>
 8002934:	0003      	movs	r3, r0
 8002936:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002938:	197b      	adds	r3, r7, r5
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <laser_get_spad+0x2f2>
		return status;
 8002940:	197b      	adds	r3, r7, r5
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	e044      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8002946:	251f      	movs	r5, #31
 8002948:	197c      	adds	r4, r7, r5
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	21ff      	movs	r1, #255	; 0xff
 8002950:	0018      	movs	r0, r3
 8002952:	f7fe fd8b 	bl	800146c <laser_write_u8>
 8002956:	0003      	movs	r3, r0
 8002958:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800295a:	197b      	adds	r3, r7, r5
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <laser_get_spad+0x314>
		return status;
 8002962:	197b      	adds	r3, r7, r5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	e033      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x00, 0x01);
 8002968:	251f      	movs	r5, #31
 800296a:	197c      	adds	r4, r7, r5
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	2100      	movs	r1, #0
 8002972:	0018      	movs	r0, r3
 8002974:	f7fe fd7a 	bl	800146c <laser_write_u8>
 8002978:	0003      	movs	r3, r0
 800297a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800297c:	197b      	adds	r3, r7, r5
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <laser_get_spad+0x336>
		return status;
 8002984:	197b      	adds	r3, r7, r5
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	e022      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x00);
 800298a:	251f      	movs	r5, #31
 800298c:	197c      	adds	r4, r7, r5
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	21ff      	movs	r1, #255	; 0xff
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fd69 	bl	800146c <laser_write_u8>
 800299a:	0003      	movs	r3, r0
 800299c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800299e:	197b      	adds	r3, r7, r5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <laser_get_spad+0x358>
		return status;
 80029a6:	197b      	adds	r3, r7, r5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	e011      	b.n	80029d0 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x80, 0x00);
 80029ac:	251f      	movs	r5, #31
 80029ae:	197c      	adds	r4, r7, r5
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fe fd58 	bl	800146c <laser_write_u8>
 80029bc:	0003      	movs	r3, r0
 80029be:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80029c0:	197b      	adds	r3, r7, r5
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <laser_get_spad+0x37a>
		return status;
 80029c8:	197b      	adds	r3, r7, r5
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	e000      	b.n	80029d0 <laser_get_spad+0x37c>

	return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b008      	add	sp, #32
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}

080029d8 <laser_get_seq_en>:

HAL_StatusTypeDef laser_get_seq_en(laser_handle* laser, SequenceStepEnables * enables)
{
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config;
	HAL_StatusTypeDef status = laser_read_u8(laser, SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 80029e2:	260f      	movs	r6, #15
 80029e4:	19bc      	adds	r4, r7, r6
 80029e6:	250e      	movs	r5, #14
 80029e8:	197a      	adds	r2, r7, r5
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2101      	movs	r1, #1
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7fe fd6c 	bl	80014cc <laser_read_u8>
 80029f4:	0003      	movs	r3, r0
 80029f6:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 80029f8:	19bb      	adds	r3, r7, r6
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d12a      	bne.n	8002a56 <laser_get_seq_en+0x7e>
	{
		enables->tcc          = (sequence_config >> 4) & 0x1;
 8002a00:	0029      	movs	r1, r5
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	701a      	strb	r2, [r3, #0]
		enables->dss          = (sequence_config >> 3) & 0x1;
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	709a      	strb	r2, [r3, #2]
		enables->msrc         = (sequence_config >> 2) & 0x1;
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	705a      	strb	r2, [r3, #1]
		enables->pre_range    = (sequence_config >> 6) & 0x1;
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	70da      	strb	r2, [r3, #3]
		enables->final_range  = (sequence_config >> 7) & 0x1;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	09db      	lsrs	r3, r3, #7
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	711a      	strb	r2, [r3, #4]
	}

	return status;
 8002a56:	230f      	movs	r3, #15
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b005      	add	sp, #20
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a64 <laser_us_to_mclks>:

uint32_t laser_us_to_mclks(uint16_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	1dbb      	adds	r3, r7, #6
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	1d7b      	adds	r3, r7, #5
 8002a72:	1c0a      	adds	r2, r1, #0
 8002a74:	701a      	strb	r2, [r3, #0]
	const uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002a76:	1d7b      	adds	r3, r7, #5
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	015b      	lsls	r3, r3, #5
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	015b      	lsls	r3, r3, #5
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	0213      	lsls	r3, r2, #8
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	33f5      	adds	r3, #245	; 0xf5
 8002a90:	33ff      	adds	r3, #255	; 0xff
 8002a92:	22fa      	movs	r2, #250	; 0xfa
 8002a94:	0091      	lsls	r1, r2, #2
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd fb32 	bl	8000100 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]
	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002aa0:	1dbb      	adds	r3, r7, #6
 8002aa2:	881a      	ldrh	r2, [r3, #0]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	015b      	lsls	r3, r3, #5
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	189b      	adds	r3, r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fb20 	bl	8000100 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <laser_mclks_to_us>:

uint32_t laser_mclks_to_us(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	1dbb      	adds	r3, r7, #6
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	1d7b      	adds	r3, r7, #5
 8002ad8:	1c0a      	adds	r2, r1, #0
 8002ada:	701a      	strb	r2, [r3, #0]
	const uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002adc:	1d7b      	adds	r3, r7, #5
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	015b      	lsls	r3, r3, #5
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	011a      	lsls	r2, r3, #4
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	0213      	lsls	r3, r2, #8
 8002af0:	001a      	movs	r2, r3
 8002af2:	0013      	movs	r3, r2
 8002af4:	33f5      	adds	r3, #245	; 0xf5
 8002af6:	33ff      	adds	r3, #255	; 0xff
 8002af8:	22fa      	movs	r2, #250	; 0xfa
 8002afa:	0091      	lsls	r1, r2, #2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fd faff 	bl	8000100 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	60fb      	str	r3, [r7, #12]
	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	435a      	muls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	18d3      	adds	r3, r2, r3
 8002b14:	22fa      	movs	r2, #250	; 0xfa
 8002b16:	0091      	lsls	r1, r2, #2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd faf1 	bl	8000100 <__udivsi3>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <decodeTimeout>:

uint16_t decodeTimeout(uint16_t reg_val)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0002      	movs	r2, r0
 8002b30:	1dbb      	adds	r3, r7, #6
 8002b32:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	4013      	ands	r3, r2
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b3c:	1dba      	adds	r2, r7, #6
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	0a12      	lsrs	r2, r2, #8
 8002b42:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b44:	4093      	lsls	r3, r2
 8002b46:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <laser_get_seq_timeouts>:

HAL_StatusTypeDef laser_get_seq_timeouts(laser_handle* laser, SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  status = laser_get_pulse_period(laser, VcselPeriodPreRange, (uint8_t*)&timeouts->pre_range_vcsel_period_pclks);
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	2517      	movs	r5, #23
 8002b64:	197c      	adds	r4, r7, r5
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2100      	movs	r1, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f8a0 	bl	8002cb0 <laser_get_pulse_period>
 8002b70:	0003      	movs	r3, r0
 8002b72:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002b74:	197b      	adds	r3, r7, r5
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <laser_get_seq_timeouts+0x2e>
	  return status;
 8002b7c:	197b      	adds	r3, r7, r5
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	e092      	b.n	8002ca8 <laser_get_seq_timeouts+0x154>

  status = laser_read_u8(laser, MSRC_CONFIG_TIMEOUT_MACROP, (uint8_t*)&timeouts->msrc_dss_tcc_mclks);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	1d1a      	adds	r2, r3, #4
 8002b86:	2517      	movs	r5, #23
 8002b88:	197c      	adds	r4, r7, r5
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2146      	movs	r1, #70	; 0x46
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe fc9c 	bl	80014cc <laser_read_u8>
 8002b94:	0003      	movs	r3, r0
 8002b96:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002b98:	197b      	adds	r3, r7, r5
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <laser_get_seq_timeouts+0x52>
  	  return status;
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	e080      	b.n	8002ca8 <laser_get_seq_timeouts+0x154>
  timeouts->msrc_dss_tcc_mclks++;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	889b      	ldrh	r3, [r3, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	809a      	strh	r2, [r3, #4]

  timeouts->msrc_dss_tcc_us =
		  laser_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	881b      	ldrh	r3, [r3, #0]
		  laser_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	0010      	movs	r0, r2
 8002bc0:	f7ff ff83 	bl	8002aca <laser_mclks_to_us>
 8002bc4:	0002      	movs	r2, r0
  timeouts->msrc_dss_tcc_us =
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]

  uint16_t tmp;
  status = laser_read_u16(laser, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &tmp);
 8002bca:	2517      	movs	r5, #23
 8002bcc:	197c      	adds	r4, r7, r5
 8002bce:	2314      	movs	r3, #20
 8002bd0:	18fa      	adds	r2, r7, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2151      	movs	r1, #81	; 0x51
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7fe fc8d 	bl	80014f6 <laser_read_u16>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002be0:	197b      	adds	r3, r7, r5
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <laser_get_seq_timeouts+0x9a>
	  return status;
 8002be8:	197b      	adds	r3, r7, r5
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	e05c      	b.n	8002ca8 <laser_get_seq_timeouts+0x154>
  timeouts->pre_range_mclks = decodeTimeout(tmp);
 8002bee:	2314      	movs	r3, #20
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ff97 	bl	8002b28 <decodeTimeout>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	80da      	strh	r2, [r3, #6]

  timeouts->pre_range_us =
		  laser_mclks_to_us(timeouts->pre_range_mclks,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	881b      	ldrh	r3, [r3, #0]
		  laser_mclks_to_us(timeouts->pre_range_mclks,
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0010      	movs	r0, r2
 8002c10:	f7ff ff5b 	bl	8002aca <laser_mclks_to_us>
 8002c14:	0002      	movs	r2, r0
  timeouts->pre_range_us =
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]

  status = laser_get_pulse_period(laser, VcselPeriodFinalRange, (uint8_t*)&timeouts->final_range_vcsel_period_pclks);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	2517      	movs	r5, #23
 8002c20:	197c      	adds	r4, r7, r5
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2101      	movs	r1, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f842 	bl	8002cb0 <laser_get_pulse_period>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002c30:	197b      	adds	r3, r7, r5
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <laser_get_seq_timeouts+0xea>
	  return status;
 8002c38:	197b      	adds	r3, r7, r5
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	e034      	b.n	8002ca8 <laser_get_seq_timeouts+0x154>

  status = laser_read_u16(laser, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &tmp);
 8002c3e:	2517      	movs	r5, #23
 8002c40:	197c      	adds	r4, r7, r5
 8002c42:	2314      	movs	r3, #20
 8002c44:	18fa      	adds	r2, r7, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2171      	movs	r1, #113	; 0x71
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fe fc53 	bl	80014f6 <laser_read_u16>
 8002c50:	0003      	movs	r3, r0
 8002c52:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002c54:	197b      	adds	r3, r7, r5
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <laser_get_seq_timeouts+0x10e>
	  return status;
 8002c5c:	197b      	adds	r3, r7, r5
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	e022      	b.n	8002ca8 <laser_get_seq_timeouts+0x154>

  timeouts->final_range_mclks = decodeTimeout(tmp);
 8002c62:	2314      	movs	r3, #20
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <decodeTimeout>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	001a      	movs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <laser_get_seq_timeouts+0x13a>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	891a      	ldrh	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	88db      	ldrh	r3, [r3, #6]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
		  laser_mclks_to_us(timeouts->final_range_mclks,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	885b      	ldrh	r3, [r3, #2]
		  laser_mclks_to_us(timeouts->final_range_mclks,
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	0019      	movs	r1, r3
 8002c9a:	0010      	movs	r0, r2
 8002c9c:	f7ff ff15 	bl	8002aca <laser_mclks_to_us>
 8002ca0:	0002      	movs	r2, r0
  timeouts->final_range_us =
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}

08002cb0 <laser_get_pulse_period>:

HAL_StatusTypeDef laser_get_pulse_period(laser_handle* laser, vcselPeriodType type, uint8_t* period)
{
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	200b      	movs	r0, #11
 8002cbc:	183b      	adds	r3, r7, r0
 8002cbe:	1c0a      	adds	r2, r1, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
  if (type == VcselPeriodPreRange)
 8002cc2:	183b      	adds	r3, r7, r0
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <laser_get_pulse_period+0x4e>
  {
	  status = laser_read_u8(laser, PRE_RANGE_CONFIG_VCSEL_PERIOD, period);
 8002cca:	2517      	movs	r5, #23
 8002ccc:	197c      	adds	r4, r7, r5
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2150      	movs	r1, #80	; 0x50
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7fe fbf9 	bl	80014cc <laser_read_u8>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	7023      	strb	r3, [r4, #0]
	  if (status == HAL_OK)
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <laser_get_pulse_period+0x46>
		  *period = decodeVcselPeriod(*period);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	18db      	adds	r3, r3, r3
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	701a      	strb	r2, [r3, #0]
	  return status;
 8002cf6:	2317      	movs	r3, #23
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	e01f      	b.n	8002d3e <laser_get_pulse_period+0x8e>
  }
  else if (type == VcselPeriodFinalRange)
 8002cfe:	230b      	movs	r3, #11
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d119      	bne.n	8002d3c <laser_get_pulse_period+0x8c>
  {
	status = laser_read_u8(laser, FINAL_RANGE_CONFIG_VCSEL_PERIOD, period);
 8002d08:	2517      	movs	r5, #23
 8002d0a:	197c      	adds	r4, r7, r5
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2170      	movs	r1, #112	; 0x70
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fe fbda 	bl	80014cc <laser_read_u8>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	7023      	strb	r3, [r4, #0]
	if (status == HAL_OK)
 8002d1c:	197b      	adds	r3, r7, r5
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <laser_get_pulse_period+0x84>
		*period = decodeVcselPeriod(*period);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	18db      	adds	r3, r3, r3
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	701a      	strb	r2, [r3, #0]
	return status;
 8002d34:	2317      	movs	r3, #23
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	e000      	b.n	8002d3e <laser_get_pulse_period+0x8e>
  }

  return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}

08002d46 <laser_read_continuous>:

HAL_StatusTypeDef laser_read_continuous(laser_handle* laser, uint16_t* mm)
{
 8002d46:	b5b0      	push	{r4, r5, r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	uint8_t tmp;

	const uint32_t tick = HAL_GetTick();
 8002d50:	f002 fc04 	bl	800555c <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]
	do
	{
		status = laser_read_u8(laser, RESULT_INTERRUPT_STATUS, &tmp);
 8002d58:	250b      	movs	r5, #11
 8002d5a:	197c      	adds	r4, r7, r5
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	18fa      	adds	r2, r7, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2113      	movs	r1, #19
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fe fbb1 	bl	80014cc <laser_read_u8>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 8002d6e:	197b      	adds	r3, r7, r5
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <laser_read_continuous+0x36>
			return status;
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	e020      	b.n	8002dbe <laser_read_continuous+0x78>

		if (HAL_GetTick() - tick >= laser->timeout)
 8002d7c:	f002 fbee 	bl	800555c <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	8892      	ldrh	r2, [r2, #4]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d301      	bcc.n	8002d92 <laser_read_continuous+0x4c>
			return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e015      	b.n	8002dbe <laser_read_continuous+0x78>

	} while (tmp == 0);
 8002d92:	230a      	movs	r3, #10
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0dd      	beq.n	8002d58 <laser_read_continuous+0x12>

	status = laser_read_u16(laser, RESULT_RANGE_STATUS + 10, mm);;
 8002d9c:	230b      	movs	r3, #11
 8002d9e:	18fc      	adds	r4, r7, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	211e      	movs	r1, #30
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fe fba5 	bl	80014f6 <laser_read_u16>
 8002dac:	0003      	movs	r3, r0
 8002dae:	7023      	strb	r3, [r4, #0]

	return laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	210b      	movs	r1, #11
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fe fb58 	bl	800146c <laser_write_u8>
 8002dbc:	0003      	movs	r3, r0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}

08002dc6 <encodeTimeout>:

  return HAL_OK;
}

uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	0002      	movs	r2, r0
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]

  if (timeout_mclks > 0)
 8002dde:	1dbb      	adds	r3, r7, #6
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01e      	beq.n	8002e24 <encodeTimeout+0x5e>
  {
    ls_byte = timeout_mclks - 1;
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002dee:	e008      	b.n	8002e02 <encodeTimeout+0x3c>
    {
      ls_byte >>= 1;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002df6:	210a      	movs	r1, #10
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	3201      	adds	r2, #1
 8002e00:	801a      	strh	r2, [r3, #0]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22ff      	movs	r2, #255	; 0xff
 8002e06:	4393      	bics	r3, r2
 8002e08:	d1f2      	bne.n	8002df0 <encodeTimeout+0x2a>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	21ff      	movs	r1, #255	; 0xff
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	e000      	b.n	8002e26 <encodeTimeout+0x60>
  }
  else { return 0; }
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <laser_set_timing_budget>:

HAL_StatusTypeDef laser_set_timing_budget(laser_handle* laser, uint32_t budget_us)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b092      	sub	sp, #72	; 0x48
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	22a5      	movs	r2, #165	; 0xa5
 8002e40:	00d2      	lsls	r2, r2, #3
 8002e42:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 8002e44:	233e      	movs	r3, #62	; 0x3e
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	22f0      	movs	r2, #240	; 0xf0
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 8002e4e:	233c      	movs	r3, #60	; 0x3c
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	22a5      	movs	r2, #165	; 0xa5
 8002e54:	0092      	lsls	r2, r2, #2
 8002e56:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 8002e58:	233a      	movs	r3, #58	; 0x3a
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	4a63      	ldr	r2, [pc, #396]	; (8002fec <laser_set_timing_budget+0x1bc>)
 8002e5e:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 8002e60:	2338      	movs	r3, #56	; 0x38
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <laser_set_timing_budget+0x1c0>)
 8002e66:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 8002e68:	2336      	movs	r3, #54	; 0x36
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	22a5      	movs	r2, #165	; 0xa5
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 8002e72:	2334      	movs	r3, #52	; 0x34
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	4a5f      	ldr	r2, [pc, #380]	; (8002ff4 <laser_set_timing_budget+0x1c4>)
 8002e78:	801a      	strh	r2, [r3, #0]

	uint32_t const MinTimingBudget = 20000;
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <laser_set_timing_budget+0x1c8>)
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30

	if (budget_us < MinTimingBudget) { return HAL_ERROR; }
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d201      	bcs.n	8002e8a <laser_set_timing_budget+0x5a>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0ab      	b.n	8002fe2 <laser_set_timing_budget+0x1b2>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 8002e8a:	2340      	movs	r3, #64	; 0x40
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	233e      	movs	r3, #62	; 0x3e
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	18d3      	adds	r3, r2, r3
 8002e98:	647b      	str	r3, [r7, #68]	; 0x44

	status = laser_get_seq_en(laser, &enables);
 8002e9a:	252f      	movs	r5, #47	; 0x2f
 8002e9c:	197c      	adds	r4, r7, r5
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	18fa      	adds	r2, r7, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0011      	movs	r1, r2
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff fd96 	bl	80029d8 <laser_get_seq_en>
 8002eac:	0003      	movs	r3, r0
 8002eae:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002eb0:	197b      	adds	r3, r7, r5
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <laser_set_timing_budget+0x8e>
		return status;
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	e091      	b.n	8002fe2 <laser_set_timing_budget+0x1b2>
	status = laser_get_seq_timeouts(laser, &enables, &timeouts);
 8002ebe:	252f      	movs	r5, #47	; 0x2f
 8002ec0:	197c      	adds	r4, r7, r5
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	18fa      	adds	r2, r7, r3
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	18f9      	adds	r1, r7, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fe41 	bl	8002b54 <laser_get_seq_timeouts>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002ed6:	197b      	adds	r3, r7, r5
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <laser_set_timing_budget+0xb4>
		return status;
 8002ede:	197b      	adds	r3, r7, r5
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	e07e      	b.n	8002fe2 <laser_set_timing_budget+0x1b2>

	if (enables.tcc)
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <laser_set_timing_budget+0xd2>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002eee:	2308      	movs	r3, #8
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	233a      	movs	r3, #58	; 0x3a
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	18d3      	adds	r3, r2, r3
 8002efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.dss)
 8002f02:	2320      	movs	r3, #32
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	789b      	ldrb	r3, [r3, #2]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <laser_set_timing_budget+0xf4>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	2338      	movs	r3, #56	; 0x38
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f1e:	18d3      	adds	r3, r2, r3
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
 8002f22:	e00e      	b.n	8002f42 <laser_set_timing_budget+0x112>
	}
	else if (enables.msrc)
 8002f24:	2320      	movs	r3, #32
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <laser_set_timing_budget+0x112>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002f2e:	2308      	movs	r3, #8
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	233c      	movs	r3, #60	; 0x3c
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.pre_range)
 8002f42:	2320      	movs	r3, #32
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <laser_set_timing_budget+0x130>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	2336      	movs	r3, #54	; 0x36
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f5c:	18d3      	adds	r3, r2, r3
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.final_range)
 8002f60:	2320      	movs	r3, #32
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d03a      	beq.n	8002fe0 <laser_set_timing_budget+0x1b0>
	{
		used_budget_us += FinalRangeOverhead;
 8002f6a:	2334      	movs	r3, #52	; 0x34
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f72:	18d3      	adds	r3, r2, r3
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > budget_us)
 8002f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d901      	bls.n	8002f82 <laser_set_timing_budget+0x152>
		{
		  // "Requested timeout too big."
		  return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e02f      	b.n	8002fe2 <laser_set_timing_budget+0x1b2>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks =
				laser_us_to_mclks(final_range_timeout_us,
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	b29a      	uxth	r2, r3
									 timeouts.final_range_vcsel_period_pclks);
 8002f8e:	2408      	movs	r4, #8
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	885b      	ldrh	r3, [r3, #2]
				laser_us_to_mclks(final_range_timeout_us,
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f7ff fd63 	bl	8002a64 <laser_us_to_mclks>
 8002f9e:	0002      	movs	r2, r0
		uint16_t final_range_timeout_mclks =
 8002fa0:	2042      	movs	r0, #66	; 0x42
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	78db      	ldrb	r3, [r3, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <laser_set_timing_budget+0x18e>
		{
		  final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	88d9      	ldrh	r1, [r3, #6]
 8002fb4:	183b      	adds	r3, r7, r0
 8002fb6:	183a      	adds	r2, r7, r0
 8002fb8:	8812      	ldrh	r2, [r2, #0]
 8002fba:	188a      	adds	r2, r1, r2
 8002fbc:	801a      	strh	r2, [r3, #0]
		}

		status = laser_write_u16(laser, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, encodeTimeout(final_range_timeout_mclks));
 8002fbe:	2342      	movs	r3, #66	; 0x42
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fefe 	bl	8002dc6 <encodeTimeout>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	001a      	movs	r2, r3
 8002fce:	232f      	movs	r3, #47	; 0x2f
 8002fd0:	18fc      	adds	r4, r7, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2171      	movs	r1, #113	; 0x71
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fe fa60 	bl	800149c <laser_write_u16>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	7023      	strb	r3, [r4, #0]


		// set_sequence_step_timeout() end
	}

	return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b012      	add	sp, #72	; 0x48
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	0000024e 	.word	0x0000024e
 8002ff0:	000002b2 	.word	0x000002b2
 8002ff4:	00000226 	.word	0x00000226
 8002ff8:	00004e20 	.word	0x00004e20

08002ffc <laser_start_continuous>:

HAL_StatusTypeDef laser_start_continuous(laser_handle* laser)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	uint32_t period_ms = 0; //BACK to BACK mode, can be passed as parameter
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = laser_write_u8(laser, 0x80, 0x01);
 8003008:	2517      	movs	r5, #23
 800300a:	197c      	adds	r4, r7, r5
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe fa2a 	bl	800146c <laser_write_u8>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800301c:	197b      	adds	r3, r7, r5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <laser_start_continuous+0x2e>
		return status;
 8003024:	197b      	adds	r3, r7, r5
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	e0b0      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800302a:	2517      	movs	r5, #23
 800302c:	197c      	adds	r4, r7, r5
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	21ff      	movs	r1, #255	; 0xff
 8003034:	0018      	movs	r0, r3
 8003036:	f7fe fa19 	bl	800146c <laser_write_u8>
 800303a:	0003      	movs	r3, r0
 800303c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800303e:	197b      	adds	r3, r7, r5
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <laser_start_continuous+0x50>
		return status;
 8003046:	197b      	adds	r3, r7, r5
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	e09f      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x00, 0x00);
 800304c:	2517      	movs	r5, #23
 800304e:	197c      	adds	r4, r7, r5
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	0018      	movs	r0, r3
 8003058:	f7fe fa08 	bl	800146c <laser_write_u8>
 800305c:	0003      	movs	r3, r0
 800305e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8003060:	197b      	adds	r3, r7, r5
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <laser_start_continuous+0x72>
		return status;
 8003068:	197b      	adds	r3, r7, r5
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	e08e      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x91, laser->g_stop);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	79da      	ldrb	r2, [r3, #7]
 8003072:	2517      	movs	r5, #23
 8003074:	197c      	adds	r4, r7, r5
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2191      	movs	r1, #145	; 0x91
 800307a:	0018      	movs	r0, r3
 800307c:	f7fe f9f6 	bl	800146c <laser_write_u8>
 8003080:	0003      	movs	r3, r0
 8003082:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8003084:	197b      	adds	r3, r7, r5
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <laser_start_continuous+0x96>
		return status;
 800308c:	197b      	adds	r3, r7, r5
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	e07c      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x00, 0x01);
 8003092:	2517      	movs	r5, #23
 8003094:	197c      	adds	r4, r7, r5
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	2100      	movs	r1, #0
 800309c:	0018      	movs	r0, r3
 800309e:	f7fe f9e5 	bl	800146c <laser_write_u8>
 80030a2:	0003      	movs	r3, r0
 80030a4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030a6:	197b      	adds	r3, r7, r5
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <laser_start_continuous+0xb8>
		return status;
 80030ae:	197b      	adds	r3, r7, r5
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	e06b      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80030b4:	2517      	movs	r5, #23
 80030b6:	197c      	adds	r4, r7, r5
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	21ff      	movs	r1, #255	; 0xff
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe f9d4 	bl	800146c <laser_write_u8>
 80030c4:	0003      	movs	r3, r0
 80030c6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030c8:	197b      	adds	r3, r7, r5
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <laser_start_continuous+0xda>
		return status;
 80030d0:	197b      	adds	r3, r7, r5
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	e05a      	b.n	800318c <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x80, 0x00);
 80030d6:	2517      	movs	r5, #23
 80030d8:	197c      	adds	r4, r7, r5
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7fe f9c3 	bl	800146c <laser_write_u8>
 80030e6:	0003      	movs	r3, r0
 80030e8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030ea:	197b      	adds	r3, r7, r5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <laser_start_continuous+0xfc>
		return status;
 80030f2:	197b      	adds	r3, r7, r5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	e049      	b.n	800318c <laser_start_continuous+0x190>

  if (period_ms != 0)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d039      	beq.n	8003172 <laser_start_continuous+0x176>
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val;
    status = laser_read_u16(laser, OSC_CALIBRATE_VAL, &osc_calibrate_val);
 80030fe:	2517      	movs	r5, #23
 8003100:	197c      	adds	r4, r7, r5
 8003102:	230e      	movs	r3, #14
 8003104:	18fa      	adds	r2, r7, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	21f8      	movs	r1, #248	; 0xf8
 800310a:	0018      	movs	r0, r3
 800310c:	f7fe f9f3 	bl	80014f6 <laser_read_u16>
 8003110:	0003      	movs	r3, r0
 8003112:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8003114:	197b      	adds	r3, r7, r5
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <laser_start_continuous+0x126>
		return status;
 800311c:	197b      	adds	r3, r7, r5
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	e034      	b.n	800318c <laser_start_continuous+0x190>

    if (osc_calibrate_val != 0)
 8003122:	220e      	movs	r2, #14
 8003124:	18bb      	adds	r3, r7, r2
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <laser_start_continuous+0x13c>
    {
      period_ms *= osc_calibrate_val;
 800312c:	18bb      	adds	r3, r7, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	001a      	movs	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4353      	muls	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    }

    status = laser_write(laser, SYSTEM_INTERMEASUREMENT_PERIOD, (uint8_t*)&period_ms, sizeof(period_ms));
 8003138:	2517      	movs	r5, #23
 800313a:	197c      	adds	r4, r7, r5
 800313c:	2310      	movs	r3, #16
 800313e:	18fa      	adds	r2, r7, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	2304      	movs	r3, #4
 8003144:	2104      	movs	r1, #4
 8003146:	f7fe f905 	bl	8001354 <laser_write>
 800314a:	0003      	movs	r3, r0
 800314c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <laser_start_continuous+0x160>
		return status;
 8003156:	197b      	adds	r3, r7, r5
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	e017      	b.n	800318c <laser_start_continuous+0x190>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    status = laser_write_u8(laser, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 800315c:	2317      	movs	r3, #23
 800315e:	18fc      	adds	r4, r7, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2204      	movs	r2, #4
 8003164:	2100      	movs	r1, #0
 8003166:	0018      	movs	r0, r3
 8003168:	f7fe f980 	bl	800146c <laser_write_u8>
 800316c:	0003      	movs	r3, r0
 800316e:	7023      	strb	r3, [r4, #0]
 8003170:	e009      	b.n	8003186 <laser_start_continuous+0x18a>
  }
  else
  {
    // continuous back-to-back mode
    status = laser_write_u8(laser, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8003172:	2317      	movs	r3, #23
 8003174:	18fc      	adds	r4, r7, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	2100      	movs	r1, #0
 800317c:	0018      	movs	r0, r3
 800317e:	f7fe f975 	bl	800146c <laser_write_u8>
 8003182:	0003      	movs	r3, r0
 8003184:	7023      	strb	r3, [r4, #0]
  }

  return status;
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b006      	add	sp, #24
 8003192:	bdb0      	pop	{r4, r5, r7, pc}

08003194 <laser_set_address>:

HAL_StatusTypeDef laser_set_address(laser_handle* laser, uint8_t new_address)
{
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	000a      	movs	r2, r1
 800319e:	1cfb      	adds	r3, r7, #3
 80031a0:	701a      	strb	r2, [r3, #0]
	const HAL_StatusTypeDef status = laser_write_u8(laser, I2C_SLAVE_DEVICE_ADDRESS, new_address >> 1);
 80031a2:	1cfb      	adds	r3, r7, #3
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	250f      	movs	r5, #15
 80031ac:	197c      	adds	r4, r7, r5
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	218a      	movs	r1, #138	; 0x8a
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7fe f95a 	bl	800146c <laser_write_u8>
 80031b8:	0003      	movs	r3, r0
 80031ba:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <laser_set_address+0x38>
		laser->address = new_address;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1cfa      	adds	r2, r7, #3
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	719a      	strb	r2, [r3, #6]

	return status;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080031dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_DMA_Init+0x38>)
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_DMA_Init+0x38>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	430a      	orrs	r2, r1
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_DMA_Init+0x38>)
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	2201      	movs	r2, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2009      	movs	r0, #9
 8003200:	f002 fa86 	bl	8005710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003204:	2009      	movs	r0, #9
 8003206:	f002 fa98 	bl	800573a <HAL_NVIC_EnableIRQ>

}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021000 	.word	0x40021000

08003218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	240c      	movs	r4, #12
 8003220:	193b      	adds	r3, r7, r4
 8003222:	0018      	movs	r0, r3
 8003224:	2314      	movs	r3, #20
 8003226:	001a      	movs	r2, r3
 8003228:	2100      	movs	r1, #0
 800322a:	f007 f8d0 	bl	800a3ce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <MX_GPIO_Init+0x104>)
 8003230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <MX_GPIO_Init+0x104>)
 8003234:	2101      	movs	r1, #1
 8003236:	430a      	orrs	r2, r1
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <MX_GPIO_Init+0x104>)
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <MX_GPIO_Init+0x104>)
 8003248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <MX_GPIO_Init+0x104>)
 800324c:	2102      	movs	r1, #2
 800324e:	430a      	orrs	r2, r1
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <MX_GPIO_Init+0x104>)
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	2202      	movs	r2, #2
 8003258:	4013      	ands	r3, r2
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <MX_GPIO_Init+0x104>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <MX_GPIO_Init+0x104>)
 8003264:	2108      	movs	r1, #8
 8003266:	430a      	orrs	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <MX_GPIO_Init+0x104>)
 800326c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326e:	2208      	movs	r2, #8
 8003270:	4013      	ands	r3, r2
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_BACKWARD_Pin|EN_LASER_6_Pin|EN_LASER_7_Pin, GPIO_PIN_RESET);
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <MX_GPIO_Init+0x108>)
 8003278:	2200      	movs	r2, #0
 800327a:	211c      	movs	r1, #28
 800327c:	0018      	movs	r0, r3
 800327e:	f002 fefb 	bl	8006078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_RESET);
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	0219      	lsls	r1, r3, #8
 8003286:	23a0      	movs	r3, #160	; 0xa0
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	2200      	movs	r2, #0
 800328c:	0018      	movs	r0, r3
 800328e:	f002 fef3 	bl	8006078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LASER_2_Pin|EN_LASER_3_Pin|EN_LASER_4_Pin|EN_LASER_5_Pin, GPIO_PIN_RESET);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <MX_GPIO_Init+0x10c>)
 8003294:	2200      	movs	r2, #0
 8003296:	210f      	movs	r1, #15
 8003298:	0018      	movs	r0, r3
 800329a:	f002 feed 	bl	8006078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_BACKWARD_Pin|EN_LASER_6_Pin|EN_LASER_7_Pin;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	221c      	movs	r2, #28
 80032a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	2201      	movs	r2, #1
 80032a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <MX_GPIO_Init+0x108>)
 80032ba:	0019      	movs	r1, r3
 80032bc:	0010      	movs	r0, r2
 80032be:	f002 fd77 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_LASER_1_Pin;
 80032c2:	0021      	movs	r1, r4
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	0212      	lsls	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032cc:	000c      	movs	r4, r1
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	2201      	movs	r2, #1
 80032d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_LASER_1_GPIO_Port, &GPIO_InitStruct);
 80032e0:	193a      	adds	r2, r7, r4
 80032e2:	23a0      	movs	r3, #160	; 0xa0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 fd61 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EN_LASER_2_Pin|EN_LASER_3_Pin|EN_LASER_4_Pin|EN_LASER_5_Pin;
 80032ee:	0021      	movs	r1, r4
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	220f      	movs	r2, #15
 80032f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2201      	movs	r2, #1
 80032fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003308:	187b      	adds	r3, r7, r1
 800330a:	4a06      	ldr	r2, [pc, #24]	; (8003324 <MX_GPIO_Init+0x10c>)
 800330c:	0019      	movs	r1, r3
 800330e:	0010      	movs	r0, r2
 8003310:	f002 fd4e 	bl	8005db0 <HAL_GPIO_Init>

}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b009      	add	sp, #36	; 0x24
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	50000400 	.word	0x50000400
 8003324:	50000c00 	.word	0x50000c00

08003328 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <MX_I2C1_Init+0x74>)
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <MX_I2C1_Init+0x78>)
 8003330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <MX_I2C1_Init+0x74>)
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <MX_I2C1_Init+0x7c>)
 8003336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <MX_I2C1_Init+0x74>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <MX_I2C1_Init+0x74>)
 8003340:	2201      	movs	r2, #1
 8003342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <MX_I2C1_Init+0x74>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_I2C1_Init+0x74>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <MX_I2C1_Init+0x74>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_I2C1_Init+0x74>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_I2C1_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_I2C1_Init+0x74>)
 8003364:	0018      	movs	r0, r3
 8003366:	f002 fea5 	bl	80060b4 <HAL_I2C_Init>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800336e:	f000 fd1b 	bl	8003da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_I2C1_Init+0x74>)
 8003374:	2100      	movs	r1, #0
 8003376:	0018      	movs	r0, r3
 8003378:	f003 fd64 	bl	8006e44 <HAL_I2CEx_ConfigAnalogFilter>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003380:	f000 fd12 	bl	8003da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <MX_I2C1_Init+0x74>)
 8003386:	2100      	movs	r1, #0
 8003388:	0018      	movs	r0, r3
 800338a:	f003 fda7 	bl	8006edc <HAL_I2CEx_ConfigDigitalFilter>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d001      	beq.n	8003396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003392:	f000 fd09 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000090 	.word	0x20000090
 80033a0:	40005400 	.word	0x40005400
 80033a4:	00303d5b 	.word	0x00303d5b

080033a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <MX_I2C2_Init+0x74>)
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <MX_I2C2_Init+0x78>)
 80033b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <MX_I2C2_Init+0x74>)
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <MX_I2C2_Init+0x7c>)
 80033b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033b8:	4b18      	ldr	r3, [pc, #96]	; (800341c <MX_I2C2_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <MX_I2C2_Init+0x74>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <MX_I2C2_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <MX_I2C2_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <MX_I2C2_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_I2C2_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <MX_I2C2_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_I2C2_Init+0x74>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f002 fe65 	bl	80060b4 <HAL_I2C_Init>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d001      	beq.n	80033f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80033ee:	f000 fcdb 	bl	8003da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <MX_I2C2_Init+0x74>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	0018      	movs	r0, r3
 80033f8:	f003 fd24 	bl	8006e44 <HAL_I2CEx_ConfigAnalogFilter>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d001      	beq.n	8003404 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003400:	f000 fcd2 	bl	8003da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <MX_I2C2_Init+0x74>)
 8003406:	2100      	movs	r1, #0
 8003408:	0018      	movs	r0, r3
 800340a:	f003 fd67 	bl	8006edc <HAL_I2CEx_ConfigDigitalFilter>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d001      	beq.n	8003416 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003412:	f000 fcc9 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200000e4 	.word	0x200000e4
 8003420:	40005800 	.word	0x40005800
 8003424:	00303d5b 	.word	0x00303d5b

08003428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b093      	sub	sp, #76	; 0x4c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	2334      	movs	r3, #52	; 0x34
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	0018      	movs	r0, r3
 8003436:	2314      	movs	r3, #20
 8003438:	001a      	movs	r2, r3
 800343a:	2100      	movs	r1, #0
 800343c:	f006 ffc7 	bl	800a3ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003440:	241c      	movs	r4, #28
 8003442:	193b      	adds	r3, r7, r4
 8003444:	0018      	movs	r0, r3
 8003446:	2318      	movs	r3, #24
 8003448:	001a      	movs	r2, r3
 800344a:	2100      	movs	r1, #0
 800344c:	f006 ffbf 	bl	800a3ce <memset>
  if(i2cHandle->Instance==I2C1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3e      	ldr	r2, [pc, #248]	; (8003550 <HAL_I2C_MspInit+0x128>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d13f      	bne.n	80034da <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800345a:	193b      	adds	r3, r7, r4
 800345c:	2220      	movs	r2, #32
 800345e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003460:	193b      	adds	r3, r7, r4
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003466:	193b      	adds	r3, r7, r4
 8003468:	0018      	movs	r0, r3
 800346a:	f004 fa89 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003472:	f000 fc99 	bl	8003da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 8003478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 800347c:	2102      	movs	r1, #2
 800347e:	430a      	orrs	r2, r1
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
 8003482:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	2202      	movs	r2, #2
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800348e:	2134      	movs	r1, #52	; 0x34
 8003490:	187b      	adds	r3, r7, r1
 8003492:	22c0      	movs	r2, #192	; 0xc0
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2212      	movs	r2, #18
 800349c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2206      	movs	r2, #6
 80034ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_I2C_MspInit+0x130>)
 80034b4:	0019      	movs	r1, r3
 80034b6:	0010      	movs	r0, r2
 80034b8:	f002 fc7a 	bl	8005db0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	0389      	lsls	r1, r1, #14
 80034c6:	430a      	orrs	r2, r1
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	039b      	lsls	r3, r3, #14
 80034d2:	4013      	ands	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80034d8:	e036      	b.n	8003548 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_I2C_MspInit+0x134>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d131      	bne.n	8003548 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LASER_SCL_Pin|LASER_SDA_Pin;
 80034fc:	2134      	movs	r1, #52	; 0x34
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	22c0      	movs	r2, #192	; 0xc0
 8003502:	0152      	lsls	r2, r2, #5
 8003504:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2212      	movs	r2, #18
 800350a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2206      	movs	r2, #6
 800351c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351e:	187a      	adds	r2, r7, r1
 8003520:	23a0      	movs	r3, #160	; 0xa0
 8003522:	05db      	lsls	r3, r3, #23
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f002 fc42 	bl	8005db0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 800352e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	03c9      	lsls	r1, r1, #15
 8003536:	430a      	orrs	r2, r1
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_I2C_MspInit+0x12c>)
 800353c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	03db      	lsls	r3, r3, #15
 8003542:	4013      	ands	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b013      	add	sp, #76	; 0x4c
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	40005400 	.word	0x40005400
 8003554:	40021000 	.word	0x40021000
 8003558:	50000400 	.word	0x50000400
 800355c:	40005800 	.word	0x40005800

08003560 <lasers_offset>:

extern I2C_HandleTypeDef hi2c2;
laser_handle lasers[7];

void lasers_offset(uint16_t* lasers, const int8_t* offsets)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 7; ++i)
 800356a:	230f      	movs	r3, #15
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e034      	b.n	80035de <lasers_offset+0x7e>
	{
		if (lasers[i] < -offsets[i])
 8003574:	200f      	movs	r0, #15
 8003576:	183b      	adds	r3, r7, r0
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	0019      	movs	r1, r3
 8003584:	183b      	adds	r3, r7, r0
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b25b      	sxtb	r3, r3
 8003590:	425b      	negs	r3, r3
 8003592:	4299      	cmp	r1, r3
 8003594:	da07      	bge.n	80035a6 <lasers_offset+0x46>
		{
			lasers[i] = 0;
 8003596:	183b      	adds	r3, r7, r0
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	2200      	movs	r2, #0
 80035a2:	801a      	strh	r2, [r3, #0]
			continue;
 80035a4:	e015      	b.n	80035d2 <lasers_offset+0x72>
		}

		lasers[i] += offsets[i];
 80035a6:	200f      	movs	r0, #15
 80035a8:	183b      	adds	r3, r7, r0
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	18d3      	adds	r3, r2, r3
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	183b      	adds	r3, r7, r0
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	18c3      	adds	r3, r0, r3
 80035cc:	188a      	adds	r2, r1, r2
 80035ce:	b292      	uxth	r2, r2
 80035d0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 7; ++i)
 80035d2:	220f      	movs	r2, #15
 80035d4:	18bb      	adds	r3, r7, r2
 80035d6:	18ba      	adds	r2, r7, r2
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	3201      	adds	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	230f      	movs	r3, #15
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d9c5      	bls.n	8003574 <lasers_offset+0x14>
	}
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <lasers_deinit>:

void lasers_deinit()
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_RESET);
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	0219      	lsls	r1, r3, #8
 80035fc:	23a0      	movs	r3, #160	; 0xa0
 80035fe:	05db      	lsls	r3, r3, #23
 8003600:	2200      	movs	r2, #0
 8003602:	0018      	movs	r0, r3
 8003604:	f002 fd38 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_2_GPIO_Port, EN_LASER_2_Pin, GPIO_PIN_RESET);
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <lasers_deinit+0x68>)
 800360a:	2200      	movs	r2, #0
 800360c:	2101      	movs	r1, #1
 800360e:	0018      	movs	r0, r3
 8003610:	f002 fd32 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_3_GPIO_Port, EN_LASER_3_Pin, GPIO_PIN_RESET);
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <lasers_deinit+0x68>)
 8003616:	2200      	movs	r2, #0
 8003618:	2102      	movs	r1, #2
 800361a:	0018      	movs	r0, r3
 800361c:	f002 fd2c 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_4_GPIO_Port, EN_LASER_4_Pin, GPIO_PIN_RESET);
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <lasers_deinit+0x68>)
 8003622:	2200      	movs	r2, #0
 8003624:	2104      	movs	r1, #4
 8003626:	0018      	movs	r0, r3
 8003628:	f002 fd26 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_5_GPIO_Port, EN_LASER_5_Pin, GPIO_PIN_RESET);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <lasers_deinit+0x68>)
 800362e:	2200      	movs	r2, #0
 8003630:	2108      	movs	r1, #8
 8003632:	0018      	movs	r0, r3
 8003634:	f002 fd20 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_6_GPIO_Port, EN_LASER_6_Pin, GPIO_PIN_RESET);
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <lasers_deinit+0x6c>)
 800363a:	2200      	movs	r2, #0
 800363c:	2108      	movs	r1, #8
 800363e:	0018      	movs	r0, r3
 8003640:	f002 fd1a 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_7_GPIO_Port, EN_LASER_7_Pin, GPIO_PIN_RESET);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <lasers_deinit+0x6c>)
 8003646:	2200      	movs	r2, #0
 8003648:	2110      	movs	r1, #16
 800364a:	0018      	movs	r0, r3
 800364c:	f002 fd14 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003650:	200a      	movs	r0, #10
 8003652:	f001 ff8d 	bl	8005570 <HAL_Delay>
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	50000c00 	.word	0x50000c00
 8003660:	50000400 	.word	0x50000400

08003664 <lasers_init>:

uint8_t lasers_init()
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
	//Set default parameters
	for (uint8_t i = 0; i < 7; ++i)
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e01b      	b.n	80036aa <lasers_init+0x46>
	{
		lasers[i].address = 0x52;
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4a89      	ldr	r2, [pc, #548]	; (800389c <lasers_init+0x238>)
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	3306      	adds	r3, #6
 800367e:	2252      	movs	r2, #82	; 0x52
 8003680:	701a      	strb	r2, [r3, #0]
		lasers[i].timeout = 300;
 8003682:	1dfb      	adds	r3, r7, #7
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4a85      	ldr	r2, [pc, #532]	; (800389c <lasers_init+0x238>)
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	3304      	adds	r3, #4
 800368e:	2296      	movs	r2, #150	; 0x96
 8003690:	0052      	lsls	r2, r2, #1
 8003692:	801a      	strh	r2, [r3, #0]
		lasers[i].hi2c = &hi2c2;
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	4b80      	ldr	r3, [pc, #512]	; (800389c <lasers_init+0x238>)
 800369a:	00d2      	lsls	r2, r2, #3
 800369c:	4980      	ldr	r1, [pc, #512]	; (80038a0 <lasers_init+0x23c>)
 800369e:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 7; ++i)
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	1dfa      	adds	r2, r7, #7
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	3201      	adds	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	1dfb      	adds	r3, r7, #7
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d9df      	bls.n	8003672 <lasers_init+0xe>
	}

	//================================ Laser 1 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_SET);
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	0219      	lsls	r1, r3, #8
 80036b6:	23a0      	movs	r3, #160	; 0xa0
 80036b8:	05db      	lsls	r3, r3, #23
 80036ba:	2201      	movs	r2, #1
 80036bc:	0018      	movs	r0, r3
 80036be:	f002 fcdb 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80036c2:	200a      	movs	r0, #10
 80036c4:	f001 ff54 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers, 0x20) != HAL_OK)
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <lasers_init+0x238>)
 80036ca:	2120      	movs	r1, #32
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fd61 	bl	8003194 <laser_set_address>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d001      	beq.n	80036da <lasers_init+0x76>
		return 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e0dc      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers) != HAL_OK)
 80036da:	4b70      	ldr	r3, [pc, #448]	; (800389c <lasers_init+0x238>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fd ff7d 	bl	80015dc <laser_init>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <lasers_init+0x86>
		return 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e0d4      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers) != HAL_OK)
 80036ea:	4b6c      	ldr	r3, [pc, #432]	; (800389c <lasers_init+0x238>)
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fc85 	bl	8002ffc <laser_start_continuous>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <lasers_init+0x96>
		return 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e0cc      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 2 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_2_GPIO_Port, EN_LASER_2_Pin, GPIO_PIN_SET);
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <lasers_init+0x240>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	2101      	movs	r1, #1
 8003700:	0018      	movs	r0, r3
 8003702:	f002 fcb9 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003706:	200a      	movs	r0, #10
 8003708:	f001 ff32 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 1, 0x22) != HAL_OK)
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <lasers_init+0x244>)
 800370e:	2122      	movs	r1, #34	; 0x22
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff fd3f 	bl	8003194 <laser_set_address>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <lasers_init+0xba>
		return 0;
 800371a:	2300      	movs	r3, #0
 800371c:	e0ba      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 1) != HAL_OK)
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <lasers_init+0x244>)
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd ff5b 	bl	80015dc <laser_init>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <lasers_init+0xca>
		return 0;
 800372a:	2300      	movs	r3, #0
 800372c:	e0b2      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 1) != HAL_OK)
 800372e:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <lasers_init+0x244>)
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff fc63 	bl	8002ffc <laser_start_continuous>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d001      	beq.n	800373e <lasers_init+0xda>
		return 0;
 800373a:	2300      	movs	r3, #0
 800373c:	e0aa      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 3 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_3_GPIO_Port, EN_LASER_3_Pin, GPIO_PIN_SET);
 800373e:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <lasers_init+0x240>)
 8003740:	2201      	movs	r2, #1
 8003742:	2102      	movs	r1, #2
 8003744:	0018      	movs	r0, r3
 8003746:	f002 fc97 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800374a:	200a      	movs	r0, #10
 800374c:	f001 ff10 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 2, 0x24) != HAL_OK)
 8003750:	4b56      	ldr	r3, [pc, #344]	; (80038ac <lasers_init+0x248>)
 8003752:	2124      	movs	r1, #36	; 0x24
 8003754:	0018      	movs	r0, r3
 8003756:	f7ff fd1d 	bl	8003194 <laser_set_address>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <lasers_init+0xfe>
		return 0;
 800375e:	2300      	movs	r3, #0
 8003760:	e098      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 2) != HAL_OK)
 8003762:	4b52      	ldr	r3, [pc, #328]	; (80038ac <lasers_init+0x248>)
 8003764:	0018      	movs	r0, r3
 8003766:	f7fd ff39 	bl	80015dc <laser_init>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d001      	beq.n	8003772 <lasers_init+0x10e>
		return 0;
 800376e:	2300      	movs	r3, #0
 8003770:	e090      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 2) != HAL_OK)
 8003772:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <lasers_init+0x248>)
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fc41 	bl	8002ffc <laser_start_continuous>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d001      	beq.n	8003782 <lasers_init+0x11e>
		return 0;
 800377e:	2300      	movs	r3, #0
 8003780:	e088      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 4 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_4_GPIO_Port, EN_LASER_4_Pin, GPIO_PIN_SET);
 8003782:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <lasers_init+0x240>)
 8003784:	2201      	movs	r2, #1
 8003786:	2104      	movs	r1, #4
 8003788:	0018      	movs	r0, r3
 800378a:	f002 fc75 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800378e:	200a      	movs	r0, #10
 8003790:	f001 feee 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 3, 0x26) != HAL_OK)
 8003794:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <lasers_init+0x24c>)
 8003796:	2126      	movs	r1, #38	; 0x26
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff fcfb 	bl	8003194 <laser_set_address>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d001      	beq.n	80037a6 <lasers_init+0x142>
		return 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e076      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 3) != HAL_OK)
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <lasers_init+0x24c>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7fd ff17 	bl	80015dc <laser_init>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <lasers_init+0x152>
		return 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e06e      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 3) != HAL_OK)
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <lasers_init+0x24c>)
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fc1f 	bl	8002ffc <laser_start_continuous>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <lasers_init+0x162>
		return 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e066      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 5 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_5_GPIO_Port, EN_LASER_5_Pin, GPIO_PIN_SET);
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <lasers_init+0x240>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	2108      	movs	r1, #8
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 fc53 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80037d2:	200a      	movs	r0, #10
 80037d4:	f001 fecc 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 4, 0x28) != HAL_OK)
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <lasers_init+0x250>)
 80037da:	2128      	movs	r1, #40	; 0x28
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff fcd9 	bl	8003194 <laser_set_address>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d001      	beq.n	80037ea <lasers_init+0x186>
		return 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e054      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 4) != HAL_OK)
 80037ea:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <lasers_init+0x250>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fd fef5 	bl	80015dc <laser_init>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <lasers_init+0x196>
		return 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e04c      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 4) != HAL_OK)
 80037fa:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <lasers_init+0x250>)
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff fbfd 	bl	8002ffc <laser_start_continuous>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d001      	beq.n	800380a <lasers_init+0x1a6>
		return 0;
 8003806:	2300      	movs	r3, #0
 8003808:	e044      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 6 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_6_GPIO_Port, EN_LASER_6_Pin, GPIO_PIN_SET);
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <lasers_init+0x254>)
 800380c:	2201      	movs	r2, #1
 800380e:	2108      	movs	r1, #8
 8003810:	0018      	movs	r0, r3
 8003812:	f002 fc31 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003816:	200a      	movs	r0, #10
 8003818:	f001 feaa 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 5, 0x30) != HAL_OK)
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <lasers_init+0x258>)
 800381e:	2130      	movs	r1, #48	; 0x30
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff fcb7 	bl	8003194 <laser_set_address>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d001      	beq.n	800382e <lasers_init+0x1ca>
		return 0;
 800382a:	2300      	movs	r3, #0
 800382c:	e032      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 5) != HAL_OK)
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <lasers_init+0x258>)
 8003830:	0018      	movs	r0, r3
 8003832:	f7fd fed3 	bl	80015dc <laser_init>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d001      	beq.n	800383e <lasers_init+0x1da>
		return 0;
 800383a:	2300      	movs	r3, #0
 800383c:	e02a      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 5) != HAL_OK)
 800383e:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <lasers_init+0x258>)
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fbdb 	bl	8002ffc <laser_start_continuous>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <lasers_init+0x1ea>
		return 0;
 800384a:	2300      	movs	r3, #0
 800384c:	e022      	b.n	8003894 <lasers_init+0x230>

	//================================ Laser 7 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_7_GPIO_Port, EN_LASER_7_Pin, GPIO_PIN_SET);
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <lasers_init+0x254>)
 8003850:	2201      	movs	r2, #1
 8003852:	2110      	movs	r1, #16
 8003854:	0018      	movs	r0, r3
 8003856:	f002 fc0f 	bl	8006078 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800385a:	200a      	movs	r0, #10
 800385c:	f001 fe88 	bl	8005570 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 6, 0x32) != HAL_OK)
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <lasers_init+0x25c>)
 8003862:	2132      	movs	r1, #50	; 0x32
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fc95 	bl	8003194 <laser_set_address>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d001      	beq.n	8003872 <lasers_init+0x20e>
		return 0;
 800386e:	2300      	movs	r3, #0
 8003870:	e010      	b.n	8003894 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 6) != HAL_OK)
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <lasers_init+0x25c>)
 8003874:	0018      	movs	r0, r3
 8003876:	f7fd feb1 	bl	80015dc <laser_init>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d001      	beq.n	8003882 <lasers_init+0x21e>
		return 0;
 800387e:	2300      	movs	r3, #0
 8003880:	e008      	b.n	8003894 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 6) != HAL_OK)
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <lasers_init+0x25c>)
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff fbb9 	bl	8002ffc <laser_start_continuous>
 800388a:	1e03      	subs	r3, r0, #0
 800388c:	d001      	beq.n	8003892 <lasers_init+0x22e>
		return 0;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <lasers_init+0x230>

	return 1;
 8003892:	2301      	movs	r3, #1
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000138 	.word	0x20000138
 80038a0:	200000e4 	.word	0x200000e4
 80038a4:	50000c00 	.word	0x50000c00
 80038a8:	20000140 	.word	0x20000140
 80038ac:	20000148 	.word	0x20000148
 80038b0:	20000150 	.word	0x20000150
 80038b4:	20000158 	.word	0x20000158
 80038b8:	50000400 	.word	0x50000400
 80038bc:	20000160 	.word	0x20000160
 80038c0:	20000168 	.word	0x20000168

080038c4 <lasers_read>:

HAL_StatusTypeDef lasers_read(uint16_t* lasers_mm)
{
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	for (uint8_t i = 0; i < 7; ++i)
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e01e      	b.n	8003914 <lasers_read+0x50>
	{
		status = laser_read_continuous(lasers + i, lasers_mm + i);
 80038d6:	210f      	movs	r1, #15
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <lasers_read+0x64>)
 80038e0:	18d0      	adds	r0, r2, r3
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	250e      	movs	r5, #14
 80038ee:	197c      	adds	r4, r7, r5
 80038f0:	0019      	movs	r1, r3
 80038f2:	f7ff fa28 	bl	8002d46 <laser_read_continuous>
 80038f6:	0003      	movs	r3, r0
 80038f8:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 80038fa:	197b      	adds	r3, r7, r5
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <lasers_read+0x44>
			return status;
 8003902:	197b      	adds	r3, r7, r5
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	e00b      	b.n	8003920 <lasers_read+0x5c>
	for (uint8_t i = 0; i < 7; ++i)
 8003908:	220f      	movs	r2, #15
 800390a:	18bb      	adds	r3, r7, r2
 800390c:	18ba      	adds	r2, r7, r2
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	3201      	adds	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	230f      	movs	r3, #15
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d9db      	bls.n	80038d6 <lasers_read+0x12>
	}
	return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bdb0      	pop	{r4, r5, r7, pc}
 8003928:	20000138 	.word	0x20000138

0800392c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  memset(laser_offsets, 0, sizeof(laser_offsets));
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <main+0xdc>)
 8003932:	2207      	movs	r2, #7
 8003934:	2100      	movs	r1, #0
 8003936:	0018      	movs	r0, r3
 8003938:	f006 fd49 	bl	800a3ce <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800393c:	f001 fd92 	bl	8005464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003940:	f000 f86c 	bl	8003a1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //NRF's UART interface produces noise on initialization. STM picks up this noise and offsets the UART DMA RX buffer.
  //To avoid this wait for NRF to finish it's initialization and then initialize STM.
  HAL_Delay(2000);
 8003944:	23fa      	movs	r3, #250	; 0xfa
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	0018      	movs	r0, r3
 800394a:	f001 fe11 	bl	8005570 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800394e:	f7ff fc63 	bl	8003218 <MX_GPIO_Init>
  MX_DMA_Init();
 8003952:	f7ff fc43 	bl	80031dc <MX_DMA_Init>
  MX_I2C1_Init();
 8003956:	f7ff fce7 	bl	8003328 <MX_I2C1_Init>
  MX_I2C2_Init();
 800395a:	f7ff fd25 	bl	80033a8 <MX_I2C2_Init>
  MX_TIM14_Init();
 800395e:	f000 fdbd 	bl	80044dc <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8003962:	f000 fed3 	bl	800470c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003966:	f000 ff1f 	bl	80047a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800396a:	f000 fd4b 	bl	8004404 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (lasers_init() == 0) return -1;
 800396e:	f7ff fe79 	bl	8003664 <lasers_init>
 8003972:	1e03      	subs	r3, r0, #0
 8003974:	d102      	bne.n	800397c <main+0x50>
 8003976:	2301      	movs	r3, #1
 8003978:	425b      	negs	r3, r3
 800397a:	e041      	b.n	8003a00 <main+0xd4>
  if (nrf_init(1000) != HAL_OK) return -1;
 800397c:	23fa      	movs	r3, #250	; 0xfa
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	0018      	movs	r0, r3
 8003982:	f000 fb3d 	bl	8004000 <nrf_init>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d002      	beq.n	8003990 <main+0x64>
 800398a:	2301      	movs	r3, #1
 800398c:	425b      	negs	r3, r3
 800398e:	e037      	b.n	8003a00 <main+0xd4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read/write data from/to NRF
	  handle_communications();
 8003990:	f000 f88c 	bl	8003aac <handle_communications>

	  if (initialized != 1)
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <main+0xe0>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d12d      	bne.n	80039f8 <main+0xcc>
		  continue;

	  //If at least one laser fails to return a measurement restart them all
	  if (lasers_read(laser_values) != HAL_OK)
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <main+0xe4>)
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff ff90 	bl	80038c4 <lasers_read>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d008      	beq.n	80039ba <main+0x8e>
	  {
		  lasers_deinit();
 80039a8:	f7ff fe24 	bl	80035f4 <lasers_deinit>

		  if (lasers_init() == 0)
 80039ac:	f7ff fe5a 	bl	8003664 <lasers_init>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d123      	bne.n	80039fc <main+0xd0>
			  return -1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	425b      	negs	r3, r3
 80039b8:	e022      	b.n	8003a00 <main+0xd4>

		  continue;
	  }

	  //Apply laser offsets
	  lasers_offset(laser_values, laser_offsets);
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <main+0xdc>)
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <main+0xe4>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fdcd 	bl	8003560 <lasers_offset>

	  //Check for timeout
	  if (nrf_timeout() == 1)
 80039c6:	f000 fbb3 	bl	8004130 <nrf_timeout>
 80039ca:	0003      	movs	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <main+0xb4>
	  {
		  initialized = 0;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <main+0xe0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
		  servo_deinit();
 80039d6:	f000 fbfd 	bl	80041d4 <servo_deinit>
		  motor_deinit();
 80039da:	f000 fa25 	bl	8003e28 <motor_deinit>
		  continue;
 80039de:	e00e      	b.n	80039fe <main+0xd2>
	  }

	  //Follow wall if auto_mode is 1
	  if (auto_mode == 1)
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <main+0xe8>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d1d3      	bne.n	8003990 <main+0x64>
		  auto_controls(laser_values, followed_wall, 0);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <main+0xec>)
 80039ea:	7819      	ldrb	r1, [r3, #0]
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <main+0xe4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	0018      	movs	r0, r3
 80039f2:	f001 fc47 	bl	8005284 <auto_controls>
 80039f6:	e7cb      	b.n	8003990 <main+0x64>
		  continue;
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	e7c9      	b.n	8003990 <main+0x64>
		  continue;
 80039fc:	46c0      	nop			; (mov r8, r8)
	  handle_communications();
 80039fe:	e7c7      	b.n	8003990 <main+0x64>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	20000180 	.word	0x20000180
 8003a0c:	2000017e 	.word	0x2000017e
 8003a10:	20000170 	.word	0x20000170
 8003a14:	20000187 	.word	0x20000187
 8003a18:	20000188 	.word	0x20000188

08003a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b093      	sub	sp, #76	; 0x4c
 8003a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a22:	2414      	movs	r4, #20
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	0018      	movs	r0, r3
 8003a28:	2334      	movs	r3, #52	; 0x34
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f006 fcce 	bl	800a3ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	0018      	movs	r0, r3
 8003a36:	2310      	movs	r3, #16
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f006 fcc7 	bl	800a3ce <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f003 fa95 	bl	8006f74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	0052      	lsls	r2, r2, #1
 8003a56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f003 facd 	bl	800700c <HAL_RCC_OscConfig>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003a76:	f000 f997 	bl	8003da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	0018      	movs	r0, r3
 8003a98:	f003 fdc8 	bl	800762c <HAL_RCC_ClockConfig>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003aa0:	f000 f982 	bl	8003da8 <Error_Handler>
  }
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b013      	add	sp, #76	; 0x4c
 8003aaa:	bd90      	pop	{r4, r7, pc}

08003aac <handle_communications>:

/* USER CODE BEGIN 4 */
void handle_communications()
{
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aae:	46ce      	mov	lr, r9
 8003ab0:	4647      	mov	r7, r8
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08d      	sub	sp, #52	; 0x34
 8003ab6:	af04      	add	r7, sp, #16
	if (nrf_available() != 1)
 8003ab8:	f000 fafa 	bl	80040b0 <nrf_available>
 8003abc:	0003      	movs	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d000      	beq.n	8003ac4 <handle_communications+0x18>
 8003ac2:	e159      	b.n	8003d78 <handle_communications+0x2cc>
		return;

	nrf_update_heartbeat();
 8003ac4:	f000 fb4a 	bl	800415c <nrf_update_heartbeat>

	const uint8_t* buffer = nrf_rx_buffer();
 8003ac8:	f000 fafc 	bl	80040c4 <nrf_rx_buffer>
 8003acc:	0003      	movs	r3, r0
 8003ace:	61bb      	str	r3, [r7, #24]
	const uint8_t id = buffer[0];
 8003ad0:	2117      	movs	r1, #23
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	701a      	strb	r2, [r3, #0]

	if (id == 1) //app sent initialization parameters
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d000      	beq.n	8003ae4 <handle_communications+0x38>
 8003ae2:	e0a8      	b.n	8003c36 <handle_communications+0x18a>
	{
		if (initialized == 1)
 8003ae4:	4ba8      	ldr	r3, [pc, #672]	; (8003d88 <handle_communications+0x2dc>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <handle_communications+0x4e>
		{
			servo_deinit();
 8003aec:	f000 fb72 	bl	80041d4 <servo_deinit>
			motor_deinit();
 8003af0:	f000 f99a 	bl	8003e28 <motor_deinit>
			initialized = 0;
 8003af4:	4ba4      	ldr	r3, [pc, #656]	; (8003d88 <handle_communications+0x2dc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
		}

		for (uint8_t i = 0; i < 7; ++i)
 8003afa:	231f      	movs	r3, #31
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e011      	b.n	8003b28 <handle_communications+0x7c>
			laser_offsets[i] = (int8_t)buffer[i + 1];
 8003b04:	211f      	movs	r1, #31
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	0008      	movs	r0, r1
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b251      	sxtb	r1, r2
 8003b1a:	4a9c      	ldr	r2, [pc, #624]	; (8003d8c <handle_communications+0x2e0>)
 8003b1c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; ++i)
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	183a      	adds	r2, r7, r0
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	3201      	adds	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	231f      	movs	r3, #31
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d9e8      	bls.n	8003b04 <handle_communications+0x58>

		const uint8_t invert_servo = *((uint8_t*)(buffer + 14));
 8003b32:	2312      	movs	r3, #18
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	7b92      	ldrb	r2, [r2, #14]
 8003b3a:	701a      	strb	r2, [r3, #0]
		uint16_t servo_max_left, servo_middle, servo_max_right;

		memcpy(&servo_max_left, buffer + 8, 2);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	0019      	movs	r1, r3
 8003b40:	3108      	adds	r1, #8
 8003b42:	2410      	movs	r4, #16
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	2202      	movs	r2, #2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f006 fc37 	bl	800a3bc <memcpy>
		memcpy(&servo_middle, buffer + 10, 2);
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	0019      	movs	r1, r3
 8003b52:	310a      	adds	r1, #10
 8003b54:	250e      	movs	r5, #14
 8003b56:	197b      	adds	r3, r7, r5
 8003b58:	2202      	movs	r2, #2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f006 fc2e 	bl	800a3bc <memcpy>
		memcpy(&servo_max_right, buffer + 12, 2);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	0019      	movs	r1, r3
 8003b64:	310c      	adds	r1, #12
 8003b66:	260c      	movs	r6, #12
 8003b68:	19bb      	adds	r3, r7, r6
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f006 fc25 	bl	800a3bc <memcpy>

		//Calculate timer's CCR values from angles
		servo_max_left = (uint16_t)((float)servo_max_left / 180.f * 1141.f) + 174;
 8003b72:	193b      	adds	r3, r7, r4
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fd fb48 	bl	800120c <__aeabi_ui2f>
 8003b7c:	1c03      	adds	r3, r0, #0
 8003b7e:	4984      	ldr	r1, [pc, #528]	; (8003d90 <handle_communications+0x2e4>)
 8003b80:	1c18      	adds	r0, r3, #0
 8003b82:	f7fc fe23 	bl	80007cc <__aeabi_fdiv>
 8003b86:	1c03      	adds	r3, r0, #0
 8003b88:	4982      	ldr	r1, [pc, #520]	; (8003d94 <handle_communications+0x2e8>)
 8003b8a:	1c18      	adds	r0, r3, #0
 8003b8c:	f7fc ffe6 	bl	8000b5c <__aeabi_fmul>
 8003b90:	1c03      	adds	r3, r0, #0
 8003b92:	1c18      	adds	r0, r3, #0
 8003b94:	f7fc fc64 	bl	8000460 <__aeabi_f2uiz>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	33ae      	adds	r3, #174	; 0xae
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	801a      	strh	r2, [r3, #0]
		servo_middle = (uint16_t)((float)servo_middle / 180.f * 1141.f) + 174;
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fd fb2f 	bl	800120c <__aeabi_ui2f>
 8003bae:	1c03      	adds	r3, r0, #0
 8003bb0:	4977      	ldr	r1, [pc, #476]	; (8003d90 <handle_communications+0x2e4>)
 8003bb2:	1c18      	adds	r0, r3, #0
 8003bb4:	f7fc fe0a 	bl	80007cc <__aeabi_fdiv>
 8003bb8:	1c03      	adds	r3, r0, #0
 8003bba:	4976      	ldr	r1, [pc, #472]	; (8003d94 <handle_communications+0x2e8>)
 8003bbc:	1c18      	adds	r0, r3, #0
 8003bbe:	f7fc ffcd 	bl	8000b5c <__aeabi_fmul>
 8003bc2:	1c03      	adds	r3, r0, #0
 8003bc4:	1c18      	adds	r0, r3, #0
 8003bc6:	f7fc fc4b 	bl	8000460 <__aeabi_f2uiz>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	33ae      	adds	r3, #174	; 0xae
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	197b      	adds	r3, r7, r5
 8003bd4:	801a      	strh	r2, [r3, #0]
		servo_max_right = (uint16_t)((float)servo_max_right / 180.f * 1141.f) + 174;
 8003bd6:	19bb      	adds	r3, r7, r6
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fd fb16 	bl	800120c <__aeabi_ui2f>
 8003be0:	1c03      	adds	r3, r0, #0
 8003be2:	496b      	ldr	r1, [pc, #428]	; (8003d90 <handle_communications+0x2e4>)
 8003be4:	1c18      	adds	r0, r3, #0
 8003be6:	f7fc fdf1 	bl	80007cc <__aeabi_fdiv>
 8003bea:	1c03      	adds	r3, r0, #0
 8003bec:	4969      	ldr	r1, [pc, #420]	; (8003d94 <handle_communications+0x2e8>)
 8003bee:	1c18      	adds	r0, r3, #0
 8003bf0:	f7fc ffb4 	bl	8000b5c <__aeabi_fmul>
 8003bf4:	1c03      	adds	r3, r0, #0
 8003bf6:	1c18      	adds	r0, r3, #0
 8003bf8:	f7fc fc32 	bl	8000460 <__aeabi_f2uiz>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	33ae      	adds	r3, #174	; 0xae
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	19bb      	adds	r3, r7, r6
 8003c06:	801a      	strh	r2, [r3, #0]

		servo_init(servo_max_left, servo_middle, servo_max_right, invert_servo);
 8003c08:	193b      	adds	r3, r7, r4
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	197b      	adds	r3, r7, r5
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	0019      	movs	r1, r3
 8003c14:	19bb      	adds	r3, r7, r6
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	001a      	movs	r2, r3
 8003c1a:	2312      	movs	r3, #18
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	f000 faa8 	bl	8004174 <servo_init>

		nrf_write(id, 0, 0); //send ack
 8003c24:	2317      	movs	r3, #23
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 f9fe 	bl	8004030 <nrf_write>
 8003c34:	e0a1      	b.n	8003d7a <handle_communications+0x2ce>
		return;
	}
	else if (id == 2)
 8003c36:	2317      	movs	r3, #23
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d172      	bne.n	8003d26 <handle_communications+0x27a>
	{
		const uint8_t invert_motor = *((uint8_t*)(buffer + 1));
 8003c40:	2116      	movs	r1, #22
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	7852      	ldrb	r2, [r2, #1]
 8003c48:	701a      	strb	r2, [r3, #0]
		const uint8_t hbridge = *((uint8_t*)(buffer + 2));
 8003c4a:	2015      	movs	r0, #21
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	7892      	ldrb	r2, [r2, #2]
 8003c52:	701a      	strb	r2, [r3, #0]

		motor_init(hbridge, invert_motor);
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	183b      	adds	r3, r7, r0
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	0011      	movs	r1, r2
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 f8a8 	bl	8003db4 <motor_init>

		uint16_t min_laser, max_laser, target, radius, servo_sensitivity;
		uint8_t laser_amount, speed;

		memcpy(&min_laser, buffer + 3, 2);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1cd9      	adds	r1, r3, #3
 8003c68:	240a      	movs	r4, #10
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f006 fba4 	bl	800a3bc <memcpy>
		memcpy(&max_laser, buffer + 5, 2);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1d59      	adds	r1, r3, #5
 8003c78:	2608      	movs	r6, #8
 8003c7a:	19bb      	adds	r3, r7, r6
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f006 fb9c 	bl	800a3bc <memcpy>
		memcpy(&radius, buffer + 7, 2);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1dd9      	adds	r1, r3, #7
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f006 fb95 	bl	800a3bc <memcpy>
		memcpy(&target, buffer + 9, 2);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	0019      	movs	r1, r3
 8003c96:	3109      	adds	r1, #9
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f006 fb8d 	bl	800a3bc <memcpy>

		speed = *((uint8_t*)(buffer + 11));
 8003ca2:	2514      	movs	r5, #20
 8003ca4:	197b      	adds	r3, r7, r5
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	7ad2      	ldrb	r2, [r2, #11]
 8003caa:	701a      	strb	r2, [r3, #0]
		laser_amount = *((uint8_t*)(buffer + 12));
 8003cac:	2213      	movs	r2, #19
 8003cae:	18bb      	adds	r3, r7, r2
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	7b12      	ldrb	r2, [r2, #12]
 8003cb4:	701a      	strb	r2, [r3, #0]

		memcpy(&servo_sensitivity, buffer + 13, 2);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	0019      	movs	r1, r3
 8003cba:	310d      	adds	r1, #13
 8003cbc:	1cbb      	adds	r3, r7, #2
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f006 fb7b 	bl	800a3bc <memcpy>

		auto_controls_init(
 8003cc6:	197b      	adds	r3, r7, r5
 8003cc8:	2500      	movs	r5, #0
 8003cca:	575d      	ldrsb	r5, [r3, r5]
 8003ccc:	19bb      	adds	r3, r7, r6
 8003cce:	881e      	ldrh	r6, [r3, #0]
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	8819      	ldrh	r1, [r3, #0]
 8003cd4:	4688      	mov	r8, r1
 8003cd6:	1dbb      	adds	r3, r7, #6
 8003cd8:	8819      	ldrh	r1, [r3, #0]
 8003cda:	4689      	mov	r9, r1
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	881c      	ldrh	r4, [r3, #0]
				max_laser,
				min_laser,
				target,
				radius,
				laser_amount,
				(float)servo_sensitivity / 100.f);
 8003ce0:	1cbb      	adds	r3, r7, #2
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fd fa91 	bl	800120c <__aeabi_ui2f>
 8003cea:	1c03      	adds	r3, r0, #0
		auto_controls_init(
 8003cec:	492a      	ldr	r1, [pc, #168]	; (8003d98 <handle_communications+0x2ec>)
 8003cee:	1c18      	adds	r0, r3, #0
 8003cf0:	f7fc fd6c 	bl	80007cc <__aeabi_fdiv>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	9302      	str	r3, [sp, #8]
 8003cf8:	2213      	movs	r2, #19
 8003cfa:	18bb      	adds	r3, r7, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	9400      	str	r4, [sp, #0]
 8003d02:	464b      	mov	r3, r9
 8003d04:	4642      	mov	r2, r8
 8003d06:	0031      	movs	r1, r6
 8003d08:	0028      	movs	r0, r5
 8003d0a:	f001 fb3f 	bl	800538c <auto_controls_init>

		initialized = 1;
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <handle_communications+0x2dc>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]

		nrf_write(id, 0, 0); //send ack
 8003d14:	2317      	movs	r3, #23
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 f986 	bl	8004030 <nrf_write>
 8003d24:	e029      	b.n	8003d7a <handle_communications+0x2ce>
		return;
	}
	else if (id == 4) //app sent controls
 8003d26:	2317      	movs	r3, #23
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d124      	bne.n	8003d7a <handle_communications+0x2ce>
	{
		auto_mode = *((uint8_t*)(buffer + 1));
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	785a      	ldrb	r2, [r3, #1]
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <handle_communications+0x2f0>)
 8003d36:	701a      	strb	r2, [r3, #0]
		followed_wall = *((uint8_t*)(buffer + 2));
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	789a      	ldrb	r2, [r3, #2]
 8003d3c:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <handle_communications+0x2f4>)
 8003d3e:	701a      	strb	r2, [r3, #0]

		if (auto_mode == 0)
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <handle_communications+0x2f0>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <handle_communications+0x2ba>
		{
			servo_set(*((int8_t*)(buffer + 3)));
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	3303      	adds	r3, #3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 fa4d 	bl	80041f0 <servo_set>
			motor_set_speed(*((int8_t*)(buffer + 4)), 0);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f87f 	bl	8003e64 <motor_set_speed>
		}

		nrf_write(id, (const uint8_t*)laser_values, sizeof(laser_values)); //send ack
 8003d66:	490f      	ldr	r1, [pc, #60]	; (8003da4 <handle_communications+0x2f8>)
 8003d68:	2317      	movs	r3, #23
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	220e      	movs	r2, #14
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f95d 	bl	8004030 <nrf_write>
		return;
 8003d76:	e000      	b.n	8003d7a <handle_communications+0x2ce>
		return;
 8003d78:	46c0      	nop			; (mov r8, r8)
	}
}
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b009      	add	sp, #36	; 0x24
 8003d7e:	bcc0      	pop	{r6, r7}
 8003d80:	46b9      	mov	r9, r7
 8003d82:	46b0      	mov	r8, r6
 8003d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	2000017e 	.word	0x2000017e
 8003d8c:	20000180 	.word	0x20000180
 8003d90:	43340000 	.word	0x43340000
 8003d94:	448ea000 	.word	0x448ea000
 8003d98:	42c80000 	.word	0x42c80000
 8003d9c:	20000187 	.word	0x20000187
 8003da0:	20000188 	.word	0x20000188
 8003da4:	20000170 	.word	0x20000170

08003da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dac:	b672      	cpsid	i
}
 8003dae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <Error_Handler+0x8>
	...

08003db4 <motor_init>:

int8_t last_speed = 0;
uint32_t boost_time = 0;

HAL_StatusTypeDef motor_init(uint8_t hbridge, uint8_t inverted)
{
 8003db4:	b5b0      	push	{r4, r5, r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	0002      	movs	r2, r0
 8003dbc:	1dfb      	adds	r3, r7, #7
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	1dbb      	adds	r3, r7, #6
 8003dc2:	1c0a      	adds	r2, r1, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
	hbridge_type = hbridge;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <motor_init+0x68>)
 8003dc8:	1dfa      	adds	r2, r7, #7
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
	motor_inverted = inverted;
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <motor_init+0x6c>)
 8003dd0:	1dba      	adds	r2, r7, #6
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
	htim3.Instance->CCR1 = 0;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <motor_init+0x70>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR4 = 0;
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <motor_init+0x70>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

	const HAL_StatusTypeDef status = HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003de6:	250f      	movs	r5, #15
 8003de8:	197c      	adds	r4, r7, r5
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <motor_init+0x70>)
 8003dec:	2100      	movs	r1, #0
 8003dee:	0018      	movs	r0, r3
 8003df0:	f003 ff9c 	bl	8007d2c <HAL_TIM_PWM_Start>
 8003df4:	0003      	movs	r3, r0
 8003df6:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8003df8:	197b      	adds	r3, r7, r5
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <motor_init+0x52>
		return status;
 8003e00:	197b      	adds	r3, r7, r5
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	e005      	b.n	8003e12 <motor_init+0x5e>

	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <motor_init+0x70>)
 8003e08:	210c      	movs	r1, #12
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f003 ff8e 	bl	8007d2c <HAL_TIM_PWM_Start>
 8003e10:	0003      	movs	r3, r0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20000189 	.word	0x20000189
 8003e20:	2000018a 	.word	0x2000018a
 8003e24:	200001cc 	.word	0x200001cc

08003e28 <motor_deinit>:

HAL_StatusTypeDef motor_deinit()
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
	const HAL_StatusTypeDef status = HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003e2e:	1dfc      	adds	r4, r7, #7
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <motor_deinit+0x38>)
 8003e32:	2100      	movs	r1, #0
 8003e34:	0018      	movs	r0, r3
 8003e36:	f004 f851 	bl	8007edc <HAL_TIM_PWM_Stop>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <motor_deinit+0x24>
		return status;
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	e005      	b.n	8003e58 <motor_deinit+0x30>

	return HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <motor_deinit+0x38>)
 8003e4e:	210c      	movs	r1, #12
 8003e50:	0018      	movs	r0, r3
 8003e52:	f004 f843 	bl	8007edc <HAL_TIM_PWM_Stop>
 8003e56:	0003      	movs	r3, r0
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	200001cc 	.word	0x200001cc

08003e64 <motor_set_speed>:

void motor_set_speed(int8_t speed, int8_t boost)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	1dbb      	adds	r3, r7, #6
 8003e72:	1c0a      	adds	r2, r1, #0
 8003e74:	701a      	strb	r2, [r3, #0]
	if (boost_time != 0)
 8003e76:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <motor_set_speed+0x184>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <motor_set_speed+0x36>
	{
		if (HAL_GetTick() - boost_time >= 300)
 8003e7e:	f001 fb6d 	bl	800555c <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <motor_set_speed+0x184>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1ad2      	subs	r2, r2, r3
 8003e8a:	2396      	movs	r3, #150	; 0x96
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d200      	bcs.n	8003e94 <motor_set_speed+0x30>
 8003e92:	e0a4      	b.n	8003fde <motor_set_speed+0x17a>
			boost_time = 0;
 8003e94:	4b54      	ldr	r3, [pc, #336]	; (8003fe8 <motor_set_speed+0x184>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
		else
			return;
	}

	if (boost_time == 0 && boost != 0 && speed != last_speed && last_speed == 0)
 8003e9a:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <motor_set_speed+0x184>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d125      	bne.n	8003eee <motor_set_speed+0x8a>
 8003ea2:	1dbb      	adds	r3, r7, #6
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <motor_set_speed+0x8a>
 8003eac:	4b4f      	ldr	r3, [pc, #316]	; (8003fec <motor_set_speed+0x188>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	1dfa      	adds	r2, r7, #7
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	b252      	sxtb	r2, r2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d018      	beq.n	8003eee <motor_set_speed+0x8a>
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <motor_set_speed+0x188>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <motor_set_speed+0x8a>
	{
		boost_time = HAL_GetTick();
 8003ec6:	f001 fb49 	bl	800555c <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	4b46      	ldr	r3, [pc, #280]	; (8003fe8 <motor_set_speed+0x184>)
 8003ece:	601a      	str	r2, [r3, #0]

		if (speed >= 0)
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed6:	d804      	bhi.n	8003ee2 <motor_set_speed+0x7e>
			speed = boost;
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	1dba      	adds	r2, r7, #6
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e005      	b.n	8003eee <motor_set_speed+0x8a>
		else
			speed = -boost;
 8003ee2:	1dbb      	adds	r3, r7, #6
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	425b      	negs	r3, r3
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	701a      	strb	r2, [r3, #0]
	}

	if (motor_inverted == 1)
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <motor_set_speed+0x18c>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <motor_set_speed+0x9e>
		speed *= -1;
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	425b      	negs	r3, r3
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	701a      	strb	r2, [r3, #0]

	if (hbridge_type == 0)
 8003f02:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <motor_set_speed+0x190>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d13b      	bne.n	8003f82 <motor_set_speed+0x11e>
	{
		if (speed == 0) //Neutral
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	b25b      	sxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10e      	bne.n	8003f32 <motor_set_speed+0xce>
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_RESET);
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <motor_set_speed+0x194>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	2104      	movs	r1, #4
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f002 f8ac 	bl	8006078 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 0;
 8003f20:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <motor_set_speed+0x198>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = 0;
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <motor_set_speed+0x198>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f30:	e050      	b.n	8003fd4 <motor_set_speed+0x170>
		}
		else if (speed > 0) //Forward
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dd10      	ble.n	8003f5e <motor_set_speed+0xfa>
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_RESET);
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <motor_set_speed+0x194>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2104      	movs	r1, #4
 8003f42:	0018      	movs	r0, r3
 8003f44:	f002 f898 	bl	8006078 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 100;
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <motor_set_speed+0x198>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2264      	movs	r2, #100	; 0x64
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(speed);
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <motor_set_speed+0x198>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1dfa      	adds	r2, r7, #7
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	b252      	sxtb	r2, r2
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5c:	e03a      	b.n	8003fd4 <motor_set_speed+0x170>
		}
		else //Backward
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_SET);
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <motor_set_speed+0x194>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	2104      	movs	r1, #4
 8003f64:	0018      	movs	r0, r3
 8003f66:	f002 f887 	bl	8006078 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 0;
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <motor_set_speed+0x198>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(-speed);
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	425a      	negs	r2, r3
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <motor_set_speed+0x198>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f80:	e028      	b.n	8003fd4 <motor_set_speed+0x170>
		}
	}
	else
	{
		if (speed == 0) //Neutral
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <motor_set_speed+0x13a>
		{
			htim3.Instance->CCR1 = 0;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <motor_set_speed+0x198>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR4 = 0;
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <motor_set_speed+0x198>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f9c:	e01a      	b.n	8003fd4 <motor_set_speed+0x170>
		}
		else if (speed > 0) //Forward
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dd0a      	ble.n	8003fbe <motor_set_speed+0x15a>
		{
			htim3.Instance->CCR4 = 0;
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <motor_set_speed+0x198>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(speed);
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <motor_set_speed+0x198>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1dfa      	adds	r2, r7, #7
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	b252      	sxtb	r2, r2
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34
 8003fbc:	e00a      	b.n	8003fd4 <motor_set_speed+0x170>
		}
		else //Backward
		{
			htim3.Instance->CCR4 = (uint32_t)(-speed);
 8003fbe:	1dfb      	adds	r3, r7, #7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	425a      	negs	r2, r3
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <motor_set_speed+0x198>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = 0;
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <motor_set_speed+0x198>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	last_speed = speed;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <motor_set_speed+0x188>)
 8003fd6:	1dfa      	adds	r2, r7, #7
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e000      	b.n	8003fe0 <motor_set_speed+0x17c>
			return;
 8003fde:	46c0      	nop			; (mov r8, r8)
}
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	2000018c 	.word	0x2000018c
 8003fec:	2000018b 	.word	0x2000018b
 8003ff0:	2000018a 	.word	0x2000018a
 8003ff4:	20000189 	.word	0x20000189
 8003ff8:	50000400 	.word	0x50000400
 8003ffc:	200001cc 	.word	0x200001cc

08004000 <nrf_init>:

uint32_t last_heartbeat_time = 0;
uint32_t timeout_duration;

HAL_StatusTypeDef nrf_init(const uint32_t timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	timeout_duration = timeout;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <nrf_init+0x24>)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
	return HAL_UART_Receive_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 800400e:	4906      	ldr	r1, [pc, #24]	; (8004028 <nrf_init+0x28>)
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <nrf_init+0x2c>)
 8004012:	2210      	movs	r2, #16
 8004014:	0018      	movs	r0, r3
 8004016:	f004 fd73 	bl	8008b00 <HAL_UART_Receive_DMA>
 800401a:	0003      	movs	r3, r0
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b002      	add	sp, #8
 8004022:	bd80      	pop	{r7, pc}
 8004024:	200001b8 	.word	0x200001b8
 8004028:	20000190 	.word	0x20000190
 800402c:	200002f8 	.word	0x200002f8

08004030 <nrf_write>:

HAL_StatusTypeDef nrf_write(const uint8_t id, const uint8_t* buffer, const uint8_t size)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6039      	str	r1, [r7, #0]
 8004038:	0011      	movs	r1, r2
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	1c02      	adds	r2, r0, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	1c0a      	adds	r2, r1, #0
 8004044:	701a      	strb	r2, [r3, #0]
	while (tx_buffer_ready != 1)
 8004046:	e002      	b.n	800404e <nrf_write+0x1e>
		HAL_Delay(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f001 fa91 	bl	8005570 <HAL_Delay>
	while (tx_buffer_ready != 1)
 800404e:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <nrf_write+0x70>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d1f8      	bne.n	8004048 <nrf_write+0x18>

	if (size == 0)
 8004056:	1dbb      	adds	r3, r7, #6
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <nrf_write+0x3c>
		memset(tx_buffer, 0, sizeof(tx_buffer));
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <nrf_write+0x74>)
 8004060:	2210      	movs	r2, #16
 8004062:	2100      	movs	r1, #0
 8004064:	0018      	movs	r0, r3
 8004066:	f006 f9b2 	bl	800a3ce <memset>
 800406a:	e006      	b.n	800407a <nrf_write+0x4a>
	else
		memcpy(tx_buffer + 1, buffer, size);
 800406c:	480e      	ldr	r0, [pc, #56]	; (80040a8 <nrf_write+0x78>)
 800406e:	1dbb      	adds	r3, r7, #6
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	0019      	movs	r1, r3
 8004076:	f006 f9a1 	bl	800a3bc <memcpy>

	tx_buffer[0] = id;
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <nrf_write+0x74>)
 800407c:	1dfa      	adds	r2, r7, #7
 800407e:	7812      	ldrb	r2, [r2, #0]
 8004080:	701a      	strb	r2, [r3, #0]

	tx_buffer_ready = 0;
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <nrf_write+0x70>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8004088:	4906      	ldr	r1, [pc, #24]	; (80040a4 <nrf_write+0x74>)
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <nrf_write+0x7c>)
 800408c:	2210      	movs	r2, #16
 800408e:	0018      	movs	r0, r3
 8004090:	f004 fc8e 	bl	80089b0 <HAL_UART_Transmit_IT>
 8004094:	0003      	movs	r3, r0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	20000000 	.word	0x20000000
 80040a4:	200001a4 	.word	0x200001a4
 80040a8:	200001a5 	.word	0x200001a5
 80040ac:	200002f8 	.word	0x200002f8

080040b0 <nrf_available>:

uint8_t nrf_available()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	return rx_buffer_ready;
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <nrf_available+0x10>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	200001a0 	.word	0x200001a0

080040c4 <nrf_rx_buffer>:

const uint8_t* nrf_rx_buffer()
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
	rx_buffer_ready = 0;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <nrf_rx_buffer+0x14>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
	return rx_buffer;
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <nrf_rx_buffer+0x18>)
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	200001a0 	.word	0x200001a0
 80040dc:	20000190 	.word	0x20000190

080040e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_UART_RxCpltCallback+0x20>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d103      	bne.n	80040f8 <HAL_UART_RxCpltCallback+0x18>
		return;

	rx_buffer_ready = 1;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <HAL_UART_RxCpltCallback+0x24>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e000      	b.n	80040fa <HAL_UART_RxCpltCallback+0x1a>
		return;
 80040f8:	46c0      	nop			; (mov r8, r8)
}
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200002f8 	.word	0x200002f8
 8004104:	200001a0 	.word	0x200001a0

08004108 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_UART_TxCpltCallback+0x20>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d103      	bne.n	8004120 <HAL_UART_TxCpltCallback+0x18>
		return;

	tx_buffer_ready = 1;
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_UART_TxCpltCallback+0x24>)
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e000      	b.n	8004122 <HAL_UART_TxCpltCallback+0x1a>
		return;
 8004120:	46c0      	nop			; (mov r8, r8)
}
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200002f8 	.word	0x200002f8
 800412c:	20000000 	.word	0x20000000

08004130 <nrf_timeout>:

uint8_t nrf_timeout()
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_heartbeat_time) >= timeout_duration)
 8004134:	f001 fa12 	bl	800555c <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <nrf_timeout+0x24>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <nrf_timeout+0x28>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d301      	bcc.n	800414c <nrf_timeout+0x1c>
		return 1;
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <nrf_timeout+0x1e>

	return 0;
 800414c:	2300      	movs	r3, #0
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	200001b4 	.word	0x200001b4
 8004158:	200001b8 	.word	0x200001b8

0800415c <nrf_update_heartbeat>:

void nrf_update_heartbeat()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	last_heartbeat_time = HAL_GetTick();
 8004160:	f001 f9fc 	bl	800555c <HAL_GetTick>
 8004164:	0002      	movs	r2, r0
 8004166:	4b02      	ldr	r3, [pc, #8]	; (8004170 <nrf_update_heartbeat+0x14>)
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200001b4 	.word	0x200001b4

08004174 <servo_init>:
uint32_t rmax;
uint32_t mid;
uint8_t invert;

HAL_StatusTypeDef servo_init(const uint32_t left_max, const uint32_t middle, const uint32_t right_max, uint8_t inverted)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	001a      	movs	r2, r3
 8004182:	1cfb      	adds	r3, r7, #3
 8004184:	701a      	strb	r2, [r3, #0]
	mid = middle;
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <servo_init+0x4c>)
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	601a      	str	r2, [r3, #0]
	lmax = left_max;
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <servo_init+0x50>)
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]
	rmax = right_max;
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <servo_init+0x54>)
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
	invert = inverted;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <servo_init+0x58>)
 800419a:	1cfa      	adds	r2, r7, #3
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	701a      	strb	r2, [r3, #0]

	htim14.Instance->CCR1 = mid;
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <servo_init+0x5c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <servo_init+0x4c>)
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
	return HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <servo_init+0x5c>)
 80041ac:	2100      	movs	r1, #0
 80041ae:	0018      	movs	r0, r3
 80041b0:	f003 fdbc 	bl	8007d2c <HAL_TIM_PWM_Start>
 80041b4:	0003      	movs	r3, r0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	200001c4 	.word	0x200001c4
 80041c4:	200001bc 	.word	0x200001bc
 80041c8:	200001c0 	.word	0x200001c0
 80041cc:	200001c8 	.word	0x200001c8
 80041d0:	20000218 	.word	0x20000218

080041d4 <servo_deinit>:
	servo_set(100);
	HAL_Delay(1000);
}

HAL_StatusTypeDef servo_deinit()
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
	return HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <servo_deinit+0x18>)
 80041da:	2100      	movs	r1, #0
 80041dc:	0018      	movs	r0, r3
 80041de:	f003 fe7d 	bl	8007edc <HAL_TIM_PWM_Stop>
 80041e2:	0003      	movs	r3, r0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000218 	.word	0x20000218

080041f0 <servo_set>:

void servo_set(int8_t position)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	0002      	movs	r2, r0
 80041f8:	1dfb      	adds	r3, r7, #7
 80041fa:	701a      	strb	r2, [r3, #0]
    if (position >= 0)
 80041fc:	1dfb      	adds	r3, r7, #7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b7f      	cmp	r3, #127	; 0x7f
 8004202:	d849      	bhi.n	8004298 <servo_set+0xa8>
    {
        if (invert == 1)
 8004204:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <servo_set+0x144>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d122      	bne.n	8004252 <servo_set+0x62>
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, rmax, mid, (float)position);
 800420c:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <servo_set+0x148>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fc fffb 	bl	800120c <__aeabi_ui2f>
 8004216:	1c04      	adds	r4, r0, #0
 8004218:	4b48      	ldr	r3, [pc, #288]	; (800433c <servo_set+0x14c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fc fff5 	bl	800120c <__aeabi_ui2f>
 8004222:	1c05      	adds	r5, r0, #0
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b25b      	sxtb	r3, r3
 800422a:	0018      	movs	r0, r3
 800422c:	f7fc ffa0 	bl	8001170 <__aeabi_i2f>
 8004230:	1c03      	adds	r3, r0, #0
 8004232:	2100      	movs	r1, #0
 8004234:	4842      	ldr	r0, [pc, #264]	; (8004340 <servo_set+0x150>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	1c2b      	adds	r3, r5, #0
 800423a:	1c22      	adds	r2, r4, #0
 800423c:	f000 fbce 	bl	80049dc <mapf>
 8004240:	1c02      	adds	r2, r0, #0
 8004242:	4b40      	ldr	r3, [pc, #256]	; (8004344 <servo_set+0x154>)
 8004244:	681c      	ldr	r4, [r3, #0]
 8004246:	1c10      	adds	r0, r2, #0
 8004248:	f7fc f90a 	bl	8000460 <__aeabi_f2uiz>
 800424c:	0003      	movs	r3, r0
 800424e:	6363      	str	r3, [r4, #52]	; 0x34
        if (invert == 1)
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, lmax, (float)position);
        else
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, lmax, mid, (float)position);
    }
}
 8004250:	e06b      	b.n	800432a <servo_set+0x13a>
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, rmax, (float)position);
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <servo_set+0x14c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0018      	movs	r0, r3
 8004258:	f7fc ffd8 	bl	800120c <__aeabi_ui2f>
 800425c:	1c04      	adds	r4, r0, #0
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <servo_set+0x148>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	0018      	movs	r0, r3
 8004264:	f7fc ffd2 	bl	800120c <__aeabi_ui2f>
 8004268:	1c05      	adds	r5, r0, #0
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b25b      	sxtb	r3, r3
 8004270:	0018      	movs	r0, r3
 8004272:	f7fc ff7d 	bl	8001170 <__aeabi_i2f>
 8004276:	1c03      	adds	r3, r0, #0
 8004278:	4933      	ldr	r1, [pc, #204]	; (8004348 <servo_set+0x158>)
 800427a:	2000      	movs	r0, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	1c2b      	adds	r3, r5, #0
 8004280:	1c22      	adds	r2, r4, #0
 8004282:	f000 fbab 	bl	80049dc <mapf>
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <servo_set+0x154>)
 800428a:	681c      	ldr	r4, [r3, #0]
 800428c:	1c10      	adds	r0, r2, #0
 800428e:	f7fc f8e7 	bl	8000460 <__aeabi_f2uiz>
 8004292:	0003      	movs	r3, r0
 8004294:	6363      	str	r3, [r4, #52]	; 0x34
}
 8004296:	e048      	b.n	800432a <servo_set+0x13a>
        if (invert == 1)
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <servo_set+0x144>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d122      	bne.n	80042e6 <servo_set+0xf6>
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, lmax, (float)position);
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <servo_set+0x14c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fc ffb1 	bl	800120c <__aeabi_ui2f>
 80042aa:	1c04      	adds	r4, r0, #0
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <servo_set+0x15c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fc ffab 	bl	800120c <__aeabi_ui2f>
 80042b6:	1c05      	adds	r5, r0, #0
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fc ff56 	bl	8001170 <__aeabi_i2f>
 80042c4:	1c03      	adds	r3, r0, #0
 80042c6:	4920      	ldr	r1, [pc, #128]	; (8004348 <servo_set+0x158>)
 80042c8:	2000      	movs	r0, #0
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	1c2b      	adds	r3, r5, #0
 80042ce:	1c22      	adds	r2, r4, #0
 80042d0:	f000 fb84 	bl	80049dc <mapf>
 80042d4:	1c02      	adds	r2, r0, #0
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <servo_set+0x154>)
 80042d8:	681c      	ldr	r4, [r3, #0]
 80042da:	1c10      	adds	r0, r2, #0
 80042dc:	f7fc f8c0 	bl	8000460 <__aeabi_f2uiz>
 80042e0:	0003      	movs	r3, r0
 80042e2:	6363      	str	r3, [r4, #52]	; 0x34
}
 80042e4:	e021      	b.n	800432a <servo_set+0x13a>
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, lmax, mid, (float)position);
 80042e6:	4b19      	ldr	r3, [pc, #100]	; (800434c <servo_set+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fc ff8e 	bl	800120c <__aeabi_ui2f>
 80042f0:	1c04      	adds	r4, r0, #0
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <servo_set+0x14c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7fc ff88 	bl	800120c <__aeabi_ui2f>
 80042fc:	1c05      	adds	r5, r0, #0
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b25b      	sxtb	r3, r3
 8004304:	0018      	movs	r0, r3
 8004306:	f7fc ff33 	bl	8001170 <__aeabi_i2f>
 800430a:	1c03      	adds	r3, r0, #0
 800430c:	2100      	movs	r1, #0
 800430e:	480c      	ldr	r0, [pc, #48]	; (8004340 <servo_set+0x150>)
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	1c2b      	adds	r3, r5, #0
 8004314:	1c22      	adds	r2, r4, #0
 8004316:	f000 fb61 	bl	80049dc <mapf>
 800431a:	1c02      	adds	r2, r0, #0
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <servo_set+0x154>)
 800431e:	681c      	ldr	r4, [r3, #0]
 8004320:	1c10      	adds	r0, r2, #0
 8004322:	f7fc f89d 	bl	8000460 <__aeabi_f2uiz>
 8004326:	0003      	movs	r3, r0
 8004328:	6363      	str	r3, [r4, #52]	; 0x34
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bdb0      	pop	{r4, r5, r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	200001c8 	.word	0x200001c8
 8004338:	200001c0 	.word	0x200001c0
 800433c:	200001c4 	.word	0x200001c4
 8004340:	c2c80000 	.word	0xc2c80000
 8004344:	20000218 	.word	0x20000218
 8004348:	42c80000 	.word	0x42c80000
 800434c:	200001bc 	.word	0x200001bc

08004350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_MspInit+0x44>)
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_MspInit+0x44>)
 800435c:	2101      	movs	r1, #1
 800435e:	430a      	orrs	r2, r1
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_MspInit+0x44>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_MspInit+0x44>)
 8004370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_MspInit+0x44>)
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	0549      	lsls	r1, r1, #21
 8004378:	430a      	orrs	r2, r1
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_MspInit+0x44>)
 800437e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	055b      	lsls	r3, r3, #21
 8004384:	4013      	ands	r3, r2
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	40021000 	.word	0x40021000

08004398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800439c:	e7fe      	b.n	800439c <NMI_Handler+0x4>

0800439e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a2:	e7fe      	b.n	80043a2 <HardFault_Handler+0x4>

080043a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043bc:	f001 f8bc 	bl	8005538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <DMA1_Channel1_IRQHandler+0x14>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f001 fbac 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	2000038c 	.word	0x2000038c

080043e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <USART2_IRQHandler+0x14>)
 80043e6:	0018      	movs	r0, r3
 80043e8:	f004 fbe2 	bl	8008bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200002f8 	.word	0x200002f8

080043f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800440a:	231c      	movs	r3, #28
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	0018      	movs	r0, r3
 8004410:	230c      	movs	r3, #12
 8004412:	001a      	movs	r2, r3
 8004414:	2100      	movs	r1, #0
 8004416:	f005 ffda 	bl	800a3ce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800441a:	003b      	movs	r3, r7
 800441c:	0018      	movs	r0, r3
 800441e:	231c      	movs	r3, #28
 8004420:	001a      	movs	r2, r3
 8004422:	2100      	movs	r1, #0
 8004424:	f005 ffd3 	bl	800a3ce <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <MX_TIM3_Init+0xcc>)
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <MX_TIM3_Init+0xd0>)
 800442c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <MX_TIM3_Init+0xcc>)
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <MX_TIM3_Init+0xd4>)
 8004432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <MX_TIM3_Init+0xcc>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <MX_TIM3_Init+0xcc>)
 800443c:	2263      	movs	r2, #99	; 0x63
 800443e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <MX_TIM3_Init+0xcc>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <MX_TIM3_Init+0xcc>)
 8004448:	2200      	movs	r2, #0
 800444a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <MX_TIM3_Init+0xcc>)
 800444e:	0018      	movs	r0, r3
 8004450:	f003 fc14 	bl	8007c7c <HAL_TIM_PWM_Init>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d001      	beq.n	800445c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004458:	f7ff fca6 	bl	8003da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445c:	211c      	movs	r1, #28
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800446a:	187a      	adds	r2, r7, r1
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <MX_TIM3_Init+0xcc>)
 800446e:	0011      	movs	r1, r2
 8004470:	0018      	movs	r0, r3
 8004472:	f004 f9e5 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 8004476:	1e03      	subs	r3, r0, #0
 8004478:	d001      	beq.n	800447e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800447a:	f7ff fc95 	bl	8003da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800447e:	003b      	movs	r3, r7
 8004480:	2260      	movs	r2, #96	; 0x60
 8004482:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004484:	003b      	movs	r3, r7
 8004486:	2200      	movs	r2, #0
 8004488:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800448a:	003b      	movs	r3, r7
 800448c:	2200      	movs	r2, #0
 800448e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004490:	003b      	movs	r3, r7
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004496:	0039      	movs	r1, r7
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <MX_TIM3_Init+0xcc>)
 800449a:	2200      	movs	r2, #0
 800449c:	0018      	movs	r0, r3
 800449e:	f003 fda3 	bl	8007fe8 <HAL_TIM_PWM_ConfigChannel>
 80044a2:	1e03      	subs	r3, r0, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80044a6:	f7ff fc7f 	bl	8003da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044aa:	0039      	movs	r1, r7
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <MX_TIM3_Init+0xcc>)
 80044ae:	220c      	movs	r2, #12
 80044b0:	0018      	movs	r0, r3
 80044b2:	f003 fd99 	bl	8007fe8 <HAL_TIM_PWM_ConfigChannel>
 80044b6:	1e03      	subs	r3, r0, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80044ba:	f7ff fc75 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <MX_TIM3_Init+0xcc>)
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 f899 	bl	80045f8 <HAL_TIM_MspPostInit>

}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b00a      	add	sp, #40	; 0x28
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	200001cc 	.word	0x200001cc
 80044d4:	40000400 	.word	0x40000400
 80044d8:	0000063f 	.word	0x0000063f

080044dc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	0018      	movs	r0, r3
 80044e6:	231c      	movs	r3, #28
 80044e8:	001a      	movs	r2, r3
 80044ea:	2100      	movs	r1, #0
 80044ec:	f005 ff6f 	bl	800a3ce <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <MX_TIM14_Init+0x94>)
 80044f2:	4a20      	ldr	r2, [pc, #128]	; (8004574 <MX_TIM14_Init+0x98>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <MX_TIM14_Init+0x94>)
 80044f8:	221f      	movs	r2, #31
 80044fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <MX_TIM14_Init+0x94>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <MX_TIM14_Init+0x94>)
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <MX_TIM14_Init+0x9c>)
 8004506:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <MX_TIM14_Init+0x94>)
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <MX_TIM14_Init+0x94>)
 8004510:	2200      	movs	r2, #0
 8004512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004514:	4b16      	ldr	r3, [pc, #88]	; (8004570 <MX_TIM14_Init+0x94>)
 8004516:	0018      	movs	r0, r3
 8004518:	f003 fb58 	bl	8007bcc <HAL_TIM_Base_Init>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8004520:	f7ff fc42 	bl	8003da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <MX_TIM14_Init+0x94>)
 8004526:	0018      	movs	r0, r3
 8004528:	f003 fba8 	bl	8007c7c <HAL_TIM_PWM_Init>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8004530:	f7ff fc3a 	bl	8003da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	2260      	movs	r2, #96	; 0x60
 8004538:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454c:	1d39      	adds	r1, r7, #4
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <MX_TIM14_Init+0x94>)
 8004550:	2200      	movs	r2, #0
 8004552:	0018      	movs	r0, r3
 8004554:	f003 fd48 	bl	8007fe8 <HAL_TIM_PWM_ConfigChannel>
 8004558:	1e03      	subs	r3, r0, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800455c:	f7ff fc24 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <MX_TIM14_Init+0x94>)
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f848 	bl	80045f8 <HAL_TIM_MspPostInit>

}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b008      	add	sp, #32
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000218 	.word	0x20000218
 8004574:	40002000 	.word	0x40002000
 8004578:	0000270f 	.word	0x0000270f

0800457c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <HAL_TIM_PWM_MspInit+0x34>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10b      	bne.n	80045a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_TIM_PWM_MspInit+0x38>)
 8004590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_TIM_PWM_MspInit+0x38>)
 8004594:	2102      	movs	r1, #2
 8004596:	430a      	orrs	r2, r1
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_TIM_PWM_MspInit+0x38>)
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2202      	movs	r2, #2
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_TIM_Base_MspInit+0x38>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10d      	bne.n	80045e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_TIM_Base_MspInit+0x3c>)
 80045cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_TIM_Base_MspInit+0x3c>)
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	0209      	lsls	r1, r1, #8
 80045d4:	430a      	orrs	r2, r1
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_TIM_Base_MspInit+0x3c>)
 80045da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b004      	add	sp, #16
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	40002000 	.word	0x40002000
 80045f4:	40021000 	.word	0x40021000

080045f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b08b      	sub	sp, #44	; 0x2c
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004600:	2414      	movs	r4, #20
 8004602:	193b      	adds	r3, r7, r4
 8004604:	0018      	movs	r0, r3
 8004606:	2314      	movs	r3, #20
 8004608:	001a      	movs	r2, r3
 800460a:	2100      	movs	r1, #0
 800460c:	f005 fedf 	bl	800a3ce <memset>
  if(timHandle->Instance==TIM3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a39      	ldr	r2, [pc, #228]	; (80046fc <HAL_TIM_MspPostInit+0x104>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d144      	bne.n	80046a4 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 800461c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 8004620:	2101      	movs	r1, #1
 8004622:	430a      	orrs	r2, r1
 8004624:	635a      	str	r2, [r3, #52]	; 0x34
 8004626:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	4b33      	ldr	r3, [pc, #204]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 8004634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004636:	4b32      	ldr	r3, [pc, #200]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 8004638:	2102      	movs	r1, #2
 800463a:	430a      	orrs	r2, r1
 800463c:	635a      	str	r2, [r3, #52]	; 0x34
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	2202      	movs	r2, #2
 8004644:	4013      	ands	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_Pin;
 800464a:	193b      	adds	r3, r7, r4
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004650:	193b      	adds	r3, r7, r4
 8004652:	2202      	movs	r2, #2
 8004654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	193b      	adds	r3, r7, r4
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	193b      	adds	r3, r7, r4
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004662:	193b      	adds	r3, r7, r4
 8004664:	2201      	movs	r2, #1
 8004666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_EN_GPIO_Port, &GPIO_InitStruct);
 8004668:	193a      	adds	r2, r7, r4
 800466a:	23a0      	movs	r3, #160	; 0xa0
 800466c:	05db      	lsls	r3, r3, #23
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f001 fb9d 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_FORWARD_Pin;
 8004676:	0021      	movs	r1, r4
 8004678:	187b      	adds	r3, r7, r1
 800467a:	2202      	movs	r2, #2
 800467c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	187b      	adds	r3, r7, r1
 8004680:	2202      	movs	r2, #2
 8004682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	187b      	adds	r3, r7, r1
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004690:	187b      	adds	r3, r7, r1
 8004692:	2201      	movs	r2, #1
 8004694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_FORWARD_GPIO_Port, &GPIO_InitStruct);
 8004696:	187b      	adds	r3, r7, r1
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_TIM_MspPostInit+0x10c>)
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f001 fb87 	bl	8005db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80046a2:	e027      	b.n	80046f4 <HAL_TIM_MspPostInit+0xfc>
  else if(timHandle->Instance==TIM14)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_TIM_MspPostInit+0x110>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 80046b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 80046b4:	2101      	movs	r1, #1
 80046b6:	430a      	orrs	r2, r1
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_TIM_MspPostInit+0x108>)
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	2201      	movs	r2, #1
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80046c6:	2114      	movs	r1, #20
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	2210      	movs	r2, #16
 80046cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2202      	movs	r2, #2
 80046d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	2200      	movs	r2, #0
 80046de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	2204      	movs	r2, #4
 80046e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80046e6:	187a      	adds	r2, r7, r1
 80046e8:	23a0      	movs	r3, #160	; 0xa0
 80046ea:	05db      	lsls	r3, r3, #23
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f001 fb5e 	bl	8005db0 <HAL_GPIO_Init>
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b00b      	add	sp, #44	; 0x2c
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	40000400 	.word	0x40000400
 8004700:	40021000 	.word	0x40021000
 8004704:	50000400 	.word	0x50000400
 8004708:	40002000 	.word	0x40002000

0800470c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <MX_USART1_UART_Init+0x98>)
 8004714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004716:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004718:	22e1      	movs	r2, #225	; 0xe1
 800471a:	0252      	lsls	r2, r2, #9
 800471c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004720:	2200      	movs	r2, #0
 8004722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004726:	2200      	movs	r2, #0
 8004728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004732:	220c      	movs	r2, #12
 8004734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004738:	2200      	movs	r2, #0
 800473a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800473c:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004744:	2200      	movs	r2, #0
 8004746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 800474a:	2200      	movs	r2, #0
 800474c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004750:	2200      	movs	r2, #0
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004756:	0018      	movs	r0, r3
 8004758:	f004 f8d4 	bl	8008904 <HAL_UART_Init>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d001      	beq.n	8004764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004760:	f7ff fb22 	bl	8003da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004766:	2100      	movs	r1, #0
 8004768:	0018      	movs	r0, r3
 800476a:	f005 fd1d 	bl	800a1a8 <HAL_UARTEx_SetTxFifoThreshold>
 800476e:	1e03      	subs	r3, r0, #0
 8004770:	d001      	beq.n	8004776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004772:	f7ff fb19 	bl	8003da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 8004778:	2100      	movs	r1, #0
 800477a:	0018      	movs	r0, r3
 800477c:	f005 fd54 	bl	800a228 <HAL_UARTEx_SetRxFifoThreshold>
 8004780:	1e03      	subs	r3, r0, #0
 8004782:	d001      	beq.n	8004788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004784:	f7ff fb10 	bl	8003da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <MX_USART1_UART_Init+0x94>)
 800478a:	0018      	movs	r0, r3
 800478c:	f005 fcd2 	bl	800a134 <HAL_UARTEx_DisableFifoMode>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d001      	beq.n	8004798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004794:	f7ff fb08 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000264 	.word	0x20000264
 80047a4:	40013800 	.word	0x40013800

080047a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047ac:	4b16      	ldr	r3, [pc, #88]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <MX_USART2_UART_Init+0x64>)
 80047b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047b4:	22e1      	movs	r2, #225	; 0xe1
 80047b6:	0252      	lsls	r2, r2, #9
 80047b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047ce:	220c      	movs	r2, #12
 80047d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <MX_USART2_UART_Init+0x60>)
 80047f2:	0018      	movs	r0, r3
 80047f4:	f004 f886 	bl	8008904 <HAL_UART_Init>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d001      	beq.n	8004800 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80047fc:	f7ff fad4 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	200002f8 	.word	0x200002f8
 800480c:	40004400 	.word	0x40004400

08004810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b093      	sub	sp, #76	; 0x4c
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004818:	2334      	movs	r3, #52	; 0x34
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	0018      	movs	r0, r3
 800481e:	2314      	movs	r3, #20
 8004820:	001a      	movs	r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	f005 fdd3 	bl	800a3ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004828:	241c      	movs	r4, #28
 800482a:	193b      	adds	r3, r7, r4
 800482c:	0018      	movs	r0, r3
 800482e:	2318      	movs	r3, #24
 8004830:	001a      	movs	r2, r3
 8004832:	2100      	movs	r1, #0
 8004834:	f005 fdcb 	bl	800a3ce <memset>
  if(uartHandle->Instance==USART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a56      	ldr	r2, [pc, #344]	; (8004998 <HAL_UART_MspInit+0x188>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d13e      	bne.n	80048c0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004842:	193b      	adds	r3, r7, r4
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004848:	193b      	adds	r3, r7, r4
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800484e:	193b      	adds	r3, r7, r4
 8004850:	0018      	movs	r0, r3
 8004852:	f003 f895 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d001      	beq.n	800485e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800485a:	f7ff faa5 	bl	8003da8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800485e:	4b4f      	ldr	r3, [pc, #316]	; (800499c <HAL_UART_MspInit+0x18c>)
 8004860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004862:	4b4e      	ldr	r3, [pc, #312]	; (800499c <HAL_UART_MspInit+0x18c>)
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	01c9      	lsls	r1, r1, #7
 8004868:	430a      	orrs	r2, r1
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <HAL_UART_MspInit+0x18c>)
 800486e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b48      	ldr	r3, [pc, #288]	; (800499c <HAL_UART_MspInit+0x18c>)
 800487c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487e:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_UART_MspInit+0x18c>)
 8004880:	2102      	movs	r1, #2
 8004882:	430a      	orrs	r2, r1
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
 8004886:	4b45      	ldr	r3, [pc, #276]	; (800499c <HAL_UART_MspInit+0x18c>)
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004892:	2134      	movs	r1, #52	; 0x34
 8004894:	187b      	adds	r3, r7, r1
 8004896:	22c0      	movs	r2, #192	; 0xc0
 8004898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	187b      	adds	r3, r7, r1
 800489c:	2202      	movs	r2, #2
 800489e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	2200      	movs	r2, #0
 80048aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <HAL_UART_MspInit+0x190>)
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f001 fa79 	bl	8005db0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048be:	e067      	b.n	8004990 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a37      	ldr	r2, [pc, #220]	; (80049a4 <HAL_UART_MspInit+0x194>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d162      	bne.n	8004990 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ce:	4b33      	ldr	r3, [pc, #204]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	0289      	lsls	r1, r1, #10
 80048d4:	430a      	orrs	r2, r1
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	029b      	lsls	r3, r3, #10
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	4b2c      	ldr	r3, [pc, #176]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048ec:	2101      	movs	r1, #1
 80048ee:	430a      	orrs	r2, r1
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34
 80048f2:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_UART_MspInit+0x18c>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	2201      	movs	r2, #1
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_TX_Pin|NRF_RX_Pin;
 80048fe:	2134      	movs	r1, #52	; 0x34
 8004900:	187b      	adds	r3, r7, r1
 8004902:	220c      	movs	r2, #12
 8004904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004906:	187b      	adds	r3, r7, r1
 8004908:	2202      	movs	r2, #2
 800490a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	187b      	adds	r3, r7, r1
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004918:	187b      	adds	r3, r7, r1
 800491a:	2201      	movs	r2, #1
 800491c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491e:	187a      	adds	r2, r7, r1
 8004920:	23a0      	movs	r3, #160	; 0xa0
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	0011      	movs	r1, r2
 8004926:	0018      	movs	r0, r3
 8004928:	f001 fa42 	bl	8005db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_UART_MspInit+0x198>)
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_UART_MspInit+0x19c>)
 8004930:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004934:	2234      	movs	r2, #52	; 0x34
 8004936:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <HAL_UART_MspInit+0x198>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004940:	2200      	movs	r2, #0
 8004942:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004944:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <HAL_UART_MspInit+0x198>)
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004950:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004952:	2200      	movs	r2, #0
 8004954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004958:	2220      	movs	r2, #32
 800495a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_UART_MspInit+0x198>)
 800495e:	2200      	movs	r2, #0
 8004960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004964:	0018      	movs	r0, r3
 8004966:	f000 ff05 	bl	8005774 <HAL_DMA_Init>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800496e:	f7ff fa1b 	bl	8003da8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_UART_MspInit+0x198>)
 8004978:	505a      	str	r2, [r3, r1]
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_UART_MspInit+0x198>)
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	201c      	movs	r0, #28
 8004986:	f000 fec3 	bl	8005710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800498a:	201c      	movs	r0, #28
 800498c:	f000 fed5 	bl	800573a <HAL_NVIC_EnableIRQ>
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b013      	add	sp, #76	; 0x4c
 8004996:	bd90      	pop	{r4, r7, pc}
 8004998:	40013800 	.word	0x40013800
 800499c:	40021000 	.word	0x40021000
 80049a0:	50000400 	.word	0x50000400
 80049a4:	40004400 	.word	0x40004400
 80049a8:	2000038c 	.word	0x2000038c
 80049ac:	40020008 	.word	0x40020008

080049b0 <deg2rad>:
#include "utils.h"
#include "math.h"

float deg2rad(float degrees)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	return degrees * 3.14159f / 180.f;
 80049b8:	4906      	ldr	r1, [pc, #24]	; (80049d4 <deg2rad+0x24>)
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc f8ce 	bl	8000b5c <__aeabi_fmul>
 80049c0:	1c03      	adds	r3, r0, #0
 80049c2:	4905      	ldr	r1, [pc, #20]	; (80049d8 <deg2rad+0x28>)
 80049c4:	1c18      	adds	r0, r3, #0
 80049c6:	f7fb ff01 	bl	80007cc <__aeabi_fdiv>
 80049ca:	1c03      	adds	r3, r0, #0
}
 80049cc:	1c18      	adds	r0, r3, #0
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40490fd0 	.word	0x40490fd0
 80049d8:	43340000 	.word	0x43340000

080049dc <mapf>:
{
	return min + (max - min) * value;
}

float mapf(const float a_min, const float a_max, const float b_min, const float b_max, const float a)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
	return b_min + (b_max - b_min) / (a_max - a_min) * (a - a_min);
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	6838      	ldr	r0, [r7, #0]
 80049ee:	f7fc f9db 	bl	8000da8 <__aeabi_fsub>
 80049f2:	1c03      	adds	r3, r0, #0
 80049f4:	1c1c      	adds	r4, r3, #0
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f7fc f9d5 	bl	8000da8 <__aeabi_fsub>
 80049fe:	1c03      	adds	r3, r0, #0
 8004a00:	1c19      	adds	r1, r3, #0
 8004a02:	1c20      	adds	r0, r4, #0
 8004a04:	f7fb fee2 	bl	80007cc <__aeabi_fdiv>
 8004a08:	1c03      	adds	r3, r0, #0
 8004a0a:	1c1c      	adds	r4, r3, #0
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	6a38      	ldr	r0, [r7, #32]
 8004a10:	f7fc f9ca 	bl	8000da8 <__aeabi_fsub>
 8004a14:	1c03      	adds	r3, r0, #0
 8004a16:	1c19      	adds	r1, r3, #0
 8004a18:	1c20      	adds	r0, r4, #0
 8004a1a:	f7fc f89f 	bl	8000b5c <__aeabi_fmul>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	1c18      	adds	r0, r3, #0
 8004a24:	f7fb fd34 	bl	8000490 <__aeabi_fadd>
 8004a28:	1c03      	adds	r3, r0, #0
}
 8004a2a:	1c18      	adds	r0, r3, #0
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b005      	add	sp, #20
 8004a30:	bd90      	pop	{r4, r7, pc}

08004a32 <clampf>:

float clampf(float value, float min, float max)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
	if (value <= min)
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7fb fcef 	bl	8000424 <__aeabi_fcmple>
 8004a46:	1e03      	subs	r3, r0, #0
 8004a48:	d001      	beq.n	8004a4e <clampf+0x1c>
		return min;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	e008      	b.n	8004a60 <clampf+0x2e>

	if (value >= max)
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7fb fcfb 	bl	800044c <__aeabi_fcmpge>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d001      	beq.n	8004a5e <clampf+0x2c>
		return max;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	e000      	b.n	8004a60 <clampf+0x2e>

	return value;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	1c18      	adds	r0, r3, #0
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b004      	add	sp, #16
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <select_target>:
uint16_t target_circle_radius;
uint8_t laser_count;
float steering_sensitivity;

float select_target(const float x1, const float x2, const float y_intercept, const uint8_t followed_wall)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	001a      	movs	r2, r3
 8004a76:	1cfb      	adds	r3, r7, #3
 8004a78:	701a      	strb	r2, [r3, #0]
	float mapped;

	if (followed_wall == 0)
 8004a7a:	1cfb      	adds	r3, r7, #3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d000      	beq.n	8004a84 <select_target+0x1c>
 8004a82:	e07d      	b.n	8004b80 <select_target+0x118>
	{
		if (y_intercept > .0f)
 8004a84:	2100      	movs	r1, #0
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fb fcd6 	bl	8000438 <__aeabi_fcmpgt>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d03b      	beq.n	8004b08 <select_target+0xa0>
		{
			if (x1 > x2)
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fb fcd0 	bl	8000438 <__aeabi_fcmpgt>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d01a      	beq.n	8004ad2 <select_target+0x6a>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004a9c:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <select_target+0x21c>)
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7fc fbb3 	bl	800120c <__aeabi_ui2f>
 8004aa6:	1c02      	adds	r2, r0, #0
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	4053      	eors	r3, r2
 8004aae:	001c      	movs	r4, r3
 8004ab0:	4b74      	ldr	r3, [pc, #464]	; (8004c84 <select_target+0x21c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fc fba9 	bl	800120c <__aeabi_ui2f>
 8004aba:	1c01      	adds	r1, r0, #0
 8004abc:	4872      	ldr	r0, [pc, #456]	; (8004c88 <select_target+0x220>)
 8004abe:	4a73      	ldr	r2, [pc, #460]	; (8004c8c <select_target+0x224>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	1c03      	adds	r3, r0, #0
 8004ac6:	1c20      	adds	r0, r4, #0
 8004ac8:	f7ff ff88 	bl	80049dc <mapf>
 8004acc:	1c03      	adds	r3, r0, #0
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e0d3      	b.n	8004c7a <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004ad2:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <select_target+0x21c>)
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fc fb98 	bl	800120c <__aeabi_ui2f>
 8004adc:	1c02      	adds	r2, r0, #0
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	4053      	eors	r3, r2
 8004ae4:	001c      	movs	r4, r3
 8004ae6:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <select_target+0x21c>)
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7fc fb8e 	bl	800120c <__aeabi_ui2f>
 8004af0:	1c01      	adds	r1, r0, #0
 8004af2:	4865      	ldr	r0, [pc, #404]	; (8004c88 <select_target+0x220>)
 8004af4:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <select_target+0x224>)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	1c03      	adds	r3, r0, #0
 8004afc:	1c20      	adds	r0, r4, #0
 8004afe:	f7ff ff6d 	bl	80049dc <mapf>
 8004b02:	1c03      	adds	r3, r0, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e0b8      	b.n	8004c7a <select_target+0x212>
		}
		else
		{
			if (x1 > x2)
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7fb fc94 	bl	8000438 <__aeabi_fcmpgt>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d01a      	beq.n	8004b4a <select_target+0xe2>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004b14:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <select_target+0x21c>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fc fb77 	bl	800120c <__aeabi_ui2f>
 8004b1e:	1c02      	adds	r2, r0, #0
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4053      	eors	r3, r2
 8004b26:	001c      	movs	r4, r3
 8004b28:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <select_target+0x21c>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fc fb6d 	bl	800120c <__aeabi_ui2f>
 8004b32:	1c01      	adds	r1, r0, #0
 8004b34:	4854      	ldr	r0, [pc, #336]	; (8004c88 <select_target+0x220>)
 8004b36:	4a55      	ldr	r2, [pc, #340]	; (8004c8c <select_target+0x224>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	1c03      	adds	r3, r0, #0
 8004b3e:	1c20      	adds	r0, r4, #0
 8004b40:	f7ff ff4c 	bl	80049dc <mapf>
 8004b44:	1c03      	adds	r3, r0, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e097      	b.n	8004c7a <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004b4a:	4b4e      	ldr	r3, [pc, #312]	; (8004c84 <select_target+0x21c>)
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fc fb5c 	bl	800120c <__aeabi_ui2f>
 8004b54:	1c02      	adds	r2, r0, #0
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	4053      	eors	r3, r2
 8004b5c:	001c      	movs	r4, r3
 8004b5e:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <select_target+0x21c>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fc fb52 	bl	800120c <__aeabi_ui2f>
 8004b68:	1c01      	adds	r1, r0, #0
 8004b6a:	4847      	ldr	r0, [pc, #284]	; (8004c88 <select_target+0x220>)
 8004b6c:	4a47      	ldr	r2, [pc, #284]	; (8004c8c <select_target+0x224>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	1c03      	adds	r3, r0, #0
 8004b74:	1c20      	adds	r0, r4, #0
 8004b76:	f7ff ff31 	bl	80049dc <mapf>
 8004b7a:	1c03      	adds	r3, r0, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e07c      	b.n	8004c7a <select_target+0x212>
		}
	}
	else
	{
		if (y_intercept > .0f)
 8004b80:	2100      	movs	r1, #0
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fb fc58 	bl	8000438 <__aeabi_fcmpgt>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d03b      	beq.n	8004c04 <select_target+0x19c>
		{
			if (x1 > x2)
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7fb fc52 	bl	8000438 <__aeabi_fcmpgt>
 8004b94:	1e03      	subs	r3, r0, #0
 8004b96:	d01a      	beq.n	8004bce <select_target+0x166>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004b98:	4b3a      	ldr	r3, [pc, #232]	; (8004c84 <select_target+0x21c>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7fc fb35 	bl	800120c <__aeabi_ui2f>
 8004ba2:	1c02      	adds	r2, r0, #0
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	4053      	eors	r3, r2
 8004baa:	001c      	movs	r4, r3
 8004bac:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <select_target+0x21c>)
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fc fb2b 	bl	800120c <__aeabi_ui2f>
 8004bb6:	1c01      	adds	r1, r0, #0
 8004bb8:	4833      	ldr	r0, [pc, #204]	; (8004c88 <select_target+0x220>)
 8004bba:	4a34      	ldr	r2, [pc, #208]	; (8004c8c <select_target+0x224>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	1c03      	adds	r3, r0, #0
 8004bc2:	1c20      	adds	r0, r4, #0
 8004bc4:	f7ff ff0a 	bl	80049dc <mapf>
 8004bc8:	1c03      	adds	r3, r0, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e055      	b.n	8004c7a <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004bce:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <select_target+0x21c>)
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fc fb1a 	bl	800120c <__aeabi_ui2f>
 8004bd8:	1c02      	adds	r2, r0, #0
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4053      	eors	r3, r2
 8004be0:	001c      	movs	r4, r3
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <select_target+0x21c>)
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f7fc fb10 	bl	800120c <__aeabi_ui2f>
 8004bec:	1c01      	adds	r1, r0, #0
 8004bee:	4826      	ldr	r0, [pc, #152]	; (8004c88 <select_target+0x220>)
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <select_target+0x224>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	1c03      	adds	r3, r0, #0
 8004bf8:	1c20      	adds	r0, r4, #0
 8004bfa:	f7ff feef 	bl	80049dc <mapf>
 8004bfe:	1c03      	adds	r3, r0, #0
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e03a      	b.n	8004c7a <select_target+0x212>
		}
		else
		{
			if (x1 > x2)
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fb fc16 	bl	8000438 <__aeabi_fcmpgt>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d01a      	beq.n	8004c46 <select_target+0x1de>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004c10:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <select_target+0x21c>)
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fc faf9 	bl	800120c <__aeabi_ui2f>
 8004c1a:	1c02      	adds	r2, r0, #0
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	4053      	eors	r3, r2
 8004c22:	001c      	movs	r4, r3
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <select_target+0x21c>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fc faef 	bl	800120c <__aeabi_ui2f>
 8004c2e:	1c01      	adds	r1, r0, #0
 8004c30:	4815      	ldr	r0, [pc, #84]	; (8004c88 <select_target+0x220>)
 8004c32:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <select_target+0x224>)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	1c03      	adds	r3, r0, #0
 8004c3a:	1c20      	adds	r0, r4, #0
 8004c3c:	f7ff fece 	bl	80049dc <mapf>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e019      	b.n	8004c7a <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <select_target+0x21c>)
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fc fade 	bl	800120c <__aeabi_ui2f>
 8004c50:	1c02      	adds	r2, r0, #0
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	4053      	eors	r3, r2
 8004c58:	001c      	movs	r4, r3
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <select_target+0x21c>)
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fc fad4 	bl	800120c <__aeabi_ui2f>
 8004c64:	1c01      	adds	r1, r0, #0
 8004c66:	4808      	ldr	r0, [pc, #32]	; (8004c88 <select_target+0x220>)
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <select_target+0x224>)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	1c03      	adds	r3, r0, #0
 8004c70:	1c20      	adds	r0, r4, #0
 8004c72:	f7ff feb3 	bl	80049dc <mapf>
 8004c76:	1c03      	adds	r3, r0, #0
 8004c78:	617b      	str	r3, [r7, #20]
		}
	}

	return mapped;
 8004c7a:	697b      	ldr	r3, [r7, #20]
}
 8004c7c:	1c18      	adds	r0, r3, #0
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b007      	add	sp, #28
 8004c82:	bd90      	pop	{r4, r7, pc}
 8004c84:	200003f0 	.word	0x200003f0
 8004c88:	42c80000 	.word	0x42c80000
 8004c8c:	c2c80000 	.word	0xc2c80000

08004c90 <any_walls_detected>:

uint8_t any_walls_detected(const uint16_t* lasers, const uint8_t followed_wall)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	000a      	movs	r2, r1
 8004c9a:	1cfb      	adds	r3, r7, #3
 8004c9c:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8004c9e:	1cfb      	adds	r3, r7, #3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11f      	bne.n	8004ce6 <any_walls_detected+0x56>
	{
		for (uint8_t i = 0; i < laser_count; ++i)
 8004ca6:	230f      	movs	r3, #15
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e012      	b.n	8004cd6 <any_walls_detected+0x46>
			if (lasers[i] <= max_laser_distance)
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <any_walls_detected+0xa0>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d801      	bhi.n	8004cca <any_walls_detected+0x3a>
				return 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e02e      	b.n	8004d28 <any_walls_detected+0x98>
		for (uint8_t i = 0; i < laser_count; ++i)
 8004cca:	220f      	movs	r2, #15
 8004ccc:	18bb      	adds	r3, r7, r2
 8004cce:	18ba      	adds	r2, r7, r2
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <any_walls_detected+0xa4>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	220f      	movs	r2, #15
 8004cdc:	18ba      	adds	r2, r7, r2
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3e5      	bcc.n	8004cb0 <any_walls_detected+0x20>
 8004ce4:	e01f      	b.n	8004d26 <any_walls_detected+0x96>
	}
	else
	{
		for (uint8_t i = 7 - laser_count; i < 7; ++i)
 8004ce6:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <any_walls_detected+0xa4>)
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	230e      	movs	r3, #14
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2107      	movs	r1, #7
 8004cf0:	1a8a      	subs	r2, r1, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e012      	b.n	8004d1c <any_walls_detected+0x8c>
			if (lasers[i] <= max_laser_distance)
 8004cf6:	230e      	movs	r3, #14
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	18d3      	adds	r3, r2, r3
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <any_walls_detected+0xa0>)
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d801      	bhi.n	8004d10 <any_walls_detected+0x80>
				return 1;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e00b      	b.n	8004d28 <any_walls_detected+0x98>
		for (uint8_t i = 7 - laser_count; i < 7; ++i)
 8004d10:	220e      	movs	r2, #14
 8004d12:	18bb      	adds	r3, r7, r2
 8004d14:	18ba      	adds	r2, r7, r2
 8004d16:	7812      	ldrb	r2, [r2, #0]
 8004d18:	3201      	adds	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	230e      	movs	r3, #14
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d9e7      	bls.n	8004cf6 <any_walls_detected+0x66>
	}

	return 0;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200003ea 	.word	0x200003ea
 8004d34:	200003f2 	.word	0x200003f2

08004d38 <need_escaping>:

uint8_t need_escaping(const uint16_t* lasers, float scaling)
{
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 2; i <= 4; ++i)
 8004d42:	230f      	movs	r3, #15
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2202      	movs	r2, #2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e020      	b.n	8004d8e <need_escaping+0x56>
		if (lasers[i] <= (uint16_t)((float)min_laser_distance * scaling))
 8004d4c:	230f      	movs	r3, #15
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	881c      	ldrh	r4, [r3, #0]
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <need_escaping+0x6c>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7fc fa54 	bl	800120c <__aeabi_ui2f>
 8004d64:	1c03      	adds	r3, r0, #0
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	1c18      	adds	r0, r3, #0
 8004d6a:	f7fb fef7 	bl	8000b5c <__aeabi_fmul>
 8004d6e:	1c03      	adds	r3, r0, #0
 8004d70:	1c18      	adds	r0, r3, #0
 8004d72:	f7fb fb75 	bl	8000460 <__aeabi_f2uiz>
 8004d76:	0003      	movs	r3, r0
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d801      	bhi.n	8004d82 <need_escaping+0x4a>
			return 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e00b      	b.n	8004d9a <need_escaping+0x62>
	for (uint8_t i = 2; i <= 4; ++i)
 8004d82:	220f      	movs	r2, #15
 8004d84:	18bb      	adds	r3, r7, r2
 8004d86:	18ba      	adds	r2, r7, r2
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	230f      	movs	r3, #15
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d9d9      	bls.n	8004d4c <need_escaping+0x14>

	return 0;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b005      	add	sp, #20
 8004da0:	bd90      	pop	{r4, r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	200003ec 	.word	0x200003ec

08004da8 <widest_laser_pair>:

void widest_laser_pair(const uint16_t* lasers, uint8_t* left, uint8_t* right, const uint8_t followed_wall)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	001a      	movs	r2, r3
 8004db6:	1cfb      	adds	r3, r7, #3
 8004db8:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8004dba:	1cfb      	adds	r3, r7, #3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <widest_laser_pair+0x2e>
	{
		*left = 0;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
		*right = laser_count - 1;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <widest_laser_pair+0x90>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e010      	b.n	8004df8 <widest_laser_pair+0x50>
	}
	else
	{
		*left = 7 - laser_count;
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <widest_laser_pair+0x90>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2207      	movs	r2, #7
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	701a      	strb	r2, [r3, #0]
		*right = 6;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2206      	movs	r2, #6
 8004de8:	701a      	strb	r2, [r3, #0]
	}

	while (lasers[*left] > max_laser_distance)
 8004dea:	e005      	b.n	8004df8 <widest_laser_pair+0x50>
		(*left)++;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	701a      	strb	r2, [r3, #0]
	while (lasers[*left] > max_laser_distance)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	18d3      	adds	r3, r2, r3
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <widest_laser_pair+0x94>)
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d8ef      	bhi.n	8004dec <widest_laser_pair+0x44>

	while (lasers[*right] > max_laser_distance)
 8004e0c:	e005      	b.n	8004e1a <widest_laser_pair+0x72>
		(*right)--;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	701a      	strb	r2, [r3, #0]
	while (lasers[*right] > max_laser_distance)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <widest_laser_pair+0x94>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d8ef      	bhi.n	8004e0e <widest_laser_pair+0x66>
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b004      	add	sp, #16
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	200003f2 	.word	0x200003f2
 8004e3c:	200003ea 	.word	0x200003ea

08004e40 <on_single_detection>:

void on_single_detection(uint8_t index)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	0002      	movs	r2, r0
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
	//Turn wheels towards detected wall
	const float mapped = mapf(0.f, 6.f, -100.f, 100.f, (float)index);
 8004e4c:	1dfb      	adds	r3, r7, #7
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fc f9db 	bl	800120c <__aeabi_ui2f>
 8004e56:	1c03      	adds	r3, r0, #0
 8004e58:	4c0a      	ldr	r4, [pc, #40]	; (8004e84 <on_single_detection+0x44>)
 8004e5a:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <on_single_detection+0x48>)
 8004e5c:	490b      	ldr	r1, [pc, #44]	; (8004e8c <on_single_detection+0x4c>)
 8004e5e:	2000      	movs	r0, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	1c23      	adds	r3, r4, #0
 8004e64:	f7ff fdba 	bl	80049dc <mapf>
 8004e68:	1c03      	adds	r3, r0, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
	servo_set((int8_t)mapped);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7fc f95f 	bl	8001130 <__aeabi_f2iz>
 8004e72:	0003      	movs	r3, r0
 8004e74:	b25b      	sxtb	r3, r3
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7ff f9ba 	bl	80041f0 <servo_set>
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b005      	add	sp, #20
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	42c80000 	.word	0x42c80000
 8004e88:	c2c80000 	.word	0xc2c80000
 8004e8c:	40c00000 	.word	0x40c00000

08004e90 <on_multiple_detections>:

void on_multiple_detections(const uint16_t* lasers,
							const uint8_t left_index,
							const uint8_t right_index,
							const uint8_t followed_wall)
{
 8004e90:	b5b0      	push	{r4, r5, r7, lr}
 8004e92:	b096      	sub	sp, #88	; 0x58
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	000c      	movs	r4, r1
 8004e9a:	0010      	movs	r0, r2
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	1cfb      	adds	r3, r7, #3
 8004ea0:	1c22      	adds	r2, r4, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	1cbb      	adds	r3, r7, #2
 8004ea6:	1c02      	adds	r2, r0, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	1c7b      	adds	r3, r7, #1
 8004eac:	1c0a      	adds	r2, r1, #0
 8004eae:	701a      	strb	r2, [r3, #0]
	//Angle in radians between horizontal axis and left laser (clockwise)
	const float angle_left = deg2rad((float)(left_index) * 30.f);
 8004eb0:	1cfb      	adds	r3, r7, #3
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fc f9a9 	bl	800120c <__aeabi_ui2f>
 8004eba:	1c03      	adds	r3, r0, #0
 8004ebc:	49d6      	ldr	r1, [pc, #856]	; (8005218 <on_multiple_detections+0x388>)
 8004ebe:	1c18      	adds	r0, r3, #0
 8004ec0:	f7fb fe4c 	bl	8000b5c <__aeabi_fmul>
 8004ec4:	1c03      	adds	r3, r0, #0
 8004ec6:	1c18      	adds	r0, r3, #0
 8004ec8:	f7ff fd72 	bl	80049b0 <deg2rad>
 8004ecc:	1c03      	adds	r3, r0, #0
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48

	//Angle in radians between horizontal axis and right laser (counter clockwise)
	const float angle_right = deg2rad((float)(6 - right_index) * 30.f);
 8004ed0:	1cbb      	adds	r3, r7, #2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fc f949 	bl	8001170 <__aeabi_i2f>
 8004ede:	1c03      	adds	r3, r0, #0
 8004ee0:	49cd      	ldr	r1, [pc, #820]	; (8005218 <on_multiple_detections+0x388>)
 8004ee2:	1c18      	adds	r0, r3, #0
 8004ee4:	f7fb fe3a 	bl	8000b5c <__aeabi_fmul>
 8004ee8:	1c03      	adds	r3, r0, #0
 8004eea:	1c18      	adds	r0, r3, #0
 8004eec:	f7ff fd60 	bl	80049b0 <deg2rad>
 8004ef0:	1c03      	adds	r3, r0, #0
 8004ef2:	647b      	str	r3, [r7, #68]	; 0x44

	//Left laser intersection with wall coordinates
	const float x_left = (float)lasers[left_index] * -cosf(angle_left);
 8004ef4:	1cfb      	adds	r3, r7, #3
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fc f983 	bl	800120c <__aeabi_ui2f>
 8004f06:	1c04      	adds	r4, r0, #0
 8004f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0a:	1c18      	adds	r0, r3, #0
 8004f0c:	f005 fb78 	bl	800a600 <cosf>
 8004f10:	1c02      	adds	r2, r0, #0
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	4053      	eors	r3, r2
 8004f18:	1c19      	adds	r1, r3, #0
 8004f1a:	1c20      	adds	r0, r4, #0
 8004f1c:	f7fb fe1e 	bl	8000b5c <__aeabi_fmul>
 8004f20:	1c03      	adds	r3, r0, #0
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
	const float y_left = (float)lasers[left_index] * sinf(angle_left);
 8004f24:	1cfb      	adds	r3, r7, #3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	18d3      	adds	r3, r2, r3
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7fc f96b 	bl	800120c <__aeabi_ui2f>
 8004f36:	1c04      	adds	r4, r0, #0
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	1c18      	adds	r0, r3, #0
 8004f3c:	f005 fb98 	bl	800a670 <sinf>
 8004f40:	1c03      	adds	r3, r0, #0
 8004f42:	1c19      	adds	r1, r3, #0
 8004f44:	1c20      	adds	r0, r4, #0
 8004f46:	f7fb fe09 	bl	8000b5c <__aeabi_fmul>
 8004f4a:	1c03      	adds	r3, r0, #0
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Right laser intersection with wall coordinates
	const float x_right = (float)lasers[right_index] * cosf(angle_right);
 8004f4e:	1cbb      	adds	r3, r7, #2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	18d3      	adds	r3, r2, r3
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fc f956 	bl	800120c <__aeabi_ui2f>
 8004f60:	1c04      	adds	r4, r0, #0
 8004f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f005 fb4b 	bl	800a600 <cosf>
 8004f6a:	1c03      	adds	r3, r0, #0
 8004f6c:	1c19      	adds	r1, r3, #0
 8004f6e:	1c20      	adds	r0, r4, #0
 8004f70:	f7fb fdf4 	bl	8000b5c <__aeabi_fmul>
 8004f74:	1c03      	adds	r3, r0, #0
 8004f76:	63bb      	str	r3, [r7, #56]	; 0x38
	const float y_right = (float)lasers[right_index] * sinf(angle_right);
 8004f78:	1cbb      	adds	r3, r7, #2
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	18d3      	adds	r3, r2, r3
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7fc f941 	bl	800120c <__aeabi_ui2f>
 8004f8a:	1c04      	adds	r4, r0, #0
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	1c18      	adds	r0, r3, #0
 8004f90:	f005 fb6e 	bl	800a670 <sinf>
 8004f94:	1c03      	adds	r3, r0, #0
 8004f96:	1c19      	adds	r1, r3, #0
 8004f98:	1c20      	adds	r0, r4, #0
 8004f9a:	f7fb fddf 	bl	8000b5c <__aeabi_fmul>
 8004f9e:	1c03      	adds	r3, r0, #0
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34

	//Slope of the wall
	const float slope = (y_right - y_left) / (x_right - x_left);
 8004fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fa6:	f7fb feff 	bl	8000da8 <__aeabi_fsub>
 8004faa:	1c03      	adds	r3, r0, #0
 8004fac:	1c1c      	adds	r4, r3, #0
 8004fae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fb2:	f7fb fef9 	bl	8000da8 <__aeabi_fsub>
 8004fb6:	1c03      	adds	r3, r0, #0
 8004fb8:	1c19      	adds	r1, r3, #0
 8004fba:	1c20      	adds	r0, r4, #0
 8004fbc:	f7fb fc06 	bl	80007cc <__aeabi_fdiv>
 8004fc0:	1c03      	adds	r3, r0, #0
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30

	//Convert slope to angle (between horizontal axis and wall)
	const float angle = atanf(slope);
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	1c18      	adds	r0, r3, #0
 8004fc8:	f005 fa0a 	bl	800a3e0 <atanf>
 8004fcc:	1c03      	adds	r3, r0, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Calculate points on the imaginary wall which has been offset by TARGET_WALL_DISTANCE
	float x1, y1;

	const float y_intercept_wall = y_left - slope * x_left;
 8004fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd4:	f7fb fdc2 	bl	8000b5c <__aeabi_fmul>
 8004fd8:	1c03      	adds	r3, r0, #0
 8004fda:	1c19      	adds	r1, r3, #0
 8004fdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004fde:	f7fb fee3 	bl	8000da8 <__aeabi_fsub>
 8004fe2:	1c03      	adds	r3, r0, #0
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (y_intercept_wall > 0.f) //If slope is positive add positive offset to x
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fea:	f7fb fa25 	bl	8000438 <__aeabi_fcmpgt>
 8004fee:	1e03      	subs	r3, r0, #0
 8004ff0:	d02c      	beq.n	800504c <on_multiple_detections+0x1bc>
	{
		x1 = x_left + (float)target_wall_distance * sinf(angle);
 8004ff2:	4b8a      	ldr	r3, [pc, #552]	; (800521c <on_multiple_detections+0x38c>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7fc f908 	bl	800120c <__aeabi_ui2f>
 8004ffc:	1c04      	adds	r4, r0, #0
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	1c18      	adds	r0, r3, #0
 8005002:	f005 fb35 	bl	800a670 <sinf>
 8005006:	1c03      	adds	r3, r0, #0
 8005008:	1c19      	adds	r1, r3, #0
 800500a:	1c20      	adds	r0, r4, #0
 800500c:	f7fb fda6 	bl	8000b5c <__aeabi_fmul>
 8005010:	1c03      	adds	r3, r0, #0
 8005012:	1c19      	adds	r1, r3, #0
 8005014:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005016:	f7fb fa3b 	bl	8000490 <__aeabi_fadd>
 800501a:	1c03      	adds	r3, r0, #0
 800501c:	657b      	str	r3, [r7, #84]	; 0x54
		y1 = y_left - (float)target_wall_distance * cosf(angle);
 800501e:	4b7f      	ldr	r3, [pc, #508]	; (800521c <on_multiple_detections+0x38c>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	0018      	movs	r0, r3
 8005024:	f7fc f8f2 	bl	800120c <__aeabi_ui2f>
 8005028:	1c04      	adds	r4, r0, #0
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	1c18      	adds	r0, r3, #0
 800502e:	f005 fae7 	bl	800a600 <cosf>
 8005032:	1c03      	adds	r3, r0, #0
 8005034:	1c19      	adds	r1, r3, #0
 8005036:	1c20      	adds	r0, r4, #0
 8005038:	f7fb fd90 	bl	8000b5c <__aeabi_fmul>
 800503c:	1c03      	adds	r3, r0, #0
 800503e:	1c19      	adds	r1, r3, #0
 8005040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005042:	f7fb feb1 	bl	8000da8 <__aeabi_fsub>
 8005046:	1c03      	adds	r3, r0, #0
 8005048:	653b      	str	r3, [r7, #80]	; 0x50
 800504a:	e02b      	b.n	80050a4 <on_multiple_detections+0x214>
	}
	else //If slope is negative add negative offset to x
	{
		x1 = x_left - (float)target_wall_distance * sinf(angle);
 800504c:	4b73      	ldr	r3, [pc, #460]	; (800521c <on_multiple_detections+0x38c>)
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	0018      	movs	r0, r3
 8005052:	f7fc f8db 	bl	800120c <__aeabi_ui2f>
 8005056:	1c04      	adds	r4, r0, #0
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	1c18      	adds	r0, r3, #0
 800505c:	f005 fb08 	bl	800a670 <sinf>
 8005060:	1c03      	adds	r3, r0, #0
 8005062:	1c19      	adds	r1, r3, #0
 8005064:	1c20      	adds	r0, r4, #0
 8005066:	f7fb fd79 	bl	8000b5c <__aeabi_fmul>
 800506a:	1c03      	adds	r3, r0, #0
 800506c:	1c19      	adds	r1, r3, #0
 800506e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005070:	f7fb fe9a 	bl	8000da8 <__aeabi_fsub>
 8005074:	1c03      	adds	r3, r0, #0
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
		y1 = y_left + (float)target_wall_distance * cosf(angle);
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <on_multiple_detections+0x38c>)
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	0018      	movs	r0, r3
 800507e:	f7fc f8c5 	bl	800120c <__aeabi_ui2f>
 8005082:	1c04      	adds	r4, r0, #0
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	1c18      	adds	r0, r3, #0
 8005088:	f005 faba 	bl	800a600 <cosf>
 800508c:	1c03      	adds	r3, r0, #0
 800508e:	1c19      	adds	r1, r3, #0
 8005090:	1c20      	adds	r0, r4, #0
 8005092:	f7fb fd63 	bl	8000b5c <__aeabi_fmul>
 8005096:	1c03      	adds	r3, r0, #0
 8005098:	1c19      	adds	r1, r3, #0
 800509a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800509c:	f7fb f9f8 	bl	8000490 <__aeabi_fadd>
 80050a0:	1c03      	adds	r3, r0, #0
 80050a2:	653b      	str	r3, [r7, #80]	; 0x50
	}

	//Calculate the y intercept of imaginary wall
	const float y_intercept_target = y1 - x1 * slope;
 80050a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050a8:	f7fb fd58 	bl	8000b5c <__aeabi_fmul>
 80050ac:	1c03      	adds	r3, r0, #0
 80050ae:	1c19      	adds	r1, r3, #0
 80050b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80050b2:	f7fb fe79 	bl	8000da8 <__aeabi_fsub>
 80050b6:	1c03      	adds	r3, r0, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24

	//Calculate intersection between robot's circle and imaginary wall
	const float f = 1 + slope * slope;
 80050ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050be:	f7fb fd4d 	bl	8000b5c <__aeabi_fmul>
 80050c2:	1c03      	adds	r3, r0, #0
 80050c4:	21fe      	movs	r1, #254	; 0xfe
 80050c6:	0589      	lsls	r1, r1, #22
 80050c8:	1c18      	adds	r0, r3, #0
 80050ca:	f7fb f9e1 	bl	8000490 <__aeabi_fadd>
 80050ce:	1c03      	adds	r3, r0, #0
 80050d0:	623b      	str	r3, [r7, #32]
	const float g = 2 * slope * y_intercept_target;
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	1c19      	adds	r1, r3, #0
 80050d6:	1c18      	adds	r0, r3, #0
 80050d8:	f7fb f9da 	bl	8000490 <__aeabi_fadd>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	1c19      	adds	r1, r3, #0
 80050e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e2:	f7fb fd3b 	bl	8000b5c <__aeabi_fmul>
 80050e6:	1c03      	adds	r3, r0, #0
 80050e8:	61fb      	str	r3, [r7, #28]
	const float h = y_intercept_target * y_intercept_target - (float)target_circle_radius * (float)target_circle_radius;
 80050ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ee:	f7fb fd35 	bl	8000b5c <__aeabi_fmul>
 80050f2:	1c03      	adds	r3, r0, #0
 80050f4:	1c1d      	adds	r5, r3, #0
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <on_multiple_detections+0x390>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fc f886 	bl	800120c <__aeabi_ui2f>
 8005100:	1c04      	adds	r4, r0, #0
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <on_multiple_detections+0x390>)
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	0018      	movs	r0, r3
 8005108:	f7fc f880 	bl	800120c <__aeabi_ui2f>
 800510c:	1c03      	adds	r3, r0, #0
 800510e:	1c19      	adds	r1, r3, #0
 8005110:	1c20      	adds	r0, r4, #0
 8005112:	f7fb fd23 	bl	8000b5c <__aeabi_fmul>
 8005116:	1c03      	adds	r3, r0, #0
 8005118:	1c19      	adds	r1, r3, #0
 800511a:	1c28      	adds	r0, r5, #0
 800511c:	f7fb fe44 	bl	8000da8 <__aeabi_fsub>
 8005120:	1c03      	adds	r3, r0, #0
 8005122:	61bb      	str	r3, [r7, #24]

	float D = g * g - 4 * f * h;
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	69f8      	ldr	r0, [r7, #28]
 8005128:	f7fb fd18 	bl	8000b5c <__aeabi_fmul>
 800512c:	1c03      	adds	r3, r0, #0
 800512e:	1c1c      	adds	r4, r3, #0
 8005130:	2181      	movs	r1, #129	; 0x81
 8005132:	05c9      	lsls	r1, r1, #23
 8005134:	6a38      	ldr	r0, [r7, #32]
 8005136:	f7fb fd11 	bl	8000b5c <__aeabi_fmul>
 800513a:	1c03      	adds	r3, r0, #0
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	1c18      	adds	r0, r3, #0
 8005140:	f7fb fd0c 	bl	8000b5c <__aeabi_fmul>
 8005144:	1c03      	adds	r3, r0, #0
 8005146:	1c19      	adds	r1, r3, #0
 8005148:	1c20      	adds	r0, r4, #0
 800514a:	f7fb fe2d 	bl	8000da8 <__aeabi_fsub>
 800514e:	1c03      	adds	r3, r0, #0
 8005150:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (D < 0.f)
 8005152:	2100      	movs	r1, #0
 8005154:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005156:	f7fb f95b 	bl	8000410 <__aeabi_fcmplt>
 800515a:	1e03      	subs	r3, r0, #0
 800515c:	d002      	beq.n	8005164 <on_multiple_detections+0x2d4>
		D = 0.f;
 800515e:	2300      	movs	r3, #0
 8005160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005162:	e005      	b.n	8005170 <on_multiple_detections+0x2e0>
	else
		D = sqrtf(D);
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	1c18      	adds	r0, r3, #0
 8005168:	f005 faba 	bl	800a6e0 <sqrtf>
 800516c:	1c03      	adds	r3, r0, #0
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c

	const float target_x1 = (-g + D) / 2.f / f;
 8005170:	69f9      	ldr	r1, [r7, #28]
 8005172:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005174:	f7fb fe18 	bl	8000da8 <__aeabi_fsub>
 8005178:	1c03      	adds	r3, r0, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	05c9      	lsls	r1, r1, #23
 800517e:	1c18      	adds	r0, r3, #0
 8005180:	f7fb fb24 	bl	80007cc <__aeabi_fdiv>
 8005184:	1c03      	adds	r3, r0, #0
 8005186:	6a39      	ldr	r1, [r7, #32]
 8005188:	1c18      	adds	r0, r3, #0
 800518a:	f7fb fb1f 	bl	80007cc <__aeabi_fdiv>
 800518e:	1c03      	adds	r3, r0, #0
 8005190:	617b      	str	r3, [r7, #20]
	const float target_x2 = (-g - D) / 2.f / f;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	0612      	lsls	r2, r2, #24
 8005198:	4053      	eors	r3, r2
 800519a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800519c:	1c18      	adds	r0, r3, #0
 800519e:	f7fb fe03 	bl	8000da8 <__aeabi_fsub>
 80051a2:	1c03      	adds	r3, r0, #0
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	05c9      	lsls	r1, r1, #23
 80051a8:	1c18      	adds	r0, r3, #0
 80051aa:	f7fb fb0f 	bl	80007cc <__aeabi_fdiv>
 80051ae:	1c03      	adds	r3, r0, #0
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	1c18      	adds	r0, r3, #0
 80051b4:	f7fb fb0a 	bl	80007cc <__aeabi_fdiv>
 80051b8:	1c03      	adds	r3, r0, #0
 80051ba:	613b      	str	r3, [r7, #16]

	//Pick which point is best to follow
	const float mapped = select_target(target_x1, target_x2, y_left - x_left * slope, followed_wall);
 80051bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80051c0:	f7fb fccc 	bl	8000b5c <__aeabi_fmul>
 80051c4:	1c03      	adds	r3, r0, #0
 80051c6:	1c19      	adds	r1, r3, #0
 80051c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80051ca:	f7fb fded 	bl	8000da8 <__aeabi_fsub>
 80051ce:	1c03      	adds	r3, r0, #0
 80051d0:	1c1a      	adds	r2, r3, #0
 80051d2:	1c7b      	adds	r3, r7, #1
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	6978      	ldr	r0, [r7, #20]
 80051da:	f7ff fc45 	bl	8004a68 <select_target>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	60fb      	str	r3, [r7, #12]

	//Scale mapped value by steering_sensitivity to increase sensitivity and clamp to [-100;100] range
	servo_set((int8_t)clampf(mapped * steering_sensitivity, -100.f, 100.f));
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <on_multiple_detections+0x394>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	1c18      	adds	r0, r3, #0
 80051ea:	f7fb fcb7 	bl	8000b5c <__aeabi_fmul>
 80051ee:	1c03      	adds	r3, r0, #0
 80051f0:	1c18      	adds	r0, r3, #0
 80051f2:	4a0d      	ldr	r2, [pc, #52]	; (8005228 <on_multiple_detections+0x398>)
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <on_multiple_detections+0x39c>)
 80051f6:	1c19      	adds	r1, r3, #0
 80051f8:	f7ff fc1b 	bl	8004a32 <clampf>
 80051fc:	1c03      	adds	r3, r0, #0
 80051fe:	1c18      	adds	r0, r3, #0
 8005200:	f7fb ff96 	bl	8001130 <__aeabi_f2iz>
 8005204:	0003      	movs	r3, r0
 8005206:	b25b      	sxtb	r3, r3
 8005208:	0018      	movs	r0, r3
 800520a:	f7fe fff1 	bl	80041f0 <servo_set>
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b016      	add	sp, #88	; 0x58
 8005214:	bdb0      	pop	{r4, r5, r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	41f00000 	.word	0x41f00000
 800521c:	200003ee 	.word	0x200003ee
 8005220:	200003f0 	.word	0x200003f0
 8005224:	200003f4 	.word	0x200003f4
 8005228:	42c80000 	.word	0x42c80000
 800522c:	c2c80000 	.word	0xc2c80000

08005230 <on_escape>:

void on_escape(const uint8_t followed_wall, const int8_t boost)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	0002      	movs	r2, r0
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	1dbb      	adds	r3, r7, #6
 800523e:	1c0a      	adds	r2, r1, #0
 8005240:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8005242:	1dfb      	adds	r3, r7, #7
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <on_escape+0x26>
	{
		servo_set(-100);
 800524a:	2364      	movs	r3, #100	; 0x64
 800524c:	425b      	negs	r3, r3
 800524e:	0018      	movs	r0, r3
 8005250:	f7fe ffce 	bl	80041f0 <servo_set>
 8005254:	e002      	b.n	800525c <on_escape+0x2c>
	}
	else
	{
		servo_set(100);
 8005256:	2064      	movs	r0, #100	; 0x64
 8005258:	f7fe ffca 	bl	80041f0 <servo_set>
	}

	motor_set_speed(-auto_speed, boost);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <on_escape+0x50>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b25b      	sxtb	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	425b      	negs	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	b25a      	sxtb	r2, r3
 800526a:	1dbb      	adds	r3, r7, #6
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b25b      	sxtb	r3, r3
 8005270:	0019      	movs	r1, r3
 8005272:	0010      	movs	r0, r2
 8005274:	f7fe fdf6 	bl	8003e64 <motor_set_speed>
}
 8005278:	46c0      	nop			; (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200003e9 	.word	0x200003e9

08005284 <auto_controls>:

void auto_controls(const uint16_t* lasers,
		const uint8_t followed_wall,
		const int8_t boost)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	0008      	movs	r0, r1
 800528e:	0011      	movs	r1, r2
 8005290:	1cfb      	adds	r3, r7, #3
 8005292:	1c02      	adds	r2, r0, #0
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	1cbb      	adds	r3, r7, #2
 8005298:	1c0a      	adds	r2, r1, #0
 800529a:	701a      	strb	r2, [r3, #0]
	if (need_escaping(lasers, 1.f))
 800529c:	22fe      	movs	r2, #254	; 0xfe
 800529e:	0592      	lsls	r2, r2, #22
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1c11      	adds	r1, r2, #0
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7ff fd47 	bl	8004d38 <need_escaping>
 80052aa:	1e03      	subs	r3, r0, #0
 80052ac:	d00c      	beq.n	80052c8 <auto_controls+0x44>
	{
		escaping = 1;
 80052ae:	4b35      	ldr	r3, [pc, #212]	; (8005384 <auto_controls+0x100>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
		on_escape(followed_wall, boost);
 80052b4:	1cbb      	adds	r3, r7, #2
 80052b6:	2200      	movs	r2, #0
 80052b8:	569a      	ldrsb	r2, [r3, r2]
 80052ba:	1cfb      	adds	r3, r7, #3
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff ffb5 	bl	8005230 <on_escape>
		return;
 80052c6:	e05a      	b.n	800537e <auto_controls+0xfa>
	}

	if (need_escaping(lasers, 1.5f) && escaping == 1)
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	0592      	lsls	r2, r2, #22
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1c11      	adds	r1, r2, #0
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7ff fd31 	bl	8004d38 <need_escaping>
 80052d6:	1e03      	subs	r3, r0, #0
 80052d8:	d00d      	beq.n	80052f6 <auto_controls+0x72>
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <auto_controls+0x100>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d109      	bne.n	80052f6 <auto_controls+0x72>
	{
		on_escape(followed_wall, boost);
 80052e2:	1cbb      	adds	r3, r7, #2
 80052e4:	2200      	movs	r2, #0
 80052e6:	569a      	ldrsb	r2, [r3, r2]
 80052e8:	1cfb      	adds	r3, r7, #3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f7ff ff9e 	bl	8005230 <on_escape>
		return;
 80052f4:	e043      	b.n	800537e <auto_controls+0xfa>
	}
	else
	{
		escaping = 0;
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <auto_controls+0x100>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
	}

	motor_set_speed(auto_speed, boost);
 80052fc:	4b22      	ldr	r3, [pc, #136]	; (8005388 <auto_controls+0x104>)
 80052fe:	2200      	movs	r2, #0
 8005300:	569a      	ldrsb	r2, [r3, r2]
 8005302:	1cbb      	adds	r3, r7, #2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b25b      	sxtb	r3, r3
 8005308:	0019      	movs	r1, r3
 800530a:	0010      	movs	r0, r2
 800530c:	f7fe fdaa 	bl	8003e64 <motor_set_speed>

	//If no walls detected go in followed wall direction
	if (any_walls_detected(lasers, followed_wall) == 0)
 8005310:	1cfb      	adds	r3, r7, #3
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff fcb9 	bl	8004c90 <any_walls_detected>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d10d      	bne.n	800533e <auto_controls+0xba>
	{
		if (followed_wall == 0)
 8005322:	1cfb      	adds	r3, r7, #3
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d105      	bne.n	8005336 <auto_controls+0xb2>
		{
			servo_set(-75);
 800532a:	234b      	movs	r3, #75	; 0x4b
 800532c:	425b      	negs	r3, r3
 800532e:	0018      	movs	r0, r3
 8005330:	f7fe ff5e 	bl	80041f0 <servo_set>
		{
			servo_set(75);
		}


		return;
 8005334:	e023      	b.n	800537e <auto_controls+0xfa>
			servo_set(75);
 8005336:	204b      	movs	r0, #75	; 0x4b
 8005338:	f7fe ff5a 	bl	80041f0 <servo_set>
		return;
 800533c:	e01f      	b.n	800537e <auto_controls+0xfa>
	}

	//Find widest pair
	uint8_t left_index;
	uint8_t right_index;
	widest_laser_pair(lasers, &left_index, &right_index, followed_wall);
 800533e:	1cfb      	adds	r3, r7, #3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	240e      	movs	r4, #14
 8005344:	193a      	adds	r2, r7, r4
 8005346:	250f      	movs	r5, #15
 8005348:	1979      	adds	r1, r7, r5
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fd2c 	bl	8004da8 <widest_laser_pair>

	if (left_index == right_index) // Only one laser detected a wall
 8005350:	197b      	adds	r3, r7, r5
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	193b      	adds	r3, r7, r4
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d105      	bne.n	8005368 <auto_controls+0xe4>
	{
		on_single_detection(right_index);
 800535c:	193b      	adds	r3, r7, r4
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	0018      	movs	r0, r3
 8005362:	f7ff fd6d 	bl	8004e40 <on_single_detection>
 8005366:	e00a      	b.n	800537e <auto_controls+0xfa>
	}
	else //Multiple lasers detected a wall
	{
		on_multiple_detections(lasers, left_index, right_index, followed_wall);
 8005368:	230f      	movs	r3, #15
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	7819      	ldrb	r1, [r3, #0]
 800536e:	230e      	movs	r3, #14
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	1cfb      	adds	r3, r7, #3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fd89 	bl	8004e90 <on_multiple_detections>
	}
}
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bdb0      	pop	{r4, r5, r7, pc}
 8005384:	200003e8 	.word	0x200003e8
 8005388:	200003e9 	.word	0x200003e9

0800538c <auto_controls_init>:
		const uint16_t target,
		const uint16_t radius,
		const uint8_t laser_amount,
		const float servo_sensitivity
)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	0005      	movs	r5, r0
 8005394:	000c      	movs	r4, r1
 8005396:	0010      	movs	r0, r2
 8005398:	0019      	movs	r1, r3
 800539a:	1dfb      	adds	r3, r7, #7
 800539c:	1c2a      	adds	r2, r5, #0
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	1c22      	adds	r2, r4, #0
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	1cbb      	adds	r3, r7, #2
 80053a8:	1c02      	adds	r2, r0, #0
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	003b      	movs	r3, r7
 80053ae:	1c0a      	adds	r2, r1, #0
 80053b0:	801a      	strh	r2, [r3, #0]
	laser_count = laser_amount;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <auto_controls_init+0x68>)
 80053b4:	221c      	movs	r2, #28
 80053b6:	18ba      	adds	r2, r7, r2
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	701a      	strb	r2, [r3, #0]
	max_laser_distance = max_laser;
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <auto_controls_init+0x6c>)
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	8812      	ldrh	r2, [r2, #0]
 80053c2:	801a      	strh	r2, [r3, #0]
	min_laser_distance = min_laser;
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <auto_controls_init+0x70>)
 80053c6:	1cba      	adds	r2, r7, #2
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	801a      	strh	r2, [r3, #0]
	target_wall_distance = target;
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <auto_controls_init+0x74>)
 80053ce:	003a      	movs	r2, r7
 80053d0:	8812      	ldrh	r2, [r2, #0]
 80053d2:	801a      	strh	r2, [r3, #0]
	target_circle_radius = radius;
 80053d4:	4a0b      	ldr	r2, [pc, #44]	; (8005404 <auto_controls_init+0x78>)
 80053d6:	2318      	movs	r3, #24
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	8013      	strh	r3, [r2, #0]
	auto_speed = speed;
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <auto_controls_init+0x7c>)
 80053e0:	1dfa      	adds	r2, r7, #7
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
	steering_sensitivity = servo_sensitivity;
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <auto_controls_init+0x80>)
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	601a      	str	r2, [r3, #0]
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bdb0      	pop	{r4, r5, r7, pc}
 80053f4:	200003f2 	.word	0x200003f2
 80053f8:	200003ea 	.word	0x200003ea
 80053fc:	200003ec 	.word	0x200003ec
 8005400:	200003ee 	.word	0x200003ee
 8005404:	200003f0 	.word	0x200003f0
 8005408:	200003e9 	.word	0x200003e9
 800540c:	200003f4 	.word	0x200003f4

08005410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005410:	480d      	ldr	r0, [pc, #52]	; (8005448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005412:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005414:	f7fe fff0 	bl	80043f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005418:	480c      	ldr	r0, [pc, #48]	; (800544c <LoopForever+0x6>)
  ldr r1, =_edata
 800541a:	490d      	ldr	r1, [pc, #52]	; (8005450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800541c:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <LoopForever+0xe>)
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005420:	e002      	b.n	8005428 <LoopCopyDataInit>

08005422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005426:	3304      	adds	r3, #4

08005428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800542a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800542c:	d3f9      	bcc.n	8005422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005430:	4c0a      	ldr	r4, [pc, #40]	; (800545c <LoopForever+0x16>)
  movs r3, #0
 8005432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005434:	e001      	b.n	800543a <LoopFillZerobss>

08005436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005438:	3204      	adds	r2, #4

0800543a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800543a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800543c:	d3fb      	bcc.n	8005436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800543e:	f004 ff99 	bl	800a374 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005442:	f7fe fa73 	bl	800392c <main>

08005446 <LoopForever>:

LoopForever:
  b LoopForever
 8005446:	e7fe      	b.n	8005446 <LoopForever>
  ldr   r0, =_estack
 8005448:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800544c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005450:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005454:	0800b894 	.word	0x0800b894
  ldr r2, =_sbss
 8005458:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800545c:	200003fc 	.word	0x200003fc

08005460 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005460:	e7fe      	b.n	8005460 <ADC1_IRQHandler>
	...

08005464 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800546a:	1dfb      	adds	r3, r7, #7
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_Init+0x3c>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_Init+0x3c>)
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	0049      	lsls	r1, r1, #1
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800547e:	2003      	movs	r0, #3
 8005480:	f000 f810 	bl	80054a4 <HAL_InitTick>
 8005484:	1e03      	subs	r3, r0, #0
 8005486:	d003      	beq.n	8005490 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005488:	1dfb      	adds	r3, r7, #7
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e001      	b.n	8005494 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005490:	f7fe ff5e 	bl	8004350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005494:	1dfb      	adds	r3, r7, #7
 8005496:	781b      	ldrb	r3, [r3, #0]
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40022000 	.word	0x40022000

080054a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054ac:	230f      	movs	r3, #15
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_InitTick+0x88>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02b      	beq.n	8005514 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <HAL_InitTick+0x8c>)
 80054be:	681c      	ldr	r4, [r3, #0]
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <HAL_InitTick+0x88>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	0019      	movs	r1, r3
 80054c6:	23fa      	movs	r3, #250	; 0xfa
 80054c8:	0098      	lsls	r0, r3, #2
 80054ca:	f7fa fe19 	bl	8000100 <__udivsi3>
 80054ce:	0003      	movs	r3, r0
 80054d0:	0019      	movs	r1, r3
 80054d2:	0020      	movs	r0, r4
 80054d4:	f7fa fe14 	bl	8000100 <__udivsi3>
 80054d8:	0003      	movs	r3, r0
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 f93d 	bl	800575a <HAL_SYSTICK_Config>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d112      	bne.n	800550a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d80a      	bhi.n	8005500 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	2301      	movs	r3, #1
 80054ee:	425b      	negs	r3, r3
 80054f0:	2200      	movs	r2, #0
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 f90c 	bl	8005710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_InitTick+0x90>)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e00d      	b.n	800551c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005500:	230f      	movs	r3, #15
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e008      	b.n	800551c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800550a:	230f      	movs	r3, #15
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e003      	b.n	800551c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005514:	230f      	movs	r3, #15
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800551c:	230f      	movs	r3, #15
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	781b      	ldrb	r3, [r3, #0]
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b005      	add	sp, #20
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	2000000c 	.word	0x2000000c
 8005530:	20000004 	.word	0x20000004
 8005534:	20000008 	.word	0x20000008

08005538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_IncTick+0x1c>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	001a      	movs	r2, r3
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_IncTick+0x20>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	18d2      	adds	r2, r2, r3
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_IncTick+0x20>)
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	2000000c 	.word	0x2000000c
 8005558:	200003f8 	.word	0x200003f8

0800555c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  return uwTick;
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <HAL_GetTick+0x10>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	200003f8 	.word	0x200003f8

08005570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff fff0 	bl	800555c <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	d005      	beq.n	8005596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <HAL_Delay+0x44>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	001a      	movs	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	189b      	adds	r3, r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	f7ff ffe0 	bl	800555c <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d8f7      	bhi.n	8005598 <HAL_Delay+0x28>
  {
  }
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b004      	add	sp, #16
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	2000000c 	.word	0x2000000c

080055b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	0002      	movs	r2, r0
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055c4:	1dfb      	adds	r3, r7, #7
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ca:	d809      	bhi.n	80055e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055cc:	1dfb      	adds	r3, r7, #7
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	001a      	movs	r2, r3
 80055d2:	231f      	movs	r3, #31
 80055d4:	401a      	ands	r2, r3
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <__NVIC_EnableIRQ+0x30>)
 80055d8:	2101      	movs	r1, #1
 80055da:	4091      	lsls	r1, r2
 80055dc:	000a      	movs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	e000e100 	.word	0xe000e100

080055ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	0002      	movs	r2, r0
 80055f4:	6039      	str	r1, [r7, #0]
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055fa:	1dfb      	adds	r3, r7, #7
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005600:	d828      	bhi.n	8005654 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005602:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <__NVIC_SetPriority+0xd4>)
 8005604:	1dfb      	adds	r3, r7, #7
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b25b      	sxtb	r3, r3
 800560a:	089b      	lsrs	r3, r3, #2
 800560c:	33c0      	adds	r3, #192	; 0xc0
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	589b      	ldr	r3, [r3, r2]
 8005612:	1dfa      	adds	r2, r7, #7
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	0011      	movs	r1, r2
 8005618:	2203      	movs	r2, #3
 800561a:	400a      	ands	r2, r1
 800561c:	00d2      	lsls	r2, r2, #3
 800561e:	21ff      	movs	r1, #255	; 0xff
 8005620:	4091      	lsls	r1, r2
 8005622:	000a      	movs	r2, r1
 8005624:	43d2      	mvns	r2, r2
 8005626:	401a      	ands	r2, r3
 8005628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	22ff      	movs	r2, #255	; 0xff
 8005630:	401a      	ands	r2, r3
 8005632:	1dfb      	adds	r3, r7, #7
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	0018      	movs	r0, r3
 8005638:	2303      	movs	r3, #3
 800563a:	4003      	ands	r3, r0
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005640:	481f      	ldr	r0, [pc, #124]	; (80056c0 <__NVIC_SetPriority+0xd4>)
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b25b      	sxtb	r3, r3
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	430a      	orrs	r2, r1
 800564c:	33c0      	adds	r3, #192	; 0xc0
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005652:	e031      	b.n	80056b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005654:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <__NVIC_SetPriority+0xd8>)
 8005656:	1dfb      	adds	r3, r7, #7
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	0019      	movs	r1, r3
 800565c:	230f      	movs	r3, #15
 800565e:	400b      	ands	r3, r1
 8005660:	3b08      	subs	r3, #8
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	3306      	adds	r3, #6
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	18d3      	adds	r3, r2, r3
 800566a:	3304      	adds	r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1dfa      	adds	r2, r7, #7
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	0011      	movs	r1, r2
 8005674:	2203      	movs	r2, #3
 8005676:	400a      	ands	r2, r1
 8005678:	00d2      	lsls	r2, r2, #3
 800567a:	21ff      	movs	r1, #255	; 0xff
 800567c:	4091      	lsls	r1, r2
 800567e:	000a      	movs	r2, r1
 8005680:	43d2      	mvns	r2, r2
 8005682:	401a      	ands	r2, r3
 8005684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	401a      	ands	r2, r3
 800568e:	1dfb      	adds	r3, r7, #7
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	0018      	movs	r0, r3
 8005694:	2303      	movs	r3, #3
 8005696:	4003      	ands	r3, r0
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800569c:	4809      	ldr	r0, [pc, #36]	; (80056c4 <__NVIC_SetPriority+0xd8>)
 800569e:	1dfb      	adds	r3, r7, #7
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	001c      	movs	r4, r3
 80056a4:	230f      	movs	r3, #15
 80056a6:	4023      	ands	r3, r4
 80056a8:	3b08      	subs	r3, #8
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	430a      	orrs	r2, r1
 80056ae:	3306      	adds	r3, #6
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	18c3      	adds	r3, r0, r3
 80056b4:	3304      	adds	r3, #4
 80056b6:	601a      	str	r2, [r3, #0]
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b003      	add	sp, #12
 80056be:	bd90      	pop	{r4, r7, pc}
 80056c0:	e000e100 	.word	0xe000e100
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	045b      	lsls	r3, r3, #17
 80056d8:	429a      	cmp	r2, r3
 80056da:	d301      	bcc.n	80056e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056dc:	2301      	movs	r3, #1
 80056de:	e010      	b.n	8005702 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <SysTick_Config+0x44>)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	3a01      	subs	r2, #1
 80056e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056e8:	2301      	movs	r3, #1
 80056ea:	425b      	negs	r3, r3
 80056ec:	2103      	movs	r1, #3
 80056ee:	0018      	movs	r0, r3
 80056f0:	f7ff ff7c 	bl	80055ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <SysTick_Config+0x44>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <SysTick_Config+0x44>)
 80056fc:	2207      	movs	r2, #7
 80056fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b002      	add	sp, #8
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	e000e010 	.word	0xe000e010

08005710 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	210f      	movs	r1, #15
 800571c:	187b      	adds	r3, r7, r1
 800571e:	1c02      	adds	r2, r0, #0
 8005720:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	187b      	adds	r3, r7, r1
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b25b      	sxtb	r3, r3
 800572a:	0011      	movs	r1, r2
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff ff5d 	bl	80055ec <__NVIC_SetPriority>
}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	b004      	add	sp, #16
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	0002      	movs	r2, r0
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005746:	1dfb      	adds	r3, r7, #7
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b25b      	sxtb	r3, r3
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ff33 	bl	80055b8 <__NVIC_EnableIRQ>
}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	46bd      	mov	sp, r7
 8005756:	b002      	add	sp, #8
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f7ff ffaf 	bl	80056c8 <SysTick_Config>
 800576a:	0003      	movs	r3, r0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e077      	b.n	8005876 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <HAL_DMA_Init+0x10c>)
 800578c:	4694      	mov	ip, r2
 800578e:	4463      	add	r3, ip
 8005790:	2114      	movs	r1, #20
 8005792:	0018      	movs	r0, r3
 8005794:	f7fa fcb4 	bl	8000100 <__udivsi3>
 8005798:	0003      	movs	r3, r0
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2225      	movs	r2, #37	; 0x25
 80057a4:	2102      	movs	r1, #2
 80057a6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4934      	ldr	r1, [pc, #208]	; (8005884 <HAL_DMA_Init+0x110>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6819      	ldr	r1, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 fa8d 	bl	8005d10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	429a      	cmp	r2, r3
 8005800:	d102      	bne.n	8005808 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005810:	213f      	movs	r1, #63	; 0x3f
 8005812:	400a      	ands	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800581e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d011      	beq.n	800584c <HAL_DMA_Init+0xd8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d80d      	bhi.n	800584c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 fa98 	bl	8005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	e008      	b.n	800585e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2225      	movs	r2, #37	; 0x25
 8005868:	2101      	movs	r1, #1
 800586a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	; 0x24
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b002      	add	sp, #8
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	bffdfff8 	.word	0xbffdfff8
 8005884:	ffff800f 	.word	0xffff800f

08005888 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2317      	movs	r3, #23
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2224      	movs	r2, #36	; 0x24
 80058a2:	5c9b      	ldrb	r3, [r3, r2]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_DMA_Start_IT+0x24>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e06f      	b.n	800598c <HAL_DMA_Start_IT+0x104>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	2101      	movs	r1, #1
 80058b2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2225      	movs	r2, #37	; 0x25
 80058b8:	5c9b      	ldrb	r3, [r3, r2]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d157      	bne.n	8005970 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2225      	movs	r2, #37	; 0x25
 80058c4:	2102      	movs	r1, #2
 80058c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2101      	movs	r1, #1
 80058da:	438a      	bics	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f9d3 	bl	8005c90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	210e      	movs	r1, #14
 80058fe:	430a      	orrs	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e00f      	b.n	8005924 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2104      	movs	r1, #4
 8005910:	438a      	bics	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	210a      	movs	r1, #10
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	025b      	lsls	r3, r3, #9
 800592e:	4013      	ands	r3, r2
 8005930:	d008      	beq.n	8005944 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	0049      	lsls	r1, r1, #1
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	2180      	movs	r1, #128	; 0x80
 8005958:	0049      	lsls	r1, r1, #1
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2101      	movs	r1, #1
 800596a:	430a      	orrs	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e00a      	b.n	8005986 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2224      	movs	r2, #36	; 0x24
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800597e:	2317      	movs	r3, #23
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005986:	2317      	movs	r3, #23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	781b      	ldrb	r3, [r3, #0]
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b006      	add	sp, #24
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e050      	b.n	8005a48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2225      	movs	r2, #37	; 0x25
 80059aa:	5c9b      	ldrb	r3, [r3, r2]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d008      	beq.n	80059c4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2204      	movs	r2, #4
 80059b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	; 0x24
 80059bc:	2100      	movs	r1, #0
 80059be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e041      	b.n	8005a48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	210e      	movs	r1, #14
 80059d0:	438a      	bics	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	491c      	ldr	r1, [pc, #112]	; (8005a50 <HAL_DMA_Abort+0xbc>)
 80059e0:	400a      	ands	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2101      	movs	r1, #1
 80059f0:	438a      	bics	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_DMA_Abort+0xc0>)
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	221c      	movs	r2, #28
 80059fe:	4013      	ands	r3, r2
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <HAL_DMA_Abort+0xc0>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	490a      	ldr	r1, [pc, #40]	; (8005a50 <HAL_DMA_Abort+0xbc>)
 8005a28:	400a      	ands	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2225      	movs	r2, #37	; 0x25
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2224      	movs	r2, #36	; 0x24
 8005a42:	2100      	movs	r1, #0
 8005a44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	fffffeff 	.word	0xfffffeff
 8005a54:	40020000 	.word	0x40020000

08005a58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	210f      	movs	r1, #15
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2225      	movs	r2, #37	; 0x25
 8005a6c:	5c9b      	ldrb	r3, [r3, r2]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d006      	beq.n	8005a82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2204      	movs	r2, #4
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e049      	b.n	8005b16 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	210e      	movs	r1, #14
 8005a8e:	438a      	bics	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	438a      	bics	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	491d      	ldr	r1, [pc, #116]	; (8005b24 <HAL_DMA_Abort_IT+0xcc>)
 8005aae:	400a      	ands	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <HAL_DMA_Abort_IT+0xd0>)
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	221c      	movs	r2, #28
 8005abc:	4013      	ands	r3, r2
 8005abe:	2201      	movs	r2, #1
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_DMA_Abort_IT+0xd0>)
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ad0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	490f      	ldr	r1, [pc, #60]	; (8005b24 <HAL_DMA_Abort_IT+0xcc>)
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005af2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2225      	movs	r2, #37	; 0x25
 8005af8:	2101      	movs	r1, #1
 8005afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	; 0x24
 8005b00:	2100      	movs	r1, #0
 8005b02:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	0010      	movs	r0, r2
 8005b14:	4798      	blx	r3
    }
  }
  return status;
 8005b16:	230f      	movs	r3, #15
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b004      	add	sp, #16
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	fffffeff 	.word	0xfffffeff
 8005b28:	40020000 	.word	0x40020000

08005b2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005b34:	4b55      	ldr	r3, [pc, #340]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	221c      	movs	r2, #28
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	0013      	movs	r3, r2
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4013      	ands	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x7a>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d023      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2220      	movs	r2, #32
 8005b66:	4013      	ands	r3, r2
 8005b68:	d107      	bne.n	8005b7a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2104      	movs	r1, #4
 8005b76:	438a      	bics	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005b7a:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	221c      	movs	r2, #28
 8005b84:	4013      	ands	r3, r2
 8005b86:	2204      	movs	r2, #4
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	4b40      	ldr	r3, [pc, #256]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d100      	bne.n	8005b9a <HAL_DMA_IRQHandler+0x6e>
 8005b98:	e073      	b.n	8005c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	0010      	movs	r0, r2
 8005ba2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005ba4:	e06d      	b.n	8005c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	221c      	movs	r2, #28
 8005bac:	4013      	ands	r3, r2
 8005bae:	2202      	movs	r2, #2
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	0013      	movs	r3, r2
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d02e      	beq.n	8005c18 <HAL_DMA_IRQHandler+0xec>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d02a      	beq.n	8005c18 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d10b      	bne.n	8005be6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	210a      	movs	r1, #10
 8005bda:	438a      	bics	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2225      	movs	r2, #37	; 0x25
 8005be2:	2101      	movs	r1, #1
 8005be4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	221c      	movs	r2, #28
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d03a      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	0010      	movs	r0, r2
 8005c14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005c16:	e034      	b.n	8005c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	221c      	movs	r2, #28
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2208      	movs	r2, #8
 8005c22:	409a      	lsls	r2, r3
 8005c24:	0013      	movs	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d02b      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x158>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2208      	movs	r2, #8
 8005c30:	4013      	ands	r3, r2
 8005c32:	d027      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	210e      	movs	r1, #14
 8005c40:	438a      	bics	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	221c      	movs	r2, #28
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2201      	movs	r2, #1
 8005c52:	409a      	lsls	r2, r3
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <HAL_DMA_IRQHandler+0x160>)
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2225      	movs	r2, #37	; 0x25
 8005c64:	2101      	movs	r1, #1
 8005c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	0010      	movs	r0, r2
 8005c80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46c0      	nop			; (mov r8, r8)
}
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b004      	add	sp, #16
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40020000 	.word	0x40020000

08005c90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ca6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <DMA_SetConfig+0x7c>)
 8005cbc:	6859      	ldr	r1, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	221c      	movs	r2, #28
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <DMA_SetConfig+0x7c>)
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d108      	bne.n	8005cf2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cf0:	e007      	b.n	8005d02 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b004      	add	sp, #16
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	40020000 	.word	0x40020000

08005d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005d20:	4694      	mov	ip, r2
 8005d22:	4463      	add	r3, ip
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	001a      	movs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	001a      	movs	r2, r3
 8005d32:	23ff      	movs	r3, #255	; 0xff
 8005d34:	4013      	ands	r3, r2
 8005d36:	3b08      	subs	r3, #8
 8005d38:	2114      	movs	r1, #20
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7fa f9e0 	bl	8000100 <__udivsi3>
 8005d40:	0003      	movs	r3, r0
 8005d42:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a07      	ldr	r2, [pc, #28]	; (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005d48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	221f      	movs	r2, #31
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2201      	movs	r2, #1
 8005d52:	409a      	lsls	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b004      	add	sp, #16
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	10008200 	.word	0x10008200
 8005d64:	40020880 	.word	0x40020880

08005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	223f      	movs	r2, #63	; 0x3f
 8005d76:	4013      	ands	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d7e:	4694      	mov	ip, r2
 8005d80:	4463      	add	r3, ip
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	001a      	movs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a07      	ldr	r2, [pc, #28]	; (8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	2203      	movs	r2, #3
 8005d96:	4013      	ands	r3, r2
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b004      	add	sp, #16
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	1000823f 	.word	0x1000823f
 8005dac:	40020940 	.word	0x40020940

08005db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dbe:	e147      	b.n	8006050 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4091      	lsls	r1, r2
 8005dca:	000a      	movs	r2, r1
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d100      	bne.n	8005dd8 <HAL_GPIO_Init+0x28>
 8005dd6:	e138      	b.n	800604a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d005      	beq.n	8005df0 <HAL_GPIO_Init+0x40>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2203      	movs	r2, #3
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d130      	bne.n	8005e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	0013      	movs	r3, r2
 8005e00:	43da      	mvns	r2, r3
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4013      	ands	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	0013      	movs	r3, r2
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e26:	2201      	movs	r2, #1
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	0013      	movs	r3, r2
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4013      	ands	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	401a      	ands	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	409a      	lsls	r2, r3
 8005e44:	0013      	movs	r3, r2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2203      	movs	r2, #3
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d017      	beq.n	8005e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	2203      	movs	r2, #3
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	0013      	movs	r3, r2
 8005e6e:	43da      	mvns	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4013      	ands	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	0013      	movs	r3, r2
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2203      	movs	r2, #3
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d123      	bne.n	8005ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	58d3      	ldr	r3, [r2, r3]
 8005ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2207      	movs	r2, #7
 8005eac:	4013      	ands	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	409a      	lsls	r2, r3
 8005eb4:	0013      	movs	r3, r2
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2107      	movs	r1, #7
 8005ec6:	400b      	ands	r3, r1
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	0013      	movs	r3, r2
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	08da      	lsrs	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3208      	adds	r2, #8
 8005edc:	0092      	lsls	r2, r2, #2
 8005ede:	6939      	ldr	r1, [r7, #16]
 8005ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	2203      	movs	r2, #3
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	0013      	movs	r3, r2
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2203      	movs	r2, #3
 8005f00:	401a      	ands	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	0013      	movs	r3, r2
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	23c0      	movs	r3, #192	; 0xc0
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d100      	bne.n	8005f24 <HAL_GPIO_Init+0x174>
 8005f22:	e092      	b.n	800604a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005f24:	4a50      	ldr	r2, [pc, #320]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	3318      	adds	r3, #24
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	589b      	ldr	r3, [r3, r2]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2203      	movs	r2, #3
 8005f36:	4013      	ands	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	220f      	movs	r2, #15
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	0013      	movs	r3, r2
 8005f40:	43da      	mvns	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4013      	ands	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	23a0      	movs	r3, #160	; 0xa0
 8005f4c:	05db      	lsls	r3, r3, #23
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d013      	beq.n	8005f7a <HAL_GPIO_Init+0x1ca>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a45      	ldr	r2, [pc, #276]	; (800606c <HAL_GPIO_Init+0x2bc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00d      	beq.n	8005f76 <HAL_GPIO_Init+0x1c6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a44      	ldr	r2, [pc, #272]	; (8006070 <HAL_GPIO_Init+0x2c0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <HAL_GPIO_Init+0x1c2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a43      	ldr	r2, [pc, #268]	; (8006074 <HAL_GPIO_Init+0x2c4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_GPIO_Init+0x1be>
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e006      	b.n	8005f7c <HAL_GPIO_Init+0x1cc>
 8005f6e:	2305      	movs	r3, #5
 8005f70:	e004      	b.n	8005f7c <HAL_GPIO_Init+0x1cc>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e002      	b.n	8005f7c <HAL_GPIO_Init+0x1cc>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_GPIO_Init+0x1cc>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	2103      	movs	r1, #3
 8005f80:	400a      	ands	r2, r1
 8005f82:	00d2      	lsls	r2, r2, #3
 8005f84:	4093      	lsls	r3, r2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005f8c:	4936      	ldr	r1, [pc, #216]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3318      	adds	r3, #24
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f9a:	4b33      	ldr	r3, [pc, #204]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43da      	mvns	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	035b      	lsls	r3, r3, #13
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fbe:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005fc4:	4b28      	ldr	r3, [pc, #160]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	43da      	mvns	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	039b      	lsls	r3, r3, #14
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fe8:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005ff0:	2384      	movs	r3, #132	; 0x84
 8005ff2:	58d3      	ldr	r3, [r2, r3]
 8005ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	43da      	mvns	r2, r3
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	4013      	ands	r3, r2
 800600a:	d003      	beq.n	8006014 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006014:	4914      	ldr	r1, [pc, #80]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8006016:	2284      	movs	r2, #132	; 0x84
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800601c:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	58d3      	ldr	r3, [r2, r3]
 8006022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	43da      	mvns	r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	025b      	lsls	r3, r3, #9
 8006036:	4013      	ands	r3, r2
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006042:	4909      	ldr	r1, [pc, #36]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8006044:	2280      	movs	r2, #128	; 0x80
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	3301      	adds	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	40da      	lsrs	r2, r3
 8006058:	1e13      	subs	r3, r2, #0
 800605a:	d000      	beq.n	800605e <HAL_GPIO_Init+0x2ae>
 800605c:	e6b0      	b.n	8005dc0 <HAL_GPIO_Init+0x10>
  }
}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	46c0      	nop			; (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b006      	add	sp, #24
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40021800 	.word	0x40021800
 800606c:	50000400 	.word	0x50000400
 8006070:	50000800 	.word	0x50000800
 8006074:	50000c00 	.word	0x50000c00

08006078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	0008      	movs	r0, r1
 8006082:	0011      	movs	r1, r2
 8006084:	1cbb      	adds	r3, r7, #2
 8006086:	1c02      	adds	r2, r0, #0
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	1c7b      	adds	r3, r7, #1
 800608c:	1c0a      	adds	r2, r1, #0
 800608e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006090:	1c7b      	adds	r3, r7, #1
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006098:	1cbb      	adds	r3, r7, #2
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060a0:	e003      	b.n	80060aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060a2:	1cbb      	adds	r3, r7, #2
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b002      	add	sp, #8
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e082      	b.n	80061cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2241      	movs	r2, #65	; 0x41
 80060ca:	5c9b      	ldrb	r3, [r3, r2]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d107      	bne.n	80060e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	0018      	movs	r0, r3
 80060de:	f7fd f9a3 	bl	8003428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2241      	movs	r2, #65	; 0x41
 80060e6:	2124      	movs	r1, #36	; 0x24
 80060e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	438a      	bics	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4934      	ldr	r1, [pc, #208]	; (80061d4 <HAL_I2C_Init+0x120>)
 8006104:	400a      	ands	r2, r1
 8006106:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4931      	ldr	r1, [pc, #196]	; (80061d8 <HAL_I2C_Init+0x124>)
 8006114:	400a      	ands	r2, r1
 8006116:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2180      	movs	r1, #128	; 0x80
 800612a:	0209      	lsls	r1, r1, #8
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
 8006130:	e007      	b.n	8006142 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2184      	movs	r1, #132	; 0x84
 800613c:	0209      	lsls	r1, r1, #8
 800613e:	430a      	orrs	r2, r1
 8006140:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d104      	bne.n	8006154 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	0112      	lsls	r2, r2, #4
 8006152:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	491f      	ldr	r1, [pc, #124]	; (80061dc <HAL_I2C_Init+0x128>)
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	491a      	ldr	r1, [pc, #104]	; (80061d8 <HAL_I2C_Init+0x124>)
 8006170:	400a      	ands	r2, r1
 8006172:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	431a      	orrs	r2, r3
 800617e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69d9      	ldr	r1, [r3, #28]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2101      	movs	r1, #1
 80061aa:	430a      	orrs	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2241      	movs	r2, #65	; 0x41
 80061b8:	2120      	movs	r1, #32
 80061ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2242      	movs	r2, #66	; 0x42
 80061c6:	2100      	movs	r1, #0
 80061c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	f0ffffff 	.word	0xf0ffffff
 80061d8:	ffff7fff 	.word	0xffff7fff
 80061dc:	02008000 	.word	0x02008000

080061e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	0008      	movs	r0, r1
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	0019      	movs	r1, r3
 80061ee:	230a      	movs	r3, #10
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	1c02      	adds	r2, r0, #0
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	2308      	movs	r3, #8
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	1c0a      	adds	r2, r1, #0
 80061fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2241      	movs	r2, #65	; 0x41
 8006202:	5c9b      	ldrb	r3, [r3, r2]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b20      	cmp	r3, #32
 8006208:	d000      	beq.n	800620c <HAL_I2C_Master_Transmit+0x2c>
 800620a:	e0e7      	b.n	80063dc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2240      	movs	r2, #64	; 0x40
 8006210:	5c9b      	ldrb	r3, [r3, r2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_I2C_Master_Transmit+0x3a>
 8006216:	2302      	movs	r3, #2
 8006218:	e0e1      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2240      	movs	r2, #64	; 0x40
 800621e:	2101      	movs	r1, #1
 8006220:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006222:	f7ff f99b 	bl	800555c <HAL_GetTick>
 8006226:	0003      	movs	r3, r0
 8006228:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	0219      	lsls	r1, r3, #8
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2319      	movs	r3, #25
 8006236:	2201      	movs	r2, #1
 8006238:	f000 fb96 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0cc      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2241      	movs	r2, #65	; 0x41
 8006248:	2121      	movs	r1, #33	; 0x21
 800624a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2242      	movs	r2, #66	; 0x42
 8006250:	2110      	movs	r1, #16
 8006252:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2208      	movs	r2, #8
 8006264:	18ba      	adds	r2, r7, r2
 8006266:	8812      	ldrh	r2, [r2, #0]
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	2bff      	cmp	r3, #255	; 0xff
 8006278:	d911      	bls.n	800629e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22ff      	movs	r2, #255	; 0xff
 800627e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006284:	b2da      	uxtb	r2, r3
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	045c      	lsls	r4, r3, #17
 800628a:	230a      	movs	r3, #10
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	8819      	ldrh	r1, [r3, #0]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	4b55      	ldr	r3, [pc, #340]	; (80063e8 <HAL_I2C_Master_Transmit+0x208>)
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	0023      	movs	r3, r4
 8006298:	f000 fd9a 	bl	8006dd0 <I2C_TransferConfig>
 800629c:	e075      	b.n	800638a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	049c      	lsls	r4, r3, #18
 80062b2:	230a      	movs	r3, #10
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	8819      	ldrh	r1, [r3, #0]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	4b4b      	ldr	r3, [pc, #300]	; (80063e8 <HAL_I2C_Master_Transmit+0x208>)
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	0023      	movs	r3, r4
 80062c0:	f000 fd86 	bl	8006dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80062c4:	e061      	b.n	800638a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 fb8a 	bl	80069e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80062d2:	1e03      	subs	r3, r0, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e081      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d03a      	beq.n	800638a <HAL_I2C_Master_Transmit+0x1aa>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d136      	bne.n	800638a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	0013      	movs	r3, r2
 8006326:	2200      	movs	r2, #0
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	f000 fb1d 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e053      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	2bff      	cmp	r3, #255	; 0xff
 800633e:	d911      	bls.n	8006364 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	22ff      	movs	r2, #255	; 0xff
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	b2da      	uxtb	r2, r3
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	045c      	lsls	r4, r3, #17
 8006350:	230a      	movs	r3, #10
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	8819      	ldrh	r1, [r3, #0]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	0023      	movs	r3, r4
 800635e:	f000 fd37 	bl	8006dd0 <I2C_TransferConfig>
 8006362:	e012      	b.n	800638a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	b2da      	uxtb	r2, r3
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	049c      	lsls	r4, r3, #18
 8006378:	230a      	movs	r3, #10
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	8819      	ldrh	r1, [r3, #0]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	2300      	movs	r3, #0
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	0023      	movs	r3, r4
 8006386:	f000 fd23 	bl	8006dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d198      	bne.n	80062c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	0018      	movs	r0, r3
 800639c:	f000 fb62 	bl	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063a0:	1e03      	subs	r3, r0, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e01a      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2220      	movs	r2, #32
 80063ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	490c      	ldr	r1, [pc, #48]	; (80063ec <HAL_I2C_Master_Transmit+0x20c>)
 80063bc:	400a      	ands	r2, r1
 80063be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2241      	movs	r2, #65	; 0x41
 80063c4:	2120      	movs	r1, #32
 80063c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2242      	movs	r2, #66	; 0x42
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	2100      	movs	r1, #0
 80063d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b007      	add	sp, #28
 80063e4:	bd90      	pop	{r4, r7, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	80002000 	.word	0x80002000
 80063ec:	fe00e800 	.word	0xfe00e800

080063f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	0008      	movs	r0, r1
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	0019      	movs	r1, r3
 80063fe:	230a      	movs	r3, #10
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	1c02      	adds	r2, r0, #0
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	2308      	movs	r3, #8
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	1c0a      	adds	r2, r1, #0
 800640c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2241      	movs	r2, #65	; 0x41
 8006412:	5c9b      	ldrb	r3, [r3, r2]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	d000      	beq.n	800641c <HAL_I2C_Master_Receive+0x2c>
 800641a:	e0e8      	b.n	80065ee <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2240      	movs	r2, #64	; 0x40
 8006420:	5c9b      	ldrb	r3, [r3, r2]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_I2C_Master_Receive+0x3a>
 8006426:	2302      	movs	r3, #2
 8006428:	e0e2      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2240      	movs	r2, #64	; 0x40
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006432:	f7ff f893 	bl	800555c <HAL_GetTick>
 8006436:	0003      	movs	r3, r0
 8006438:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	0219      	lsls	r1, r3, #8
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2319      	movs	r3, #25
 8006446:	2201      	movs	r2, #1
 8006448:	f000 fa8e 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800644c:	1e03      	subs	r3, r0, #0
 800644e:	d001      	beq.n	8006454 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0cd      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2241      	movs	r2, #65	; 0x41
 8006458:	2122      	movs	r1, #34	; 0x22
 800645a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2242      	movs	r2, #66	; 0x42
 8006460:	2110      	movs	r1, #16
 8006462:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2208      	movs	r2, #8
 8006474:	18ba      	adds	r2, r7, r2
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2bff      	cmp	r3, #255	; 0xff
 8006488:	d911      	bls.n	80064ae <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	22ff      	movs	r2, #255	; 0xff
 800648e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	045c      	lsls	r4, r3, #17
 800649a:	230a      	movs	r3, #10
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	8819      	ldrh	r1, [r3, #0]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <HAL_I2C_Master_Receive+0x208>)
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	0023      	movs	r3, r4
 80064a8:	f000 fc92 	bl	8006dd0 <I2C_TransferConfig>
 80064ac:	e076      	b.n	800659c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	049c      	lsls	r4, r3, #18
 80064c2:	230a      	movs	r3, #10
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	8819      	ldrh	r1, [r3, #0]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	4b4b      	ldr	r3, [pc, #300]	; (80065f8 <HAL_I2C_Master_Receive+0x208>)
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	0023      	movs	r3, r4
 80064d0:	f000 fc7e 	bl	8006dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80064d4:	e062      	b.n	800659c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 fafd 	bl	8006adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80064e2:	1e03      	subs	r3, r0, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e082      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d03a      	beq.n	800659c <HAL_I2C_Master_Receive+0x1ac>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d136      	bne.n	800659c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800652e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	0013      	movs	r3, r2
 8006538:	2200      	movs	r2, #0
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	f000 fa14 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 8006540:	1e03      	subs	r3, r0, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e053      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2bff      	cmp	r3, #255	; 0xff
 8006550:	d911      	bls.n	8006576 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	22ff      	movs	r2, #255	; 0xff
 8006556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655c:	b2da      	uxtb	r2, r3
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	045c      	lsls	r4, r3, #17
 8006562:	230a      	movs	r3, #10
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	8819      	ldrh	r1, [r3, #0]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	0023      	movs	r3, r4
 8006570:	f000 fc2e 	bl	8006dd0 <I2C_TransferConfig>
 8006574:	e012      	b.n	800659c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	b2da      	uxtb	r2, r3
 8006586:	2380      	movs	r3, #128	; 0x80
 8006588:	049c      	lsls	r4, r3, #18
 800658a:	230a      	movs	r3, #10
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	8819      	ldrh	r1, [r3, #0]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	0023      	movs	r3, r4
 8006598:	f000 fc1a 	bl	8006dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d197      	bne.n	80064d6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fa59 	bl	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065b2:	1e03      	subs	r3, r0, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01a      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2220      	movs	r2, #32
 80065c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	490b      	ldr	r1, [pc, #44]	; (80065fc <HAL_I2C_Master_Receive+0x20c>)
 80065ce:	400a      	ands	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2241      	movs	r2, #65	; 0x41
 80065d6:	2120      	movs	r1, #32
 80065d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2242      	movs	r2, #66	; 0x42
 80065de:	2100      	movs	r1, #0
 80065e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2240      	movs	r2, #64	; 0x40
 80065e6:	2100      	movs	r1, #0
 80065e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b007      	add	sp, #28
 80065f6:	bd90      	pop	{r4, r7, pc}
 80065f8:	80002400 	.word	0x80002400
 80065fc:	fe00e800 	.word	0xfe00e800

08006600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	000c      	movs	r4, r1
 800660a:	0010      	movs	r0, r2
 800660c:	0019      	movs	r1, r3
 800660e:	230a      	movs	r3, #10
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	1c22      	adds	r2, r4, #0
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	2308      	movs	r3, #8
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	1c02      	adds	r2, r0, #0
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	1dbb      	adds	r3, r7, #6
 8006620:	1c0a      	adds	r2, r1, #0
 8006622:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2241      	movs	r2, #65	; 0x41
 8006628:	5c9b      	ldrb	r3, [r3, r2]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b20      	cmp	r3, #32
 800662e:	d000      	beq.n	8006632 <HAL_I2C_Mem_Write+0x32>
 8006630:	e10c      	b.n	800684c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_I2C_Mem_Write+0x42>
 8006638:	232c      	movs	r3, #44	; 0x2c
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	0092      	lsls	r2, r2, #2
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0ff      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2240      	movs	r2, #64	; 0x40
 8006652:	5c9b      	ldrb	r3, [r3, r2]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_I2C_Mem_Write+0x5c>
 8006658:	2302      	movs	r3, #2
 800665a:	e0f8      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2240      	movs	r2, #64	; 0x40
 8006660:	2101      	movs	r1, #1
 8006662:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006664:	f7fe ff7a 	bl	800555c <HAL_GetTick>
 8006668:	0003      	movs	r3, r0
 800666a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	0219      	lsls	r1, r3, #8
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	2319      	movs	r3, #25
 8006678:	2201      	movs	r2, #1
 800667a:	f000 f975 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800667e:	1e03      	subs	r3, r0, #0
 8006680:	d001      	beq.n	8006686 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e0e3      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2241      	movs	r2, #65	; 0x41
 800668a:	2121      	movs	r1, #33	; 0x21
 800668c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2242      	movs	r2, #66	; 0x42
 8006692:	2140      	movs	r1, #64	; 0x40
 8006694:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	222c      	movs	r2, #44	; 0x2c
 80066a6:	18ba      	adds	r2, r7, r2
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066b2:	1dbb      	adds	r3, r7, #6
 80066b4:	881c      	ldrh	r4, [r3, #0]
 80066b6:	2308      	movs	r3, #8
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	881a      	ldrh	r2, [r3, #0]
 80066bc:	230a      	movs	r3, #10
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	8819      	ldrh	r1, [r3, #0]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	0023      	movs	r3, r4
 80066ce:	f000 f8c5 	bl	800685c <I2C_RequestMemoryWrite>
 80066d2:	1e03      	subs	r3, r0, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2240      	movs	r2, #64	; 0x40
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0b5      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2bff      	cmp	r3, #255	; 0xff
 80066ea:	d911      	bls.n	8006710 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	045c      	lsls	r4, r3, #17
 80066fc:	230a      	movs	r3, #10
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	8819      	ldrh	r1, [r3, #0]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	2300      	movs	r3, #0
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	0023      	movs	r3, r4
 800670a:	f000 fb61 	bl	8006dd0 <I2C_TransferConfig>
 800670e:	e012      	b.n	8006736 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	049c      	lsls	r4, r3, #18
 8006724:	230a      	movs	r3, #10
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	8819      	ldrh	r1, [r3, #0]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	2300      	movs	r3, #0
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	0023      	movs	r3, r4
 8006732:	f000 fb4d 	bl	8006dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	0018      	movs	r0, r3
 800673e:	f000 f952 	bl	80069e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006742:	1e03      	subs	r3, r0, #0
 8006744:	d001      	beq.n	800674a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e081      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03a      	beq.n	80067fa <HAL_I2C_Mem_Write+0x1fa>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006788:	2b00      	cmp	r3, #0
 800678a:	d136      	bne.n	80067fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800678c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	0013      	movs	r3, r2
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	f000 f8e5 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800679e:	1e03      	subs	r3, r0, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e053      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2bff      	cmp	r3, #255	; 0xff
 80067ae:	d911      	bls.n	80067d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	22ff      	movs	r2, #255	; 0xff
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	045c      	lsls	r4, r3, #17
 80067c0:	230a      	movs	r3, #10
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	8819      	ldrh	r1, [r3, #0]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	0023      	movs	r3, r4
 80067ce:	f000 faff 	bl	8006dd0 <I2C_TransferConfig>
 80067d2:	e012      	b.n	80067fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	2380      	movs	r3, #128	; 0x80
 80067e6:	049c      	lsls	r4, r3, #18
 80067e8:	230a      	movs	r3, #10
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	8819      	ldrh	r1, [r3, #0]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	0023      	movs	r3, r4
 80067f6:	f000 faeb 	bl	8006dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d198      	bne.n	8006736 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	0018      	movs	r0, r3
 800680c:	f000 f92a 	bl	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006810:	1e03      	subs	r3, r0, #0
 8006812:	d001      	beq.n	8006818 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e01a      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2220      	movs	r2, #32
 800681e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	490b      	ldr	r1, [pc, #44]	; (8006858 <HAL_I2C_Mem_Write+0x258>)
 800682c:	400a      	ands	r2, r1
 800682e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2241      	movs	r2, #65	; 0x41
 8006834:	2120      	movs	r1, #32
 8006836:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2242      	movs	r2, #66	; 0x42
 800683c:	2100      	movs	r1, #0
 800683e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	2100      	movs	r1, #0
 8006846:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	b007      	add	sp, #28
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	fe00e800 	.word	0xfe00e800

0800685c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	000c      	movs	r4, r1
 8006866:	0010      	movs	r0, r2
 8006868:	0019      	movs	r1, r3
 800686a:	250a      	movs	r5, #10
 800686c:	197b      	adds	r3, r7, r5
 800686e:	1c22      	adds	r2, r4, #0
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	2308      	movs	r3, #8
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	1c02      	adds	r2, r0, #0
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	1dbb      	adds	r3, r7, #6
 800687c:	1c0a      	adds	r2, r1, #0
 800687e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006880:	1dbb      	adds	r3, r7, #6
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	045c      	lsls	r4, r3, #17
 800688a:	197b      	adds	r3, r7, r5
 800688c:	8819      	ldrh	r1, [r3, #0]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	4b23      	ldr	r3, [pc, #140]	; (8006920 <I2C_RequestMemoryWrite+0xc4>)
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	0023      	movs	r3, r4
 8006896:	f000 fa9b 	bl	8006dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800689a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689c:	6a39      	ldr	r1, [r7, #32]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 f8a0 	bl	80069e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80068a6:	1e03      	subs	r3, r0, #0
 80068a8:	d001      	beq.n	80068ae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e033      	b.n	8006916 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068ae:	1dbb      	adds	r3, r7, #6
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d107      	bne.n	80068c6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b6:	2308      	movs	r3, #8
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28
 80068c4:	e019      	b.n	80068fa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068c6:	2308      	movs	r3, #8
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	0a1b      	lsrs	r3, r3, #8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	6a39      	ldr	r1, [r7, #32]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 f881 	bl	80069e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80068e4:	1e03      	subs	r3, r0, #0
 80068e6:	d001      	beq.n	80068ec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e014      	b.n	8006916 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068ec:	2308      	movs	r3, #8
 80068ee:	18fb      	adds	r3, r7, r3
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	0013      	movs	r3, r2
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	f000 f82e 	bl	8006968 <I2C_WaitOnFlagUntilTimeout>
 800690c:	1e03      	subs	r3, r0, #0
 800690e:	d001      	beq.n	8006914 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b004      	add	sp, #16
 800691c:	bdb0      	pop	{r4, r5, r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	80002000 	.word	0x80002000

08006924 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2202      	movs	r2, #2
 8006934:	4013      	ands	r3, r2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d103      	bne.n	8006942 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2201      	movs	r2, #1
 800694a:	4013      	ands	r3, r2
 800694c:	2b01      	cmp	r3, #1
 800694e:	d007      	beq.n	8006960 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2101      	movs	r1, #1
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
  }
}
 8006960:	46c0      	nop			; (mov r8, r8)
 8006962:	46bd      	mov	sp, r7
 8006964:	b002      	add	sp, #8
 8006966:	bd80      	pop	{r7, pc}

08006968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	1dfb      	adds	r3, r7, #7
 8006976:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006978:	e021      	b.n	80069be <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	d01e      	beq.n	80069be <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006980:	f7fe fdec 	bl	800555c <HAL_GetTick>
 8006984:	0002      	movs	r2, r0
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d302      	bcc.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d113      	bne.n	80069be <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	2220      	movs	r2, #32
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2241      	movs	r2, #65	; 0x41
 80069a6:	2120      	movs	r1, #32
 80069a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2242      	movs	r2, #66	; 0x42
 80069ae:	2100      	movs	r1, #0
 80069b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	2100      	movs	r1, #0
 80069b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e00f      	b.n	80069de <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	4013      	ands	r3, r2
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	425a      	negs	r2, r3
 80069ce:	4153      	adcs	r3, r2
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	001a      	movs	r2, r3
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d0ce      	beq.n	800697a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	0018      	movs	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b004      	add	sp, #16
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069f2:	e02b      	b.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 f8e8 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006a00:	1e03      	subs	r3, r0, #0
 8006a02:	d001      	beq.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e029      	b.n	8006a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	d01e      	beq.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fe fda5 	bl	800555c <HAL_GetTick>
 8006a12:	0002      	movs	r2, r0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	2220      	movs	r2, #32
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2241      	movs	r2, #65	; 0x41
 8006a34:	2120      	movs	r1, #32
 8006a36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2242      	movs	r2, #66	; 0x42
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	2100      	movs	r1, #0
 8006a46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e007      	b.n	8006a5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2202      	movs	r2, #2
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d1cc      	bne.n	80069f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b004      	add	sp, #16
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a70:	e028      	b.n	8006ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 f8a9 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006a7e:	1e03      	subs	r3, r0, #0
 8006a80:	d001      	beq.n	8006a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e026      	b.n	8006ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fe fd69 	bl	800555c <HAL_GetTick>
 8006a8a:	0002      	movs	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d113      	bne.n	8006ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2241      	movs	r2, #65	; 0x41
 8006aac:	2120      	movs	r1, #32
 8006aae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2242      	movs	r2, #66	; 0x42
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	2100      	movs	r1, #0
 8006abe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e007      	b.n	8006ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	2220      	movs	r2, #32
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d1cf      	bne.n	8006a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b004      	add	sp, #16
 8006ada:	bd80      	pop	{r7, pc}

08006adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ae8:	e064      	b.n	8006bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 f86d 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006af6:	1e03      	subs	r3, r0, #0
 8006af8:	d001      	beq.n	8006afe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e062      	b.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2220      	movs	r2, #32
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d138      	bne.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	2204      	movs	r2, #4
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d105      	bne.n	8006b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e04e      	b.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d107      	bne.n	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
 8006b42:	e002      	b.n	8006b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	491b      	ldr	r1, [pc, #108]	; (8006bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2241      	movs	r2, #65	; 0x41
 8006b66:	2120      	movs	r1, #32
 8006b68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2242      	movs	r2, #66	; 0x42
 8006b6e:	2100      	movs	r1, #0
 8006b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2240      	movs	r2, #64	; 0x40
 8006b76:	2100      	movs	r1, #0
 8006b78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e022      	b.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7e:	f7fe fced 	bl	800555c <HAL_GetTick>
 8006b82:	0002      	movs	r2, r0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10f      	bne.n	8006bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b98:	2220      	movs	r2, #32
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2241      	movs	r2, #65	; 0x41
 8006ba4:	2120      	movs	r1, #32
 8006ba6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	2100      	movs	r1, #0
 8006bae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e007      	b.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d193      	bne.n	8006aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b004      	add	sp, #16
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	fe00e800 	.word	0xfe00e800

08006bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b08b      	sub	sp, #44	; 0x2c
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2327      	movs	r3, #39	; 0x27
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <I2C_IsErrorOccurred+0x2e>
 8006bfc:	e082      	b.n	8006d04 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c06:	e060      	b.n	8006cca <I2C_IsErrorOccurred+0xfa>
 8006c08:	2427      	movs	r4, #39	; 0x27
 8006c0a:	193b      	adds	r3, r7, r4
 8006c0c:	193a      	adds	r2, r7, r4
 8006c0e:	7812      	ldrb	r2, [r2, #0]
 8006c10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	3301      	adds	r3, #1
 8006c16:	d058      	beq.n	8006cca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c18:	f7fe fca0 	bl	800555c <HAL_GetTick>
 8006c1c:	0002      	movs	r2, r0
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d306      	bcc.n	8006c36 <I2C_IsErrorOccurred+0x66>
 8006c28:	193b      	adds	r3, r7, r4
 8006c2a:	193a      	adds	r2, r7, r4
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d149      	bne.n	8006cca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	01db      	lsls	r3, r3, #7
 8006c40:	4013      	ands	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c44:	2013      	movs	r0, #19
 8006c46:	183b      	adds	r3, r7, r0
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	2142      	movs	r1, #66	; 0x42
 8006c4c:	5c52      	ldrb	r2, [r2, r1]
 8006c4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	2380      	movs	r3, #128	; 0x80
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d126      	bne.n	8006cb2 <I2C_IsErrorOccurred+0xe2>
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	2380      	movs	r3, #128	; 0x80
 8006c68:	01db      	lsls	r3, r3, #7
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d021      	beq.n	8006cb2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d01d      	beq.n	8006cb2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2180      	movs	r1, #128	; 0x80
 8006c82:	01c9      	lsls	r1, r1, #7
 8006c84:	430a      	orrs	r2, r1
 8006c86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c88:	f7fe fc68 	bl	800555c <HAL_GetTick>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c90:	e00f      	b.n	8006cb2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c92:	f7fe fc63 	bl	800555c <HAL_GetTick>
 8006c96:	0002      	movs	r2, r0
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b19      	cmp	r3, #25
 8006c9e:	d908      	bls.n	8006cb2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ca8:	2327      	movs	r3, #39	; 0x27
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]

              break;
 8006cb0:	e00b      	b.n	8006cca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2127      	movs	r1, #39	; 0x27
 8006cbe:	187a      	adds	r2, r7, r1
 8006cc0:	1879      	adds	r1, r7, r1
 8006cc2:	7809      	ldrb	r1, [r1, #0]
 8006cc4:	7011      	strb	r1, [r2, #0]
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d1e3      	bne.n	8006c92 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d004      	beq.n	8006ce2 <I2C_IsErrorOccurred+0x112>
 8006cd8:	2327      	movs	r3, #39	; 0x27
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d092      	beq.n	8006c08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ce2:	2327      	movs	r3, #39	; 0x27
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006cfc:	2327      	movs	r3, #39	; 0x27
 8006cfe:	18fb      	adds	r3, r7, r3
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00c      	beq.n	8006d30 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2280      	movs	r2, #128	; 0x80
 8006d24:	0052      	lsls	r2, r2, #1
 8006d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d28:	2327      	movs	r3, #39	; 0x27
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	2380      	movs	r3, #128	; 0x80
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4013      	ands	r3, r2
 8006d38:	d00c      	beq.n	8006d54 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	00d2      	lsls	r2, r2, #3
 8006d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d4c:	2327      	movs	r3, #39	; 0x27
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d00c      	beq.n	8006d78 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2202      	movs	r2, #2
 8006d62:	4313      	orrs	r3, r2
 8006d64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	0092      	lsls	r2, r2, #2
 8006d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d70:	2327      	movs	r3, #39	; 0x27
 8006d72:	18fb      	adds	r3, r7, r3
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006d78:	2327      	movs	r3, #39	; 0x27
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01d      	beq.n	8006dbe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7ff fdcd 	bl	8006924 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	490d      	ldr	r1, [pc, #52]	; (8006dcc <I2C_IsErrorOccurred+0x1fc>)
 8006d96:	400a      	ands	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2241      	movs	r2, #65	; 0x41
 8006daa:	2120      	movs	r1, #32
 8006dac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2242      	movs	r2, #66	; 0x42
 8006db2:	2100      	movs	r1, #0
 8006db4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	2100      	movs	r1, #0
 8006dbc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006dbe:	2327      	movs	r3, #39	; 0x27
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	781b      	ldrb	r3, [r3, #0]
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b00b      	add	sp, #44	; 0x2c
 8006dca:	bd90      	pop	{r4, r7, pc}
 8006dcc:	fe00e800 	.word	0xfe00e800

08006dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	0008      	movs	r0, r1
 8006dda:	0011      	movs	r1, r2
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	240a      	movs	r4, #10
 8006de0:	193b      	adds	r3, r7, r4
 8006de2:	1c02      	adds	r2, r0, #0
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	2009      	movs	r0, #9
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	1c0a      	adds	r2, r1, #0
 8006dec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	059b      	lsls	r3, r3, #22
 8006df4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006df6:	183b      	adds	r3, r7, r0
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	0419      	lsls	r1, r3, #16
 8006dfc:	23ff      	movs	r3, #255	; 0xff
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1a:	0d51      	lsrs	r1, r2, #21
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	00d2      	lsls	r2, r2, #3
 8006e20:	400a      	ands	r2, r1
 8006e22:	4907      	ldr	r1, [pc, #28]	; (8006e40 <I2C_TransferConfig+0x70>)
 8006e24:	430a      	orrs	r2, r1
 8006e26:	43d2      	mvns	r2, r2
 8006e28:	401a      	ands	r2, r3
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b007      	add	sp, #28
 8006e3c:	bd90      	pop	{r4, r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	03ff63ff 	.word	0x03ff63ff

08006e44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2241      	movs	r2, #65	; 0x41
 8006e52:	5c9b      	ldrb	r3, [r3, r2]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d138      	bne.n	8006ecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2240      	movs	r2, #64	; 0x40
 8006e5e:	5c9b      	ldrb	r3, [r3, r2]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e032      	b.n	8006ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2241      	movs	r2, #65	; 0x41
 8006e74:	2124      	movs	r1, #36	; 0x24
 8006e76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2101      	movs	r1, #1
 8006e84:	438a      	bics	r2, r1
 8006e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4911      	ldr	r1, [pc, #68]	; (8006ed8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2241      	movs	r2, #65	; 0x41
 8006ebc:	2120      	movs	r1, #32
 8006ebe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2240      	movs	r2, #64	; 0x40
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b002      	add	sp, #8
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	ffffefff 	.word	0xffffefff

08006edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2241      	movs	r2, #65	; 0x41
 8006eea:	5c9b      	ldrb	r3, [r3, r2]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d139      	bne.n	8006f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	5c9b      	ldrb	r3, [r3, r2]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e033      	b.n	8006f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2240      	movs	r2, #64	; 0x40
 8006f04:	2101      	movs	r1, #1
 8006f06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2241      	movs	r2, #65	; 0x41
 8006f0c:	2124      	movs	r1, #36	; 0x24
 8006f0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	438a      	bics	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2241      	movs	r2, #65	; 0x41
 8006f56:	2120      	movs	r1, #32
 8006f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2240      	movs	r2, #64	; 0x40
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	0018      	movs	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b004      	add	sp, #16
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	fffff0ff 	.word	0xfffff0ff

08006f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006f7c:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	0019      	movs	r1, r3
 8006f86:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d11f      	bne.n	8006fd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006f98:	4b14      	ldr	r3, [pc, #80]	; (8006fec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	0013      	movs	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	4912      	ldr	r1, [pc, #72]	; (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7f9 f8aa 	bl	8000100 <__udivsi3>
 8006fac:	0003      	movs	r3, r0
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fb2:	e008      	b.n	8006fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e001      	b.n	8006fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e009      	b.n	8006fda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	401a      	ands	r2, r3
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d0ed      	beq.n	8006fb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	0018      	movs	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	fffff9ff 	.word	0xfffff9ff
 8006fec:	20000004 	.word	0x20000004
 8006ff0:	000f4240 	.word	0x000f4240

08006ff4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	23e0      	movs	r3, #224	; 0xe0
 8006ffe:	01db      	lsls	r3, r3, #7
 8007000:	4013      	ands	r3, r2
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40021000 	.word	0x40021000

0800700c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e2f3      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2201      	movs	r2, #1
 8007024:	4013      	ands	r3, r2
 8007026:	d100      	bne.n	800702a <HAL_RCC_OscConfig+0x1e>
 8007028:	e07c      	b.n	8007124 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800702a:	4bc3      	ldr	r3, [pc, #780]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2238      	movs	r2, #56	; 0x38
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007034:	4bc0      	ldr	r3, [pc, #768]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2203      	movs	r2, #3
 800703a:	4013      	ands	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b10      	cmp	r3, #16
 8007042:	d102      	bne.n	800704a <HAL_RCC_OscConfig+0x3e>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d002      	beq.n	8007050 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d10b      	bne.n	8007068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007050:	4bb9      	ldr	r3, [pc, #740]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	4013      	ands	r3, r2
 800705a:	d062      	beq.n	8007122 <HAL_RCC_OscConfig+0x116>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d15e      	bne.n	8007122 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e2ce      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	025b      	lsls	r3, r3, #9
 8007070:	429a      	cmp	r2, r3
 8007072:	d107      	bne.n	8007084 <HAL_RCC_OscConfig+0x78>
 8007074:	4bb0      	ldr	r3, [pc, #704]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4baf      	ldr	r3, [pc, #700]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	0249      	lsls	r1, r1, #9
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e020      	b.n	80070c6 <HAL_RCC_OscConfig+0xba>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	23a0      	movs	r3, #160	; 0xa0
 800708a:	02db      	lsls	r3, r3, #11
 800708c:	429a      	cmp	r2, r3
 800708e:	d10e      	bne.n	80070ae <HAL_RCC_OscConfig+0xa2>
 8007090:	4ba9      	ldr	r3, [pc, #676]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4ba8      	ldr	r3, [pc, #672]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	02c9      	lsls	r1, r1, #11
 800709a:	430a      	orrs	r2, r1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	4ba6      	ldr	r3, [pc, #664]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4ba5      	ldr	r3, [pc, #660]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070a4:	2180      	movs	r1, #128	; 0x80
 80070a6:	0249      	lsls	r1, r1, #9
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e00b      	b.n	80070c6 <HAL_RCC_OscConfig+0xba>
 80070ae:	4ba2      	ldr	r3, [pc, #648]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4ba1      	ldr	r3, [pc, #644]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070b4:	49a1      	ldr	r1, [pc, #644]	; (800733c <HAL_RCC_OscConfig+0x330>)
 80070b6:	400a      	ands	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	4b9f      	ldr	r3, [pc, #636]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b9e      	ldr	r3, [pc, #632]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070c0:	499f      	ldr	r1, [pc, #636]	; (8007340 <HAL_RCC_OscConfig+0x334>)
 80070c2:	400a      	ands	r2, r1
 80070c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d014      	beq.n	80070f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ce:	f7fe fa45 	bl	800555c <HAL_GetTick>
 80070d2:	0003      	movs	r3, r0
 80070d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d8:	f7fe fa40 	bl	800555c <HAL_GetTick>
 80070dc:	0002      	movs	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b64      	cmp	r3, #100	; 0x64
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e28d      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ea:	4b93      	ldr	r3, [pc, #588]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	4013      	ands	r3, r2
 80070f4:	d0f0      	beq.n	80070d8 <HAL_RCC_OscConfig+0xcc>
 80070f6:	e015      	b.n	8007124 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fe fa30 	bl	800555c <HAL_GetTick>
 80070fc:	0003      	movs	r3, r0
 80070fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007102:	f7fe fa2b 	bl	800555c <HAL_GetTick>
 8007106:	0002      	movs	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b64      	cmp	r3, #100	; 0x64
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e278      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007114:	4b88      	ldr	r3, [pc, #544]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	4013      	ands	r3, r2
 800711e:	d1f0      	bne.n	8007102 <HAL_RCC_OscConfig+0xf6>
 8007120:	e000      	b.n	8007124 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2202      	movs	r2, #2
 800712a:	4013      	ands	r3, r2
 800712c:	d100      	bne.n	8007130 <HAL_RCC_OscConfig+0x124>
 800712e:	e099      	b.n	8007264 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007130:	4b81      	ldr	r3, [pc, #516]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2238      	movs	r2, #56	; 0x38
 8007136:	4013      	ands	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800713a:	4b7f      	ldr	r3, [pc, #508]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2203      	movs	r2, #3
 8007140:	4013      	ands	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b10      	cmp	r3, #16
 8007148:	d102      	bne.n	8007150 <HAL_RCC_OscConfig+0x144>
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d002      	beq.n	8007156 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d135      	bne.n	80071c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007156:	4b78      	ldr	r3, [pc, #480]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	2380      	movs	r3, #128	; 0x80
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4013      	ands	r3, r2
 8007160:	d005      	beq.n	800716e <HAL_RCC_OscConfig+0x162>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e24b      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800716e:	4b72      	ldr	r3, [pc, #456]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	4a74      	ldr	r2, [pc, #464]	; (8007344 <HAL_RCC_OscConfig+0x338>)
 8007174:	4013      	ands	r3, r2
 8007176:	0019      	movs	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	021a      	lsls	r2, r3, #8
 800717e:	4b6e      	ldr	r3, [pc, #440]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007180:	430a      	orrs	r2, r1
 8007182:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d112      	bne.n	80071b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800718a:	4b6b      	ldr	r3, [pc, #428]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6e      	ldr	r2, [pc, #440]	; (8007348 <HAL_RCC_OscConfig+0x33c>)
 8007190:	4013      	ands	r3, r2
 8007192:	0019      	movs	r1, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	4b67      	ldr	r3, [pc, #412]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800719a:	430a      	orrs	r2, r1
 800719c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800719e:	4b66      	ldr	r3, [pc, #408]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	0adb      	lsrs	r3, r3, #11
 80071a4:	2207      	movs	r2, #7
 80071a6:	4013      	ands	r3, r2
 80071a8:	4a68      	ldr	r2, [pc, #416]	; (800734c <HAL_RCC_OscConfig+0x340>)
 80071aa:	40da      	lsrs	r2, r3
 80071ac:	4b68      	ldr	r3, [pc, #416]	; (8007350 <HAL_RCC_OscConfig+0x344>)
 80071ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071b0:	4b68      	ldr	r3, [pc, #416]	; (8007354 <HAL_RCC_OscConfig+0x348>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	0018      	movs	r0, r3
 80071b6:	f7fe f975 	bl	80054a4 <HAL_InitTick>
 80071ba:	1e03      	subs	r3, r0, #0
 80071bc:	d051      	beq.n	8007262 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e221      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d030      	beq.n	800722c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071ca:	4b5b      	ldr	r3, [pc, #364]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a5e      	ldr	r2, [pc, #376]	; (8007348 <HAL_RCC_OscConfig+0x33c>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	0019      	movs	r1, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	4b57      	ldr	r3, [pc, #348]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80071da:	430a      	orrs	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80071de:	4b56      	ldr	r3, [pc, #344]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b55      	ldr	r3, [pc, #340]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	0049      	lsls	r1, r1, #1
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fe f9b6 	bl	800555c <HAL_GetTick>
 80071f0:	0003      	movs	r3, r0
 80071f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f6:	f7fe f9b1 	bl	800555c <HAL_GetTick>
 80071fa:	0002      	movs	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1fe      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007208:	4b4b      	ldr	r3, [pc, #300]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4013      	ands	r3, r2
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007214:	4b48      	ldr	r3, [pc, #288]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a4a      	ldr	r2, [pc, #296]	; (8007344 <HAL_RCC_OscConfig+0x338>)
 800721a:	4013      	ands	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	4b44      	ldr	r3, [pc, #272]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	e01b      	b.n	8007264 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800722c:	4b42      	ldr	r3, [pc, #264]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b41      	ldr	r3, [pc, #260]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007232:	4949      	ldr	r1, [pc, #292]	; (8007358 <HAL_RCC_OscConfig+0x34c>)
 8007234:	400a      	ands	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fe f990 	bl	800555c <HAL_GetTick>
 800723c:	0003      	movs	r3, r0
 800723e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007242:	f7fe f98b 	bl	800555c <HAL_GetTick>
 8007246:	0002      	movs	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e1d8      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007254:	4b38      	ldr	r3, [pc, #224]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4013      	ands	r3, r2
 800725e:	d1f0      	bne.n	8007242 <HAL_RCC_OscConfig+0x236>
 8007260:	e000      	b.n	8007264 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	4013      	ands	r3, r2
 800726c:	d047      	beq.n	80072fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800726e:	4b32      	ldr	r3, [pc, #200]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2238      	movs	r2, #56	; 0x38
 8007274:	4013      	ands	r3, r2
 8007276:	2b18      	cmp	r3, #24
 8007278:	d10a      	bne.n	8007290 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800727a:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800727c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727e:	2202      	movs	r2, #2
 8007280:	4013      	ands	r3, r2
 8007282:	d03c      	beq.n	80072fe <HAL_RCC_OscConfig+0x2f2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d138      	bne.n	80072fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e1ba      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d019      	beq.n	80072cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800729a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800729c:	4b26      	ldr	r3, [pc, #152]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 800729e:	2101      	movs	r1, #1
 80072a0:	430a      	orrs	r2, r1
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fe f95a 	bl	800555c <HAL_GetTick>
 80072a8:	0003      	movs	r3, r0
 80072aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ae:	f7fe f955 	bl	800555c <HAL_GetTick>
 80072b2:	0002      	movs	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e1a2      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072c0:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80072c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c4:	2202      	movs	r2, #2
 80072c6:	4013      	ands	r3, r2
 80072c8:	d0f1      	beq.n	80072ae <HAL_RCC_OscConfig+0x2a2>
 80072ca:	e018      	b.n	80072fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80072cc:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80072ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072d0:	4b19      	ldr	r3, [pc, #100]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80072d2:	2101      	movs	r1, #1
 80072d4:	438a      	bics	r2, r1
 80072d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fe f940 	bl	800555c <HAL_GetTick>
 80072dc:	0003      	movs	r3, r0
 80072de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e2:	f7fe f93b 	bl	800555c <HAL_GetTick>
 80072e6:	0002      	movs	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e188      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072f4:	4b10      	ldr	r3, [pc, #64]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 80072f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f8:	2202      	movs	r2, #2
 80072fa:	4013      	ands	r3, r2
 80072fc:	d1f1      	bne.n	80072e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2204      	movs	r2, #4
 8007304:	4013      	ands	r3, r2
 8007306:	d100      	bne.n	800730a <HAL_RCC_OscConfig+0x2fe>
 8007308:	e0c6      	b.n	8007498 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730a:	231f      	movs	r3, #31
 800730c:	18fb      	adds	r3, r7, r3
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007312:	4b09      	ldr	r3, [pc, #36]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2238      	movs	r2, #56	; 0x38
 8007318:	4013      	ands	r3, r2
 800731a:	2b20      	cmp	r3, #32
 800731c:	d11e      	bne.n	800735c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <HAL_RCC_OscConfig+0x32c>)
 8007320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007322:	2202      	movs	r2, #2
 8007324:	4013      	ands	r3, r2
 8007326:	d100      	bne.n	800732a <HAL_RCC_OscConfig+0x31e>
 8007328:	e0b6      	b.n	8007498 <HAL_RCC_OscConfig+0x48c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d000      	beq.n	8007334 <HAL_RCC_OscConfig+0x328>
 8007332:	e0b1      	b.n	8007498 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e166      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
 8007338:	40021000 	.word	0x40021000
 800733c:	fffeffff 	.word	0xfffeffff
 8007340:	fffbffff 	.word	0xfffbffff
 8007344:	ffff80ff 	.word	0xffff80ff
 8007348:	ffffc7ff 	.word	0xffffc7ff
 800734c:	00f42400 	.word	0x00f42400
 8007350:	20000004 	.word	0x20000004
 8007354:	20000008 	.word	0x20000008
 8007358:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800735c:	4bac      	ldr	r3, [pc, #688]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800735e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007360:	2380      	movs	r3, #128	; 0x80
 8007362:	055b      	lsls	r3, r3, #21
 8007364:	4013      	ands	r3, r2
 8007366:	d101      	bne.n	800736c <HAL_RCC_OscConfig+0x360>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <HAL_RCC_OscConfig+0x362>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d011      	beq.n	8007396 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	4ba7      	ldr	r3, [pc, #668]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007376:	4ba6      	ldr	r3, [pc, #664]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	0549      	lsls	r1, r1, #21
 800737c:	430a      	orrs	r2, r1
 800737e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007380:	4ba3      	ldr	r3, [pc, #652]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007384:	2380      	movs	r3, #128	; 0x80
 8007386:	055b      	lsls	r3, r3, #21
 8007388:	4013      	ands	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800738e:	231f      	movs	r3, #31
 8007390:	18fb      	adds	r3, r7, r3
 8007392:	2201      	movs	r2, #1
 8007394:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007396:	4b9f      	ldr	r3, [pc, #636]	; (8007614 <HAL_RCC_OscConfig+0x608>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	2380      	movs	r3, #128	; 0x80
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4013      	ands	r3, r2
 80073a0:	d11a      	bne.n	80073d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073a2:	4b9c      	ldr	r3, [pc, #624]	; (8007614 <HAL_RCC_OscConfig+0x608>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b9b      	ldr	r3, [pc, #620]	; (8007614 <HAL_RCC_OscConfig+0x608>)
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	0049      	lsls	r1, r1, #1
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80073b0:	f7fe f8d4 	bl	800555c <HAL_GetTick>
 80073b4:	0003      	movs	r3, r0
 80073b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ba:	f7fe f8cf 	bl	800555c <HAL_GetTick>
 80073be:	0002      	movs	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e11c      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073cc:	4b91      	ldr	r3, [pc, #580]	; (8007614 <HAL_RCC_OscConfig+0x608>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4013      	ands	r3, r2
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d106      	bne.n	80073ee <HAL_RCC_OscConfig+0x3e2>
 80073e0:	4b8b      	ldr	r3, [pc, #556]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80073e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073e4:	4b8a      	ldr	r3, [pc, #552]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80073e6:	2101      	movs	r1, #1
 80073e8:	430a      	orrs	r2, r1
 80073ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80073ec:	e01c      	b.n	8007428 <HAL_RCC_OscConfig+0x41c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	d10c      	bne.n	8007410 <HAL_RCC_OscConfig+0x404>
 80073f6:	4b86      	ldr	r3, [pc, #536]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80073f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073fa:	4b85      	ldr	r3, [pc, #532]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80073fc:	2104      	movs	r1, #4
 80073fe:	430a      	orrs	r2, r1
 8007400:	65da      	str	r2, [r3, #92]	; 0x5c
 8007402:	4b83      	ldr	r3, [pc, #524]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007406:	4b82      	ldr	r3, [pc, #520]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007408:	2101      	movs	r1, #1
 800740a:	430a      	orrs	r2, r1
 800740c:	65da      	str	r2, [r3, #92]	; 0x5c
 800740e:	e00b      	b.n	8007428 <HAL_RCC_OscConfig+0x41c>
 8007410:	4b7f      	ldr	r3, [pc, #508]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007414:	4b7e      	ldr	r3, [pc, #504]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007416:	2101      	movs	r1, #1
 8007418:	438a      	bics	r2, r1
 800741a:	65da      	str	r2, [r3, #92]	; 0x5c
 800741c:	4b7c      	ldr	r3, [pc, #496]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800741e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007420:	4b7b      	ldr	r3, [pc, #492]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007422:	2104      	movs	r1, #4
 8007424:	438a      	bics	r2, r1
 8007426:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d014      	beq.n	800745a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fe f894 	bl	800555c <HAL_GetTick>
 8007434:	0003      	movs	r3, r0
 8007436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007438:	e009      	b.n	800744e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743a:	f7fe f88f 	bl	800555c <HAL_GetTick>
 800743e:	0002      	movs	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	4a74      	ldr	r2, [pc, #464]	; (8007618 <HAL_RCC_OscConfig+0x60c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e0db      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744e:	4b70      	ldr	r3, [pc, #448]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007452:	2202      	movs	r2, #2
 8007454:	4013      	ands	r3, r2
 8007456:	d0f0      	beq.n	800743a <HAL_RCC_OscConfig+0x42e>
 8007458:	e013      	b.n	8007482 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fe f87f 	bl	800555c <HAL_GetTick>
 800745e:	0003      	movs	r3, r0
 8007460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007462:	e009      	b.n	8007478 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007464:	f7fe f87a 	bl	800555c <HAL_GetTick>
 8007468:	0002      	movs	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	4a6a      	ldr	r2, [pc, #424]	; (8007618 <HAL_RCC_OscConfig+0x60c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e0c6      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007478:	4b65      	ldr	r3, [pc, #404]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	2202      	movs	r2, #2
 800747e:	4013      	ands	r3, r2
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007482:	231f      	movs	r3, #31
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d105      	bne.n	8007498 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800748c:	4b60      	ldr	r3, [pc, #384]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800748e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007490:	4b5f      	ldr	r3, [pc, #380]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007492:	4962      	ldr	r1, [pc, #392]	; (800761c <HAL_RCC_OscConfig+0x610>)
 8007494:	400a      	ands	r2, r1
 8007496:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d100      	bne.n	80074a2 <HAL_RCC_OscConfig+0x496>
 80074a0:	e0b0      	b.n	8007604 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074a2:	4b5b      	ldr	r3, [pc, #364]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2238      	movs	r2, #56	; 0x38
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b10      	cmp	r3, #16
 80074ac:	d100      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4a4>
 80074ae:	e078      	b.n	80075a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d153      	bne.n	8007560 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b8:	4b55      	ldr	r3, [pc, #340]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b54      	ldr	r3, [pc, #336]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80074be:	4958      	ldr	r1, [pc, #352]	; (8007620 <HAL_RCC_OscConfig+0x614>)
 80074c0:	400a      	ands	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fe f84a 	bl	800555c <HAL_GetTick>
 80074c8:	0003      	movs	r3, r0
 80074ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ce:	f7fe f845 	bl	800555c <HAL_GetTick>
 80074d2:	0002      	movs	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e092      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074e0:	4b4b      	ldr	r3, [pc, #300]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	2380      	movs	r3, #128	; 0x80
 80074e6:	049b      	lsls	r3, r3, #18
 80074e8:	4013      	ands	r3, r2
 80074ea:	d1f0      	bne.n	80074ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074ec:	4b48      	ldr	r3, [pc, #288]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a4c      	ldr	r2, [pc, #304]	; (8007624 <HAL_RCC_OscConfig+0x618>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	0019      	movs	r1, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	431a      	orrs	r2, r3
 8007514:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007516:	430a      	orrs	r2, r1
 8007518:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800751a:	4b3d      	ldr	r3, [pc, #244]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	4b3c      	ldr	r3, [pc, #240]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	0449      	lsls	r1, r1, #17
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007528:	4b39      	ldr	r3, [pc, #228]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	4b38      	ldr	r3, [pc, #224]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	0549      	lsls	r1, r1, #21
 8007532:	430a      	orrs	r2, r1
 8007534:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fe f811 	bl	800555c <HAL_GetTick>
 800753a:	0003      	movs	r3, r0
 800753c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007540:	f7fe f80c 	bl	800555c <HAL_GetTick>
 8007544:	0002      	movs	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e059      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007552:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	049b      	lsls	r3, r3, #18
 800755a:	4013      	ands	r3, r2
 800755c:	d0f0      	beq.n	8007540 <HAL_RCC_OscConfig+0x534>
 800755e:	e051      	b.n	8007604 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007560:	4b2b      	ldr	r3, [pc, #172]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007566:	492e      	ldr	r1, [pc, #184]	; (8007620 <HAL_RCC_OscConfig+0x614>)
 8007568:	400a      	ands	r2, r1
 800756a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fd fff6 	bl	800555c <HAL_GetTick>
 8007570:	0003      	movs	r3, r0
 8007572:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007576:	f7fd fff1 	bl	800555c <HAL_GetTick>
 800757a:	0002      	movs	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e03e      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007588:	4b21      	ldr	r3, [pc, #132]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	049b      	lsls	r3, r3, #18
 8007590:	4013      	ands	r3, r2
 8007592:	d1f0      	bne.n	8007576 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 800759a:	4923      	ldr	r1, [pc, #140]	; (8007628 <HAL_RCC_OscConfig+0x61c>)
 800759c:	400a      	ands	r2, r1
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e030      	b.n	8007604 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e02b      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80075ae:	4b18      	ldr	r3, [pc, #96]	; (8007610 <HAL_RCC_OscConfig+0x604>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2203      	movs	r2, #3
 80075b8:	401a      	ands	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d11e      	bne.n	8007600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2270      	movs	r2, #112	; 0x70
 80075c6:	401a      	ands	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d117      	bne.n	8007600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	23fe      	movs	r3, #254	; 0xfe
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	401a      	ands	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d10e      	bne.n	8007600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	23f8      	movs	r3, #248	; 0xf8
 80075e6:	039b      	lsls	r3, r3, #14
 80075e8:	401a      	ands	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d106      	bne.n	8007600 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	0f5b      	lsrs	r3, r3, #29
 80075f6:	075a      	lsls	r2, r3, #29
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d001      	beq.n	8007604 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	0018      	movs	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	b008      	add	sp, #32
 800760c:	bd80      	pop	{r7, pc}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	40021000 	.word	0x40021000
 8007614:	40007000 	.word	0x40007000
 8007618:	00001388 	.word	0x00001388
 800761c:	efffffff 	.word	0xefffffff
 8007620:	feffffff 	.word	0xfeffffff
 8007624:	1fc1808c 	.word	0x1fc1808c
 8007628:	effefffc 	.word	0xeffefffc

0800762c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0e9      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007640:	4b76      	ldr	r3, [pc, #472]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2207      	movs	r2, #7
 8007646:	4013      	ands	r3, r2
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d91e      	bls.n	800768c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800764e:	4b73      	ldr	r3, [pc, #460]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2207      	movs	r2, #7
 8007654:	4393      	bics	r3, r2
 8007656:	0019      	movs	r1, r3
 8007658:	4b70      	ldr	r3, [pc, #448]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007660:	f7fd ff7c 	bl	800555c <HAL_GetTick>
 8007664:	0003      	movs	r3, r0
 8007666:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007668:	e009      	b.n	800767e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800766a:	f7fd ff77 	bl	800555c <HAL_GetTick>
 800766e:	0002      	movs	r2, r0
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	4a6a      	ldr	r2, [pc, #424]	; (8007820 <HAL_RCC_ClockConfig+0x1f4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d901      	bls.n	800767e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e0ca      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800767e:	4b67      	ldr	r3, [pc, #412]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2207      	movs	r2, #7
 8007684:	4013      	ands	r3, r2
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d1ee      	bne.n	800766a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2202      	movs	r2, #2
 8007692:	4013      	ands	r3, r2
 8007694:	d015      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2204      	movs	r2, #4
 800769c:	4013      	ands	r3, r2
 800769e:	d006      	beq.n	80076ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80076a0:	4b60      	ldr	r3, [pc, #384]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	4b5f      	ldr	r3, [pc, #380]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076a6:	21e0      	movs	r1, #224	; 0xe0
 80076a8:	01c9      	lsls	r1, r1, #7
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ae:	4b5d      	ldr	r3, [pc, #372]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4a5d      	ldr	r2, [pc, #372]	; (8007828 <HAL_RCC_ClockConfig+0x1fc>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	0019      	movs	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	4b59      	ldr	r3, [pc, #356]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2201      	movs	r2, #1
 80076c8:	4013      	ands	r3, r2
 80076ca:	d057      	beq.n	800777c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076d4:	4b53      	ldr	r3, [pc, #332]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	4013      	ands	r3, r2
 80076de:	d12b      	bne.n	8007738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e097      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d107      	bne.n	80076fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ec:	4b4d      	ldr	r3, [pc, #308]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	2380      	movs	r3, #128	; 0x80
 80076f2:	049b      	lsls	r3, r3, #18
 80076f4:	4013      	ands	r3, r2
 80076f6:	d11f      	bne.n	8007738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e08b      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d107      	bne.n	8007714 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007704:	4b47      	ldr	r3, [pc, #284]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	2380      	movs	r3, #128	; 0x80
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4013      	ands	r3, r2
 800770e:	d113      	bne.n	8007738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e07f      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d106      	bne.n	800772a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800771c:	4b41      	ldr	r3, [pc, #260]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 800771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007720:	2202      	movs	r2, #2
 8007722:	4013      	ands	r3, r2
 8007724:	d108      	bne.n	8007738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e074      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800772a:	4b3e      	ldr	r3, [pc, #248]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 800772c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772e:	2202      	movs	r2, #2
 8007730:	4013      	ands	r3, r2
 8007732:	d101      	bne.n	8007738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e06d      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007738:	4b3a      	ldr	r3, [pc, #232]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2207      	movs	r2, #7
 800773e:	4393      	bics	r3, r2
 8007740:	0019      	movs	r1, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b37      	ldr	r3, [pc, #220]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 8007748:	430a      	orrs	r2, r1
 800774a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774c:	f7fd ff06 	bl	800555c <HAL_GetTick>
 8007750:	0003      	movs	r3, r0
 8007752:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007754:	e009      	b.n	800776a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007756:	f7fd ff01 	bl	800555c <HAL_GetTick>
 800775a:	0002      	movs	r2, r0
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	4a2f      	ldr	r2, [pc, #188]	; (8007820 <HAL_RCC_ClockConfig+0x1f4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e054      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800776a:	4b2e      	ldr	r3, [pc, #184]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2238      	movs	r2, #56	; 0x38
 8007770:	401a      	ands	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	429a      	cmp	r2, r3
 800777a:	d1ec      	bne.n	8007756 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800777c:	4b27      	ldr	r3, [pc, #156]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2207      	movs	r2, #7
 8007782:	4013      	ands	r3, r2
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d21e      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2207      	movs	r2, #7
 8007790:	4393      	bics	r3, r2
 8007792:	0019      	movs	r1, r3
 8007794:	4b21      	ldr	r3, [pc, #132]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800779c:	f7fd fede 	bl	800555c <HAL_GetTick>
 80077a0:	0003      	movs	r3, r0
 80077a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077a4:	e009      	b.n	80077ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a6:	f7fd fed9 	bl	800555c <HAL_GetTick>
 80077aa:	0002      	movs	r2, r0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <HAL_RCC_ClockConfig+0x1f4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e02c      	b.n	8007814 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <HAL_RCC_ClockConfig+0x1f0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2207      	movs	r2, #7
 80077c0:	4013      	ands	r3, r2
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1ee      	bne.n	80077a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2204      	movs	r2, #4
 80077ce:	4013      	ands	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	4a15      	ldr	r2, [pc, #84]	; (800782c <HAL_RCC_ClockConfig+0x200>)
 80077d8:	4013      	ands	r3, r2
 80077da:	0019      	movs	r1, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077e6:	f000 f829 	bl	800783c <HAL_RCC_GetSysClockFreq>
 80077ea:	0001      	movs	r1, r0
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <HAL_RCC_ClockConfig+0x1f8>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	220f      	movs	r2, #15
 80077f4:	401a      	ands	r2, r3
 80077f6:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <HAL_RCC_ClockConfig+0x204>)
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	58d3      	ldr	r3, [r2, r3]
 80077fc:	221f      	movs	r2, #31
 80077fe:	4013      	ands	r3, r2
 8007800:	000a      	movs	r2, r1
 8007802:	40da      	lsrs	r2, r3
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <HAL_RCC_ClockConfig+0x208>)
 8007806:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007808:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <HAL_RCC_ClockConfig+0x20c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	0018      	movs	r0, r3
 800780e:	f7fd fe49 	bl	80054a4 <HAL_InitTick>
 8007812:	0003      	movs	r3, r0
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40022000 	.word	0x40022000
 8007820:	00001388 	.word	0x00001388
 8007824:	40021000 	.word	0x40021000
 8007828:	fffff0ff 	.word	0xfffff0ff
 800782c:	ffff8fff 	.word	0xffff8fff
 8007830:	0800b3c0 	.word	0x0800b3c0
 8007834:	20000004 	.word	0x20000004
 8007838:	20000008 	.word	0x20000008

0800783c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007842:	4b3c      	ldr	r3, [pc, #240]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2238      	movs	r2, #56	; 0x38
 8007848:	4013      	ands	r3, r2
 800784a:	d10f      	bne.n	800786c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800784c:	4b39      	ldr	r3, [pc, #228]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	0adb      	lsrs	r3, r3, #11
 8007852:	2207      	movs	r2, #7
 8007854:	4013      	ands	r3, r2
 8007856:	2201      	movs	r2, #1
 8007858:	409a      	lsls	r2, r3
 800785a:	0013      	movs	r3, r2
 800785c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	4835      	ldr	r0, [pc, #212]	; (8007938 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007862:	f7f8 fc4d 	bl	8000100 <__udivsi3>
 8007866:	0003      	movs	r3, r0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	e05d      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800786c:	4b31      	ldr	r3, [pc, #196]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2238      	movs	r2, #56	; 0x38
 8007872:	4013      	ands	r3, r2
 8007874:	2b08      	cmp	r3, #8
 8007876:	d102      	bne.n	800787e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007878:	4b30      	ldr	r3, [pc, #192]	; (800793c <HAL_RCC_GetSysClockFreq+0x100>)
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	e054      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800787e:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2238      	movs	r2, #56	; 0x38
 8007884:	4013      	ands	r3, r2
 8007886:	2b10      	cmp	r3, #16
 8007888:	d138      	bne.n	80078fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800788a:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2203      	movs	r2, #3
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007894:	4b27      	ldr	r3, [pc, #156]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	2207      	movs	r2, #7
 800789c:	4013      	ands	r3, r2
 800789e:	3301      	adds	r3, #1
 80078a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d10d      	bne.n	80078c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	4824      	ldr	r0, [pc, #144]	; (800793c <HAL_RCC_GetSysClockFreq+0x100>)
 80078ac:	f7f8 fc28 	bl	8000100 <__udivsi3>
 80078b0:	0003      	movs	r3, r0
 80078b2:	0019      	movs	r1, r3
 80078b4:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	227f      	movs	r2, #127	; 0x7f
 80078bc:	4013      	ands	r3, r2
 80078be:	434b      	muls	r3, r1
 80078c0:	617b      	str	r3, [r7, #20]
        break;
 80078c2:	e00d      	b.n	80078e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	481c      	ldr	r0, [pc, #112]	; (8007938 <HAL_RCC_GetSysClockFreq+0xfc>)
 80078c8:	f7f8 fc1a 	bl	8000100 <__udivsi3>
 80078cc:	0003      	movs	r3, r0
 80078ce:	0019      	movs	r1, r3
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	227f      	movs	r2, #127	; 0x7f
 80078d8:	4013      	ands	r3, r2
 80078da:	434b      	muls	r3, r1
 80078dc:	617b      	str	r3, [r7, #20]
        break;
 80078de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80078e0:	4b14      	ldr	r3, [pc, #80]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	0f5b      	lsrs	r3, r3, #29
 80078e6:	2207      	movs	r2, #7
 80078e8:	4013      	ands	r3, r2
 80078ea:	3301      	adds	r3, #1
 80078ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	6978      	ldr	r0, [r7, #20]
 80078f2:	f7f8 fc05 	bl	8000100 <__udivsi3>
 80078f6:	0003      	movs	r3, r0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	e015      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2238      	movs	r2, #56	; 0x38
 8007902:	4013      	ands	r3, r2
 8007904:	2b20      	cmp	r3, #32
 8007906:	d103      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007908:	2380      	movs	r3, #128	; 0x80
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	e00b      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2238      	movs	r2, #56	; 0x38
 8007916:	4013      	ands	r3, r2
 8007918:	2b18      	cmp	r3, #24
 800791a:	d103      	bne.n	8007924 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800791c:	23fa      	movs	r3, #250	; 0xfa
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	e001      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007928:	693b      	ldr	r3, [r7, #16]
}
 800792a:	0018      	movs	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	b006      	add	sp, #24
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	40021000 	.word	0x40021000
 8007938:	00f42400 	.word	0x00f42400
 800793c:	007a1200 	.word	0x007a1200

08007940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <HAL_RCC_GetHCLKFreq+0x10>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	0018      	movs	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	20000004 	.word	0x20000004

08007954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007958:	f7ff fff2 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 800795c:	0004      	movs	r4, r0
 800795e:	f7ff fb49 	bl	8006ff4 <LL_RCC_GetAPB1Prescaler>
 8007962:	0003      	movs	r3, r0
 8007964:	0b1a      	lsrs	r2, r3, #12
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007968:	0092      	lsls	r2, r2, #2
 800796a:	58d3      	ldr	r3, [r2, r3]
 800796c:	221f      	movs	r2, #31
 800796e:	4013      	ands	r3, r2
 8007970:	40dc      	lsrs	r4, r3
 8007972:	0023      	movs	r3, r4
}
 8007974:	0018      	movs	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	bdb0      	pop	{r4, r5, r7, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	0800b400 	.word	0x0800b400

08007980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007988:	2313      	movs	r3, #19
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007990:	2312      	movs	r3, #18
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	4013      	ands	r3, r2
 80079a2:	d100      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80079a4:	e0a3      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079a6:	2011      	movs	r0, #17
 80079a8:	183b      	adds	r3, r7, r0
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b7f      	ldr	r3, [pc, #508]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b2:	2380      	movs	r3, #128	; 0x80
 80079b4:	055b      	lsls	r3, r3, #21
 80079b6:	4013      	ands	r3, r2
 80079b8:	d110      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	4b7c      	ldr	r3, [pc, #496]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079be:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	0549      	lsls	r1, r1, #21
 80079c4:	430a      	orrs	r2, r1
 80079c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80079c8:	4b78      	ldr	r3, [pc, #480]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	055b      	lsls	r3, r3, #21
 80079d0:	4013      	ands	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079dc:	4b74      	ldr	r3, [pc, #464]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4b73      	ldr	r3, [pc, #460]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	0049      	lsls	r1, r1, #1
 80079e6:	430a      	orrs	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ea:	f7fd fdb7 	bl	800555c <HAL_GetTick>
 80079ee:	0003      	movs	r3, r0
 80079f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079f2:	e00b      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f4:	f7fd fdb2 	bl	800555c <HAL_GetTick>
 80079f8:	0002      	movs	r2, r0
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d904      	bls.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007a02:	2313      	movs	r3, #19
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	2203      	movs	r2, #3
 8007a08:	701a      	strb	r2, [r3, #0]
        break;
 8007a0a:	e005      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a0c:	4b68      	ldr	r3, [pc, #416]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	4013      	ands	r3, r2
 8007a16:	d0ed      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007a18:	2313      	movs	r3, #19
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d154      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a22:	4b62      	ldr	r3, [pc, #392]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a26:	23c0      	movs	r3, #192	; 0xc0
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d019      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d014      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a3e:	4b5b      	ldr	r3, [pc, #364]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a42:	4a5c      	ldr	r2, [pc, #368]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a48:	4b58      	ldr	r3, [pc, #352]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a4e:	2180      	movs	r1, #128	; 0x80
 8007a50:	0249      	lsls	r1, r1, #9
 8007a52:	430a      	orrs	r2, r1
 8007a54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a5a:	4b54      	ldr	r3, [pc, #336]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a5c:	4956      	ldr	r1, [pc, #344]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007a5e:	400a      	ands	r2, r1
 8007a60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a62:	4b52      	ldr	r3, [pc, #328]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	d016      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fd fd74 	bl	800555c <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a78:	e00c      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7fd fd6f 	bl	800555c <HAL_GetTick>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	4a4d      	ldr	r2, [pc, #308]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d904      	bls.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007a8a:	2313      	movs	r3, #19
 8007a8c:	18fb      	adds	r3, r7, r3
 8007a8e:	2203      	movs	r2, #3
 8007a90:	701a      	strb	r2, [r3, #0]
            break;
 8007a92:	e004      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a94:	4b45      	ldr	r3, [pc, #276]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a98:	2202      	movs	r2, #2
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	d0ed      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007a9e:	2313      	movs	r3, #19
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa8:	4b40      	ldr	r3, [pc, #256]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	4a41      	ldr	r2, [pc, #260]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695a      	ldr	r2, [r3, #20]
 8007ab6:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8007abc:	e00c      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007abe:	2312      	movs	r3, #18
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	2213      	movs	r2, #19
 8007ac4:	18ba      	adds	r2, r7, r2
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e005      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	2312      	movs	r3, #18
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	2213      	movs	r2, #19
 8007ad2:	18ba      	adds	r2, r7, r2
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ad8:	2311      	movs	r3, #17
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ae2:	4b32      	ldr	r3, [pc, #200]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae6:	4b31      	ldr	r3, [pc, #196]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ae8:	4935      	ldr	r1, [pc, #212]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007aea:	400a      	ands	r2, r1
 8007aec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	4013      	ands	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007af8:	4b2c      	ldr	r3, [pc, #176]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	2203      	movs	r2, #3
 8007afe:	4393      	bics	r3, r2
 8007b00:	0019      	movs	r1, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b29      	ldr	r3, [pc, #164]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2220      	movs	r2, #32
 8007b12:	4013      	ands	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	4a2a      	ldr	r2, [pc, #168]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	0019      	movs	r1, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	4b21      	ldr	r3, [pc, #132]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b26:	430a      	orrs	r2, r1
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	2380      	movs	r3, #128	; 0x80
 8007b30:	01db      	lsls	r3, r3, #7
 8007b32:	4013      	ands	r3, r2
 8007b34:	d015      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b36:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	0899      	lsrs	r1, r3, #2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b44:	430a      	orrs	r2, r1
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	2380      	movs	r3, #128	; 0x80
 8007b4e:	05db      	lsls	r3, r3, #23
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d106      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	4b14      	ldr	r3, [pc, #80]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b5a:	2180      	movs	r1, #128	; 0x80
 8007b5c:	0249      	lsls	r1, r1, #9
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	2380      	movs	r3, #128	; 0x80
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d016      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	0019      	movs	r1, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	2380      	movs	r3, #128	; 0x80
 8007b88:	01db      	lsls	r3, r3, #7
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d106      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	4b06      	ldr	r3, [pc, #24]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	0249      	lsls	r1, r1, #9
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007b9c:	2312      	movs	r3, #18
 8007b9e:	18fb      	adds	r3, r7, r3
 8007ba0:	781b      	ldrb	r3, [r3, #0]
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b006      	add	sp, #24
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	40007000 	.word	0x40007000
 8007bb4:	fffffcff 	.word	0xfffffcff
 8007bb8:	fffeffff 	.word	0xfffeffff
 8007bbc:	00001388 	.word	0x00001388
 8007bc0:	efffffff 	.word	0xefffffff
 8007bc4:	ffffcfff 	.word	0xffffcfff
 8007bc8:	ffff3fff 	.word	0xffff3fff

08007bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e04a      	b.n	8007c74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	223d      	movs	r2, #61	; 0x3d
 8007be2:	5c9b      	ldrb	r3, [r3, r2]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	223c      	movs	r2, #60	; 0x3c
 8007bee:	2100      	movs	r1, #0
 8007bf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f7fc fcdf 	bl	80045b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	223d      	movs	r2, #61	; 0x3d
 8007bfe:	2102      	movs	r1, #2
 8007c00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	0010      	movs	r0, r2
 8007c0e:	f000 faeb 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2248      	movs	r2, #72	; 0x48
 8007c16:	2101      	movs	r1, #1
 8007c18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	223e      	movs	r2, #62	; 0x3e
 8007c1e:	2101      	movs	r1, #1
 8007c20:	5499      	strb	r1, [r3, r2]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	223f      	movs	r2, #63	; 0x3f
 8007c26:	2101      	movs	r1, #1
 8007c28:	5499      	strb	r1, [r3, r2]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2240      	movs	r2, #64	; 0x40
 8007c2e:	2101      	movs	r1, #1
 8007c30:	5499      	strb	r1, [r3, r2]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2241      	movs	r2, #65	; 0x41
 8007c36:	2101      	movs	r1, #1
 8007c38:	5499      	strb	r1, [r3, r2]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2242      	movs	r2, #66	; 0x42
 8007c3e:	2101      	movs	r1, #1
 8007c40:	5499      	strb	r1, [r3, r2]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2243      	movs	r2, #67	; 0x43
 8007c46:	2101      	movs	r1, #1
 8007c48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2244      	movs	r2, #68	; 0x44
 8007c4e:	2101      	movs	r1, #1
 8007c50:	5499      	strb	r1, [r3, r2]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2245      	movs	r2, #69	; 0x45
 8007c56:	2101      	movs	r1, #1
 8007c58:	5499      	strb	r1, [r3, r2]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2246      	movs	r2, #70	; 0x46
 8007c5e:	2101      	movs	r1, #1
 8007c60:	5499      	strb	r1, [r3, r2]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2247      	movs	r2, #71	; 0x47
 8007c66:	2101      	movs	r1, #1
 8007c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	223d      	movs	r2, #61	; 0x3d
 8007c6e:	2101      	movs	r1, #1
 8007c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	0018      	movs	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b002      	add	sp, #8
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e04a      	b.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	223d      	movs	r2, #61	; 0x3d
 8007c92:	5c9b      	ldrb	r3, [r3, r2]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d107      	bne.n	8007caa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	223c      	movs	r2, #60	; 0x3c
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7fc fc69 	bl	800457c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	223d      	movs	r2, #61	; 0x3d
 8007cae:	2102      	movs	r1, #2
 8007cb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	0019      	movs	r1, r3
 8007cbc:	0010      	movs	r0, r2
 8007cbe:	f000 fa93 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2248      	movs	r2, #72	; 0x48
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	223e      	movs	r2, #62	; 0x3e
 8007cce:	2101      	movs	r1, #1
 8007cd0:	5499      	strb	r1, [r3, r2]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	223f      	movs	r2, #63	; 0x3f
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	5499      	strb	r1, [r3, r2]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2240      	movs	r2, #64	; 0x40
 8007cde:	2101      	movs	r1, #1
 8007ce0:	5499      	strb	r1, [r3, r2]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2241      	movs	r2, #65	; 0x41
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	5499      	strb	r1, [r3, r2]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2242      	movs	r2, #66	; 0x42
 8007cee:	2101      	movs	r1, #1
 8007cf0:	5499      	strb	r1, [r3, r2]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2243      	movs	r2, #67	; 0x43
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2244      	movs	r2, #68	; 0x44
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2245      	movs	r2, #69	; 0x45
 8007d06:	2101      	movs	r1, #1
 8007d08:	5499      	strb	r1, [r3, r2]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2246      	movs	r2, #70	; 0x46
 8007d0e:	2101      	movs	r1, #1
 8007d10:	5499      	strb	r1, [r3, r2]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2247      	movs	r2, #71	; 0x47
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	223d      	movs	r2, #61	; 0x3d
 8007d1e:	2101      	movs	r1, #1
 8007d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	0018      	movs	r0, r3
 8007d26:	46bd      	mov	sp, r7
 8007d28:	b002      	add	sp, #8
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d108      	bne.n	8007d4e <HAL_TIM_PWM_Start+0x22>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	223e      	movs	r2, #62	; 0x3e
 8007d40:	5c9b      	ldrb	r3, [r3, r2]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	4193      	sbcs	r3, r2
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	e037      	b.n	8007dbe <HAL_TIM_PWM_Start+0x92>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d108      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x3a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	223f      	movs	r2, #63	; 0x3f
 8007d58:	5c9b      	ldrb	r3, [r3, r2]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	1e5a      	subs	r2, r3, #1
 8007d60:	4193      	sbcs	r3, r2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	e02b      	b.n	8007dbe <HAL_TIM_PWM_Start+0x92>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d108      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x52>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2240      	movs	r2, #64	; 0x40
 8007d70:	5c9b      	ldrb	r3, [r3, r2]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	1e5a      	subs	r2, r3, #1
 8007d78:	4193      	sbcs	r3, r2
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	e01f      	b.n	8007dbe <HAL_TIM_PWM_Start+0x92>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d108      	bne.n	8007d96 <HAL_TIM_PWM_Start+0x6a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2241      	movs	r2, #65	; 0x41
 8007d88:	5c9b      	ldrb	r3, [r3, r2]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	4193      	sbcs	r3, r2
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	e013      	b.n	8007dbe <HAL_TIM_PWM_Start+0x92>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d108      	bne.n	8007dae <HAL_TIM_PWM_Start+0x82>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2242      	movs	r2, #66	; 0x42
 8007da0:	5c9b      	ldrb	r3, [r3, r2]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	4193      	sbcs	r3, r2
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e007      	b.n	8007dbe <HAL_TIM_PWM_Start+0x92>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2243      	movs	r2, #67	; 0x43
 8007db2:	5c9b      	ldrb	r3, [r3, r2]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	1e5a      	subs	r2, r3, #1
 8007dba:	4193      	sbcs	r3, r2
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e07b      	b.n	8007ebe <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIM_PWM_Start+0xaa>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	223e      	movs	r2, #62	; 0x3e
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	5499      	strb	r1, [r3, r2]
 8007dd4:	e023      	b.n	8007e1e <HAL_TIM_PWM_Start+0xf2>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d104      	bne.n	8007de6 <HAL_TIM_PWM_Start+0xba>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	223f      	movs	r2, #63	; 0x3f
 8007de0:	2102      	movs	r1, #2
 8007de2:	5499      	strb	r1, [r3, r2]
 8007de4:	e01b      	b.n	8007e1e <HAL_TIM_PWM_Start+0xf2>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_PWM_Start+0xca>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2240      	movs	r2, #64	; 0x40
 8007df0:	2102      	movs	r1, #2
 8007df2:	5499      	strb	r1, [r3, r2]
 8007df4:	e013      	b.n	8007e1e <HAL_TIM_PWM_Start+0xf2>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b0c      	cmp	r3, #12
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_PWM_Start+0xda>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2241      	movs	r2, #65	; 0x41
 8007e00:	2102      	movs	r1, #2
 8007e02:	5499      	strb	r1, [r3, r2]
 8007e04:	e00b      	b.n	8007e1e <HAL_TIM_PWM_Start+0xf2>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_PWM_Start+0xea>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2242      	movs	r2, #66	; 0x42
 8007e10:	2102      	movs	r1, #2
 8007e12:	5499      	strb	r1, [r3, r2]
 8007e14:	e003      	b.n	8007e1e <HAL_TIM_PWM_Start+0xf2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2243      	movs	r2, #67	; 0x43
 8007e1a:	2102      	movs	r1, #2
 8007e1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	2201      	movs	r2, #1
 8007e26:	0018      	movs	r0, r3
 8007e28:	f000 fce6 	bl	80087f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a25      	ldr	r2, [pc, #148]	; (8007ec8 <HAL_TIM_PWM_Start+0x19c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d009      	beq.n	8007e4a <HAL_TIM_PWM_Start+0x11e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <HAL_TIM_PWM_Start+0x1a0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d004      	beq.n	8007e4a <HAL_TIM_PWM_Start+0x11e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a22      	ldr	r2, [pc, #136]	; (8007ed0 <HAL_TIM_PWM_Start+0x1a4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d101      	bne.n	8007e4e <HAL_TIM_PWM_Start+0x122>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <HAL_TIM_PWM_Start+0x124>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	0209      	lsls	r1, r1, #8
 8007e62:	430a      	orrs	r2, r1
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <HAL_TIM_PWM_Start+0x19c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d004      	beq.n	8007e7a <HAL_TIM_PWM_Start+0x14e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <HAL_TIM_PWM_Start+0x1a8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d116      	bne.n	8007ea8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <HAL_TIM_PWM_Start+0x1ac>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b06      	cmp	r3, #6
 8007e8a:	d016      	beq.n	8007eba <HAL_TIM_PWM_Start+0x18e>
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	2380      	movs	r3, #128	; 0x80
 8007e90:	025b      	lsls	r3, r3, #9
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d011      	beq.n	8007eba <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	e008      	b.n	8007eba <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e000      	b.n	8007ebc <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eba:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b004      	add	sp, #16
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	00010007 	.word	0x00010007

08007edc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	2200      	movs	r2, #0
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f000 fc82 	bl	80087f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a35      	ldr	r2, [pc, #212]	; (8007fd0 <HAL_TIM_PWM_Stop+0xf4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d009      	beq.n	8007f12 <HAL_TIM_PWM_Stop+0x36>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a34      	ldr	r2, [pc, #208]	; (8007fd4 <HAL_TIM_PWM_Stop+0xf8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_TIM_PWM_Stop+0x36>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a32      	ldr	r2, [pc, #200]	; (8007fd8 <HAL_TIM_PWM_Stop+0xfc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_PWM_Stop+0x3a>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <HAL_TIM_PWM_Stop+0x3c>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d013      	beq.n	8007f44 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	4a2e      	ldr	r2, [pc, #184]	; (8007fdc <HAL_TIM_PWM_Stop+0x100>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	d10d      	bne.n	8007f44 <HAL_TIM_PWM_Stop+0x68>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <HAL_TIM_PWM_Stop+0x104>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	d107      	bne.n	8007f44 <HAL_TIM_PWM_Stop+0x68>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4929      	ldr	r1, [pc, #164]	; (8007fe4 <HAL_TIM_PWM_Stop+0x108>)
 8007f40:	400a      	ands	r2, r1
 8007f42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <HAL_TIM_PWM_Stop+0x100>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	d10d      	bne.n	8007f6c <HAL_TIM_PWM_Stop+0x90>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <HAL_TIM_PWM_Stop+0x104>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d107      	bne.n	8007f6c <HAL_TIM_PWM_Stop+0x90>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2101      	movs	r1, #1
 8007f68:	438a      	bics	r2, r1
 8007f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <HAL_TIM_PWM_Stop+0xa0>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	223e      	movs	r2, #62	; 0x3e
 8007f76:	2101      	movs	r1, #1
 8007f78:	5499      	strb	r1, [r3, r2]
 8007f7a:	e023      	b.n	8007fc4 <HAL_TIM_PWM_Stop+0xe8>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d104      	bne.n	8007f8c <HAL_TIM_PWM_Stop+0xb0>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	223f      	movs	r2, #63	; 0x3f
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
 8007f8a:	e01b      	b.n	8007fc4 <HAL_TIM_PWM_Stop+0xe8>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d104      	bne.n	8007f9c <HAL_TIM_PWM_Stop+0xc0>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2240      	movs	r2, #64	; 0x40
 8007f96:	2101      	movs	r1, #1
 8007f98:	5499      	strb	r1, [r3, r2]
 8007f9a:	e013      	b.n	8007fc4 <HAL_TIM_PWM_Stop+0xe8>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	d104      	bne.n	8007fac <HAL_TIM_PWM_Stop+0xd0>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2241      	movs	r2, #65	; 0x41
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	5499      	strb	r1, [r3, r2]
 8007faa:	e00b      	b.n	8007fc4 <HAL_TIM_PWM_Stop+0xe8>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b10      	cmp	r3, #16
 8007fb0:	d104      	bne.n	8007fbc <HAL_TIM_PWM_Stop+0xe0>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2242      	movs	r2, #66	; 0x42
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	5499      	strb	r1, [r3, r2]
 8007fba:	e003      	b.n	8007fc4 <HAL_TIM_PWM_Stop+0xe8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2243      	movs	r2, #67	; 0x43
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	b002      	add	sp, #8
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	00001111 	.word	0x00001111
 8007fe0:	00000444 	.word	0x00000444
 8007fe4:	ffff7fff 	.word	0xffff7fff

08007fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff4:	2317      	movs	r3, #23
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	223c      	movs	r2, #60	; 0x3c
 8008000:	5c9b      	ldrb	r3, [r3, r2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_TIM_PWM_ConfigChannel+0x22>
 8008006:	2302      	movs	r3, #2
 8008008:	e0e5      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	223c      	movs	r2, #60	; 0x3c
 800800e:	2101      	movs	r1, #1
 8008010:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b14      	cmp	r3, #20
 8008016:	d900      	bls.n	800801a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008018:	e0d1      	b.n	80081be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	009a      	lsls	r2, r3, #2
 800801e:	4b70      	ldr	r3, [pc, #448]	; (80081e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f946 	bl	80082c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699a      	ldr	r2, [r3, #24]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2108      	movs	r1, #8
 8008040:	430a      	orrs	r2, r1
 8008042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2104      	movs	r1, #4
 8008050:	438a      	bics	r2, r1
 8008052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6999      	ldr	r1, [r3, #24]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	619a      	str	r2, [r3, #24]
      break;
 8008066:	e0af      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f000 f9a5 	bl	80083c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	0109      	lsls	r1, r1, #4
 8008084:	430a      	orrs	r2, r1
 8008086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4954      	ldr	r1, [pc, #336]	; (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008094:	400a      	ands	r2, r1
 8008096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6999      	ldr	r1, [r3, #24]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	619a      	str	r2, [r3, #24]
      break;
 80080ac:	e08c      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	0011      	movs	r1, r2
 80080b6:	0018      	movs	r0, r3
 80080b8:	f000 fa00 	bl	80084bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2108      	movs	r1, #8
 80080c8:	430a      	orrs	r2, r1
 80080ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2104      	movs	r1, #4
 80080d8:	438a      	bics	r2, r1
 80080da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69d9      	ldr	r1, [r3, #28]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	61da      	str	r2, [r3, #28]
      break;
 80080ee:	e06b      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	0011      	movs	r1, r2
 80080f8:	0018      	movs	r0, r3
 80080fa:	f000 fa61 	bl	80085c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	0109      	lsls	r1, r1, #4
 800810c:	430a      	orrs	r2, r1
 800810e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4932      	ldr	r1, [pc, #200]	; (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800811c:	400a      	ands	r2, r1
 800811e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69d9      	ldr	r1, [r3, #28]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	021a      	lsls	r2, r3, #8
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	61da      	str	r2, [r3, #28]
      break;
 8008134:	e048      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0011      	movs	r1, r2
 800813e:	0018      	movs	r0, r3
 8008140:	f000 faa2 	bl	8008688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2108      	movs	r1, #8
 8008150:	430a      	orrs	r2, r1
 8008152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2104      	movs	r1, #4
 8008160:	438a      	bics	r2, r1
 8008162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008176:	e027      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	0011      	movs	r1, r2
 8008180:	0018      	movs	r0, r3
 8008182:	f000 fadb 	bl	800873c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2180      	movs	r1, #128	; 0x80
 8008192:	0109      	lsls	r1, r1, #4
 8008194:	430a      	orrs	r2, r1
 8008196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4910      	ldr	r1, [pc, #64]	; (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80081a4:	400a      	ands	r2, r1
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081bc:	e004      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80081be:	2317      	movs	r3, #23
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	2201      	movs	r2, #1
 80081c4:	701a      	strb	r2, [r3, #0]
      break;
 80081c6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	223c      	movs	r2, #60	; 0x3c
 80081cc:	2100      	movs	r1, #0
 80081ce:	5499      	strb	r1, [r3, r2]

  return status;
 80081d0:	2317      	movs	r3, #23
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	781b      	ldrb	r3, [r3, #0]
}
 80081d6:	0018      	movs	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	b006      	add	sp, #24
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	0800b420 	.word	0x0800b420
 80081e4:	fffffbff 	.word	0xfffffbff

080081e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a2b      	ldr	r2, [pc, #172]	; (80082a8 <TIM_Base_SetConfig+0xc0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0x20>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a2a      	ldr	r2, [pc, #168]	; (80082ac <TIM_Base_SetConfig+0xc4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2270      	movs	r2, #112	; 0x70
 800820c:	4393      	bics	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a22      	ldr	r2, [pc, #136]	; (80082a8 <TIM_Base_SetConfig+0xc0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00f      	beq.n	8008242 <TIM_Base_SetConfig+0x5a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a21      	ldr	r2, [pc, #132]	; (80082ac <TIM_Base_SetConfig+0xc4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00b      	beq.n	8008242 <TIM_Base_SetConfig+0x5a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <TIM_Base_SetConfig+0xc8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d007      	beq.n	8008242 <TIM_Base_SetConfig+0x5a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <TIM_Base_SetConfig+0xcc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_Base_SetConfig+0x5a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <TIM_Base_SetConfig+0xd0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d108      	bne.n	8008254 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <TIM_Base_SetConfig+0xd4>)
 8008246:	4013      	ands	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2280      	movs	r2, #128	; 0x80
 8008258:	4393      	bics	r3, r2
 800825a:	001a      	movs	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a0a      	ldr	r2, [pc, #40]	; (80082a8 <TIM_Base_SetConfig+0xc0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_Base_SetConfig+0xaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a0b      	ldr	r2, [pc, #44]	; (80082b4 <TIM_Base_SetConfig+0xcc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_Base_SetConfig+0xaa>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <TIM_Base_SetConfig+0xd0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d103      	bne.n	800829a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	615a      	str	r2, [r3, #20]
}
 80082a0:	46c0      	nop			; (mov r8, r8)
 80082a2:	46bd      	mov	sp, r7
 80082a4:	b004      	add	sp, #16
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40012c00 	.word	0x40012c00
 80082ac:	40000400 	.word	0x40000400
 80082b0:	40002000 	.word	0x40002000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800
 80082bc:	fffffcff 	.word	0xfffffcff

080082c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	2201      	movs	r2, #1
 80082d0:	4393      	bics	r3, r2
 80082d2:	001a      	movs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a2e      	ldr	r2, [pc, #184]	; (80083a8 <TIM_OC1_SetConfig+0xe8>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2203      	movs	r2, #3
 80082f6:	4393      	bics	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2202      	movs	r2, #2
 8008308:	4393      	bics	r3, r2
 800830a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a24      	ldr	r2, [pc, #144]	; (80083ac <TIM_OC1_SetConfig+0xec>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d007      	beq.n	800832e <TIM_OC1_SetConfig+0x6e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a23      	ldr	r2, [pc, #140]	; (80083b0 <TIM_OC1_SetConfig+0xf0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_OC1_SetConfig+0x6e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a22      	ldr	r2, [pc, #136]	; (80083b4 <TIM_OC1_SetConfig+0xf4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10c      	bne.n	8008348 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2208      	movs	r2, #8
 8008332:	4393      	bics	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2204      	movs	r2, #4
 8008344:	4393      	bics	r3, r2
 8008346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <TIM_OC1_SetConfig+0xec>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_OC1_SetConfig+0xa0>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a17      	ldr	r2, [pc, #92]	; (80083b0 <TIM_OC1_SetConfig+0xf0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC1_SetConfig+0xa0>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <TIM_OC1_SetConfig+0xf4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d111      	bne.n	8008384 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <TIM_OC1_SetConfig+0xf8>)
 8008364:	4013      	ands	r3, r2
 8008366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4a14      	ldr	r2, [pc, #80]	; (80083bc <TIM_OC1_SetConfig+0xfc>)
 800836c:	4013      	ands	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b006      	add	sp, #24
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	fffeff8f 	.word	0xfffeff8f
 80083ac:	40012c00 	.word	0x40012c00
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800
 80083b8:	fffffeff 	.word	0xfffffeff
 80083bc:	fffffdff 	.word	0xfffffdff

080083c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	2210      	movs	r2, #16
 80083d0:	4393      	bics	r3, r2
 80083d2:	001a      	movs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4a2c      	ldr	r2, [pc, #176]	; (80084a0 <TIM_OC2_SetConfig+0xe0>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a2b      	ldr	r2, [pc, #172]	; (80084a4 <TIM_OC2_SetConfig+0xe4>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2220      	movs	r2, #32
 800840a:	4393      	bics	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a22      	ldr	r2, [pc, #136]	; (80084a8 <TIM_OC2_SetConfig+0xe8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10d      	bne.n	800843e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	4393      	bics	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2240      	movs	r2, #64	; 0x40
 800843a:	4393      	bics	r3, r2
 800843c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <TIM_OC2_SetConfig+0xe8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_OC2_SetConfig+0x96>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a18      	ldr	r2, [pc, #96]	; (80084ac <TIM_OC2_SetConfig+0xec>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_OC2_SetConfig+0x96>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a17      	ldr	r2, [pc, #92]	; (80084b0 <TIM_OC2_SetConfig+0xf0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <TIM_OC2_SetConfig+0xf4>)
 800845a:	4013      	ands	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <TIM_OC2_SetConfig+0xf8>)
 8008462:	4013      	ands	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b006      	add	sp, #24
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	feff8fff 	.word	0xfeff8fff
 80084a4:	fffffcff 	.word	0xfffffcff
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800
 80084b4:	fffffbff 	.word	0xfffffbff
 80084b8:	fffff7ff 	.word	0xfffff7ff

080084bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	4a33      	ldr	r2, [pc, #204]	; (8008598 <TIM_OC3_SetConfig+0xdc>)
 80084cc:	401a      	ands	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4a2d      	ldr	r2, [pc, #180]	; (800859c <TIM_OC3_SetConfig+0xe0>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2203      	movs	r2, #3
 80084f0:	4393      	bics	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <TIM_OC3_SetConfig+0xe4>)
 8008502:	4013      	ands	r3, r2
 8008504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <TIM_OC3_SetConfig+0xe8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d10d      	bne.n	8008536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <TIM_OC3_SetConfig+0xec>)
 800851e:	4013      	ands	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <TIM_OC3_SetConfig+0xf0>)
 8008532:	4013      	ands	r3, r2
 8008534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1a      	ldr	r2, [pc, #104]	; (80085a4 <TIM_OC3_SetConfig+0xe8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d007      	beq.n	800854e <TIM_OC3_SetConfig+0x92>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <TIM_OC3_SetConfig+0xf4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_OC3_SetConfig+0x92>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1a      	ldr	r2, [pc, #104]	; (80085b4 <TIM_OC3_SetConfig+0xf8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d113      	bne.n	8008576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <TIM_OC3_SetConfig+0xfc>)
 8008552:	4013      	ands	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4a18      	ldr	r2, [pc, #96]	; (80085bc <TIM_OC3_SetConfig+0x100>)
 800855a:	4013      	ands	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	621a      	str	r2, [r3, #32]
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b006      	add	sp, #24
 8008596:	bd80      	pop	{r7, pc}
 8008598:	fffffeff 	.word	0xfffffeff
 800859c:	fffeff8f 	.word	0xfffeff8f
 80085a0:	fffffdff 	.word	0xfffffdff
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	fffff7ff 	.word	0xfffff7ff
 80085ac:	fffffbff 	.word	0xfffffbff
 80085b0:	40014400 	.word	0x40014400
 80085b4:	40014800 	.word	0x40014800
 80085b8:	ffffefff 	.word	0xffffefff
 80085bc:	ffffdfff 	.word	0xffffdfff

080085c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	4a26      	ldr	r2, [pc, #152]	; (8008668 <TIM_OC4_SetConfig+0xa8>)
 80085d0:	401a      	ands	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4a20      	ldr	r2, [pc, #128]	; (800866c <TIM_OC4_SetConfig+0xac>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <TIM_OC4_SetConfig+0xb0>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <TIM_OC4_SetConfig+0xb4>)
 8008608:	4013      	ands	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	031b      	lsls	r3, r3, #12
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <TIM_OC4_SetConfig+0xb8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_OC4_SetConfig+0x70>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a16      	ldr	r2, [pc, #88]	; (800867c <TIM_OC4_SetConfig+0xbc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC4_SetConfig+0x70>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <TIM_OC4_SetConfig+0xc0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d109      	bne.n	8008644 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4a14      	ldr	r2, [pc, #80]	; (8008684 <TIM_OC4_SetConfig+0xc4>)
 8008634:	4013      	ands	r3, r2
 8008636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	019b      	lsls	r3, r3, #6
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	46c0      	nop			; (mov r8, r8)
 8008660:	46bd      	mov	sp, r7
 8008662:	b006      	add	sp, #24
 8008664:	bd80      	pop	{r7, pc}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	ffffefff 	.word	0xffffefff
 800866c:	feff8fff 	.word	0xfeff8fff
 8008670:	fffffcff 	.word	0xfffffcff
 8008674:	ffffdfff 	.word	0xffffdfff
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40014400 	.word	0x40014400
 8008680:	40014800 	.word	0x40014800
 8008684:	ffffbfff 	.word	0xffffbfff

08008688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	4a23      	ldr	r2, [pc, #140]	; (8008724 <TIM_OC5_SetConfig+0x9c>)
 8008698:	401a      	ands	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <TIM_OC5_SetConfig+0xa0>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	4a19      	ldr	r2, [pc, #100]	; (800872c <TIM_OC5_SetConfig+0xa4>)
 80086c6:	4013      	ands	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a15      	ldr	r2, [pc, #84]	; (8008730 <TIM_OC5_SetConfig+0xa8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d007      	beq.n	80086ee <TIM_OC5_SetConfig+0x66>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a14      	ldr	r2, [pc, #80]	; (8008734 <TIM_OC5_SetConfig+0xac>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d003      	beq.n	80086ee <TIM_OC5_SetConfig+0x66>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a13      	ldr	r2, [pc, #76]	; (8008738 <TIM_OC5_SetConfig+0xb0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d109      	bne.n	8008702 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <TIM_OC5_SetConfig+0x9c>)
 80086f2:	4013      	ands	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	621a      	str	r2, [r3, #32]
}
 800871c:	46c0      	nop			; (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b006      	add	sp, #24
 8008722:	bd80      	pop	{r7, pc}
 8008724:	fffeffff 	.word	0xfffeffff
 8008728:	fffeff8f 	.word	0xfffeff8f
 800872c:	fffdffff 	.word	0xfffdffff
 8008730:	40012c00 	.word	0x40012c00
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800

0800873c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	4a24      	ldr	r2, [pc, #144]	; (80087dc <TIM_OC6_SetConfig+0xa0>)
 800874c:	401a      	ands	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <TIM_OC6_SetConfig+0xa4>)
 8008768:	4013      	ands	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <TIM_OC6_SetConfig+0xa8>)
 800877c:	4013      	ands	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	051b      	lsls	r3, r3, #20
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a16      	ldr	r2, [pc, #88]	; (80087e8 <TIM_OC6_SetConfig+0xac>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d007      	beq.n	80087a4 <TIM_OC6_SetConfig+0x68>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a15      	ldr	r2, [pc, #84]	; (80087ec <TIM_OC6_SetConfig+0xb0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_OC6_SetConfig+0x68>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a14      	ldr	r2, [pc, #80]	; (80087f0 <TIM_OC6_SetConfig+0xb4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d109      	bne.n	80087b8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <TIM_OC6_SetConfig+0xb8>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	029b      	lsls	r3, r3, #10
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b006      	add	sp, #24
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	ffefffff 	.word	0xffefffff
 80087e0:	feff8fff 	.word	0xfeff8fff
 80087e4:	ffdfffff 	.word	0xffdfffff
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40014400 	.word	0x40014400
 80087f0:	40014800 	.word	0x40014800
 80087f4:	fffbffff 	.word	0xfffbffff

080087f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	221f      	movs	r2, #31
 8008808:	4013      	ands	r3, r2
 800880a:	2201      	movs	r2, #1
 800880c:	409a      	lsls	r2, r3
 800880e:	0013      	movs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	43d2      	mvns	r2, r2
 800881a:	401a      	ands	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	211f      	movs	r1, #31
 8008828:	400b      	ands	r3, r1
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4099      	lsls	r1, r3
 800882e:	000b      	movs	r3, r1
 8008830:	431a      	orrs	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	46bd      	mov	sp, r7
 800883a:	b006      	add	sp, #24
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	223c      	movs	r2, #60	; 0x3c
 800884e:	5c9b      	ldrb	r3, [r3, r2]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008854:	2302      	movs	r3, #2
 8008856:	e04a      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	223c      	movs	r2, #60	; 0x3c
 800885c:	2101      	movs	r1, #1
 800885e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	223d      	movs	r2, #61	; 0x3d
 8008864:	2102      	movs	r1, #2
 8008866:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d108      	bne.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008886:	4013      	ands	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2270      	movs	r2, #112	; 0x70
 8008898:	4393      	bics	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a11      	ldr	r2, [pc, #68]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d004      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a10      	ldr	r2, [pc, #64]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d10c      	bne.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2280      	movs	r2, #128	; 0x80
 80088c6:	4393      	bics	r3, r2
 80088c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	223d      	movs	r2, #61	; 0x3d
 80088e0:	2101      	movs	r1, #1
 80088e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	223c      	movs	r2, #60	; 0x3c
 80088e8:	2100      	movs	r1, #0
 80088ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	0018      	movs	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b004      	add	sp, #16
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	40012c00 	.word	0x40012c00
 80088fc:	ff0fffff 	.word	0xff0fffff
 8008900:	40000400 	.word	0x40000400

08008904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e046      	b.n	80089a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2288      	movs	r2, #136	; 0x88
 800891a:	589b      	ldr	r3, [r3, r2]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2284      	movs	r2, #132	; 0x84
 8008924:	2100      	movs	r1, #0
 8008926:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	0018      	movs	r0, r3
 800892c:	f7fb ff70 	bl	8004810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2288      	movs	r2, #136	; 0x88
 8008934:	2124      	movs	r1, #36	; 0x24
 8008936:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2101      	movs	r1, #1
 8008944:	438a      	bics	r2, r1
 8008946:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	0018      	movs	r0, r3
 800894c:	f000 fc72 	bl	8009234 <UART_SetConfig>
 8008950:	0003      	movs	r3, r0
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e024      	b.n	80089a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	0018      	movs	r0, r3
 8008966:	f000 fdcf 	bl	8009508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	490d      	ldr	r1, [pc, #52]	; (80089ac <HAL_UART_Init+0xa8>)
 8008976:	400a      	ands	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	212a      	movs	r1, #42	; 0x2a
 8008986:	438a      	bics	r2, r1
 8008988:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2101      	movs	r1, #1
 8008996:	430a      	orrs	r2, r1
 8008998:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	f000 fe67 	bl	8009670 <UART_CheckIdleState>
 80089a2:	0003      	movs	r3, r0
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b002      	add	sp, #8
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	ffffb7ff 	.word	0xffffb7ff

080089b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08c      	sub	sp, #48	; 0x30
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	1dbb      	adds	r3, r7, #6
 80089bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2288      	movs	r2, #136	; 0x88
 80089c2:	589b      	ldr	r3, [r3, r2]
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d000      	beq.n	80089ca <HAL_UART_Transmit_IT+0x1a>
 80089c8:	e08d      	b.n	8008ae6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_UART_Transmit_IT+0x28>
 80089d0:	1dbb      	adds	r3, r7, #6
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e085      	b.n	8008ae8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	015b      	lsls	r3, r3, #5
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d109      	bne.n	80089fc <HAL_UART_Transmit_IT+0x4c>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2201      	movs	r2, #1
 80089f4:	4013      	ands	r3, r2
 80089f6:	d001      	beq.n	80089fc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e075      	b.n	8008ae8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1dba      	adds	r2, r7, #6
 8008a06:	2154      	movs	r1, #84	; 0x54
 8008a08:	8812      	ldrh	r2, [r2, #0]
 8008a0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	1dba      	adds	r2, r7, #6
 8008a10:	2156      	movs	r1, #86	; 0x56
 8008a12:	8812      	ldrh	r2, [r2, #0]
 8008a14:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2290      	movs	r2, #144	; 0x90
 8008a20:	2100      	movs	r1, #0
 8008a22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2288      	movs	r2, #136	; 0x88
 8008a28:	2121      	movs	r1, #33	; 0x21
 8008a2a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	059b      	lsls	r3, r3, #22
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d12a      	bne.n	8008a8e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	2380      	movs	r3, #128	; 0x80
 8008a3e:	015b      	lsls	r3, r3, #5
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d107      	bne.n	8008a54 <HAL_UART_Transmit_IT+0xa4>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <HAL_UART_Transmit_IT+0x140>)
 8008a50:	679a      	str	r2, [r3, #120]	; 0x78
 8008a52:	e002      	b.n	8008a5a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <HAL_UART_Transmit_IT+0x144>)
 8008a58:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a64:	2301      	movs	r3, #1
 8008a66:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	f383 8810 	msr	PRIMASK, r3
}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	0409      	lsls	r1, r1, #16
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	609a      	str	r2, [r3, #8]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	f383 8810 	msr	PRIMASK, r3
}
 8008a8c:	e029      	b.n	8008ae2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	2380      	movs	r3, #128	; 0x80
 8008a94:	015b      	lsls	r3, r3, #5
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d107      	bne.n	8008aaa <HAL_UART_Transmit_IT+0xfa>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4a14      	ldr	r2, [pc, #80]	; (8008af8 <HAL_UART_Transmit_IT+0x148>)
 8008aa6:	679a      	str	r2, [r3, #120]	; 0x78
 8008aa8:	e002      	b.n	8008ab0 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4a13      	ldr	r2, [pc, #76]	; (8008afc <HAL_UART_Transmit_IT+0x14c>)
 8008aae:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ab6:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aba:	2301      	movs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f383 8810 	msr	PRIMASK, r3
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2180      	movs	r1, #128	; 0x80
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f383 8810 	msr	PRIMASK, r3
}
 8008ae0:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8008ae6:	2302      	movs	r3, #2
  }
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b00c      	add	sp, #48	; 0x30
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	08009fb9 	.word	0x08009fb9
 8008af4:	08009ecd 	.word	0x08009ecd
 8008af8:	08009e0f 	.word	0x08009e0f
 8008afc:	08009d5b 	.word	0x08009d5b

08008b00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	1dbb      	adds	r3, r7, #6
 8008b0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	228c      	movs	r2, #140	; 0x8c
 8008b12:	589b      	ldr	r3, [r3, r2]
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d145      	bne.n	8008ba4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_UART_Receive_DMA+0x26>
 8008b1e:	1dbb      	adds	r3, r7, #6
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e03d      	b.n	8008ba6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	015b      	lsls	r3, r3, #5
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d109      	bne.n	8008b4a <HAL_UART_Receive_DMA+0x4a>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2201      	movs	r2, #1
 8008b42:	4013      	ands	r3, r2
 8008b44:	d001      	beq.n	8008b4a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e02d      	b.n	8008ba6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	2380      	movs	r3, #128	; 0x80
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d019      	beq.n	8008b92 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b62:	613b      	str	r3, [r7, #16]
  return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f383 8810 	msr	PRIMASK, r3
}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2180      	movs	r1, #128	; 0x80
 8008b80:	04c9      	lsls	r1, r1, #19
 8008b82:	430a      	orrs	r2, r1
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f383 8810 	msr	PRIMASK, r3
}
 8008b90:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b92:	1dbb      	adds	r3, r7, #6
 8008b94:	881a      	ldrh	r2, [r3, #0]
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 fe7e 	bl	800989c <UART_Start_Receive_DMA>
 8008ba0:	0003      	movs	r3, r0
 8008ba2:	e000      	b.n	8008ba6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008ba4:	2302      	movs	r3, #2
  }
}
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	b008      	add	sp, #32
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bb0:	b5b0      	push	{r4, r5, r7, lr}
 8008bb2:	b0aa      	sub	sp, #168	; 0xa8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	22a4      	movs	r2, #164	; 0xa4
 8008bc0:	18b9      	adds	r1, r7, r2
 8008bc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	20a0      	movs	r0, #160	; 0xa0
 8008bcc:	1839      	adds	r1, r7, r0
 8008bce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	249c      	movs	r4, #156	; 0x9c
 8008bd8:	1939      	adds	r1, r7, r4
 8008bda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bdc:	0011      	movs	r1, r2
 8008bde:	18bb      	adds	r3, r7, r2
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4aa2      	ldr	r2, [pc, #648]	; (8008e6c <HAL_UART_IRQHandler+0x2bc>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	2298      	movs	r2, #152	; 0x98
 8008be8:	18bd      	adds	r5, r7, r2
 8008bea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008bec:	18bb      	adds	r3, r7, r2
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11a      	bne.n	8008c2a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bf4:	187b      	adds	r3, r7, r1
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	d015      	beq.n	8008c2a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bfe:	183b      	adds	r3, r7, r0
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2220      	movs	r2, #32
 8008c04:	4013      	ands	r3, r2
 8008c06:	d105      	bne.n	8008c14 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c08:	193b      	adds	r3, r7, r4
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	2380      	movs	r3, #128	; 0x80
 8008c0e:	055b      	lsls	r3, r3, #21
 8008c10:	4013      	ands	r3, r2
 8008c12:	d00a      	beq.n	8008c2a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d100      	bne.n	8008c1e <HAL_UART_IRQHandler+0x6e>
 8008c1c:	e2dc      	b.n	80091d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	0010      	movs	r0, r2
 8008c26:	4798      	blx	r3
      }
      return;
 8008c28:	e2d6      	b.n	80091d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c2a:	2398      	movs	r3, #152	; 0x98
 8008c2c:	18fb      	adds	r3, r7, r3
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d100      	bne.n	8008c36 <HAL_UART_IRQHandler+0x86>
 8008c34:	e122      	b.n	8008e7c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c36:	239c      	movs	r3, #156	; 0x9c
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a8c      	ldr	r2, [pc, #560]	; (8008e70 <HAL_UART_IRQHandler+0x2c0>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	d106      	bne.n	8008c50 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c42:	23a0      	movs	r3, #160	; 0xa0
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a8a      	ldr	r2, [pc, #552]	; (8008e74 <HAL_UART_IRQHandler+0x2c4>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d100      	bne.n	8008c50 <HAL_UART_IRQHandler+0xa0>
 8008c4e:	e115      	b.n	8008e7c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c50:	23a4      	movs	r3, #164	; 0xa4
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2201      	movs	r2, #1
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d012      	beq.n	8008c82 <HAL_UART_IRQHandler+0xd2>
 8008c5c:	23a0      	movs	r3, #160	; 0xa0
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4013      	ands	r3, r2
 8008c68:	d00b      	beq.n	8008c82 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2290      	movs	r2, #144	; 0x90
 8008c76:	589b      	ldr	r3, [r3, r2]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2190      	movs	r1, #144	; 0x90
 8008c80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c82:	23a4      	movs	r3, #164	; 0xa4
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	d011      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x102>
 8008c8e:	239c      	movs	r3, #156	; 0x9c
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	4013      	ands	r3, r2
 8008c98:	d00b      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2290      	movs	r2, #144	; 0x90
 8008ca6:	589b      	ldr	r3, [r3, r2]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2190      	movs	r1, #144	; 0x90
 8008cb0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb2:	23a4      	movs	r3, #164	; 0xa4
 8008cb4:	18fb      	adds	r3, r7, r3
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	4013      	ands	r3, r2
 8008cbc:	d011      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x132>
 8008cbe:	239c      	movs	r3, #156	; 0x9c
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2290      	movs	r2, #144	; 0x90
 8008cd6:	589b      	ldr	r3, [r3, r2]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2190      	movs	r1, #144	; 0x90
 8008ce0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ce2:	23a4      	movs	r3, #164	; 0xa4
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2208      	movs	r2, #8
 8008cea:	4013      	ands	r3, r2
 8008cec:	d017      	beq.n	8008d1e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cee:	23a0      	movs	r3, #160	; 0xa0
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d105      	bne.n	8008d06 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cfa:	239c      	movs	r3, #156	; 0x9c
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a5b      	ldr	r2, [pc, #364]	; (8008e70 <HAL_UART_IRQHandler+0x2c0>)
 8008d02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d04:	d00b      	beq.n	8008d1e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2290      	movs	r2, #144	; 0x90
 8008d12:	589b      	ldr	r3, [r3, r2]
 8008d14:	2208      	movs	r2, #8
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2190      	movs	r1, #144	; 0x90
 8008d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d1e:	23a4      	movs	r3, #164	; 0xa4
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	2380      	movs	r3, #128	; 0x80
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	4013      	ands	r3, r2
 8008d2a:	d013      	beq.n	8008d54 <HAL_UART_IRQHandler+0x1a4>
 8008d2c:	23a0      	movs	r3, #160	; 0xa0
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	04db      	lsls	r3, r3, #19
 8008d36:	4013      	ands	r3, r2
 8008d38:	d00c      	beq.n	8008d54 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	0112      	lsls	r2, r2, #4
 8008d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2290      	movs	r2, #144	; 0x90
 8008d48:	589b      	ldr	r3, [r3, r2]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2190      	movs	r1, #144	; 0x90
 8008d52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2290      	movs	r2, #144	; 0x90
 8008d58:	589b      	ldr	r3, [r3, r2]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d100      	bne.n	8008d60 <HAL_UART_IRQHandler+0x1b0>
 8008d5e:	e23d      	b.n	80091dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d60:	23a4      	movs	r3, #164	; 0xa4
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2220      	movs	r2, #32
 8008d68:	4013      	ands	r3, r2
 8008d6a:	d015      	beq.n	8008d98 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d6c:	23a0      	movs	r3, #160	; 0xa0
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2220      	movs	r2, #32
 8008d74:	4013      	ands	r3, r2
 8008d76:	d106      	bne.n	8008d86 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d78:	239c      	movs	r3, #156	; 0x9c
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	2380      	movs	r3, #128	; 0x80
 8008d80:	055b      	lsls	r3, r3, #21
 8008d82:	4013      	ands	r3, r2
 8008d84:	d008      	beq.n	8008d98 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	0010      	movs	r0, r2
 8008d96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2290      	movs	r2, #144	; 0x90
 8008d9c:	589b      	ldr	r3, [r3, r2]
 8008d9e:	2194      	movs	r1, #148	; 0x94
 8008da0:	187a      	adds	r2, r7, r1
 8008da2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2240      	movs	r2, #64	; 0x40
 8008dac:	4013      	ands	r3, r2
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d004      	beq.n	8008dbc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008db2:	187b      	adds	r3, r7, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2228      	movs	r2, #40	; 0x28
 8008db8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dba:	d04c      	beq.n	8008e56 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 fe52 	bl	8009a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	2240      	movs	r2, #64	; 0x40
 8008dcc:	4013      	ands	r3, r2
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d13c      	bne.n	8008e4c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dda:	2090      	movs	r0, #144	; 0x90
 8008ddc:	183a      	adds	r2, r7, r0
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	2301      	movs	r3, #1
 8008de2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de6:	f383 8810 	msr	PRIMASK, r3
}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2140      	movs	r1, #64	; 0x40
 8008df8:	438a      	bics	r2, r1
 8008dfa:	609a      	str	r2, [r3, #8]
 8008dfc:	183b      	adds	r3, r7, r0
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e04:	f383 8810 	msr	PRIMASK, r3
}
 8008e08:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2280      	movs	r2, #128	; 0x80
 8008e0e:	589b      	ldr	r3, [r3, r2]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2280      	movs	r2, #128	; 0x80
 8008e18:	589b      	ldr	r3, [r3, r2]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <HAL_UART_IRQHandler+0x2c8>)
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2280      	movs	r2, #128	; 0x80
 8008e22:	589b      	ldr	r3, [r3, r2]
 8008e24:	0018      	movs	r0, r3
 8008e26:	f7fc fe17 	bl	8005a58 <HAL_DMA_Abort_IT>
 8008e2a:	1e03      	subs	r3, r0, #0
 8008e2c:	d01c      	beq.n	8008e68 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	589b      	ldr	r3, [r3, r2]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	5852      	ldr	r2, [r2, r1]
 8008e3c:	0010      	movs	r0, r2
 8008e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e40:	e012      	b.n	8008e68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	0018      	movs	r0, r3
 8008e46:	f000 f9e1 	bl	800920c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e4a:	e00d      	b.n	8008e68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f000 f9dc 	bl	800920c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e54:	e008      	b.n	8008e68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	0018      	movs	r0, r3
 8008e5a:	f000 f9d7 	bl	800920c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2290      	movs	r2, #144	; 0x90
 8008e62:	2100      	movs	r1, #0
 8008e64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008e66:	e1b9      	b.n	80091dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e68:	46c0      	nop			; (mov r8, r8)
    return;
 8008e6a:	e1b7      	b.n	80091dc <HAL_UART_IRQHandler+0x62c>
 8008e6c:	0000080f 	.word	0x0000080f
 8008e70:	10000001 	.word	0x10000001
 8008e74:	04000120 	.word	0x04000120
 8008e78:	08009d2d 	.word	0x08009d2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d000      	beq.n	8008e86 <HAL_UART_IRQHandler+0x2d6>
 8008e84:	e13e      	b.n	8009104 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e86:	23a4      	movs	r3, #164	; 0xa4
 8008e88:	18fb      	adds	r3, r7, r3
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2210      	movs	r2, #16
 8008e8e:	4013      	ands	r3, r2
 8008e90:	d100      	bne.n	8008e94 <HAL_UART_IRQHandler+0x2e4>
 8008e92:	e137      	b.n	8009104 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e94:	23a0      	movs	r3, #160	; 0xa0
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2210      	movs	r2, #16
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	d100      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x2f2>
 8008ea0:	e130      	b.n	8009104 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2210      	movs	r2, #16
 8008ea8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2240      	movs	r2, #64	; 0x40
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d000      	beq.n	8008eba <HAL_UART_IRQHandler+0x30a>
 8008eb8:	e0a4      	b.n	8009004 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2280      	movs	r2, #128	; 0x80
 8008ebe:	589b      	ldr	r3, [r3, r2]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	217e      	movs	r1, #126	; 0x7e
 8008ec6:	187b      	adds	r3, r7, r1
 8008ec8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d100      	bne.n	8008ed4 <HAL_UART_IRQHandler+0x324>
 8008ed2:	e185      	b.n	80091e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	225c      	movs	r2, #92	; 0x5c
 8008ed8:	5a9b      	ldrh	r3, [r3, r2]
 8008eda:	187a      	adds	r2, r7, r1
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d300      	bcc.n	8008ee4 <HAL_UART_IRQHandler+0x334>
 8008ee2:	e17d      	b.n	80091e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	187a      	adds	r2, r7, r1
 8008ee8:	215e      	movs	r1, #94	; 0x5e
 8008eea:	8812      	ldrh	r2, [r2, #0]
 8008eec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2280      	movs	r2, #128	; 0x80
 8008ef2:	589b      	ldr	r3, [r3, r2]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	4013      	ands	r3, r2
 8008efc:	d170      	bne.n	8008fe0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efe:	f3ef 8310 	mrs	r3, PRIMASK
 8008f02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f06:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f08:	2301      	movs	r3, #1
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	49b4      	ldr	r1, [pc, #720]	; (80091f0 <HAL_UART_IRQHandler+0x640>)
 8008f20:	400a      	ands	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f383 8810 	msr	PRIMASK, r3
}
 8008f2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f30:	f3ef 8310 	mrs	r3, PRIMASK
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f38:	677b      	str	r3, [r7, #116]	; 0x74
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f40:	f383 8810 	msr	PRIMASK, r3
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2101      	movs	r1, #1
 8008f52:	438a      	bics	r2, r1
 8008f54:	609a      	str	r2, [r3, #8]
 8008f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	f383 8810 	msr	PRIMASK, r3
}
 8008f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f62:	f3ef 8310 	mrs	r3, PRIMASK
 8008f66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	f383 8810 	msr	PRIMASK, r3
}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2140      	movs	r1, #64	; 0x40
 8008f84:	438a      	bics	r2, r1
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f8e:	f383 8810 	msr	PRIMASK, r3
}
 8008f92:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	228c      	movs	r2, #140	; 0x8c
 8008f98:	2120      	movs	r1, #32
 8008f9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fac:	2301      	movs	r3, #1
 8008fae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fb2:	f383 8810 	msr	PRIMASK, r3
}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2110      	movs	r1, #16
 8008fc4:	438a      	bics	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fce:	f383 8810 	msr	PRIMASK, r3
}
 8008fd2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2280      	movs	r2, #128	; 0x80
 8008fd8:	589b      	ldr	r3, [r3, r2]
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f7fc fcda 	bl	8005994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	225c      	movs	r2, #92	; 0x5c
 8008fea:	5a9a      	ldrh	r2, [r3, r2]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	215e      	movs	r1, #94	; 0x5e
 8008ff0:	5a5b      	ldrh	r3, [r3, r1]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	0011      	movs	r1, r2
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f000 f90d 	bl	800921c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009002:	e0ed      	b.n	80091e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	225c      	movs	r2, #92	; 0x5c
 8009008:	5a99      	ldrh	r1, [r3, r2]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	225e      	movs	r2, #94	; 0x5e
 800900e:	5a9b      	ldrh	r3, [r3, r2]
 8009010:	b29a      	uxth	r2, r3
 8009012:	208e      	movs	r0, #142	; 0x8e
 8009014:	183b      	adds	r3, r7, r0
 8009016:	1a8a      	subs	r2, r1, r2
 8009018:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	225e      	movs	r2, #94	; 0x5e
 800901e:	5a9b      	ldrh	r3, [r3, r2]
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d100      	bne.n	8009028 <HAL_UART_IRQHandler+0x478>
 8009026:	e0dd      	b.n	80091e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8009028:	183b      	adds	r3, r7, r0
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d100      	bne.n	8009032 <HAL_UART_IRQHandler+0x482>
 8009030:	e0d8      	b.n	80091e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009032:	f3ef 8310 	mrs	r3, PRIMASK
 8009036:	60fb      	str	r3, [r7, #12]
  return(result);
 8009038:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800903a:	2488      	movs	r4, #136	; 0x88
 800903c:	193a      	adds	r2, r7, r4
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	2301      	movs	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f383 8810 	msr	PRIMASK, r3
}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4967      	ldr	r1, [pc, #412]	; (80091f4 <HAL_UART_IRQHandler+0x644>)
 8009058:	400a      	ands	r2, r1
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	193b      	adds	r3, r7, r4
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f383 8810 	msr	PRIMASK, r3
}
 8009068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906a:	f3ef 8310 	mrs	r3, PRIMASK
 800906e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009070:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009072:	2484      	movs	r4, #132	; 0x84
 8009074:	193a      	adds	r2, r7, r4
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	495a      	ldr	r1, [pc, #360]	; (80091f8 <HAL_UART_IRQHandler+0x648>)
 8009090:	400a      	ands	r2, r1
 8009092:	609a      	str	r2, [r3, #8]
 8009094:	193b      	adds	r3, r7, r4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	f383 8810 	msr	PRIMASK, r3
}
 80090a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	228c      	movs	r2, #140	; 0x8c
 80090a6:	2120      	movs	r1, #32
 80090a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090be:	2480      	movs	r4, #128	; 0x80
 80090c0:	193a      	adds	r2, r7, r4
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	2301      	movs	r3, #1
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	f383 8810 	msr	PRIMASK, r3
}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2110      	movs	r1, #16
 80090dc:	438a      	bics	r2, r1
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	f383 8810 	msr	PRIMASK, r3
}
 80090ec:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090f4:	183b      	adds	r3, r7, r0
 80090f6:	881a      	ldrh	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	0011      	movs	r1, r2
 80090fc:	0018      	movs	r0, r3
 80090fe:	f000 f88d 	bl	800921c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009102:	e06f      	b.n	80091e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009104:	23a4      	movs	r3, #164	; 0xa4
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	2380      	movs	r3, #128	; 0x80
 800910c:	035b      	lsls	r3, r3, #13
 800910e:	4013      	ands	r3, r2
 8009110:	d010      	beq.n	8009134 <HAL_UART_IRQHandler+0x584>
 8009112:	239c      	movs	r3, #156	; 0x9c
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	2380      	movs	r3, #128	; 0x80
 800911a:	03db      	lsls	r3, r3, #15
 800911c:	4013      	ands	r3, r2
 800911e:	d009      	beq.n	8009134 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2280      	movs	r2, #128	; 0x80
 8009126:	0352      	lsls	r2, r2, #13
 8009128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0018      	movs	r0, r3
 800912e:	f000 ffe9 	bl	800a104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009132:	e05a      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009134:	23a4      	movs	r3, #164	; 0xa4
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2280      	movs	r2, #128	; 0x80
 800913c:	4013      	ands	r3, r2
 800913e:	d016      	beq.n	800916e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009140:	23a0      	movs	r3, #160	; 0xa0
 8009142:	18fb      	adds	r3, r7, r3
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2280      	movs	r2, #128	; 0x80
 8009148:	4013      	ands	r3, r2
 800914a:	d106      	bne.n	800915a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800914c:	239c      	movs	r3, #156	; 0x9c
 800914e:	18fb      	adds	r3, r7, r3
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	2380      	movs	r3, #128	; 0x80
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	4013      	ands	r3, r2
 8009158:	d009      	beq.n	800916e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800915e:	2b00      	cmp	r3, #0
 8009160:	d042      	beq.n	80091e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	0010      	movs	r0, r2
 800916a:	4798      	blx	r3
    }
    return;
 800916c:	e03c      	b.n	80091e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800916e:	23a4      	movs	r3, #164	; 0xa4
 8009170:	18fb      	adds	r3, r7, r3
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2240      	movs	r2, #64	; 0x40
 8009176:	4013      	ands	r3, r2
 8009178:	d00a      	beq.n	8009190 <HAL_UART_IRQHandler+0x5e0>
 800917a:	23a0      	movs	r3, #160	; 0xa0
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2240      	movs	r2, #64	; 0x40
 8009182:	4013      	ands	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	0018      	movs	r0, r3
 800918a:	f000 ff8f 	bl	800a0ac <UART_EndTransmit_IT>
    return;
 800918e:	e02c      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009190:	23a4      	movs	r3, #164	; 0xa4
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	2380      	movs	r3, #128	; 0x80
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	4013      	ands	r3, r2
 800919c:	d00b      	beq.n	80091b6 <HAL_UART_IRQHandler+0x606>
 800919e:	23a0      	movs	r3, #160	; 0xa0
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	2380      	movs	r3, #128	; 0x80
 80091a6:	05db      	lsls	r3, r3, #23
 80091a8:	4013      	ands	r3, r2
 80091aa:	d004      	beq.n	80091b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	0018      	movs	r0, r3
 80091b0:	f000 ffb8 	bl	800a124 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b4:	e019      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091b6:	23a4      	movs	r3, #164	; 0xa4
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	2380      	movs	r3, #128	; 0x80
 80091be:	045b      	lsls	r3, r3, #17
 80091c0:	4013      	ands	r3, r2
 80091c2:	d012      	beq.n	80091ea <HAL_UART_IRQHandler+0x63a>
 80091c4:	23a0      	movs	r3, #160	; 0xa0
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da0d      	bge.n	80091ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 ff9f 	bl	800a114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091d6:	e008      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
      return;
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	e006      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
    return;
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	e004      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
      return;
 80091e0:	46c0      	nop			; (mov r8, r8)
 80091e2:	e002      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
      return;
 80091e4:	46c0      	nop			; (mov r8, r8)
 80091e6:	e000      	b.n	80091ea <HAL_UART_IRQHandler+0x63a>
    return;
 80091e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b02a      	add	sp, #168	; 0xa8
 80091ee:	bdb0      	pop	{r4, r5, r7, pc}
 80091f0:	fffffeff 	.word	0xfffffeff
 80091f4:	fffffedf 	.word	0xfffffedf
 80091f8:	effffffe 	.word	0xeffffffe

080091fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009204:	46c0      	nop			; (mov r8, r8)
 8009206:	46bd      	mov	sp, r7
 8009208:	b002      	add	sp, #8
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009214:	46c0      	nop			; (mov r8, r8)
 8009216:	46bd      	mov	sp, r7
 8009218:	b002      	add	sp, #8
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	000a      	movs	r2, r1
 8009226:	1cbb      	adds	r3, r7, #2
 8009228:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	46bd      	mov	sp, r7
 800922e:	b002      	add	sp, #8
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800923c:	231a      	movs	r3, #26
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	431a      	orrs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	4313      	orrs	r3, r2
 800925a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4aa1      	ldr	r2, [pc, #644]	; (80094e8 <UART_SetConfig+0x2b4>)
 8009264:	4013      	ands	r3, r2
 8009266:	0019      	movs	r1, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	430a      	orrs	r2, r1
 8009270:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4a9c      	ldr	r2, [pc, #624]	; (80094ec <UART_SetConfig+0x2b8>)
 800927a:	4013      	ands	r3, r2
 800927c:	0019      	movs	r1, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	4313      	orrs	r3, r2
 8009298:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	4a93      	ldr	r2, [pc, #588]	; (80094f0 <UART_SetConfig+0x2bc>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	0019      	movs	r1, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	220f      	movs	r2, #15
 80092b8:	4393      	bics	r3, r2
 80092ba:	0019      	movs	r1, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a89      	ldr	r2, [pc, #548]	; (80094f4 <UART_SetConfig+0x2c0>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d127      	bne.n	8009322 <UART_SetConfig+0xee>
 80092d2:	4b89      	ldr	r3, [pc, #548]	; (80094f8 <UART_SetConfig+0x2c4>)
 80092d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d6:	2203      	movs	r2, #3
 80092d8:	4013      	ands	r3, r2
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d017      	beq.n	800930e <UART_SetConfig+0xda>
 80092de:	d81b      	bhi.n	8009318 <UART_SetConfig+0xe4>
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d00a      	beq.n	80092fa <UART_SetConfig+0xc6>
 80092e4:	d818      	bhi.n	8009318 <UART_SetConfig+0xe4>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <UART_SetConfig+0xbc>
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d00a      	beq.n	8009304 <UART_SetConfig+0xd0>
 80092ee:	e013      	b.n	8009318 <UART_SetConfig+0xe4>
 80092f0:	231b      	movs	r3, #27
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e021      	b.n	800933e <UART_SetConfig+0x10a>
 80092fa:	231b      	movs	r3, #27
 80092fc:	18fb      	adds	r3, r7, r3
 80092fe:	2202      	movs	r2, #2
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	e01c      	b.n	800933e <UART_SetConfig+0x10a>
 8009304:	231b      	movs	r3, #27
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	2204      	movs	r2, #4
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e017      	b.n	800933e <UART_SetConfig+0x10a>
 800930e:	231b      	movs	r3, #27
 8009310:	18fb      	adds	r3, r7, r3
 8009312:	2208      	movs	r2, #8
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	e012      	b.n	800933e <UART_SetConfig+0x10a>
 8009318:	231b      	movs	r3, #27
 800931a:	18fb      	adds	r3, r7, r3
 800931c:	2210      	movs	r2, #16
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e00d      	b.n	800933e <UART_SetConfig+0x10a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a75      	ldr	r2, [pc, #468]	; (80094fc <UART_SetConfig+0x2c8>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d104      	bne.n	8009336 <UART_SetConfig+0x102>
 800932c:	231b      	movs	r3, #27
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	2200      	movs	r2, #0
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	e003      	b.n	800933e <UART_SetConfig+0x10a>
 8009336:	231b      	movs	r3, #27
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	2210      	movs	r2, #16
 800933c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	429a      	cmp	r2, r3
 8009348:	d000      	beq.n	800934c <UART_SetConfig+0x118>
 800934a:	e065      	b.n	8009418 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800934c:	231b      	movs	r3, #27
 800934e:	18fb      	adds	r3, r7, r3
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b08      	cmp	r3, #8
 8009354:	d015      	beq.n	8009382 <UART_SetConfig+0x14e>
 8009356:	dc18      	bgt.n	800938a <UART_SetConfig+0x156>
 8009358:	2b04      	cmp	r3, #4
 800935a:	d00d      	beq.n	8009378 <UART_SetConfig+0x144>
 800935c:	dc15      	bgt.n	800938a <UART_SetConfig+0x156>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <UART_SetConfig+0x134>
 8009362:	2b02      	cmp	r3, #2
 8009364:	d005      	beq.n	8009372 <UART_SetConfig+0x13e>
 8009366:	e010      	b.n	800938a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009368:	f7fe faf4 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 800936c:	0003      	movs	r3, r0
 800936e:	617b      	str	r3, [r7, #20]
        break;
 8009370:	e012      	b.n	8009398 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009372:	4b63      	ldr	r3, [pc, #396]	; (8009500 <UART_SetConfig+0x2cc>)
 8009374:	617b      	str	r3, [r7, #20]
        break;
 8009376:	e00f      	b.n	8009398 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009378:	f7fe fa60 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800937c:	0003      	movs	r3, r0
 800937e:	617b      	str	r3, [r7, #20]
        break;
 8009380:	e00a      	b.n	8009398 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009382:	2380      	movs	r3, #128	; 0x80
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	617b      	str	r3, [r7, #20]
        break;
 8009388:	e006      	b.n	8009398 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800938e:	231a      	movs	r3, #26
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	2201      	movs	r2, #1
 8009394:	701a      	strb	r2, [r3, #0]
        break;
 8009396:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d100      	bne.n	80093a0 <UART_SetConfig+0x16c>
 800939e:	e08d      	b.n	80094bc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a4:	4b57      	ldr	r3, [pc, #348]	; (8009504 <UART_SetConfig+0x2d0>)
 80093a6:	0052      	lsls	r2, r2, #1
 80093a8:	5ad3      	ldrh	r3, [r2, r3]
 80093aa:	0019      	movs	r1, r3
 80093ac:	6978      	ldr	r0, [r7, #20]
 80093ae:	f7f6 fea7 	bl	8000100 <__udivsi3>
 80093b2:	0003      	movs	r3, r0
 80093b4:	005a      	lsls	r2, r3, #1
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	085b      	lsrs	r3, r3, #1
 80093bc:	18d2      	adds	r2, r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	0019      	movs	r1, r3
 80093c4:	0010      	movs	r0, r2
 80093c6:	f7f6 fe9b 	bl	8000100 <__udivsi3>
 80093ca:	0003      	movs	r3, r0
 80093cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d91c      	bls.n	800940e <UART_SetConfig+0x1da>
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	2380      	movs	r3, #128	; 0x80
 80093d8:	025b      	lsls	r3, r3, #9
 80093da:	429a      	cmp	r2, r3
 80093dc:	d217      	bcs.n	800940e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	200e      	movs	r0, #14
 80093e4:	183b      	adds	r3, r7, r0
 80093e6:	210f      	movs	r1, #15
 80093e8:	438a      	bics	r2, r1
 80093ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2207      	movs	r2, #7
 80093f4:	4013      	ands	r3, r2
 80093f6:	b299      	uxth	r1, r3
 80093f8:	183b      	adds	r3, r7, r0
 80093fa:	183a      	adds	r2, r7, r0
 80093fc:	8812      	ldrh	r2, [r2, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	183a      	adds	r2, r7, r0
 8009408:	8812      	ldrh	r2, [r2, #0]
 800940a:	60da      	str	r2, [r3, #12]
 800940c:	e056      	b.n	80094bc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800940e:	231a      	movs	r3, #26
 8009410:	18fb      	adds	r3, r7, r3
 8009412:	2201      	movs	r2, #1
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	e051      	b.n	80094bc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009418:	231b      	movs	r3, #27
 800941a:	18fb      	adds	r3, r7, r3
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b08      	cmp	r3, #8
 8009420:	d015      	beq.n	800944e <UART_SetConfig+0x21a>
 8009422:	dc18      	bgt.n	8009456 <UART_SetConfig+0x222>
 8009424:	2b04      	cmp	r3, #4
 8009426:	d00d      	beq.n	8009444 <UART_SetConfig+0x210>
 8009428:	dc15      	bgt.n	8009456 <UART_SetConfig+0x222>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <UART_SetConfig+0x200>
 800942e:	2b02      	cmp	r3, #2
 8009430:	d005      	beq.n	800943e <UART_SetConfig+0x20a>
 8009432:	e010      	b.n	8009456 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009434:	f7fe fa8e 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 8009438:	0003      	movs	r3, r0
 800943a:	617b      	str	r3, [r7, #20]
        break;
 800943c:	e012      	b.n	8009464 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800943e:	4b30      	ldr	r3, [pc, #192]	; (8009500 <UART_SetConfig+0x2cc>)
 8009440:	617b      	str	r3, [r7, #20]
        break;
 8009442:	e00f      	b.n	8009464 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009444:	f7fe f9fa 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8009448:	0003      	movs	r3, r0
 800944a:	617b      	str	r3, [r7, #20]
        break;
 800944c:	e00a      	b.n	8009464 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944e:	2380      	movs	r3, #128	; 0x80
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	617b      	str	r3, [r7, #20]
        break;
 8009454:	e006      	b.n	8009464 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800945a:	231a      	movs	r3, #26
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	2201      	movs	r2, #1
 8009460:	701a      	strb	r2, [r3, #0]
        break;
 8009462:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d028      	beq.n	80094bc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946e:	4b25      	ldr	r3, [pc, #148]	; (8009504 <UART_SetConfig+0x2d0>)
 8009470:	0052      	lsls	r2, r2, #1
 8009472:	5ad3      	ldrh	r3, [r2, r3]
 8009474:	0019      	movs	r1, r3
 8009476:	6978      	ldr	r0, [r7, #20]
 8009478:	f7f6 fe42 	bl	8000100 <__udivsi3>
 800947c:	0003      	movs	r3, r0
 800947e:	001a      	movs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	085b      	lsrs	r3, r3, #1
 8009486:	18d2      	adds	r2, r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	0019      	movs	r1, r3
 800948e:	0010      	movs	r0, r2
 8009490:	f7f6 fe36 	bl	8000100 <__udivsi3>
 8009494:	0003      	movs	r3, r0
 8009496:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b0f      	cmp	r3, #15
 800949c:	d90a      	bls.n	80094b4 <UART_SetConfig+0x280>
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2380      	movs	r3, #128	; 0x80
 80094a2:	025b      	lsls	r3, r3, #9
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d205      	bcs.n	80094b4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	e003      	b.n	80094bc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80094b4:	231a      	movs	r3, #26
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	2201      	movs	r2, #1
 80094ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	226a      	movs	r2, #106	; 0x6a
 80094c0:	2101      	movs	r1, #1
 80094c2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2268      	movs	r2, #104	; 0x68
 80094c8:	2101      	movs	r1, #1
 80094ca:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80094d8:	231a      	movs	r3, #26
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	781b      	ldrb	r3, [r3, #0]
}
 80094de:	0018      	movs	r0, r3
 80094e0:	46bd      	mov	sp, r7
 80094e2:	b008      	add	sp, #32
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	cfff69f3 	.word	0xcfff69f3
 80094ec:	ffffcfff 	.word	0xffffcfff
 80094f0:	11fff4ff 	.word	0x11fff4ff
 80094f4:	40013800 	.word	0x40013800
 80094f8:	40021000 	.word	0x40021000
 80094fc:	40004400 	.word	0x40004400
 8009500:	00f42400 	.word	0x00f42400
 8009504:	0800b474 	.word	0x0800b474

08009508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009514:	2201      	movs	r2, #1
 8009516:	4013      	ands	r3, r2
 8009518:	d00b      	beq.n	8009532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a4a      	ldr	r2, [pc, #296]	; (800964c <UART_AdvFeatureConfig+0x144>)
 8009522:	4013      	ands	r3, r2
 8009524:	0019      	movs	r1, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	2202      	movs	r2, #2
 8009538:	4013      	ands	r3, r2
 800953a:	d00b      	beq.n	8009554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4a43      	ldr	r2, [pc, #268]	; (8009650 <UART_AdvFeatureConfig+0x148>)
 8009544:	4013      	ands	r3, r2
 8009546:	0019      	movs	r1, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009558:	2204      	movs	r2, #4
 800955a:	4013      	ands	r3, r2
 800955c:	d00b      	beq.n	8009576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4a3b      	ldr	r2, [pc, #236]	; (8009654 <UART_AdvFeatureConfig+0x14c>)
 8009566:	4013      	ands	r3, r2
 8009568:	0019      	movs	r1, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957a:	2208      	movs	r2, #8
 800957c:	4013      	ands	r3, r2
 800957e:	d00b      	beq.n	8009598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	4a34      	ldr	r2, [pc, #208]	; (8009658 <UART_AdvFeatureConfig+0x150>)
 8009588:	4013      	ands	r3, r2
 800958a:	0019      	movs	r1, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959c:	2210      	movs	r2, #16
 800959e:	4013      	ands	r3, r2
 80095a0:	d00b      	beq.n	80095ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	4a2c      	ldr	r2, [pc, #176]	; (800965c <UART_AdvFeatureConfig+0x154>)
 80095aa:	4013      	ands	r3, r2
 80095ac:	0019      	movs	r1, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	2220      	movs	r2, #32
 80095c0:	4013      	ands	r3, r2
 80095c2:	d00b      	beq.n	80095dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	4a25      	ldr	r2, [pc, #148]	; (8009660 <UART_AdvFeatureConfig+0x158>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	0019      	movs	r1, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	2240      	movs	r2, #64	; 0x40
 80095e2:	4013      	ands	r3, r2
 80095e4:	d01d      	beq.n	8009622 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <UART_AdvFeatureConfig+0x15c>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	0019      	movs	r1, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009602:	2380      	movs	r3, #128	; 0x80
 8009604:	035b      	lsls	r3, r3, #13
 8009606:	429a      	cmp	r2, r3
 8009608:	d10b      	bne.n	8009622 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a15      	ldr	r2, [pc, #84]	; (8009668 <UART_AdvFeatureConfig+0x160>)
 8009612:	4013      	ands	r3, r2
 8009614:	0019      	movs	r1, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009626:	2280      	movs	r2, #128	; 0x80
 8009628:	4013      	ands	r3, r2
 800962a:	d00b      	beq.n	8009644 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	4a0e      	ldr	r2, [pc, #56]	; (800966c <UART_AdvFeatureConfig+0x164>)
 8009634:	4013      	ands	r3, r2
 8009636:	0019      	movs	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	605a      	str	r2, [r3, #4]
  }
}
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	46bd      	mov	sp, r7
 8009648:	b002      	add	sp, #8
 800964a:	bd80      	pop	{r7, pc}
 800964c:	fffdffff 	.word	0xfffdffff
 8009650:	fffeffff 	.word	0xfffeffff
 8009654:	fffbffff 	.word	0xfffbffff
 8009658:	ffff7fff 	.word	0xffff7fff
 800965c:	ffffefff 	.word	0xffffefff
 8009660:	ffffdfff 	.word	0xffffdfff
 8009664:	ffefffff 	.word	0xffefffff
 8009668:	ff9fffff 	.word	0xff9fffff
 800966c:	fff7ffff 	.word	0xfff7ffff

08009670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af02      	add	r7, sp, #8
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2290      	movs	r2, #144	; 0x90
 800967c:	2100      	movs	r1, #0
 800967e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009680:	f7fb ff6c 	bl	800555c <HAL_GetTick>
 8009684:	0003      	movs	r3, r0
 8009686:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2208      	movs	r2, #8
 8009690:	4013      	ands	r3, r2
 8009692:	2b08      	cmp	r3, #8
 8009694:	d10c      	bne.n	80096b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2280      	movs	r2, #128	; 0x80
 800969a:	0391      	lsls	r1, r2, #14
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4a1a      	ldr	r2, [pc, #104]	; (8009708 <UART_CheckIdleState+0x98>)
 80096a0:	9200      	str	r2, [sp, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f000 f832 	bl	800970c <UART_WaitOnFlagUntilTimeout>
 80096a8:	1e03      	subs	r3, r0, #0
 80096aa:	d001      	beq.n	80096b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e026      	b.n	80096fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2204      	movs	r2, #4
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d10c      	bne.n	80096d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2280      	movs	r2, #128	; 0x80
 80096c2:	03d1      	lsls	r1, r2, #15
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	4a10      	ldr	r2, [pc, #64]	; (8009708 <UART_CheckIdleState+0x98>)
 80096c8:	9200      	str	r2, [sp, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f000 f81e 	bl	800970c <UART_WaitOnFlagUntilTimeout>
 80096d0:	1e03      	subs	r3, r0, #0
 80096d2:	d001      	beq.n	80096d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e012      	b.n	80096fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2288      	movs	r2, #136	; 0x88
 80096dc:	2120      	movs	r1, #32
 80096de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	228c      	movs	r2, #140	; 0x8c
 80096e4:	2120      	movs	r1, #32
 80096e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2284      	movs	r2, #132	; 0x84
 80096f8:	2100      	movs	r1, #0
 80096fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b004      	add	sp, #16
 8009704:	bd80      	pop	{r7, pc}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	01ffffff 	.word	0x01ffffff

0800970c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b094      	sub	sp, #80	; 0x50
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	1dfb      	adds	r3, r7, #7
 800971a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971c:	e0a7      	b.n	800986e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800971e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009720:	3301      	adds	r3, #1
 8009722:	d100      	bne.n	8009726 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009724:	e0a3      	b.n	800986e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009726:	f7fb ff19 	bl	800555c <HAL_GetTick>
 800972a:	0002      	movs	r2, r0
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009732:	429a      	cmp	r2, r3
 8009734:	d302      	bcc.n	800973c <UART_WaitOnFlagUntilTimeout+0x30>
 8009736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009738:	2b00      	cmp	r3, #0
 800973a:	d13f      	bne.n	80097bc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800973c:	f3ef 8310 	mrs	r3, PRIMASK
 8009740:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009744:	647b      	str	r3, [r7, #68]	; 0x44
 8009746:	2301      	movs	r3, #1
 8009748:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	f383 8810 	msr	PRIMASK, r3
}
 8009750:	46c0      	nop			; (mov r8, r8)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	494e      	ldr	r1, [pc, #312]	; (8009898 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800975e:	400a      	ands	r2, r1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	f383 8810 	msr	PRIMASK, r3
}
 800976c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800976e:	f3ef 8310 	mrs	r3, PRIMASK
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009776:	643b      	str	r3, [r7, #64]	; 0x40
 8009778:	2301      	movs	r3, #1
 800977a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	f383 8810 	msr	PRIMASK, r3
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2101      	movs	r1, #1
 8009790:	438a      	bics	r2, r1
 8009792:	609a      	str	r2, [r3, #8]
 8009794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979a:	f383 8810 	msr	PRIMASK, r3
}
 800979e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2288      	movs	r2, #136	; 0x88
 80097a4:	2120      	movs	r1, #32
 80097a6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	228c      	movs	r2, #140	; 0x8c
 80097ac:	2120      	movs	r1, #32
 80097ae:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2284      	movs	r2, #132	; 0x84
 80097b4:	2100      	movs	r1, #0
 80097b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e069      	b.n	8009890 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2204      	movs	r2, #4
 80097c4:	4013      	ands	r3, r2
 80097c6:	d052      	beq.n	800986e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69da      	ldr	r2, [r3, #28]
 80097ce:	2380      	movs	r3, #128	; 0x80
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	401a      	ands	r2, r3
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	429a      	cmp	r2, r3
 80097da:	d148      	bne.n	800986e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2280      	movs	r2, #128	; 0x80
 80097e2:	0112      	lsls	r2, r2, #4
 80097e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ea:	613b      	str	r3, [r7, #16]
  return(result);
 80097ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097f0:	2301      	movs	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f383 8810 	msr	PRIMASK, r3
}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4924      	ldr	r1, [pc, #144]	; (8009898 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009808:	400a      	ands	r2, r1
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f383 8810 	msr	PRIMASK, r3
}
 8009816:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009818:	f3ef 8310 	mrs	r3, PRIMASK
 800981c:	61fb      	str	r3, [r7, #28]
  return(result);
 800981e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009820:	64bb      	str	r3, [r7, #72]	; 0x48
 8009822:	2301      	movs	r3, #1
 8009824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f383 8810 	msr	PRIMASK, r3
}
 800982c:	46c0      	nop			; (mov r8, r8)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2101      	movs	r1, #1
 800983a:	438a      	bics	r2, r1
 800983c:	609a      	str	r2, [r3, #8]
 800983e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	f383 8810 	msr	PRIMASK, r3
}
 8009848:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2288      	movs	r2, #136	; 0x88
 800984e:	2120      	movs	r1, #32
 8009850:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	228c      	movs	r2, #140	; 0x8c
 8009856:	2120      	movs	r1, #32
 8009858:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2290      	movs	r2, #144	; 0x90
 800985e:	2120      	movs	r1, #32
 8009860:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2284      	movs	r2, #132	; 0x84
 8009866:	2100      	movs	r1, #0
 8009868:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e010      	b.n	8009890 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	4013      	ands	r3, r2
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	425a      	negs	r2, r3
 800987e:	4153      	adcs	r3, r2
 8009880:	b2db      	uxtb	r3, r3
 8009882:	001a      	movs	r2, r3
 8009884:	1dfb      	adds	r3, r7, #7
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d100      	bne.n	800988e <UART_WaitOnFlagUntilTimeout+0x182>
 800988c:	e747      	b.n	800971e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	0018      	movs	r0, r3
 8009892:	46bd      	mov	sp, r7
 8009894:	b014      	add	sp, #80	; 0x50
 8009896:	bd80      	pop	{r7, pc}
 8009898:	fffffe5f 	.word	0xfffffe5f

0800989c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b090      	sub	sp, #64	; 0x40
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	1dbb      	adds	r3, r7, #6
 80098a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1dba      	adds	r2, r7, #6
 80098b4:	215c      	movs	r1, #92	; 0x5c
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2290      	movs	r2, #144	; 0x90
 80098be:	2100      	movs	r1, #0
 80098c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	228c      	movs	r2, #140	; 0x8c
 80098c6:	2122      	movs	r1, #34	; 0x22
 80098c8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2280      	movs	r2, #128	; 0x80
 80098ce:	589b      	ldr	r3, [r3, r2]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02d      	beq.n	8009930 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2280      	movs	r2, #128	; 0x80
 80098d8:	589b      	ldr	r3, [r3, r2]
 80098da:	4a40      	ldr	r2, [pc, #256]	; (80099dc <UART_Start_Receive_DMA+0x140>)
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2280      	movs	r2, #128	; 0x80
 80098e2:	589b      	ldr	r3, [r3, r2]
 80098e4:	4a3e      	ldr	r2, [pc, #248]	; (80099e0 <UART_Start_Receive_DMA+0x144>)
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2280      	movs	r2, #128	; 0x80
 80098ec:	589b      	ldr	r3, [r3, r2]
 80098ee:	4a3d      	ldr	r2, [pc, #244]	; (80099e4 <UART_Start_Receive_DMA+0x148>)
 80098f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2280      	movs	r2, #128	; 0x80
 80098f6:	589b      	ldr	r3, [r3, r2]
 80098f8:	2200      	movs	r2, #0
 80098fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2280      	movs	r2, #128	; 0x80
 8009900:	5898      	ldr	r0, [r3, r2]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3324      	adds	r3, #36	; 0x24
 8009908:	0019      	movs	r1, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990e:	001a      	movs	r2, r3
 8009910:	1dbb      	adds	r3, r7, #6
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	f7fb ffb8 	bl	8005888 <HAL_DMA_Start_IT>
 8009918:	1e03      	subs	r3, r0, #0
 800991a:	d009      	beq.n	8009930 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2290      	movs	r2, #144	; 0x90
 8009920:	2110      	movs	r1, #16
 8009922:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	228c      	movs	r2, #140	; 0x8c
 8009928:	2120      	movs	r1, #32
 800992a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e050      	b.n	80099d2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d019      	beq.n	800996c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009938:	f3ef 8310 	mrs	r3, PRIMASK
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009942:	2301      	movs	r3, #1
 8009944:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	f383 8810 	msr	PRIMASK, r3
}
 800994c:	46c0      	nop			; (mov r8, r8)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2180      	movs	r1, #128	; 0x80
 800995a:	0049      	lsls	r1, r1, #1
 800995c:	430a      	orrs	r2, r1
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009962:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	f383 8810 	msr	PRIMASK, r3
}
 800996a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800996c:	f3ef 8310 	mrs	r3, PRIMASK
 8009970:	613b      	str	r3, [r7, #16]
  return(result);
 8009972:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	63bb      	str	r3, [r7, #56]	; 0x38
 8009976:	2301      	movs	r3, #1
 8009978:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f383 8810 	msr	PRIMASK, r3
}
 8009980:	46c0      	nop			; (mov r8, r8)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2101      	movs	r1, #1
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	f383 8810 	msr	PRIMASK, r3
}
 800999c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800999e:	f3ef 8310 	mrs	r3, PRIMASK
 80099a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80099a4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34
 80099a8:	2301      	movs	r3, #1
 80099aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	f383 8810 	msr	PRIMASK, r3
}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2140      	movs	r1, #64	; 0x40
 80099c0:	430a      	orrs	r2, r1
 80099c2:	609a      	str	r2, [r3, #8]
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	f383 8810 	msr	PRIMASK, r3
}
 80099ce:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	0018      	movs	r0, r3
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b010      	add	sp, #64	; 0x40
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	08009b35 	.word	0x08009b35
 80099e0:	08009c65 	.word	0x08009c65
 80099e4:	08009ca7 	.word	0x08009ca7

080099e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f0:	f3ef 8310 	mrs	r3, PRIMASK
 80099f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80099f6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
 80099fa:	2301      	movs	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f383 8810 	msr	PRIMASK, r3
}
 8009a04:	46c0      	nop			; (mov r8, r8)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	21c0      	movs	r1, #192	; 0xc0
 8009a12:	438a      	bics	r2, r1
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f383 8810 	msr	PRIMASK, r3
}
 8009a20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a22:	f3ef 8310 	mrs	r3, PRIMASK
 8009a26:	617b      	str	r3, [r7, #20]
  return(result);
 8009a28:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f383 8810 	msr	PRIMASK, r3
}
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4908      	ldr	r1, [pc, #32]	; (8009a64 <UART_EndTxTransfer+0x7c>)
 8009a44:	400a      	ands	r2, r1
 8009a46:	609a      	str	r2, [r3, #8]
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f383 8810 	msr	PRIMASK, r3
}
 8009a52:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2288      	movs	r2, #136	; 0x88
 8009a58:	2120      	movs	r1, #32
 8009a5a:	5099      	str	r1, [r3, r2]
}
 8009a5c:	46c0      	nop			; (mov r8, r8)
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b00a      	add	sp, #40	; 0x28
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	ff7fffff 	.word	0xff7fffff

08009a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a70:	f3ef 8310 	mrs	r3, PRIMASK
 8009a74:	617b      	str	r3, [r7, #20]
  return(result);
 8009a76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a78:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	f383 8810 	msr	PRIMASK, r3
}
 8009a84:	46c0      	nop			; (mov r8, r8)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4926      	ldr	r1, [pc, #152]	; (8009b2c <UART_EndRxTransfer+0xc4>)
 8009a92:	400a      	ands	r2, r1
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f383 8810 	msr	PRIMASK, r3
}
 8009aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa6:	623b      	str	r3, [r7, #32]
  return(result);
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8009aac:	2301      	movs	r3, #1
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	f383 8810 	msr	PRIMASK, r3
}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	491b      	ldr	r1, [pc, #108]	; (8009b30 <UART_EndRxTransfer+0xc8>)
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	609a      	str	r2, [r3, #8]
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	f383 8810 	msr	PRIMASK, r3
}
 8009ad2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d118      	bne.n	8009b0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009adc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f383 8810 	msr	PRIMASK, r3
}
 8009af0:	46c0      	nop			; (mov r8, r8)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2110      	movs	r1, #16
 8009afe:	438a      	bics	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f383 8810 	msr	PRIMASK, r3
}
 8009b0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	228c      	movs	r2, #140	; 0x8c
 8009b12:	2120      	movs	r1, #32
 8009b14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	46bd      	mov	sp, r7
 8009b26:	b00e      	add	sp, #56	; 0x38
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	fffffedf 	.word	0xfffffedf
 8009b30:	effffffe 	.word	0xeffffffe

08009b34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b094      	sub	sp, #80	; 0x50
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	d16f      	bne.n	8009c2e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	225e      	movs	r2, #94	; 0x5e
 8009b52:	2100      	movs	r1, #0
 8009b54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b56:	f3ef 8310 	mrs	r3, PRIMASK
 8009b5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b5c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b60:	2301      	movs	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f383 8810 	msr	PRIMASK, r3
}
 8009b6a:	46c0      	nop			; (mov r8, r8)
 8009b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	493a      	ldr	r1, [pc, #232]	; (8009c60 <UART_DMAReceiveCplt+0x12c>)
 8009b78:	400a      	ands	r2, r1
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	f383 8810 	msr	PRIMASK, r3
}
 8009b86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b88:	f3ef 8310 	mrs	r3, PRIMASK
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b90:	647b      	str	r3, [r7, #68]	; 0x44
 8009b92:	2301      	movs	r3, #1
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	f383 8810 	msr	PRIMASK, r3
}
 8009b9c:	46c0      	nop			; (mov r8, r8)
 8009b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2101      	movs	r1, #1
 8009baa:	438a      	bics	r2, r1
 8009bac:	609a      	str	r2, [r3, #8]
 8009bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	f383 8810 	msr	PRIMASK, r3
}
 8009bb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bba:	f3ef 8310 	mrs	r3, PRIMASK
 8009bbe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bca:	f383 8810 	msr	PRIMASK, r3
}
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2140      	movs	r1, #64	; 0x40
 8009bdc:	438a      	bics	r2, r1
 8009bde:	609a      	str	r2, [r3, #8]
 8009be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	f383 8810 	msr	PRIMASK, r3
}
 8009bea:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bee:	228c      	movs	r2, #140	; 0x8c
 8009bf0:	2120      	movs	r1, #32
 8009bf2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d118      	bne.n	8009c2e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8009c00:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c02:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c06:	2301      	movs	r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f383 8810 	msr	PRIMASK, r3
}
 8009c10:	46c0      	nop			; (mov r8, r8)
 8009c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2110      	movs	r1, #16
 8009c1e:	438a      	bics	r2, r1
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f383 8810 	msr	PRIMASK, r3
}
 8009c2c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c30:	2200      	movs	r2, #0
 8009c32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d108      	bne.n	8009c4e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3e:	225c      	movs	r2, #92	; 0x5c
 8009c40:	5a9a      	ldrh	r2, [r3, r2]
 8009c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c44:	0011      	movs	r1, r2
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7ff fae8 	bl	800921c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c4c:	e003      	b.n	8009c56 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c50:	0018      	movs	r0, r3
 8009c52:	f7fa fa45 	bl	80040e0 <HAL_UART_RxCpltCallback>
}
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	b014      	add	sp, #80	; 0x50
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	fffffeff 	.word	0xfffffeff

08009c64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2201      	movs	r2, #1
 8009c76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d10a      	bne.n	8009c96 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	225c      	movs	r2, #92	; 0x5c
 8009c84:	5a9b      	ldrh	r3, [r3, r2]
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7ff fac4 	bl	800921c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c94:	e003      	b.n	8009c9e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7ff faaf 	bl	80091fc <HAL_UART_RxHalfCpltCallback>
}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b004      	add	sp, #16
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2288      	movs	r2, #136	; 0x88
 8009cb8:	589b      	ldr	r3, [r3, r2]
 8009cba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	228c      	movs	r2, #140	; 0x8c
 8009cc0:	589b      	ldr	r3, [r3, r2]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2280      	movs	r2, #128	; 0x80
 8009ccc:	4013      	ands	r3, r2
 8009cce:	2b80      	cmp	r3, #128	; 0x80
 8009cd0:	d10a      	bne.n	8009ce8 <UART_DMAError+0x42>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2b21      	cmp	r3, #33	; 0x21
 8009cd6:	d107      	bne.n	8009ce8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2256      	movs	r2, #86	; 0x56
 8009cdc:	2100      	movs	r1, #0
 8009cde:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f7ff fe80 	bl	80099e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2240      	movs	r2, #64	; 0x40
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d10a      	bne.n	8009d0c <UART_DMAError+0x66>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b22      	cmp	r3, #34	; 0x22
 8009cfa:	d107      	bne.n	8009d0c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	225e      	movs	r2, #94	; 0x5e
 8009d00:	2100      	movs	r1, #0
 8009d02:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f7ff feae 	bl	8009a68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2290      	movs	r2, #144	; 0x90
 8009d10:	589b      	ldr	r3, [r3, r2]
 8009d12:	2210      	movs	r2, #16
 8009d14:	431a      	orrs	r2, r3
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2190      	movs	r1, #144	; 0x90
 8009d1a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7ff fa74 	bl	800920c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d24:	46c0      	nop			; (mov r8, r8)
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b006      	add	sp, #24
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	225e      	movs	r2, #94	; 0x5e
 8009d3e:	2100      	movs	r1, #0
 8009d40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2256      	movs	r2, #86	; 0x56
 8009d46:	2100      	movs	r1, #0
 8009d48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7ff fa5d 	bl	800920c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b004      	add	sp, #16
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b08a      	sub	sp, #40	; 0x28
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2288      	movs	r2, #136	; 0x88
 8009d66:	589b      	ldr	r3, [r3, r2]
 8009d68:	2b21      	cmp	r3, #33	; 0x21
 8009d6a:	d14c      	bne.n	8009e06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2256      	movs	r2, #86	; 0x56
 8009d70:	5a9b      	ldrh	r3, [r3, r2]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d132      	bne.n	8009dde <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d78:	f3ef 8310 	mrs	r3, PRIMASK
 8009d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
 8009d82:	2301      	movs	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f383 8810 	msr	PRIMASK, r3
}
 8009d8c:	46c0      	nop			; (mov r8, r8)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2180      	movs	r1, #128	; 0x80
 8009d9a:	438a      	bics	r2, r1
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f383 8810 	msr	PRIMASK, r3
}
 8009da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009daa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dae:	617b      	str	r3, [r7, #20]
  return(result);
 8009db0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009db2:	623b      	str	r3, [r7, #32]
 8009db4:	2301      	movs	r3, #1
 8009db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f383 8810 	msr	PRIMASK, r3
}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2140      	movs	r1, #64	; 0x40
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f383 8810 	msr	PRIMASK, r3
}
 8009dda:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009ddc:	e013      	b.n	8009e06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de2:	781a      	ldrb	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2256      	movs	r2, #86	; 0x56
 8009df8:	5a9b      	ldrh	r3, [r3, r2]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b299      	uxth	r1, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2256      	movs	r2, #86	; 0x56
 8009e04:	5299      	strh	r1, [r3, r2]
}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b00a      	add	sp, #40	; 0x28
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b08c      	sub	sp, #48	; 0x30
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2288      	movs	r2, #136	; 0x88
 8009e1a:	589b      	ldr	r3, [r3, r2]
 8009e1c:	2b21      	cmp	r3, #33	; 0x21
 8009e1e:	d151      	bne.n	8009ec4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2256      	movs	r2, #86	; 0x56
 8009e24:	5a9b      	ldrh	r3, [r3, r2]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d132      	bne.n	8009e92 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e32:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e36:	2301      	movs	r3, #1
 8009e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f383 8810 	msr	PRIMASK, r3
}
 8009e40:	46c0      	nop			; (mov r8, r8)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2180      	movs	r1, #128	; 0x80
 8009e4e:	438a      	bics	r2, r1
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f383 8810 	msr	PRIMASK, r3
}
 8009e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e62:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e64:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
 8009e68:	2301      	movs	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f383 8810 	msr	PRIMASK, r3
}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2140      	movs	r1, #64	; 0x40
 8009e80:	430a      	orrs	r2, r1
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	f383 8810 	msr	PRIMASK, r3
}
 8009e8e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009e90:	e018      	b.n	8009ec4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	001a      	movs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	05d2      	lsls	r2, r2, #23
 8009ea4:	0dd2      	lsrs	r2, r2, #23
 8009ea6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eac:	1c9a      	adds	r2, r3, #2
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2256      	movs	r2, #86	; 0x56
 8009eb6:	5a9b      	ldrh	r3, [r3, r2]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	b299      	uxth	r1, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2256      	movs	r2, #86	; 0x56
 8009ec2:	5299      	strh	r1, [r3, r2]
}
 8009ec4:	46c0      	nop			; (mov r8, r8)
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b00c      	add	sp, #48	; 0x30
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08c      	sub	sp, #48	; 0x30
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2288      	movs	r2, #136	; 0x88
 8009ed8:	589b      	ldr	r3, [r3, r2]
 8009eda:	2b21      	cmp	r3, #33	; 0x21
 8009edc:	d165      	bne.n	8009faa <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ede:	232e      	movs	r3, #46	; 0x2e
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	216a      	movs	r1, #106	; 0x6a
 8009ee6:	5a52      	ldrh	r2, [r2, r1]
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	e059      	b.n	8009fa0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2256      	movs	r2, #86	; 0x56
 8009ef0:	5a9b      	ldrh	r3, [r3, r2]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d133      	bne.n	8009f60 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8009efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f02:	2301      	movs	r3, #1
 8009f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f383 8810 	msr	PRIMASK, r3
}
 8009f0c:	46c0      	nop			; (mov r8, r8)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4926      	ldr	r1, [pc, #152]	; (8009fb4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8009f1a:	400a      	ands	r2, r1
 8009f1c:	609a      	str	r2, [r3, #8]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f383 8810 	msr	PRIMASK, r3
}
 8009f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f30:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	2301      	movs	r3, #1
 8009f36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	f383 8810 	msr	PRIMASK, r3
}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2140      	movs	r1, #64	; 0x40
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	f383 8810 	msr	PRIMASK, r3
}
 8009f5a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8009f5c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8009f5e:	e024      	b.n	8009faa <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	2280      	movs	r2, #128	; 0x80
 8009f68:	4013      	ands	r3, r2
 8009f6a:	d013      	beq.n	8009f94 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2256      	movs	r2, #86	; 0x56
 8009f86:	5a9b      	ldrh	r3, [r3, r2]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b299      	uxth	r1, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2256      	movs	r2, #86	; 0x56
 8009f92:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f94:	212e      	movs	r1, #46	; 0x2e
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	881a      	ldrh	r2, [r3, #0]
 8009f9a:	187b      	adds	r3, r7, r1
 8009f9c:	3a01      	subs	r2, #1
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	232e      	movs	r3, #46	; 0x2e
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1a0      	bne.n	8009eec <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b00c      	add	sp, #48	; 0x30
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	ff7fffff 	.word	0xff7fffff

08009fb8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08c      	sub	sp, #48	; 0x30
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2288      	movs	r2, #136	; 0x88
 8009fc4:	589b      	ldr	r3, [r3, r2]
 8009fc6:	2b21      	cmp	r3, #33	; 0x21
 8009fc8:	d16a      	bne.n	800a0a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fca:	232e      	movs	r3, #46	; 0x2e
 8009fcc:	18fb      	adds	r3, r7, r3
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	216a      	movs	r1, #106	; 0x6a
 8009fd2:	5a52      	ldrh	r2, [r2, r1]
 8009fd4:	801a      	strh	r2, [r3, #0]
 8009fd6:	e05e      	b.n	800a096 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2256      	movs	r2, #86	; 0x56
 8009fdc:	5a9b      	ldrh	r3, [r3, r2]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d133      	bne.n	800a04c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
 8009fee:	2301      	movs	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f383 8810 	msr	PRIMASK, r3
}
 8009ff8:	46c0      	nop			; (mov r8, r8)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4928      	ldr	r1, [pc, #160]	; (800a0a8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800a006:	400a      	ands	r2, r1
 800a008:	609a      	str	r2, [r3, #8]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f383 8810 	msr	PRIMASK, r3
}
 800a014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a016:	f3ef 8310 	mrs	r3, PRIMASK
 800a01a:	617b      	str	r3, [r7, #20]
  return(result);
 800a01c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a01e:	623b      	str	r3, [r7, #32]
 800a020:	2301      	movs	r3, #1
 800a022:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f383 8810 	msr	PRIMASK, r3
}
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2140      	movs	r1, #64	; 0x40
 800a038:	430a      	orrs	r2, r1
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f383 8810 	msr	PRIMASK, r3
}
 800a046:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800a048:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800a04a:	e029      	b.n	800a0a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	4013      	ands	r3, r2
 800a056:	d018      	beq.n	800a08a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	001a      	movs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	05d2      	lsls	r2, r2, #23
 800a06a:	0dd2      	lsrs	r2, r2, #23
 800a06c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a072:	1c9a      	adds	r2, r3, #2
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2256      	movs	r2, #86	; 0x56
 800a07c:	5a9b      	ldrh	r3, [r3, r2]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	3b01      	subs	r3, #1
 800a082:	b299      	uxth	r1, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2256      	movs	r2, #86	; 0x56
 800a088:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a08a:	212e      	movs	r1, #46	; 0x2e
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	881a      	ldrh	r2, [r3, #0]
 800a090:	187b      	adds	r3, r7, r1
 800a092:	3a01      	subs	r2, #1
 800a094:	801a      	strh	r2, [r3, #0]
 800a096:	232e      	movs	r3, #46	; 0x2e
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d19b      	bne.n	8009fd8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800a0a0:	46c0      	nop			; (mov r8, r8)
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b00c      	add	sp, #48	; 0x30
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	ff7fffff 	.word	0xff7fffff

0800a0ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f383 8810 	msr	PRIMASK, r3
}
 800a0c8:	46c0      	nop			; (mov r8, r8)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2140      	movs	r1, #64	; 0x40
 800a0d6:	438a      	bics	r2, r1
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f383 8810 	msr	PRIMASK, r3
}
 800a0e4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2288      	movs	r2, #136	; 0x88
 800a0ea:	2120      	movs	r1, #32
 800a0ec:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7fa f806 	bl	8004108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fc:	46c0      	nop			; (mov r8, r8)
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b006      	add	sp, #24
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a10c:	46c0      	nop			; (mov r8, r8)
 800a10e:	46bd      	mov	sp, r7
 800a110:	b002      	add	sp, #8
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a11c:	46c0      	nop			; (mov r8, r8)
 800a11e:	46bd      	mov	sp, r7
 800a120:	b002      	add	sp, #8
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a12c:	46c0      	nop			; (mov r8, r8)
 800a12e:	46bd      	mov	sp, r7
 800a130:	b002      	add	sp, #8
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2284      	movs	r2, #132	; 0x84
 800a140:	5c9b      	ldrb	r3, [r3, r2]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_UARTEx_DisableFifoMode+0x16>
 800a146:	2302      	movs	r3, #2
 800a148:	e027      	b.n	800a19a <HAL_UARTEx_DisableFifoMode+0x66>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2284      	movs	r2, #132	; 0x84
 800a14e:	2101      	movs	r1, #1
 800a150:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2288      	movs	r2, #136	; 0x88
 800a156:	2124      	movs	r1, #36	; 0x24
 800a158:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2101      	movs	r1, #1
 800a16e:	438a      	bics	r2, r1
 800a170:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4a0b      	ldr	r2, [pc, #44]	; (800a1a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a176:	4013      	ands	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2288      	movs	r2, #136	; 0x88
 800a18c:	2120      	movs	r1, #32
 800a18e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2284      	movs	r2, #132	; 0x84
 800a194:	2100      	movs	r1, #0
 800a196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b004      	add	sp, #16
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	dfffffff 	.word	0xdfffffff

0800a1a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2284      	movs	r2, #132	; 0x84
 800a1b6:	5c9b      	ldrb	r3, [r3, r2]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e02e      	b.n	800a21e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2284      	movs	r2, #132	; 0x84
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2288      	movs	r2, #136	; 0x88
 800a1cc:	2124      	movs	r1, #36	; 0x24
 800a1ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	08d9      	lsrs	r1, r3, #3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f000 f854 	bl	800a2ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2288      	movs	r2, #136	; 0x88
 800a210:	2120      	movs	r1, #32
 800a212:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2284      	movs	r2, #132	; 0x84
 800a218:	2100      	movs	r1, #0
 800a21a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	0018      	movs	r0, r3
 800a220:	46bd      	mov	sp, r7
 800a222:	b004      	add	sp, #16
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2284      	movs	r2, #132	; 0x84
 800a236:	5c9b      	ldrb	r3, [r3, r2]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e02f      	b.n	800a2a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2284      	movs	r2, #132	; 0x84
 800a244:	2101      	movs	r1, #1
 800a246:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2288      	movs	r2, #136	; 0x88
 800a24c:	2124      	movs	r1, #36	; 0x24
 800a24e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2101      	movs	r1, #1
 800a264:	438a      	bics	r2, r1
 800a266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	4a0e      	ldr	r2, [pc, #56]	; (800a2a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a270:	4013      	ands	r3, r2
 800a272:	0019      	movs	r1, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	0018      	movs	r0, r3
 800a282:	f000 f813 	bl	800a2ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2288      	movs	r2, #136	; 0x88
 800a292:	2120      	movs	r1, #32
 800a294:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2284      	movs	r2, #132	; 0x84
 800a29a:	2100      	movs	r1, #0
 800a29c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b004      	add	sp, #16
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	f1ffffff 	.word	0xf1ffffff

0800a2ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d108      	bne.n	800a2ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	226a      	movs	r2, #106	; 0x6a
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2268      	movs	r2, #104	; 0x68
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2cc:	e043      	b.n	800a356 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2ce:	260f      	movs	r6, #15
 800a2d0:	19bb      	adds	r3, r7, r6
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2d6:	200e      	movs	r0, #14
 800a2d8:	183b      	adds	r3, r7, r0
 800a2da:	2208      	movs	r2, #8
 800a2dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	0e5b      	lsrs	r3, r3, #25
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	240d      	movs	r4, #13
 800a2ea:	193b      	adds	r3, r7, r4
 800a2ec:	2107      	movs	r1, #7
 800a2ee:	400a      	ands	r2, r1
 800a2f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	0f5b      	lsrs	r3, r3, #29
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	250c      	movs	r5, #12
 800a2fe:	197b      	adds	r3, r7, r5
 800a300:	2107      	movs	r1, #7
 800a302:	400a      	ands	r2, r1
 800a304:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a306:	183b      	adds	r3, r7, r0
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	197a      	adds	r2, r7, r5
 800a30c:	7812      	ldrb	r2, [r2, #0]
 800a30e:	4914      	ldr	r1, [pc, #80]	; (800a360 <UARTEx_SetNbDataToProcess+0xb4>)
 800a310:	5c8a      	ldrb	r2, [r1, r2]
 800a312:	435a      	muls	r2, r3
 800a314:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a316:	197b      	adds	r3, r7, r5
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	4a12      	ldr	r2, [pc, #72]	; (800a364 <UARTEx_SetNbDataToProcess+0xb8>)
 800a31c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a31e:	0019      	movs	r1, r3
 800a320:	f7f5 ff78 	bl	8000214 <__divsi3>
 800a324:	0003      	movs	r3, r0
 800a326:	b299      	uxth	r1, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	226a      	movs	r2, #106	; 0x6a
 800a32c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a32e:	19bb      	adds	r3, r7, r6
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	193a      	adds	r2, r7, r4
 800a334:	7812      	ldrb	r2, [r2, #0]
 800a336:	490a      	ldr	r1, [pc, #40]	; (800a360 <UARTEx_SetNbDataToProcess+0xb4>)
 800a338:	5c8a      	ldrb	r2, [r1, r2]
 800a33a:	435a      	muls	r2, r3
 800a33c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a33e:	193b      	adds	r3, r7, r4
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	4a08      	ldr	r2, [pc, #32]	; (800a364 <UARTEx_SetNbDataToProcess+0xb8>)
 800a344:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a346:	0019      	movs	r1, r3
 800a348:	f7f5 ff64 	bl	8000214 <__divsi3>
 800a34c:	0003      	movs	r3, r0
 800a34e:	b299      	uxth	r1, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2268      	movs	r2, #104	; 0x68
 800a354:	5299      	strh	r1, [r3, r2]
}
 800a356:	46c0      	nop			; (mov r8, r8)
 800a358:	46bd      	mov	sp, r7
 800a35a:	b005      	add	sp, #20
 800a35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	0800b48c 	.word	0x0800b48c
 800a364:	0800b494 	.word	0x0800b494

0800a368 <__errno>:
 800a368:	4b01      	ldr	r3, [pc, #4]	; (800a370 <__errno+0x8>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	4770      	bx	lr
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	20000010 	.word	0x20000010

0800a374 <__libc_init_array>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	2600      	movs	r6, #0
 800a378:	4d0c      	ldr	r5, [pc, #48]	; (800a3ac <__libc_init_array+0x38>)
 800a37a:	4c0d      	ldr	r4, [pc, #52]	; (800a3b0 <__libc_init_array+0x3c>)
 800a37c:	1b64      	subs	r4, r4, r5
 800a37e:	10a4      	asrs	r4, r4, #2
 800a380:	42a6      	cmp	r6, r4
 800a382:	d109      	bne.n	800a398 <__libc_init_array+0x24>
 800a384:	2600      	movs	r6, #0
 800a386:	f000 ffaf 	bl	800b2e8 <_init>
 800a38a:	4d0a      	ldr	r5, [pc, #40]	; (800a3b4 <__libc_init_array+0x40>)
 800a38c:	4c0a      	ldr	r4, [pc, #40]	; (800a3b8 <__libc_init_array+0x44>)
 800a38e:	1b64      	subs	r4, r4, r5
 800a390:	10a4      	asrs	r4, r4, #2
 800a392:	42a6      	cmp	r6, r4
 800a394:	d105      	bne.n	800a3a2 <__libc_init_array+0x2e>
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	00b3      	lsls	r3, r6, #2
 800a39a:	58eb      	ldr	r3, [r5, r3]
 800a39c:	4798      	blx	r3
 800a39e:	3601      	adds	r6, #1
 800a3a0:	e7ee      	b.n	800a380 <__libc_init_array+0xc>
 800a3a2:	00b3      	lsls	r3, r6, #2
 800a3a4:	58eb      	ldr	r3, [r5, r3]
 800a3a6:	4798      	blx	r3
 800a3a8:	3601      	adds	r6, #1
 800a3aa:	e7f2      	b.n	800a392 <__libc_init_array+0x1e>
 800a3ac:	0800b88c 	.word	0x0800b88c
 800a3b0:	0800b88c 	.word	0x0800b88c
 800a3b4:	0800b88c 	.word	0x0800b88c
 800a3b8:	0800b890 	.word	0x0800b890

0800a3bc <memcpy>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d100      	bne.n	800a3c6 <memcpy+0xa>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	5ccc      	ldrb	r4, [r1, r3]
 800a3c8:	54c4      	strb	r4, [r0, r3]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	e7f8      	b.n	800a3c0 <memcpy+0x4>

0800a3ce <memset>:
 800a3ce:	0003      	movs	r3, r0
 800a3d0:	1882      	adds	r2, r0, r2
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d100      	bne.n	800a3d8 <memset+0xa>
 800a3d6:	4770      	bx	lr
 800a3d8:	7019      	strb	r1, [r3, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	e7f9      	b.n	800a3d2 <memset+0x4>
	...

0800a3e0 <atanf>:
 800a3e0:	23a1      	movs	r3, #161	; 0xa1
 800a3e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e4:	0045      	lsls	r5, r0, #1
 800a3e6:	1c04      	adds	r4, r0, #0
 800a3e8:	9001      	str	r0, [sp, #4]
 800a3ea:	086d      	lsrs	r5, r5, #1
 800a3ec:	05db      	lsls	r3, r3, #23
 800a3ee:	429d      	cmp	r5, r3
 800a3f0:	db0f      	blt.n	800a412 <atanf+0x32>
 800a3f2:	23ff      	movs	r3, #255	; 0xff
 800a3f4:	05db      	lsls	r3, r3, #23
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	dd04      	ble.n	800a404 <atanf+0x24>
 800a3fa:	1c01      	adds	r1, r0, #0
 800a3fc:	f7f6 f848 	bl	8000490 <__aeabi_fadd>
 800a400:	1c04      	adds	r4, r0, #0
 800a402:	e004      	b.n	800a40e <atanf+0x2e>
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd00      	ble.n	800a40c <atanf+0x2c>
 800a40a:	e0cc      	b.n	800a5a6 <atanf+0x1c6>
 800a40c:	4c67      	ldr	r4, [pc, #412]	; (800a5ac <atanf+0x1cc>)
 800a40e:	1c20      	adds	r0, r4, #0
 800a410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a412:	4b67      	ldr	r3, [pc, #412]	; (800a5b0 <atanf+0x1d0>)
 800a414:	429d      	cmp	r5, r3
 800a416:	dc0f      	bgt.n	800a438 <atanf+0x58>
 800a418:	23c4      	movs	r3, #196	; 0xc4
 800a41a:	059b      	lsls	r3, r3, #22
 800a41c:	429d      	cmp	r5, r3
 800a41e:	da08      	bge.n	800a432 <atanf+0x52>
 800a420:	4964      	ldr	r1, [pc, #400]	; (800a5b4 <atanf+0x1d4>)
 800a422:	f7f6 f835 	bl	8000490 <__aeabi_fadd>
 800a426:	21fe      	movs	r1, #254	; 0xfe
 800a428:	0589      	lsls	r1, r1, #22
 800a42a:	f7f6 f805 	bl	8000438 <__aeabi_fcmpgt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d1ed      	bne.n	800a40e <atanf+0x2e>
 800a432:	2601      	movs	r6, #1
 800a434:	4276      	negs	r6, r6
 800a436:	e01b      	b.n	800a470 <atanf+0x90>
 800a438:	f000 f916 	bl	800a668 <fabsf>
 800a43c:	4b5e      	ldr	r3, [pc, #376]	; (800a5b8 <atanf+0x1d8>)
 800a43e:	1c04      	adds	r4, r0, #0
 800a440:	429d      	cmp	r5, r3
 800a442:	dc7b      	bgt.n	800a53c <atanf+0x15c>
 800a444:	4b5d      	ldr	r3, [pc, #372]	; (800a5bc <atanf+0x1dc>)
 800a446:	429d      	cmp	r5, r3
 800a448:	dc67      	bgt.n	800a51a <atanf+0x13a>
 800a44a:	1c01      	adds	r1, r0, #0
 800a44c:	f7f6 f820 	bl	8000490 <__aeabi_fadd>
 800a450:	21fe      	movs	r1, #254	; 0xfe
 800a452:	0589      	lsls	r1, r1, #22
 800a454:	f7f6 fca8 	bl	8000da8 <__aeabi_fsub>
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	1c05      	adds	r5, r0, #0
 800a45c:	05c9      	lsls	r1, r1, #23
 800a45e:	1c20      	adds	r0, r4, #0
 800a460:	f7f6 f816 	bl	8000490 <__aeabi_fadd>
 800a464:	1c01      	adds	r1, r0, #0
 800a466:	1c28      	adds	r0, r5, #0
 800a468:	f7f6 f9b0 	bl	80007cc <__aeabi_fdiv>
 800a46c:	2600      	movs	r6, #0
 800a46e:	1c04      	adds	r4, r0, #0
 800a470:	1c21      	adds	r1, r4, #0
 800a472:	1c20      	adds	r0, r4, #0
 800a474:	f7f6 fb72 	bl	8000b5c <__aeabi_fmul>
 800a478:	1c01      	adds	r1, r0, #0
 800a47a:	1c07      	adds	r7, r0, #0
 800a47c:	f7f6 fb6e 	bl	8000b5c <__aeabi_fmul>
 800a480:	494f      	ldr	r1, [pc, #316]	; (800a5c0 <atanf+0x1e0>)
 800a482:	1c05      	adds	r5, r0, #0
 800a484:	f7f6 fb6a 	bl	8000b5c <__aeabi_fmul>
 800a488:	494e      	ldr	r1, [pc, #312]	; (800a5c4 <atanf+0x1e4>)
 800a48a:	f7f6 f801 	bl	8000490 <__aeabi_fadd>
 800a48e:	1c29      	adds	r1, r5, #0
 800a490:	f7f6 fb64 	bl	8000b5c <__aeabi_fmul>
 800a494:	494c      	ldr	r1, [pc, #304]	; (800a5c8 <atanf+0x1e8>)
 800a496:	f7f5 fffb 	bl	8000490 <__aeabi_fadd>
 800a49a:	1c29      	adds	r1, r5, #0
 800a49c:	f7f6 fb5e 	bl	8000b5c <__aeabi_fmul>
 800a4a0:	494a      	ldr	r1, [pc, #296]	; (800a5cc <atanf+0x1ec>)
 800a4a2:	f7f5 fff5 	bl	8000490 <__aeabi_fadd>
 800a4a6:	1c29      	adds	r1, r5, #0
 800a4a8:	f7f6 fb58 	bl	8000b5c <__aeabi_fmul>
 800a4ac:	4948      	ldr	r1, [pc, #288]	; (800a5d0 <atanf+0x1f0>)
 800a4ae:	f7f5 ffef 	bl	8000490 <__aeabi_fadd>
 800a4b2:	1c29      	adds	r1, r5, #0
 800a4b4:	f7f6 fb52 	bl	8000b5c <__aeabi_fmul>
 800a4b8:	4946      	ldr	r1, [pc, #280]	; (800a5d4 <atanf+0x1f4>)
 800a4ba:	f7f5 ffe9 	bl	8000490 <__aeabi_fadd>
 800a4be:	1c39      	adds	r1, r7, #0
 800a4c0:	f7f6 fb4c 	bl	8000b5c <__aeabi_fmul>
 800a4c4:	4944      	ldr	r1, [pc, #272]	; (800a5d8 <atanf+0x1f8>)
 800a4c6:	1c07      	adds	r7, r0, #0
 800a4c8:	1c28      	adds	r0, r5, #0
 800a4ca:	f7f6 fb47 	bl	8000b5c <__aeabi_fmul>
 800a4ce:	4943      	ldr	r1, [pc, #268]	; (800a5dc <atanf+0x1fc>)
 800a4d0:	f7f6 fc6a 	bl	8000da8 <__aeabi_fsub>
 800a4d4:	1c29      	adds	r1, r5, #0
 800a4d6:	f7f6 fb41 	bl	8000b5c <__aeabi_fmul>
 800a4da:	4941      	ldr	r1, [pc, #260]	; (800a5e0 <atanf+0x200>)
 800a4dc:	f7f6 fc64 	bl	8000da8 <__aeabi_fsub>
 800a4e0:	1c29      	adds	r1, r5, #0
 800a4e2:	f7f6 fb3b 	bl	8000b5c <__aeabi_fmul>
 800a4e6:	493f      	ldr	r1, [pc, #252]	; (800a5e4 <atanf+0x204>)
 800a4e8:	f7f6 fc5e 	bl	8000da8 <__aeabi_fsub>
 800a4ec:	1c29      	adds	r1, r5, #0
 800a4ee:	f7f6 fb35 	bl	8000b5c <__aeabi_fmul>
 800a4f2:	493d      	ldr	r1, [pc, #244]	; (800a5e8 <atanf+0x208>)
 800a4f4:	f7f6 fc58 	bl	8000da8 <__aeabi_fsub>
 800a4f8:	1c29      	adds	r1, r5, #0
 800a4fa:	f7f6 fb2f 	bl	8000b5c <__aeabi_fmul>
 800a4fe:	1c01      	adds	r1, r0, #0
 800a500:	1c38      	adds	r0, r7, #0
 800a502:	f7f5 ffc5 	bl	8000490 <__aeabi_fadd>
 800a506:	1c21      	adds	r1, r4, #0
 800a508:	f7f6 fb28 	bl	8000b5c <__aeabi_fmul>
 800a50c:	1c73      	adds	r3, r6, #1
 800a50e:	d134      	bne.n	800a57a <atanf+0x19a>
 800a510:	1c01      	adds	r1, r0, #0
 800a512:	1c20      	adds	r0, r4, #0
 800a514:	f7f6 fc48 	bl	8000da8 <__aeabi_fsub>
 800a518:	e772      	b.n	800a400 <atanf+0x20>
 800a51a:	21fe      	movs	r1, #254	; 0xfe
 800a51c:	0589      	lsls	r1, r1, #22
 800a51e:	f7f6 fc43 	bl	8000da8 <__aeabi_fsub>
 800a522:	21fe      	movs	r1, #254	; 0xfe
 800a524:	1c05      	adds	r5, r0, #0
 800a526:	0589      	lsls	r1, r1, #22
 800a528:	1c20      	adds	r0, r4, #0
 800a52a:	f7f5 ffb1 	bl	8000490 <__aeabi_fadd>
 800a52e:	1c01      	adds	r1, r0, #0
 800a530:	1c28      	adds	r0, r5, #0
 800a532:	f7f6 f94b 	bl	80007cc <__aeabi_fdiv>
 800a536:	2601      	movs	r6, #1
 800a538:	1c04      	adds	r4, r0, #0
 800a53a:	e799      	b.n	800a470 <atanf+0x90>
 800a53c:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <atanf+0x20c>)
 800a53e:	429d      	cmp	r5, r3
 800a540:	dc14      	bgt.n	800a56c <atanf+0x18c>
 800a542:	21ff      	movs	r1, #255	; 0xff
 800a544:	0589      	lsls	r1, r1, #22
 800a546:	f7f6 fc2f 	bl	8000da8 <__aeabi_fsub>
 800a54a:	21ff      	movs	r1, #255	; 0xff
 800a54c:	1c05      	adds	r5, r0, #0
 800a54e:	0589      	lsls	r1, r1, #22
 800a550:	1c20      	adds	r0, r4, #0
 800a552:	f7f6 fb03 	bl	8000b5c <__aeabi_fmul>
 800a556:	21fe      	movs	r1, #254	; 0xfe
 800a558:	0589      	lsls	r1, r1, #22
 800a55a:	f7f5 ff99 	bl	8000490 <__aeabi_fadd>
 800a55e:	1c01      	adds	r1, r0, #0
 800a560:	1c28      	adds	r0, r5, #0
 800a562:	f7f6 f933 	bl	80007cc <__aeabi_fdiv>
 800a566:	2602      	movs	r6, #2
 800a568:	1c04      	adds	r4, r0, #0
 800a56a:	e781      	b.n	800a470 <atanf+0x90>
 800a56c:	1c01      	adds	r1, r0, #0
 800a56e:	4820      	ldr	r0, [pc, #128]	; (800a5f0 <atanf+0x210>)
 800a570:	f7f6 f92c 	bl	80007cc <__aeabi_fdiv>
 800a574:	2603      	movs	r6, #3
 800a576:	1c04      	adds	r4, r0, #0
 800a578:	e77a      	b.n	800a470 <atanf+0x90>
 800a57a:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <atanf+0x214>)
 800a57c:	00b6      	lsls	r6, r6, #2
 800a57e:	58f1      	ldr	r1, [r6, r3]
 800a580:	f7f6 fc12 	bl	8000da8 <__aeabi_fsub>
 800a584:	1c21      	adds	r1, r4, #0
 800a586:	f7f6 fc0f 	bl	8000da8 <__aeabi_fsub>
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <atanf+0x218>)
 800a58c:	1c01      	adds	r1, r0, #0
 800a58e:	58f0      	ldr	r0, [r6, r3]
 800a590:	f7f6 fc0a 	bl	8000da8 <__aeabi_fsub>
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	1c04      	adds	r4, r0, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db00      	blt.n	800a59e <atanf+0x1be>
 800a59c:	e737      	b.n	800a40e <atanf+0x2e>
 800a59e:	2380      	movs	r3, #128	; 0x80
 800a5a0:	061b      	lsls	r3, r3, #24
 800a5a2:	18c4      	adds	r4, r0, r3
 800a5a4:	e733      	b.n	800a40e <atanf+0x2e>
 800a5a6:	4c15      	ldr	r4, [pc, #84]	; (800a5fc <atanf+0x21c>)
 800a5a8:	e731      	b.n	800a40e <atanf+0x2e>
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	bfc90fdb 	.word	0xbfc90fdb
 800a5b0:	3edfffff 	.word	0x3edfffff
 800a5b4:	7149f2ca 	.word	0x7149f2ca
 800a5b8:	3f97ffff 	.word	0x3f97ffff
 800a5bc:	3f2fffff 	.word	0x3f2fffff
 800a5c0:	3c8569d7 	.word	0x3c8569d7
 800a5c4:	3d4bda59 	.word	0x3d4bda59
 800a5c8:	3d886b35 	.word	0x3d886b35
 800a5cc:	3dba2e6e 	.word	0x3dba2e6e
 800a5d0:	3e124925 	.word	0x3e124925
 800a5d4:	3eaaaaab 	.word	0x3eaaaaab
 800a5d8:	bd15a221 	.word	0xbd15a221
 800a5dc:	3d6ef16b 	.word	0x3d6ef16b
 800a5e0:	3d9d8795 	.word	0x3d9d8795
 800a5e4:	3de38e38 	.word	0x3de38e38
 800a5e8:	3e4ccccd 	.word	0x3e4ccccd
 800a5ec:	401bffff 	.word	0x401bffff
 800a5f0:	bf800000 	.word	0xbf800000
 800a5f4:	0800b4ac 	.word	0x0800b4ac
 800a5f8:	0800b49c 	.word	0x0800b49c
 800a5fc:	3fc90fdb 	.word	0x3fc90fdb

0800a600 <cosf>:
 800a600:	b507      	push	{r0, r1, r2, lr}
 800a602:	4a18      	ldr	r2, [pc, #96]	; (800a664 <cosf+0x64>)
 800a604:	0043      	lsls	r3, r0, #1
 800a606:	2100      	movs	r1, #0
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	4293      	cmp	r3, r2
 800a60c:	dd14      	ble.n	800a638 <cosf+0x38>
 800a60e:	22ff      	movs	r2, #255	; 0xff
 800a610:	05d2      	lsls	r2, r2, #23
 800a612:	4293      	cmp	r3, r2
 800a614:	db03      	blt.n	800a61e <cosf+0x1e>
 800a616:	1c01      	adds	r1, r0, #0
 800a618:	f7f6 fbc6 	bl	8000da8 <__aeabi_fsub>
 800a61c:	bd0e      	pop	{r1, r2, r3, pc}
 800a61e:	4669      	mov	r1, sp
 800a620:	f000 f87a 	bl	800a718 <__ieee754_rem_pio2f>
 800a624:	2203      	movs	r2, #3
 800a626:	4002      	ands	r2, r0
 800a628:	2a01      	cmp	r2, #1
 800a62a:	d008      	beq.n	800a63e <cosf+0x3e>
 800a62c:	2a02      	cmp	r2, #2
 800a62e:	d00e      	beq.n	800a64e <cosf+0x4e>
 800a630:	2a00      	cmp	r2, #0
 800a632:	d111      	bne.n	800a658 <cosf+0x58>
 800a634:	9901      	ldr	r1, [sp, #4]
 800a636:	9800      	ldr	r0, [sp, #0]
 800a638:	f000 fa22 	bl	800aa80 <__kernel_cosf>
 800a63c:	e7ee      	b.n	800a61c <cosf+0x1c>
 800a63e:	9901      	ldr	r1, [sp, #4]
 800a640:	9800      	ldr	r0, [sp, #0]
 800a642:	f000 fd45 	bl	800b0d0 <__kernel_sinf>
 800a646:	2380      	movs	r3, #128	; 0x80
 800a648:	061b      	lsls	r3, r3, #24
 800a64a:	18c0      	adds	r0, r0, r3
 800a64c:	e7e6      	b.n	800a61c <cosf+0x1c>
 800a64e:	9901      	ldr	r1, [sp, #4]
 800a650:	9800      	ldr	r0, [sp, #0]
 800a652:	f000 fa15 	bl	800aa80 <__kernel_cosf>
 800a656:	e7f6      	b.n	800a646 <cosf+0x46>
 800a658:	2201      	movs	r2, #1
 800a65a:	9901      	ldr	r1, [sp, #4]
 800a65c:	9800      	ldr	r0, [sp, #0]
 800a65e:	f000 fd37 	bl	800b0d0 <__kernel_sinf>
 800a662:	e7db      	b.n	800a61c <cosf+0x1c>
 800a664:	3f490fd8 	.word	0x3f490fd8

0800a668 <fabsf>:
 800a668:	0040      	lsls	r0, r0, #1
 800a66a:	0840      	lsrs	r0, r0, #1
 800a66c:	4770      	bx	lr
	...

0800a670 <sinf>:
 800a670:	b507      	push	{r0, r1, r2, lr}
 800a672:	4a1a      	ldr	r2, [pc, #104]	; (800a6dc <sinf+0x6c>)
 800a674:	0043      	lsls	r3, r0, #1
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	4293      	cmp	r3, r2
 800a67a:	dc04      	bgt.n	800a686 <sinf+0x16>
 800a67c:	2200      	movs	r2, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	f000 fd26 	bl	800b0d0 <__kernel_sinf>
 800a684:	e006      	b.n	800a694 <sinf+0x24>
 800a686:	22ff      	movs	r2, #255	; 0xff
 800a688:	05d2      	lsls	r2, r2, #23
 800a68a:	4293      	cmp	r3, r2
 800a68c:	db03      	blt.n	800a696 <sinf+0x26>
 800a68e:	1c01      	adds	r1, r0, #0
 800a690:	f7f6 fb8a 	bl	8000da8 <__aeabi_fsub>
 800a694:	bd0e      	pop	{r1, r2, r3, pc}
 800a696:	4669      	mov	r1, sp
 800a698:	f000 f83e 	bl	800a718 <__ieee754_rem_pio2f>
 800a69c:	2303      	movs	r3, #3
 800a69e:	4018      	ands	r0, r3
 800a6a0:	2801      	cmp	r0, #1
 800a6a2:	d007      	beq.n	800a6b4 <sinf+0x44>
 800a6a4:	2802      	cmp	r0, #2
 800a6a6:	d00a      	beq.n	800a6be <sinf+0x4e>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d111      	bne.n	800a6d0 <sinf+0x60>
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	9901      	ldr	r1, [sp, #4]
 800a6b0:	9800      	ldr	r0, [sp, #0]
 800a6b2:	e7e5      	b.n	800a680 <sinf+0x10>
 800a6b4:	9901      	ldr	r1, [sp, #4]
 800a6b6:	9800      	ldr	r0, [sp, #0]
 800a6b8:	f000 f9e2 	bl	800aa80 <__kernel_cosf>
 800a6bc:	e7ea      	b.n	800a694 <sinf+0x24>
 800a6be:	2201      	movs	r2, #1
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	9800      	ldr	r0, [sp, #0]
 800a6c4:	f000 fd04 	bl	800b0d0 <__kernel_sinf>
 800a6c8:	2380      	movs	r3, #128	; 0x80
 800a6ca:	061b      	lsls	r3, r3, #24
 800a6cc:	18c0      	adds	r0, r0, r3
 800a6ce:	e7e1      	b.n	800a694 <sinf+0x24>
 800a6d0:	9901      	ldr	r1, [sp, #4]
 800a6d2:	9800      	ldr	r0, [sp, #0]
 800a6d4:	f000 f9d4 	bl	800aa80 <__kernel_cosf>
 800a6d8:	e7f6      	b.n	800a6c8 <sinf+0x58>
 800a6da:	46c0      	nop			; (mov r8, r8)
 800a6dc:	3f490fd8 	.word	0x3f490fd8

0800a6e0 <sqrtf>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	1c05      	adds	r5, r0, #0
 800a6e4:	f000 f974 	bl	800a9d0 <__ieee754_sqrtf>
 800a6e8:	1c29      	adds	r1, r5, #0
 800a6ea:	1c04      	adds	r4, r0, #0
 800a6ec:	1c28      	adds	r0, r5, #0
 800a6ee:	f7f6 fd09 	bl	8001104 <__aeabi_fcmpun>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d10e      	bne.n	800a714 <sqrtf+0x34>
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	1c28      	adds	r0, r5, #0
 800a6fa:	f7f5 fe89 	bl	8000410 <__aeabi_fcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d008      	beq.n	800a714 <sqrtf+0x34>
 800a702:	f7ff fe31 	bl	800a368 <__errno>
 800a706:	2321      	movs	r3, #33	; 0x21
 800a708:	2100      	movs	r1, #0
 800a70a:	6003      	str	r3, [r0, #0]
 800a70c:	1c08      	adds	r0, r1, #0
 800a70e:	f7f6 f85d 	bl	80007cc <__aeabi_fdiv>
 800a712:	1c04      	adds	r4, r0, #0
 800a714:	1c20      	adds	r0, r4, #0
 800a716:	bd70      	pop	{r4, r5, r6, pc}

0800a718 <__ieee754_rem_pio2f>:
 800a718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a71a:	4ba0      	ldr	r3, [pc, #640]	; (800a99c <__ieee754_rem_pio2f+0x284>)
 800a71c:	b08b      	sub	sp, #44	; 0x2c
 800a71e:	0045      	lsls	r5, r0, #1
 800a720:	000c      	movs	r4, r1
 800a722:	9005      	str	r0, [sp, #20]
 800a724:	086d      	lsrs	r5, r5, #1
 800a726:	429d      	cmp	r5, r3
 800a728:	dc04      	bgt.n	800a734 <__ieee754_rem_pio2f+0x1c>
 800a72a:	2300      	movs	r3, #0
 800a72c:	6008      	str	r0, [r1, #0]
 800a72e:	604b      	str	r3, [r1, #4]
 800a730:	2700      	movs	r7, #0
 800a732:	e01a      	b.n	800a76a <__ieee754_rem_pio2f+0x52>
 800a734:	4b9a      	ldr	r3, [pc, #616]	; (800a9a0 <__ieee754_rem_pio2f+0x288>)
 800a736:	429d      	cmp	r5, r3
 800a738:	dc4a      	bgt.n	800a7d0 <__ieee754_rem_pio2f+0xb8>
 800a73a:	230f      	movs	r3, #15
 800a73c:	4e99      	ldr	r6, [pc, #612]	; (800a9a4 <__ieee754_rem_pio2f+0x28c>)
 800a73e:	499a      	ldr	r1, [pc, #616]	; (800a9a8 <__ieee754_rem_pio2f+0x290>)
 800a740:	439d      	bics	r5, r3
 800a742:	2800      	cmp	r0, #0
 800a744:	dd22      	ble.n	800a78c <__ieee754_rem_pio2f+0x74>
 800a746:	f7f6 fb2f 	bl	8000da8 <__aeabi_fsub>
 800a74a:	1c07      	adds	r7, r0, #0
 800a74c:	42b5      	cmp	r5, r6
 800a74e:	d00f      	beq.n	800a770 <__ieee754_rem_pio2f+0x58>
 800a750:	4996      	ldr	r1, [pc, #600]	; (800a9ac <__ieee754_rem_pio2f+0x294>)
 800a752:	f7f6 fb29 	bl	8000da8 <__aeabi_fsub>
 800a756:	1c01      	adds	r1, r0, #0
 800a758:	6020      	str	r0, [r4, #0]
 800a75a:	1c38      	adds	r0, r7, #0
 800a75c:	f7f6 fb24 	bl	8000da8 <__aeabi_fsub>
 800a760:	4992      	ldr	r1, [pc, #584]	; (800a9ac <__ieee754_rem_pio2f+0x294>)
 800a762:	f7f6 fb21 	bl	8000da8 <__aeabi_fsub>
 800a766:	2701      	movs	r7, #1
 800a768:	6060      	str	r0, [r4, #4]
 800a76a:	0038      	movs	r0, r7
 800a76c:	b00b      	add	sp, #44	; 0x2c
 800a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a770:	498f      	ldr	r1, [pc, #572]	; (800a9b0 <__ieee754_rem_pio2f+0x298>)
 800a772:	f7f6 fb19 	bl	8000da8 <__aeabi_fsub>
 800a776:	498f      	ldr	r1, [pc, #572]	; (800a9b4 <__ieee754_rem_pio2f+0x29c>)
 800a778:	1c05      	adds	r5, r0, #0
 800a77a:	f7f6 fb15 	bl	8000da8 <__aeabi_fsub>
 800a77e:	1c01      	adds	r1, r0, #0
 800a780:	6020      	str	r0, [r4, #0]
 800a782:	1c28      	adds	r0, r5, #0
 800a784:	f7f6 fb10 	bl	8000da8 <__aeabi_fsub>
 800a788:	498a      	ldr	r1, [pc, #552]	; (800a9b4 <__ieee754_rem_pio2f+0x29c>)
 800a78a:	e7ea      	b.n	800a762 <__ieee754_rem_pio2f+0x4a>
 800a78c:	f7f5 fe80 	bl	8000490 <__aeabi_fadd>
 800a790:	1c07      	adds	r7, r0, #0
 800a792:	42b5      	cmp	r5, r6
 800a794:	d00e      	beq.n	800a7b4 <__ieee754_rem_pio2f+0x9c>
 800a796:	4985      	ldr	r1, [pc, #532]	; (800a9ac <__ieee754_rem_pio2f+0x294>)
 800a798:	f7f5 fe7a 	bl	8000490 <__aeabi_fadd>
 800a79c:	1c01      	adds	r1, r0, #0
 800a79e:	6020      	str	r0, [r4, #0]
 800a7a0:	1c38      	adds	r0, r7, #0
 800a7a2:	f7f6 fb01 	bl	8000da8 <__aeabi_fsub>
 800a7a6:	4981      	ldr	r1, [pc, #516]	; (800a9ac <__ieee754_rem_pio2f+0x294>)
 800a7a8:	f7f5 fe72 	bl	8000490 <__aeabi_fadd>
 800a7ac:	2701      	movs	r7, #1
 800a7ae:	6060      	str	r0, [r4, #4]
 800a7b0:	427f      	negs	r7, r7
 800a7b2:	e7da      	b.n	800a76a <__ieee754_rem_pio2f+0x52>
 800a7b4:	497e      	ldr	r1, [pc, #504]	; (800a9b0 <__ieee754_rem_pio2f+0x298>)
 800a7b6:	f7f5 fe6b 	bl	8000490 <__aeabi_fadd>
 800a7ba:	497e      	ldr	r1, [pc, #504]	; (800a9b4 <__ieee754_rem_pio2f+0x29c>)
 800a7bc:	1c05      	adds	r5, r0, #0
 800a7be:	f7f5 fe67 	bl	8000490 <__aeabi_fadd>
 800a7c2:	1c01      	adds	r1, r0, #0
 800a7c4:	6020      	str	r0, [r4, #0]
 800a7c6:	1c28      	adds	r0, r5, #0
 800a7c8:	f7f6 faee 	bl	8000da8 <__aeabi_fsub>
 800a7cc:	4979      	ldr	r1, [pc, #484]	; (800a9b4 <__ieee754_rem_pio2f+0x29c>)
 800a7ce:	e7eb      	b.n	800a7a8 <__ieee754_rem_pio2f+0x90>
 800a7d0:	4b79      	ldr	r3, [pc, #484]	; (800a9b8 <__ieee754_rem_pio2f+0x2a0>)
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	dd00      	ble.n	800a7d8 <__ieee754_rem_pio2f+0xc0>
 800a7d6:	e091      	b.n	800a8fc <__ieee754_rem_pio2f+0x1e4>
 800a7d8:	f7ff ff46 	bl	800a668 <fabsf>
 800a7dc:	4977      	ldr	r1, [pc, #476]	; (800a9bc <__ieee754_rem_pio2f+0x2a4>)
 800a7de:	1c06      	adds	r6, r0, #0
 800a7e0:	f7f6 f9bc 	bl	8000b5c <__aeabi_fmul>
 800a7e4:	21fc      	movs	r1, #252	; 0xfc
 800a7e6:	0589      	lsls	r1, r1, #22
 800a7e8:	f7f5 fe52 	bl	8000490 <__aeabi_fadd>
 800a7ec:	f7f6 fca0 	bl	8001130 <__aeabi_f2iz>
 800a7f0:	0007      	movs	r7, r0
 800a7f2:	f7f6 fcbd 	bl	8001170 <__aeabi_i2f>
 800a7f6:	496c      	ldr	r1, [pc, #432]	; (800a9a8 <__ieee754_rem_pio2f+0x290>)
 800a7f8:	9003      	str	r0, [sp, #12]
 800a7fa:	f7f6 f9af 	bl	8000b5c <__aeabi_fmul>
 800a7fe:	1c01      	adds	r1, r0, #0
 800a800:	1c30      	adds	r0, r6, #0
 800a802:	f7f6 fad1 	bl	8000da8 <__aeabi_fsub>
 800a806:	4969      	ldr	r1, [pc, #420]	; (800a9ac <__ieee754_rem_pio2f+0x294>)
 800a808:	9002      	str	r0, [sp, #8]
 800a80a:	9803      	ldr	r0, [sp, #12]
 800a80c:	f7f6 f9a6 	bl	8000b5c <__aeabi_fmul>
 800a810:	1c06      	adds	r6, r0, #0
 800a812:	2f1f      	cmp	r7, #31
 800a814:	dc0d      	bgt.n	800a832 <__ieee754_rem_pio2f+0x11a>
 800a816:	23ff      	movs	r3, #255	; 0xff
 800a818:	002a      	movs	r2, r5
 800a81a:	4969      	ldr	r1, [pc, #420]	; (800a9c0 <__ieee754_rem_pio2f+0x2a8>)
 800a81c:	439a      	bics	r2, r3
 800a81e:	1e7b      	subs	r3, r7, #1
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	585b      	ldr	r3, [r3, r1]
 800a824:	429a      	cmp	r2, r3
 800a826:	d004      	beq.n	800a832 <__ieee754_rem_pio2f+0x11a>
 800a828:	9802      	ldr	r0, [sp, #8]
 800a82a:	1c31      	adds	r1, r6, #0
 800a82c:	f7f6 fabc 	bl	8000da8 <__aeabi_fsub>
 800a830:	e00c      	b.n	800a84c <__ieee754_rem_pio2f+0x134>
 800a832:	9802      	ldr	r0, [sp, #8]
 800a834:	1c31      	adds	r1, r6, #0
 800a836:	f7f6 fab7 	bl	8000da8 <__aeabi_fsub>
 800a83a:	22ff      	movs	r2, #255	; 0xff
 800a83c:	15eb      	asrs	r3, r5, #23
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	0dc3      	lsrs	r3, r0, #23
 800a842:	4013      	ands	r3, r2
 800a844:	9a04      	ldr	r2, [sp, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b08      	cmp	r3, #8
 800a84a:	dc01      	bgt.n	800a850 <__ieee754_rem_pio2f+0x138>
 800a84c:	6020      	str	r0, [r4, #0]
 800a84e:	e026      	b.n	800a89e <__ieee754_rem_pio2f+0x186>
 800a850:	4957      	ldr	r1, [pc, #348]	; (800a9b0 <__ieee754_rem_pio2f+0x298>)
 800a852:	9803      	ldr	r0, [sp, #12]
 800a854:	f7f6 f982 	bl	8000b5c <__aeabi_fmul>
 800a858:	1c06      	adds	r6, r0, #0
 800a85a:	1c01      	adds	r1, r0, #0
 800a85c:	9802      	ldr	r0, [sp, #8]
 800a85e:	f7f6 faa3 	bl	8000da8 <__aeabi_fsub>
 800a862:	1c01      	adds	r1, r0, #0
 800a864:	1c05      	adds	r5, r0, #0
 800a866:	9802      	ldr	r0, [sp, #8]
 800a868:	f7f6 fa9e 	bl	8000da8 <__aeabi_fsub>
 800a86c:	1c31      	adds	r1, r6, #0
 800a86e:	f7f6 fa9b 	bl	8000da8 <__aeabi_fsub>
 800a872:	4950      	ldr	r1, [pc, #320]	; (800a9b4 <__ieee754_rem_pio2f+0x29c>)
 800a874:	1c06      	adds	r6, r0, #0
 800a876:	9803      	ldr	r0, [sp, #12]
 800a878:	f7f6 f970 	bl	8000b5c <__aeabi_fmul>
 800a87c:	1c31      	adds	r1, r6, #0
 800a87e:	f7f6 fa93 	bl	8000da8 <__aeabi_fsub>
 800a882:	1c01      	adds	r1, r0, #0
 800a884:	1c06      	adds	r6, r0, #0
 800a886:	1c28      	adds	r0, r5, #0
 800a888:	f7f6 fa8e 	bl	8000da8 <__aeabi_fsub>
 800a88c:	22ff      	movs	r2, #255	; 0xff
 800a88e:	0dc3      	lsrs	r3, r0, #23
 800a890:	4013      	ands	r3, r2
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b19      	cmp	r3, #25
 800a898:	dc15      	bgt.n	800a8c6 <__ieee754_rem_pio2f+0x1ae>
 800a89a:	6020      	str	r0, [r4, #0]
 800a89c:	9502      	str	r5, [sp, #8]
 800a89e:	6825      	ldr	r5, [r4, #0]
 800a8a0:	9802      	ldr	r0, [sp, #8]
 800a8a2:	1c29      	adds	r1, r5, #0
 800a8a4:	f7f6 fa80 	bl	8000da8 <__aeabi_fsub>
 800a8a8:	1c31      	adds	r1, r6, #0
 800a8aa:	f7f6 fa7d 	bl	8000da8 <__aeabi_fsub>
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	db00      	blt.n	800a8b8 <__ieee754_rem_pio2f+0x1a0>
 800a8b6:	e758      	b.n	800a76a <__ieee754_rem_pio2f+0x52>
 800a8b8:	2380      	movs	r3, #128	; 0x80
 800a8ba:	061b      	lsls	r3, r3, #24
 800a8bc:	18ed      	adds	r5, r5, r3
 800a8be:	18c0      	adds	r0, r0, r3
 800a8c0:	6025      	str	r5, [r4, #0]
 800a8c2:	6060      	str	r0, [r4, #4]
 800a8c4:	e774      	b.n	800a7b0 <__ieee754_rem_pio2f+0x98>
 800a8c6:	493f      	ldr	r1, [pc, #252]	; (800a9c4 <__ieee754_rem_pio2f+0x2ac>)
 800a8c8:	9803      	ldr	r0, [sp, #12]
 800a8ca:	f7f6 f947 	bl	8000b5c <__aeabi_fmul>
 800a8ce:	1c06      	adds	r6, r0, #0
 800a8d0:	1c01      	adds	r1, r0, #0
 800a8d2:	1c28      	adds	r0, r5, #0
 800a8d4:	f7f6 fa68 	bl	8000da8 <__aeabi_fsub>
 800a8d8:	1c01      	adds	r1, r0, #0
 800a8da:	9002      	str	r0, [sp, #8]
 800a8dc:	1c28      	adds	r0, r5, #0
 800a8de:	f7f6 fa63 	bl	8000da8 <__aeabi_fsub>
 800a8e2:	1c31      	adds	r1, r6, #0
 800a8e4:	f7f6 fa60 	bl	8000da8 <__aeabi_fsub>
 800a8e8:	4937      	ldr	r1, [pc, #220]	; (800a9c8 <__ieee754_rem_pio2f+0x2b0>)
 800a8ea:	1c05      	adds	r5, r0, #0
 800a8ec:	9803      	ldr	r0, [sp, #12]
 800a8ee:	f7f6 f935 	bl	8000b5c <__aeabi_fmul>
 800a8f2:	1c29      	adds	r1, r5, #0
 800a8f4:	f7f6 fa58 	bl	8000da8 <__aeabi_fsub>
 800a8f8:	1c06      	adds	r6, r0, #0
 800a8fa:	e795      	b.n	800a828 <__ieee754_rem_pio2f+0x110>
 800a8fc:	23ff      	movs	r3, #255	; 0xff
 800a8fe:	05db      	lsls	r3, r3, #23
 800a900:	429d      	cmp	r5, r3
 800a902:	db05      	blt.n	800a910 <__ieee754_rem_pio2f+0x1f8>
 800a904:	1c01      	adds	r1, r0, #0
 800a906:	f7f6 fa4f 	bl	8000da8 <__aeabi_fsub>
 800a90a:	6060      	str	r0, [r4, #4]
 800a90c:	6020      	str	r0, [r4, #0]
 800a90e:	e70f      	b.n	800a730 <__ieee754_rem_pio2f+0x18>
 800a910:	15ee      	asrs	r6, r5, #23
 800a912:	3e86      	subs	r6, #134	; 0x86
 800a914:	05f3      	lsls	r3, r6, #23
 800a916:	1aed      	subs	r5, r5, r3
 800a918:	1c28      	adds	r0, r5, #0
 800a91a:	f7f6 fc09 	bl	8001130 <__aeabi_f2iz>
 800a91e:	f7f6 fc27 	bl	8001170 <__aeabi_i2f>
 800a922:	1c01      	adds	r1, r0, #0
 800a924:	9007      	str	r0, [sp, #28]
 800a926:	1c28      	adds	r0, r5, #0
 800a928:	f7f6 fa3e 	bl	8000da8 <__aeabi_fsub>
 800a92c:	2187      	movs	r1, #135	; 0x87
 800a92e:	05c9      	lsls	r1, r1, #23
 800a930:	f7f6 f914 	bl	8000b5c <__aeabi_fmul>
 800a934:	1c07      	adds	r7, r0, #0
 800a936:	f7f6 fbfb 	bl	8001130 <__aeabi_f2iz>
 800a93a:	f7f6 fc19 	bl	8001170 <__aeabi_i2f>
 800a93e:	1c01      	adds	r1, r0, #0
 800a940:	9008      	str	r0, [sp, #32]
 800a942:	1c05      	adds	r5, r0, #0
 800a944:	1c38      	adds	r0, r7, #0
 800a946:	f7f6 fa2f 	bl	8000da8 <__aeabi_fsub>
 800a94a:	2187      	movs	r1, #135	; 0x87
 800a94c:	05c9      	lsls	r1, r1, #23
 800a94e:	f7f6 f905 	bl	8000b5c <__aeabi_fmul>
 800a952:	2100      	movs	r1, #0
 800a954:	9009      	str	r0, [sp, #36]	; 0x24
 800a956:	f7f5 fd55 	bl	8000404 <__aeabi_fcmpeq>
 800a95a:	2303      	movs	r3, #3
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d006      	beq.n	800a96e <__ieee754_rem_pio2f+0x256>
 800a960:	2100      	movs	r1, #0
 800a962:	1c28      	adds	r0, r5, #0
 800a964:	f7f5 fd4e 	bl	8000404 <__aeabi_fcmpeq>
 800a968:	4243      	negs	r3, r0
 800a96a:	4143      	adcs	r3, r0
 800a96c:	3301      	adds	r3, #1
 800a96e:	4a17      	ldr	r2, [pc, #92]	; (800a9cc <__ieee754_rem_pio2f+0x2b4>)
 800a970:	0021      	movs	r1, r4
 800a972:	9201      	str	r2, [sp, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	a807      	add	r0, sp, #28
 800a978:	9200      	str	r2, [sp, #0]
 800a97a:	0032      	movs	r2, r6
 800a97c:	f000 f900 	bl	800ab80 <__kernel_rem_pio2f>
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	0007      	movs	r7, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	db00      	blt.n	800a98a <__ieee754_rem_pio2f+0x272>
 800a988:	e6ef      	b.n	800a76a <__ieee754_rem_pio2f+0x52>
 800a98a:	2280      	movs	r2, #128	; 0x80
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	0612      	lsls	r2, r2, #24
 800a990:	189b      	adds	r3, r3, r2
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	189b      	adds	r3, r3, r2
 800a998:	6063      	str	r3, [r4, #4]
 800a99a:	e709      	b.n	800a7b0 <__ieee754_rem_pio2f+0x98>
 800a99c:	3f490fd8 	.word	0x3f490fd8
 800a9a0:	4016cbe3 	.word	0x4016cbe3
 800a9a4:	3fc90fd0 	.word	0x3fc90fd0
 800a9a8:	3fc90f80 	.word	0x3fc90f80
 800a9ac:	37354443 	.word	0x37354443
 800a9b0:	37354400 	.word	0x37354400
 800a9b4:	2e85a308 	.word	0x2e85a308
 800a9b8:	43490f80 	.word	0x43490f80
 800a9bc:	3f22f984 	.word	0x3f22f984
 800a9c0:	0800b4bc 	.word	0x0800b4bc
 800a9c4:	2e85a300 	.word	0x2e85a300
 800a9c8:	248d3132 	.word	0x248d3132
 800a9cc:	0800b53c 	.word	0x0800b53c

0800a9d0 <__ieee754_sqrtf>:
 800a9d0:	0042      	lsls	r2, r0, #1
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	b570      	push	{r4, r5, r6, lr}
 800a9d6:	1c04      	adds	r4, r0, #0
 800a9d8:	20ff      	movs	r0, #255	; 0xff
 800a9da:	0852      	lsrs	r2, r2, #1
 800a9dc:	05c0      	lsls	r0, r0, #23
 800a9de:	4282      	cmp	r2, r0
 800a9e0:	d30a      	bcc.n	800a9f8 <__ieee754_sqrtf+0x28>
 800a9e2:	1c21      	adds	r1, r4, #0
 800a9e4:	1c20      	adds	r0, r4, #0
 800a9e6:	f7f6 f8b9 	bl	8000b5c <__aeabi_fmul>
 800a9ea:	1c01      	adds	r1, r0, #0
 800a9ec:	1c20      	adds	r0, r4, #0
 800a9ee:	f7f5 fd4f 	bl	8000490 <__aeabi_fadd>
 800a9f2:	1c04      	adds	r4, r0, #0
 800a9f4:	1c20      	adds	r0, r4, #0
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	2a00      	cmp	r2, #0
 800a9fa:	d0fb      	beq.n	800a9f4 <__ieee754_sqrtf+0x24>
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	da07      	bge.n	800aa10 <__ieee754_sqrtf+0x40>
 800aa00:	1c21      	adds	r1, r4, #0
 800aa02:	1c20      	adds	r0, r4, #0
 800aa04:	f7f6 f9d0 	bl	8000da8 <__aeabi_fsub>
 800aa08:	1c01      	adds	r1, r0, #0
 800aa0a:	f7f5 fedf 	bl	80007cc <__aeabi_fdiv>
 800aa0e:	e7f0      	b.n	800a9f2 <__ieee754_sqrtf+0x22>
 800aa10:	0022      	movs	r2, r4
 800aa12:	15e1      	asrs	r1, r4, #23
 800aa14:	4002      	ands	r2, r0
 800aa16:	4204      	tst	r4, r0
 800aa18:	d02e      	beq.n	800aa78 <__ieee754_sqrtf+0xa8>
 800aa1a:	2280      	movs	r2, #128	; 0x80
 800aa1c:	000c      	movs	r4, r1
 800aa1e:	025b      	lsls	r3, r3, #9
 800aa20:	0a5b      	lsrs	r3, r3, #9
 800aa22:	0412      	lsls	r2, r2, #16
 800aa24:	3c7f      	subs	r4, #127	; 0x7f
 800aa26:	4313      	orrs	r3, r2
 800aa28:	07ca      	lsls	r2, r1, #31
 800aa2a:	d400      	bmi.n	800aa2e <__ieee754_sqrtf+0x5e>
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	2200      	movs	r2, #0
 800aa30:	2180      	movs	r1, #128	; 0x80
 800aa32:	2019      	movs	r0, #25
 800aa34:	0016      	movs	r6, r2
 800aa36:	1064      	asrs	r4, r4, #1
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	0449      	lsls	r1, r1, #17
 800aa3c:	1875      	adds	r5, r6, r1
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	dc02      	bgt.n	800aa48 <__ieee754_sqrtf+0x78>
 800aa42:	186e      	adds	r6, r5, r1
 800aa44:	1b5b      	subs	r3, r3, r5
 800aa46:	1852      	adds	r2, r2, r1
 800aa48:	3801      	subs	r0, #1
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	0849      	lsrs	r1, r1, #1
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d1f4      	bne.n	800aa3c <__ieee754_sqrtf+0x6c>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <__ieee754_sqrtf+0x8c>
 800aa56:	2301      	movs	r3, #1
 800aa58:	3201      	adds	r2, #1
 800aa5a:	439a      	bics	r2, r3
 800aa5c:	23fc      	movs	r3, #252	; 0xfc
 800aa5e:	1052      	asrs	r2, r2, #1
 800aa60:	059b      	lsls	r3, r3, #22
 800aa62:	18d2      	adds	r2, r2, r3
 800aa64:	05e4      	lsls	r4, r4, #23
 800aa66:	18a4      	adds	r4, r4, r2
 800aa68:	e7c4      	b.n	800a9f4 <__ieee754_sqrtf+0x24>
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	3201      	adds	r2, #1
 800aa6e:	4203      	tst	r3, r0
 800aa70:	d0fb      	beq.n	800aa6a <__ieee754_sqrtf+0x9a>
 800aa72:	3a01      	subs	r2, #1
 800aa74:	1a89      	subs	r1, r1, r2
 800aa76:	e7d0      	b.n	800aa1a <__ieee754_sqrtf+0x4a>
 800aa78:	2080      	movs	r0, #128	; 0x80
 800aa7a:	0400      	lsls	r0, r0, #16
 800aa7c:	e7f7      	b.n	800aa6e <__ieee754_sqrtf+0x9e>
	...

0800aa80 <__kernel_cosf>:
 800aa80:	23c8      	movs	r3, #200	; 0xc8
 800aa82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa84:	0044      	lsls	r4, r0, #1
 800aa86:	1c06      	adds	r6, r0, #0
 800aa88:	9101      	str	r1, [sp, #4]
 800aa8a:	0864      	lsrs	r4, r4, #1
 800aa8c:	059b      	lsls	r3, r3, #22
 800aa8e:	429c      	cmp	r4, r3
 800aa90:	da03      	bge.n	800aa9a <__kernel_cosf+0x1a>
 800aa92:	f7f6 fb4d 	bl	8001130 <__aeabi_f2iz>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d05d      	beq.n	800ab56 <__kernel_cosf+0xd6>
 800aa9a:	1c31      	adds	r1, r6, #0
 800aa9c:	1c30      	adds	r0, r6, #0
 800aa9e:	f7f6 f85d 	bl	8000b5c <__aeabi_fmul>
 800aaa2:	21fc      	movs	r1, #252	; 0xfc
 800aaa4:	0589      	lsls	r1, r1, #22
 800aaa6:	1c05      	adds	r5, r0, #0
 800aaa8:	f7f6 f858 	bl	8000b5c <__aeabi_fmul>
 800aaac:	492b      	ldr	r1, [pc, #172]	; (800ab5c <__kernel_cosf+0xdc>)
 800aaae:	1c07      	adds	r7, r0, #0
 800aab0:	1c28      	adds	r0, r5, #0
 800aab2:	f7f6 f853 	bl	8000b5c <__aeabi_fmul>
 800aab6:	492a      	ldr	r1, [pc, #168]	; (800ab60 <__kernel_cosf+0xe0>)
 800aab8:	f7f5 fcea 	bl	8000490 <__aeabi_fadd>
 800aabc:	1c29      	adds	r1, r5, #0
 800aabe:	f7f6 f84d 	bl	8000b5c <__aeabi_fmul>
 800aac2:	4928      	ldr	r1, [pc, #160]	; (800ab64 <__kernel_cosf+0xe4>)
 800aac4:	f7f6 f970 	bl	8000da8 <__aeabi_fsub>
 800aac8:	1c29      	adds	r1, r5, #0
 800aaca:	f7f6 f847 	bl	8000b5c <__aeabi_fmul>
 800aace:	4926      	ldr	r1, [pc, #152]	; (800ab68 <__kernel_cosf+0xe8>)
 800aad0:	f7f5 fcde 	bl	8000490 <__aeabi_fadd>
 800aad4:	1c29      	adds	r1, r5, #0
 800aad6:	f7f6 f841 	bl	8000b5c <__aeabi_fmul>
 800aada:	4924      	ldr	r1, [pc, #144]	; (800ab6c <__kernel_cosf+0xec>)
 800aadc:	f7f6 f964 	bl	8000da8 <__aeabi_fsub>
 800aae0:	1c29      	adds	r1, r5, #0
 800aae2:	f7f6 f83b 	bl	8000b5c <__aeabi_fmul>
 800aae6:	4922      	ldr	r1, [pc, #136]	; (800ab70 <__kernel_cosf+0xf0>)
 800aae8:	f7f5 fcd2 	bl	8000490 <__aeabi_fadd>
 800aaec:	1c29      	adds	r1, r5, #0
 800aaee:	f7f6 f835 	bl	8000b5c <__aeabi_fmul>
 800aaf2:	1c29      	adds	r1, r5, #0
 800aaf4:	f7f6 f832 	bl	8000b5c <__aeabi_fmul>
 800aaf8:	9901      	ldr	r1, [sp, #4]
 800aafa:	1c05      	adds	r5, r0, #0
 800aafc:	1c30      	adds	r0, r6, #0
 800aafe:	f7f6 f82d 	bl	8000b5c <__aeabi_fmul>
 800ab02:	1c01      	adds	r1, r0, #0
 800ab04:	1c28      	adds	r0, r5, #0
 800ab06:	f7f6 f94f 	bl	8000da8 <__aeabi_fsub>
 800ab0a:	4b1a      	ldr	r3, [pc, #104]	; (800ab74 <__kernel_cosf+0xf4>)
 800ab0c:	1c05      	adds	r5, r0, #0
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	dc09      	bgt.n	800ab26 <__kernel_cosf+0xa6>
 800ab12:	1c01      	adds	r1, r0, #0
 800ab14:	1c38      	adds	r0, r7, #0
 800ab16:	f7f6 f947 	bl	8000da8 <__aeabi_fsub>
 800ab1a:	1c01      	adds	r1, r0, #0
 800ab1c:	20fe      	movs	r0, #254	; 0xfe
 800ab1e:	0580      	lsls	r0, r0, #22
 800ab20:	f7f6 f942 	bl	8000da8 <__aeabi_fsub>
 800ab24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <__kernel_cosf+0xf8>)
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	dc12      	bgt.n	800ab52 <__kernel_cosf+0xd2>
 800ab2c:	23ff      	movs	r3, #255	; 0xff
 800ab2e:	061b      	lsls	r3, r3, #24
 800ab30:	18e4      	adds	r4, r4, r3
 800ab32:	20fe      	movs	r0, #254	; 0xfe
 800ab34:	1c21      	adds	r1, r4, #0
 800ab36:	0580      	lsls	r0, r0, #22
 800ab38:	f7f6 f936 	bl	8000da8 <__aeabi_fsub>
 800ab3c:	1c21      	adds	r1, r4, #0
 800ab3e:	1c06      	adds	r6, r0, #0
 800ab40:	1c38      	adds	r0, r7, #0
 800ab42:	f7f6 f931 	bl	8000da8 <__aeabi_fsub>
 800ab46:	1c29      	adds	r1, r5, #0
 800ab48:	f7f6 f92e 	bl	8000da8 <__aeabi_fsub>
 800ab4c:	1c01      	adds	r1, r0, #0
 800ab4e:	1c30      	adds	r0, r6, #0
 800ab50:	e7e6      	b.n	800ab20 <__kernel_cosf+0xa0>
 800ab52:	4c0a      	ldr	r4, [pc, #40]	; (800ab7c <__kernel_cosf+0xfc>)
 800ab54:	e7ed      	b.n	800ab32 <__kernel_cosf+0xb2>
 800ab56:	20fe      	movs	r0, #254	; 0xfe
 800ab58:	0580      	lsls	r0, r0, #22
 800ab5a:	e7e3      	b.n	800ab24 <__kernel_cosf+0xa4>
 800ab5c:	ad47d74e 	.word	0xad47d74e
 800ab60:	310f74f6 	.word	0x310f74f6
 800ab64:	3493f27c 	.word	0x3493f27c
 800ab68:	37d00d01 	.word	0x37d00d01
 800ab6c:	3ab60b61 	.word	0x3ab60b61
 800ab70:	3d2aaaab 	.word	0x3d2aaaab
 800ab74:	3e999999 	.word	0x3e999999
 800ab78:	3f480000 	.word	0x3f480000
 800ab7c:	3e900000 	.word	0x3e900000

0800ab80 <__kernel_rem_pio2f>:
 800ab80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab82:	b0df      	sub	sp, #380	; 0x17c
 800ab84:	9308      	str	r3, [sp, #32]
 800ab86:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ab88:	9207      	str	r2, [sp, #28]
 800ab8a:	009a      	lsls	r2, r3, #2
 800ab8c:	4bc8      	ldr	r3, [pc, #800]	; (800aeb0 <__kernel_rem_pio2f+0x330>)
 800ab8e:	900a      	str	r0, [sp, #40]	; 0x28
 800ab90:	58d3      	ldr	r3, [r2, r3]
 800ab92:	9103      	str	r1, [sp, #12]
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	9b08      	ldr	r3, [sp, #32]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	9306      	str	r3, [sp, #24]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9302      	str	r3, [sp, #8]
 800aba0:	9b07      	ldr	r3, [sp, #28]
 800aba2:	3304      	adds	r3, #4
 800aba4:	db07      	blt.n	800abb6 <__kernel_rem_pio2f+0x36>
 800aba6:	2107      	movs	r1, #7
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	1eda      	subs	r2, r3, #3
 800abac:	17d3      	asrs	r3, r2, #31
 800abae:	400b      	ands	r3, r1
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	10db      	asrs	r3, r3, #3
 800abb4:	9302      	str	r3, [sp, #8]
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	ae22      	add	r6, sp, #136	; 0x88
 800abba:	1c59      	adds	r1, r3, #1
 800abbc:	00cb      	lsls	r3, r1, #3
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
 800abc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc2:	9b07      	ldr	r3, [sp, #28]
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	9a06      	ldr	r2, [sp, #24]
 800abca:	9b02      	ldr	r3, [sp, #8]
 800abcc:	1a9d      	subs	r5, r3, r2
 800abce:	002c      	movs	r4, r5
 800abd0:	9b05      	ldr	r3, [sp, #20]
 800abd2:	189f      	adds	r7, r3, r2
 800abd4:	1b63      	subs	r3, r4, r5
 800abd6:	429f      	cmp	r7, r3
 800abd8:	da0d      	bge.n	800abf6 <__kernel_rem_pio2f+0x76>
 800abda:	9c08      	ldr	r4, [sp, #32]
 800abdc:	af4a      	add	r7, sp, #296	; 0x128
 800abde:	9b08      	ldr	r3, [sp, #32]
 800abe0:	9a05      	ldr	r2, [sp, #20]
 800abe2:	1ae3      	subs	r3, r4, r3
 800abe4:	429a      	cmp	r2, r3
 800abe6:	db25      	blt.n	800ac34 <__kernel_rem_pio2f+0xb4>
 800abe8:	ab22      	add	r3, sp, #136	; 0x88
 800abea:	00a5      	lsls	r5, r4, #2
 800abec:	18ed      	adds	r5, r5, r3
 800abee:	2300      	movs	r3, #0
 800abf0:	2600      	movs	r6, #0
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	e016      	b.n	800ac24 <__kernel_rem_pio2f+0xa4>
 800abf6:	2000      	movs	r0, #0
 800abf8:	2c00      	cmp	r4, #0
 800abfa:	db04      	blt.n	800ac06 <__kernel_rem_pio2f+0x86>
 800abfc:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800abfe:	00a3      	lsls	r3, r4, #2
 800ac00:	58d0      	ldr	r0, [r2, r3]
 800ac02:	f7f6 fab5 	bl	8001170 <__aeabi_i2f>
 800ac06:	c601      	stmia	r6!, {r0}
 800ac08:	3401      	adds	r4, #1
 800ac0a:	e7e3      	b.n	800abd4 <__kernel_rem_pio2f+0x54>
 800ac0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac0e:	00b3      	lsls	r3, r6, #2
 800ac10:	6829      	ldr	r1, [r5, #0]
 800ac12:	58d0      	ldr	r0, [r2, r3]
 800ac14:	f7f5 ffa2 	bl	8000b5c <__aeabi_fmul>
 800ac18:	1c01      	adds	r1, r0, #0
 800ac1a:	9804      	ldr	r0, [sp, #16]
 800ac1c:	f7f5 fc38 	bl	8000490 <__aeabi_fadd>
 800ac20:	3601      	adds	r6, #1
 800ac22:	9004      	str	r0, [sp, #16]
 800ac24:	9b06      	ldr	r3, [sp, #24]
 800ac26:	3d04      	subs	r5, #4
 800ac28:	429e      	cmp	r6, r3
 800ac2a:	ddef      	ble.n	800ac0c <__kernel_rem_pio2f+0x8c>
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	3401      	adds	r4, #1
 800ac30:	c708      	stmia	r7!, {r3}
 800ac32:	e7d4      	b.n	800abde <__kernel_rem_pio2f+0x5e>
 800ac34:	9b05      	ldr	r3, [sp, #20]
 800ac36:	aa0e      	add	r2, sp, #56	; 0x38
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	189b      	adds	r3, r3, r2
 800ac3c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac3e:	9b02      	ldr	r3, [sp, #8]
 800ac40:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	18d3      	adds	r3, r2, r3
 800ac46:	9e05      	ldr	r6, [sp, #20]
 800ac48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac4a:	0035      	movs	r5, r6
 800ac4c:	aa4a      	add	r2, sp, #296	; 0x128
 800ac4e:	00b3      	lsls	r3, r6, #2
 800ac50:	af0e      	add	r7, sp, #56	; 0x38
 800ac52:	589c      	ldr	r4, [r3, r2]
 800ac54:	9702      	str	r7, [sp, #8]
 800ac56:	920d      	str	r2, [sp, #52]	; 0x34
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	dc64      	bgt.n	800ad26 <__kernel_rem_pio2f+0x1a6>
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	1c20      	adds	r0, r4, #0
 800ac60:	f000 fae8 	bl	800b234 <scalbnf>
 800ac64:	21f8      	movs	r1, #248	; 0xf8
 800ac66:	0589      	lsls	r1, r1, #22
 800ac68:	1c04      	adds	r4, r0, #0
 800ac6a:	f7f5 ff77 	bl	8000b5c <__aeabi_fmul>
 800ac6e:	f000 faa3 	bl	800b1b8 <floorf>
 800ac72:	2182      	movs	r1, #130	; 0x82
 800ac74:	05c9      	lsls	r1, r1, #23
 800ac76:	f7f5 ff71 	bl	8000b5c <__aeabi_fmul>
 800ac7a:	1c01      	adds	r1, r0, #0
 800ac7c:	1c20      	adds	r0, r4, #0
 800ac7e:	f7f6 f893 	bl	8000da8 <__aeabi_fsub>
 800ac82:	1c04      	adds	r4, r0, #0
 800ac84:	f7f6 fa54 	bl	8001130 <__aeabi_f2iz>
 800ac88:	9004      	str	r0, [sp, #16]
 800ac8a:	f7f6 fa71 	bl	8001170 <__aeabi_i2f>
 800ac8e:	1c01      	adds	r1, r0, #0
 800ac90:	1c20      	adds	r0, r4, #0
 800ac92:	f7f6 f889 	bl	8000da8 <__aeabi_fsub>
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	1c04      	adds	r4, r0, #0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dd63      	ble.n	800ad66 <__kernel_rem_pio2f+0x1e6>
 800ac9e:	2108      	movs	r1, #8
 800aca0:	1e73      	subs	r3, r6, #1
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	aa0e      	add	r2, sp, #56	; 0x38
 800aca6:	589a      	ldr	r2, [r3, r2]
 800aca8:	9801      	ldr	r0, [sp, #4]
 800acaa:	9d04      	ldr	r5, [sp, #16]
 800acac:	1a09      	subs	r1, r1, r0
 800acae:	0010      	movs	r0, r2
 800acb0:	4108      	asrs	r0, r1
 800acb2:	182d      	adds	r5, r5, r0
 800acb4:	4088      	lsls	r0, r1
 800acb6:	a90e      	add	r1, sp, #56	; 0x38
 800acb8:	1a12      	subs	r2, r2, r0
 800acba:	505a      	str	r2, [r3, r1]
 800acbc:	2307      	movs	r3, #7
 800acbe:	9901      	ldr	r1, [sp, #4]
 800acc0:	9504      	str	r5, [sp, #16]
 800acc2:	1a5b      	subs	r3, r3, r1
 800acc4:	411a      	asrs	r2, r3
 800acc6:	9202      	str	r2, [sp, #8]
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	dd5c      	ble.n	800ad88 <__kernel_rem_pio2f+0x208>
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	2200      	movs	r2, #0
 800acd2:	3301      	adds	r3, #1
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	2301      	movs	r3, #1
 800acd8:	2080      	movs	r0, #128	; 0x80
 800acda:	0015      	movs	r5, r2
 800acdc:	21ff      	movs	r1, #255	; 0xff
 800acde:	469c      	mov	ip, r3
 800ace0:	0040      	lsls	r0, r0, #1
 800ace2:	4296      	cmp	r6, r2
 800ace4:	dd00      	ble.n	800ace8 <__kernel_rem_pio2f+0x168>
 800ace6:	e080      	b.n	800adea <__kernel_rem_pio2f+0x26a>
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	dd05      	ble.n	800acfa <__kernel_rem_pio2f+0x17a>
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d100      	bne.n	800acf4 <__kernel_rem_pio2f+0x174>
 800acf2:	e08a      	b.n	800ae0a <__kernel_rem_pio2f+0x28a>
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d100      	bne.n	800acfa <__kernel_rem_pio2f+0x17a>
 800acf8:	e092      	b.n	800ae20 <__kernel_rem_pio2f+0x2a0>
 800acfa:	9b02      	ldr	r3, [sp, #8]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d143      	bne.n	800ad88 <__kernel_rem_pio2f+0x208>
 800ad00:	20fe      	movs	r0, #254	; 0xfe
 800ad02:	1c21      	adds	r1, r4, #0
 800ad04:	0580      	lsls	r0, r0, #22
 800ad06:	f7f6 f84f 	bl	8000da8 <__aeabi_fsub>
 800ad0a:	1c04      	adds	r4, r0, #0
 800ad0c:	2d00      	cmp	r5, #0
 800ad0e:	d03b      	beq.n	800ad88 <__kernel_rem_pio2f+0x208>
 800ad10:	20fe      	movs	r0, #254	; 0xfe
 800ad12:	9901      	ldr	r1, [sp, #4]
 800ad14:	0580      	lsls	r0, r0, #22
 800ad16:	f000 fa8d 	bl	800b234 <scalbnf>
 800ad1a:	1c01      	adds	r1, r0, #0
 800ad1c:	1c20      	adds	r0, r4, #0
 800ad1e:	f7f6 f843 	bl	8000da8 <__aeabi_fsub>
 800ad22:	1c04      	adds	r4, r0, #0
 800ad24:	e030      	b.n	800ad88 <__kernel_rem_pio2f+0x208>
 800ad26:	21ee      	movs	r1, #238	; 0xee
 800ad28:	1c20      	adds	r0, r4, #0
 800ad2a:	0589      	lsls	r1, r1, #22
 800ad2c:	f7f5 ff16 	bl	8000b5c <__aeabi_fmul>
 800ad30:	f7f6 f9fe 	bl	8001130 <__aeabi_f2iz>
 800ad34:	f7f6 fa1c 	bl	8001170 <__aeabi_i2f>
 800ad38:	2187      	movs	r1, #135	; 0x87
 800ad3a:	05c9      	lsls	r1, r1, #23
 800ad3c:	9004      	str	r0, [sp, #16]
 800ad3e:	f7f5 ff0d 	bl	8000b5c <__aeabi_fmul>
 800ad42:	1c01      	adds	r1, r0, #0
 800ad44:	1c20      	adds	r0, r4, #0
 800ad46:	f7f6 f82f 	bl	8000da8 <__aeabi_fsub>
 800ad4a:	f7f6 f9f1 	bl	8001130 <__aeabi_f2iz>
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad52:	c301      	stmia	r3!, {r0}
 800ad54:	3d01      	subs	r5, #1
 800ad56:	9302      	str	r3, [sp, #8]
 800ad58:	00ab      	lsls	r3, r5, #2
 800ad5a:	5899      	ldr	r1, [r3, r2]
 800ad5c:	9804      	ldr	r0, [sp, #16]
 800ad5e:	f7f5 fb97 	bl	8000490 <__aeabi_fadd>
 800ad62:	1c04      	adds	r4, r0, #0
 800ad64:	e778      	b.n	800ac58 <__kernel_rem_pio2f+0xd8>
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <__kernel_rem_pio2f+0x1fa>
 800ad6c:	1e73      	subs	r3, r6, #1
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	aa0e      	add	r2, sp, #56	; 0x38
 800ad72:	5898      	ldr	r0, [r3, r2]
 800ad74:	11c3      	asrs	r3, r0, #7
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	e7a6      	b.n	800acc8 <__kernel_rem_pio2f+0x148>
 800ad7a:	21fc      	movs	r1, #252	; 0xfc
 800ad7c:	0589      	lsls	r1, r1, #22
 800ad7e:	f7f5 fb65 	bl	800044c <__aeabi_fcmpge>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d12e      	bne.n	800ade4 <__kernel_rem_pio2f+0x264>
 800ad86:	9002      	str	r0, [sp, #8]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	1c20      	adds	r0, r4, #0
 800ad8c:	f7f5 fb3a 	bl	8000404 <__aeabi_fcmpeq>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d100      	bne.n	800ad96 <__kernel_rem_pio2f+0x216>
 800ad94:	e08e      	b.n	800aeb4 <__kernel_rem_pio2f+0x334>
 800ad96:	1e77      	subs	r7, r6, #1
 800ad98:	003b      	movs	r3, r7
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	9905      	ldr	r1, [sp, #20]
 800ad9e:	428b      	cmp	r3, r1
 800ada0:	da45      	bge.n	800ae2e <__kernel_rem_pio2f+0x2ae>
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d05d      	beq.n	800ae62 <__kernel_rem_pio2f+0x2e2>
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	aa0e      	add	r2, sp, #56	; 0x38
 800adaa:	3b08      	subs	r3, #8
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	00bb      	lsls	r3, r7, #2
 800adb0:	589b      	ldr	r3, [r3, r2]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d07a      	beq.n	800aeac <__kernel_rem_pio2f+0x32c>
 800adb6:	20fe      	movs	r0, #254	; 0xfe
 800adb8:	9901      	ldr	r1, [sp, #4]
 800adba:	0580      	lsls	r0, r0, #22
 800adbc:	f000 fa3a 	bl	800b234 <scalbnf>
 800adc0:	003d      	movs	r5, r7
 800adc2:	1c04      	adds	r4, r0, #0
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	db00      	blt.n	800adca <__kernel_rem_pio2f+0x24a>
 800adc8:	e0ab      	b.n	800af22 <__kernel_rem_pio2f+0x3a2>
 800adca:	003c      	movs	r4, r7
 800adcc:	2c00      	cmp	r4, #0
 800adce:	da00      	bge.n	800add2 <__kernel_rem_pio2f+0x252>
 800add0:	e0d6      	b.n	800af80 <__kernel_rem_pio2f+0x400>
 800add2:	00a3      	lsls	r3, r4, #2
 800add4:	aa4a      	add	r2, sp, #296	; 0x128
 800add6:	189b      	adds	r3, r3, r2
 800add8:	9306      	str	r3, [sp, #24]
 800adda:	1b3b      	subs	r3, r7, r4
 800addc:	2600      	movs	r6, #0
 800adde:	2500      	movs	r5, #0
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	e0bf      	b.n	800af64 <__kernel_rem_pio2f+0x3e4>
 800ade4:	2302      	movs	r3, #2
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	e771      	b.n	800acce <__kernel_rem_pio2f+0x14e>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2d00      	cmp	r5, #0
 800adee:	d108      	bne.n	800ae02 <__kernel_rem_pio2f+0x282>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <__kernel_rem_pio2f+0x27a>
 800adf4:	1ac3      	subs	r3, r0, r3
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	4663      	mov	r3, ip
 800adfa:	001d      	movs	r5, r3
 800adfc:	3201      	adds	r2, #1
 800adfe:	3704      	adds	r7, #4
 800ae00:	e76f      	b.n	800ace2 <__kernel_rem_pio2f+0x162>
 800ae02:	1acb      	subs	r3, r1, r3
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	002b      	movs	r3, r5
 800ae08:	e7f7      	b.n	800adfa <__kernel_rem_pio2f+0x27a>
 800ae0a:	1e73      	subs	r3, r6, #1
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	aa0e      	add	r2, sp, #56	; 0x38
 800ae10:	589a      	ldr	r2, [r3, r2]
 800ae12:	920d      	str	r2, [sp, #52]	; 0x34
 800ae14:	227f      	movs	r2, #127	; 0x7f
 800ae16:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae18:	400a      	ands	r2, r1
 800ae1a:	a90e      	add	r1, sp, #56	; 0x38
 800ae1c:	505a      	str	r2, [r3, r1]
 800ae1e:	e76c      	b.n	800acfa <__kernel_rem_pio2f+0x17a>
 800ae20:	1e73      	subs	r3, r6, #1
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	aa0e      	add	r2, sp, #56	; 0x38
 800ae26:	589a      	ldr	r2, [r3, r2]
 800ae28:	920d      	str	r2, [sp, #52]	; 0x34
 800ae2a:	223f      	movs	r2, #63	; 0x3f
 800ae2c:	e7f3      	b.n	800ae16 <__kernel_rem_pio2f+0x296>
 800ae2e:	0099      	lsls	r1, r3, #2
 800ae30:	a80e      	add	r0, sp, #56	; 0x38
 800ae32:	5809      	ldr	r1, [r1, r0]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	430a      	orrs	r2, r1
 800ae38:	e7b0      	b.n	800ad9c <__kernel_rem_pio2f+0x21c>
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae3e:	009a      	lsls	r2, r3, #2
 800ae40:	4252      	negs	r2, r2
 800ae42:	588a      	ldr	r2, [r1, r2]
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	d0f8      	beq.n	800ae3a <__kernel_rem_pio2f+0x2ba>
 800ae48:	9a08      	ldr	r2, [sp, #32]
 800ae4a:	18f3      	adds	r3, r6, r3
 800ae4c:	18b4      	adds	r4, r6, r2
 800ae4e:	00a4      	lsls	r4, r4, #2
 800ae50:	aa22      	add	r2, sp, #136	; 0x88
 800ae52:	1c75      	adds	r5, r6, #1
 800ae54:	1914      	adds	r4, r2, r4
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	9b02      	ldr	r3, [sp, #8]
 800ae5a:	42ab      	cmp	r3, r5
 800ae5c:	da03      	bge.n	800ae66 <__kernel_rem_pio2f+0x2e6>
 800ae5e:	001e      	movs	r6, r3
 800ae60:	e6f3      	b.n	800ac4a <__kernel_rem_pio2f+0xca>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e7ea      	b.n	800ae3c <__kernel_rem_pio2f+0x2bc>
 800ae66:	00ab      	lsls	r3, r5, #2
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae6c:	00aa      	lsls	r2, r5, #2
 800ae6e:	5898      	ldr	r0, [r3, r2]
 800ae70:	f7f6 f97e 	bl	8001170 <__aeabi_i2f>
 800ae74:	2700      	movs	r7, #0
 800ae76:	2600      	movs	r6, #0
 800ae78:	6020      	str	r0, [r4, #0]
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	429f      	cmp	r7, r3
 800ae7e:	dd07      	ble.n	800ae90 <__kernel_rem_pio2f+0x310>
 800ae80:	21f0      	movs	r1, #240	; 0xf0
 800ae82:	9a04      	ldr	r2, [sp, #16]
 800ae84:	ab0e      	add	r3, sp, #56	; 0x38
 800ae86:	185b      	adds	r3, r3, r1
 800ae88:	509e      	str	r6, [r3, r2]
 800ae8a:	3501      	adds	r5, #1
 800ae8c:	3404      	adds	r4, #4
 800ae8e:	e7e3      	b.n	800ae58 <__kernel_rem_pio2f+0x2d8>
 800ae90:	00bb      	lsls	r3, r7, #2
 800ae92:	425a      	negs	r2, r3
 800ae94:	58a1      	ldr	r1, [r4, r2]
 800ae96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae98:	3701      	adds	r7, #1
 800ae9a:	58d0      	ldr	r0, [r2, r3]
 800ae9c:	f7f5 fe5e 	bl	8000b5c <__aeabi_fmul>
 800aea0:	1c01      	adds	r1, r0, #0
 800aea2:	1c30      	adds	r0, r6, #0
 800aea4:	f7f5 faf4 	bl	8000490 <__aeabi_fadd>
 800aea8:	1c06      	adds	r6, r0, #0
 800aeaa:	e7e6      	b.n	800ae7a <__kernel_rem_pio2f+0x2fa>
 800aeac:	3f01      	subs	r7, #1
 800aeae:	e77a      	b.n	800ada6 <__kernel_rem_pio2f+0x226>
 800aeb0:	0800b880 	.word	0x0800b880
 800aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb6:	9a07      	ldr	r2, [sp, #28]
 800aeb8:	1c20      	adds	r0, r4, #0
 800aeba:	1a99      	subs	r1, r3, r2
 800aebc:	f000 f9ba 	bl	800b234 <scalbnf>
 800aec0:	2187      	movs	r1, #135	; 0x87
 800aec2:	05c9      	lsls	r1, r1, #23
 800aec4:	1c04      	adds	r4, r0, #0
 800aec6:	f7f5 fac1 	bl	800044c <__aeabi_fcmpge>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d021      	beq.n	800af12 <__kernel_rem_pio2f+0x392>
 800aece:	21ee      	movs	r1, #238	; 0xee
 800aed0:	1c20      	adds	r0, r4, #0
 800aed2:	0589      	lsls	r1, r1, #22
 800aed4:	f7f5 fe42 	bl	8000b5c <__aeabi_fmul>
 800aed8:	f7f6 f92a 	bl	8001130 <__aeabi_f2iz>
 800aedc:	f7f6 f948 	bl	8001170 <__aeabi_i2f>
 800aee0:	2187      	movs	r1, #135	; 0x87
 800aee2:	05c9      	lsls	r1, r1, #23
 800aee4:	1c05      	adds	r5, r0, #0
 800aee6:	f7f5 fe39 	bl	8000b5c <__aeabi_fmul>
 800aeea:	1c01      	adds	r1, r0, #0
 800aeec:	1c20      	adds	r0, r4, #0
 800aeee:	f7f5 ff5b 	bl	8000da8 <__aeabi_fsub>
 800aef2:	f7f6 f91d 	bl	8001130 <__aeabi_f2iz>
 800aef6:	00b7      	lsls	r7, r6, #2
 800aef8:	ab0e      	add	r3, sp, #56	; 0x38
 800aefa:	51d8      	str	r0, [r3, r7]
 800aefc:	9b01      	ldr	r3, [sp, #4]
 800aefe:	1c28      	adds	r0, r5, #0
 800af00:	3308      	adds	r3, #8
 800af02:	9301      	str	r3, [sp, #4]
 800af04:	f7f6 f914 	bl	8001130 <__aeabi_f2iz>
 800af08:	1c77      	adds	r7, r6, #1
 800af0a:	00bc      	lsls	r4, r7, #2
 800af0c:	ab0e      	add	r3, sp, #56	; 0x38
 800af0e:	5118      	str	r0, [r3, r4]
 800af10:	e751      	b.n	800adb6 <__kernel_rem_pio2f+0x236>
 800af12:	1c20      	adds	r0, r4, #0
 800af14:	f7f6 f90c 	bl	8001130 <__aeabi_f2iz>
 800af18:	00b5      	lsls	r5, r6, #2
 800af1a:	ab0e      	add	r3, sp, #56	; 0x38
 800af1c:	0037      	movs	r7, r6
 800af1e:	5158      	str	r0, [r3, r5]
 800af20:	e749      	b.n	800adb6 <__kernel_rem_pio2f+0x236>
 800af22:	ab0e      	add	r3, sp, #56	; 0x38
 800af24:	00ae      	lsls	r6, r5, #2
 800af26:	58f0      	ldr	r0, [r6, r3]
 800af28:	f7f6 f922 	bl	8001170 <__aeabi_i2f>
 800af2c:	1c21      	adds	r1, r4, #0
 800af2e:	f7f5 fe15 	bl	8000b5c <__aeabi_fmul>
 800af32:	22f0      	movs	r2, #240	; 0xf0
 800af34:	21ee      	movs	r1, #238	; 0xee
 800af36:	ab0e      	add	r3, sp, #56	; 0x38
 800af38:	189b      	adds	r3, r3, r2
 800af3a:	5198      	str	r0, [r3, r6]
 800af3c:	0589      	lsls	r1, r1, #22
 800af3e:	1c20      	adds	r0, r4, #0
 800af40:	f7f5 fe0c 	bl	8000b5c <__aeabi_fmul>
 800af44:	3d01      	subs	r5, #1
 800af46:	1c04      	adds	r4, r0, #0
 800af48:	e73c      	b.n	800adc4 <__kernel_rem_pio2f+0x244>
 800af4a:	9a06      	ldr	r2, [sp, #24]
 800af4c:	00ab      	lsls	r3, r5, #2
 800af4e:	58d1      	ldr	r1, [r2, r3]
 800af50:	4a5e      	ldr	r2, [pc, #376]	; (800b0cc <__kernel_rem_pio2f+0x54c>)
 800af52:	3501      	adds	r5, #1
 800af54:	5898      	ldr	r0, [r3, r2]
 800af56:	f7f5 fe01 	bl	8000b5c <__aeabi_fmul>
 800af5a:	1c01      	adds	r1, r0, #0
 800af5c:	1c30      	adds	r0, r6, #0
 800af5e:	f7f5 fa97 	bl	8000490 <__aeabi_fadd>
 800af62:	1c06      	adds	r6, r0, #0
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	429d      	cmp	r5, r3
 800af68:	dc02      	bgt.n	800af70 <__kernel_rem_pio2f+0x3f0>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	429d      	cmp	r5, r3
 800af6e:	ddec      	ble.n	800af4a <__kernel_rem_pio2f+0x3ca>
 800af70:	21a0      	movs	r1, #160	; 0xa0
 800af72:	9b01      	ldr	r3, [sp, #4]
 800af74:	aa0e      	add	r2, sp, #56	; 0x38
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	1852      	adds	r2, r2, r1
 800af7a:	50d6      	str	r6, [r2, r3]
 800af7c:	3c01      	subs	r4, #1
 800af7e:	e725      	b.n	800adcc <__kernel_rem_pio2f+0x24c>
 800af80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800af82:	2b02      	cmp	r3, #2
 800af84:	dc08      	bgt.n	800af98 <__kernel_rem_pio2f+0x418>
 800af86:	2b00      	cmp	r3, #0
 800af88:	dc5a      	bgt.n	800b040 <__kernel_rem_pio2f+0x4c0>
 800af8a:	d035      	beq.n	800aff8 <__kernel_rem_pio2f+0x478>
 800af8c:	2007      	movs	r0, #7
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	4003      	ands	r3, r0
 800af92:	0018      	movs	r0, r3
 800af94:	b05f      	add	sp, #380	; 0x17c
 800af96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af98:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d1f6      	bne.n	800af8c <__kernel_rem_pio2f+0x40c>
 800af9e:	00bb      	lsls	r3, r7, #2
 800afa0:	aa36      	add	r2, sp, #216	; 0xd8
 800afa2:	18d5      	adds	r5, r2, r3
 800afa4:	002c      	movs	r4, r5
 800afa6:	9701      	str	r7, [sp, #4]
 800afa8:	9b01      	ldr	r3, [sp, #4]
 800afaa:	3c04      	subs	r4, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc51      	bgt.n	800b054 <__kernel_rem_pio2f+0x4d4>
 800afb0:	9701      	str	r7, [sp, #4]
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	3d04      	subs	r5, #4
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	dc62      	bgt.n	800b080 <__kernel_rem_pio2f+0x500>
 800afba:	2000      	movs	r0, #0
 800afbc:	ac36      	add	r4, sp, #216	; 0xd8
 800afbe:	2f01      	cmp	r7, #1
 800afc0:	dc73      	bgt.n	800b0aa <__kernel_rem_pio2f+0x52a>
 800afc2:	9902      	ldr	r1, [sp, #8]
 800afc4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	2900      	cmp	r1, #0
 800afca:	d174      	bne.n	800b0b6 <__kernel_rem_pio2f+0x536>
 800afcc:	9903      	ldr	r1, [sp, #12]
 800afce:	604b      	str	r3, [r1, #4]
 800afd0:	000b      	movs	r3, r1
 800afd2:	600a      	str	r2, [r1, #0]
 800afd4:	6098      	str	r0, [r3, #8]
 800afd6:	e7d9      	b.n	800af8c <__kernel_rem_pio2f+0x40c>
 800afd8:	00bb      	lsls	r3, r7, #2
 800afda:	5919      	ldr	r1, [r3, r4]
 800afdc:	f7f5 fa58 	bl	8000490 <__aeabi_fadd>
 800afe0:	3f01      	subs	r7, #1
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	daf8      	bge.n	800afd8 <__kernel_rem_pio2f+0x458>
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <__kernel_rem_pio2f+0x472>
 800afec:	2380      	movs	r3, #128	; 0x80
 800afee:	061b      	lsls	r3, r3, #24
 800aff0:	18c0      	adds	r0, r0, r3
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	6018      	str	r0, [r3, #0]
 800aff6:	e7c9      	b.n	800af8c <__kernel_rem_pio2f+0x40c>
 800aff8:	2000      	movs	r0, #0
 800affa:	ac36      	add	r4, sp, #216	; 0xd8
 800affc:	e7f1      	b.n	800afe2 <__kernel_rem_pio2f+0x462>
 800affe:	00a3      	lsls	r3, r4, #2
 800b000:	5959      	ldr	r1, [r3, r5]
 800b002:	f7f5 fa45 	bl	8000490 <__aeabi_fadd>
 800b006:	3c01      	subs	r4, #1
 800b008:	2c00      	cmp	r4, #0
 800b00a:	daf8      	bge.n	800affe <__kernel_rem_pio2f+0x47e>
 800b00c:	9a02      	ldr	r2, [sp, #8]
 800b00e:	1c03      	adds	r3, r0, #0
 800b010:	2a00      	cmp	r2, #0
 800b012:	d002      	beq.n	800b01a <__kernel_rem_pio2f+0x49a>
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	061b      	lsls	r3, r3, #24
 800b018:	18c3      	adds	r3, r0, r3
 800b01a:	9a03      	ldr	r2, [sp, #12]
 800b01c:	1c01      	adds	r1, r0, #0
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800b022:	f7f5 fec1 	bl	8000da8 <__aeabi_fsub>
 800b026:	2401      	movs	r4, #1
 800b028:	ad36      	add	r5, sp, #216	; 0xd8
 800b02a:	42a7      	cmp	r7, r4
 800b02c:	da0c      	bge.n	800b048 <__kernel_rem_pio2f+0x4c8>
 800b02e:	9b02      	ldr	r3, [sp, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <__kernel_rem_pio2f+0x4ba>
 800b034:	2380      	movs	r3, #128	; 0x80
 800b036:	061b      	lsls	r3, r3, #24
 800b038:	18c0      	adds	r0, r0, r3
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	6058      	str	r0, [r3, #4]
 800b03e:	e7a5      	b.n	800af8c <__kernel_rem_pio2f+0x40c>
 800b040:	003c      	movs	r4, r7
 800b042:	2000      	movs	r0, #0
 800b044:	ad36      	add	r5, sp, #216	; 0xd8
 800b046:	e7df      	b.n	800b008 <__kernel_rem_pio2f+0x488>
 800b048:	00a3      	lsls	r3, r4, #2
 800b04a:	5959      	ldr	r1, [r3, r5]
 800b04c:	f7f5 fa20 	bl	8000490 <__aeabi_fadd>
 800b050:	3401      	adds	r4, #1
 800b052:	e7ea      	b.n	800b02a <__kernel_rem_pio2f+0x4aa>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	6826      	ldr	r6, [r4, #0]
 800b058:	3b01      	subs	r3, #1
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	6863      	ldr	r3, [r4, #4]
 800b05e:	1c30      	adds	r0, r6, #0
 800b060:	1c19      	adds	r1, r3, #0
 800b062:	9305      	str	r3, [sp, #20]
 800b064:	f7f5 fa14 	bl	8000490 <__aeabi_fadd>
 800b068:	1c01      	adds	r1, r0, #0
 800b06a:	9006      	str	r0, [sp, #24]
 800b06c:	1c30      	adds	r0, r6, #0
 800b06e:	f7f5 fe9b 	bl	8000da8 <__aeabi_fsub>
 800b072:	9905      	ldr	r1, [sp, #20]
 800b074:	f7f5 fa0c 	bl	8000490 <__aeabi_fadd>
 800b078:	9b06      	ldr	r3, [sp, #24]
 800b07a:	6060      	str	r0, [r4, #4]
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	e793      	b.n	800afa8 <__kernel_rem_pio2f+0x428>
 800b080:	682c      	ldr	r4, [r5, #0]
 800b082:	686e      	ldr	r6, [r5, #4]
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	1c31      	adds	r1, r6, #0
 800b088:	3b01      	subs	r3, #1
 800b08a:	1c20      	adds	r0, r4, #0
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	f7f5 f9ff 	bl	8000490 <__aeabi_fadd>
 800b092:	1c01      	adds	r1, r0, #0
 800b094:	9005      	str	r0, [sp, #20]
 800b096:	1c20      	adds	r0, r4, #0
 800b098:	f7f5 fe86 	bl	8000da8 <__aeabi_fsub>
 800b09c:	1c31      	adds	r1, r6, #0
 800b09e:	f7f5 f9f7 	bl	8000490 <__aeabi_fadd>
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	6068      	str	r0, [r5, #4]
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	e783      	b.n	800afb2 <__kernel_rem_pio2f+0x432>
 800b0aa:	00bb      	lsls	r3, r7, #2
 800b0ac:	58e1      	ldr	r1, [r4, r3]
 800b0ae:	f7f5 f9ef 	bl	8000490 <__aeabi_fadd>
 800b0b2:	3f01      	subs	r7, #1
 800b0b4:	e783      	b.n	800afbe <__kernel_rem_pio2f+0x43e>
 800b0b6:	2180      	movs	r1, #128	; 0x80
 800b0b8:	9c03      	ldr	r4, [sp, #12]
 800b0ba:	0609      	lsls	r1, r1, #24
 800b0bc:	185b      	adds	r3, r3, r1
 800b0be:	1852      	adds	r2, r2, r1
 800b0c0:	6063      	str	r3, [r4, #4]
 800b0c2:	6022      	str	r2, [r4, #0]
 800b0c4:	0023      	movs	r3, r4
 800b0c6:	1840      	adds	r0, r0, r1
 800b0c8:	e784      	b.n	800afd4 <__kernel_rem_pio2f+0x454>
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	0800b854 	.word	0x0800b854

0800b0d0 <__kernel_sinf>:
 800b0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0d2:	9201      	str	r2, [sp, #4]
 800b0d4:	22c8      	movs	r2, #200	; 0xc8
 800b0d6:	0043      	lsls	r3, r0, #1
 800b0d8:	1c04      	adds	r4, r0, #0
 800b0da:	9100      	str	r1, [sp, #0]
 800b0dc:	085b      	lsrs	r3, r3, #1
 800b0de:	0592      	lsls	r2, r2, #22
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	da03      	bge.n	800b0ec <__kernel_sinf+0x1c>
 800b0e4:	f7f6 f824 	bl	8001130 <__aeabi_f2iz>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d035      	beq.n	800b158 <__kernel_sinf+0x88>
 800b0ec:	1c21      	adds	r1, r4, #0
 800b0ee:	1c20      	adds	r0, r4, #0
 800b0f0:	f7f5 fd34 	bl	8000b5c <__aeabi_fmul>
 800b0f4:	1c05      	adds	r5, r0, #0
 800b0f6:	1c01      	adds	r1, r0, #0
 800b0f8:	1c20      	adds	r0, r4, #0
 800b0fa:	f7f5 fd2f 	bl	8000b5c <__aeabi_fmul>
 800b0fe:	4928      	ldr	r1, [pc, #160]	; (800b1a0 <__kernel_sinf+0xd0>)
 800b100:	1c06      	adds	r6, r0, #0
 800b102:	1c28      	adds	r0, r5, #0
 800b104:	f7f5 fd2a 	bl	8000b5c <__aeabi_fmul>
 800b108:	4926      	ldr	r1, [pc, #152]	; (800b1a4 <__kernel_sinf+0xd4>)
 800b10a:	f7f5 fe4d 	bl	8000da8 <__aeabi_fsub>
 800b10e:	1c29      	adds	r1, r5, #0
 800b110:	f7f5 fd24 	bl	8000b5c <__aeabi_fmul>
 800b114:	4924      	ldr	r1, [pc, #144]	; (800b1a8 <__kernel_sinf+0xd8>)
 800b116:	f7f5 f9bb 	bl	8000490 <__aeabi_fadd>
 800b11a:	1c29      	adds	r1, r5, #0
 800b11c:	f7f5 fd1e 	bl	8000b5c <__aeabi_fmul>
 800b120:	4922      	ldr	r1, [pc, #136]	; (800b1ac <__kernel_sinf+0xdc>)
 800b122:	f7f5 fe41 	bl	8000da8 <__aeabi_fsub>
 800b126:	1c29      	adds	r1, r5, #0
 800b128:	f7f5 fd18 	bl	8000b5c <__aeabi_fmul>
 800b12c:	4920      	ldr	r1, [pc, #128]	; (800b1b0 <__kernel_sinf+0xe0>)
 800b12e:	f7f5 f9af 	bl	8000490 <__aeabi_fadd>
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	1c07      	adds	r7, r0, #0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d110      	bne.n	800b15c <__kernel_sinf+0x8c>
 800b13a:	1c01      	adds	r1, r0, #0
 800b13c:	1c28      	adds	r0, r5, #0
 800b13e:	f7f5 fd0d 	bl	8000b5c <__aeabi_fmul>
 800b142:	491c      	ldr	r1, [pc, #112]	; (800b1b4 <__kernel_sinf+0xe4>)
 800b144:	f7f5 fe30 	bl	8000da8 <__aeabi_fsub>
 800b148:	1c31      	adds	r1, r6, #0
 800b14a:	f7f5 fd07 	bl	8000b5c <__aeabi_fmul>
 800b14e:	1c01      	adds	r1, r0, #0
 800b150:	1c20      	adds	r0, r4, #0
 800b152:	f7f5 f99d 	bl	8000490 <__aeabi_fadd>
 800b156:	1c04      	adds	r4, r0, #0
 800b158:	1c20      	adds	r0, r4, #0
 800b15a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b15c:	21fc      	movs	r1, #252	; 0xfc
 800b15e:	9800      	ldr	r0, [sp, #0]
 800b160:	0589      	lsls	r1, r1, #22
 800b162:	f7f5 fcfb 	bl	8000b5c <__aeabi_fmul>
 800b166:	1c39      	adds	r1, r7, #0
 800b168:	9001      	str	r0, [sp, #4]
 800b16a:	1c30      	adds	r0, r6, #0
 800b16c:	f7f5 fcf6 	bl	8000b5c <__aeabi_fmul>
 800b170:	1c01      	adds	r1, r0, #0
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	f7f5 fe18 	bl	8000da8 <__aeabi_fsub>
 800b178:	1c29      	adds	r1, r5, #0
 800b17a:	f7f5 fcef 	bl	8000b5c <__aeabi_fmul>
 800b17e:	9900      	ldr	r1, [sp, #0]
 800b180:	f7f5 fe12 	bl	8000da8 <__aeabi_fsub>
 800b184:	490b      	ldr	r1, [pc, #44]	; (800b1b4 <__kernel_sinf+0xe4>)
 800b186:	1c05      	adds	r5, r0, #0
 800b188:	1c30      	adds	r0, r6, #0
 800b18a:	f7f5 fce7 	bl	8000b5c <__aeabi_fmul>
 800b18e:	1c01      	adds	r1, r0, #0
 800b190:	1c28      	adds	r0, r5, #0
 800b192:	f7f5 f97d 	bl	8000490 <__aeabi_fadd>
 800b196:	1c01      	adds	r1, r0, #0
 800b198:	1c20      	adds	r0, r4, #0
 800b19a:	f7f5 fe05 	bl	8000da8 <__aeabi_fsub>
 800b19e:	e7da      	b.n	800b156 <__kernel_sinf+0x86>
 800b1a0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b1a4:	32d72f34 	.word	0x32d72f34
 800b1a8:	3638ef1b 	.word	0x3638ef1b
 800b1ac:	39500d01 	.word	0x39500d01
 800b1b0:	3c088889 	.word	0x3c088889
 800b1b4:	3e2aaaab 	.word	0x3e2aaaab

0800b1b8 <floorf>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	0045      	lsls	r5, r0, #1
 800b1bc:	086e      	lsrs	r6, r5, #1
 800b1be:	0e2d      	lsrs	r5, r5, #24
 800b1c0:	3d7f      	subs	r5, #127	; 0x7f
 800b1c2:	0004      	movs	r4, r0
 800b1c4:	2d16      	cmp	r5, #22
 800b1c6:	dc24      	bgt.n	800b212 <floorf+0x5a>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	da0e      	bge.n	800b1ea <floorf+0x32>
 800b1cc:	4916      	ldr	r1, [pc, #88]	; (800b228 <floorf+0x70>)
 800b1ce:	f7f5 f95f 	bl	8000490 <__aeabi_fadd>
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	f7f5 f930 	bl	8000438 <__aeabi_fcmpgt>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d004      	beq.n	800b1e6 <floorf+0x2e>
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	da20      	bge.n	800b222 <floorf+0x6a>
 800b1e0:	2e00      	cmp	r6, #0
 800b1e2:	d000      	beq.n	800b1e6 <floorf+0x2e>
 800b1e4:	4c11      	ldr	r4, [pc, #68]	; (800b22c <floorf+0x74>)
 800b1e6:	1c20      	adds	r0, r4, #0
 800b1e8:	e01a      	b.n	800b220 <floorf+0x68>
 800b1ea:	4e11      	ldr	r6, [pc, #68]	; (800b230 <floorf+0x78>)
 800b1ec:	412e      	asrs	r6, r5
 800b1ee:	4206      	tst	r6, r0
 800b1f0:	d016      	beq.n	800b220 <floorf+0x68>
 800b1f2:	490d      	ldr	r1, [pc, #52]	; (800b228 <floorf+0x70>)
 800b1f4:	f7f5 f94c 	bl	8000490 <__aeabi_fadd>
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	f7f5 f91d 	bl	8000438 <__aeabi_fcmpgt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d0f1      	beq.n	800b1e6 <floorf+0x2e>
 800b202:	2c00      	cmp	r4, #0
 800b204:	da03      	bge.n	800b20e <floorf+0x56>
 800b206:	2380      	movs	r3, #128	; 0x80
 800b208:	041b      	lsls	r3, r3, #16
 800b20a:	412b      	asrs	r3, r5
 800b20c:	18e4      	adds	r4, r4, r3
 800b20e:	43b4      	bics	r4, r6
 800b210:	e7e9      	b.n	800b1e6 <floorf+0x2e>
 800b212:	23ff      	movs	r3, #255	; 0xff
 800b214:	05db      	lsls	r3, r3, #23
 800b216:	429e      	cmp	r6, r3
 800b218:	d302      	bcc.n	800b220 <floorf+0x68>
 800b21a:	1c01      	adds	r1, r0, #0
 800b21c:	f7f5 f938 	bl	8000490 <__aeabi_fadd>
 800b220:	bd70      	pop	{r4, r5, r6, pc}
 800b222:	2400      	movs	r4, #0
 800b224:	e7df      	b.n	800b1e6 <floorf+0x2e>
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	7149f2ca 	.word	0x7149f2ca
 800b22c:	bf800000 	.word	0xbf800000
 800b230:	007fffff 	.word	0x007fffff

0800b234 <scalbnf>:
 800b234:	0043      	lsls	r3, r0, #1
 800b236:	b570      	push	{r4, r5, r6, lr}
 800b238:	0002      	movs	r2, r0
 800b23a:	000c      	movs	r4, r1
 800b23c:	085d      	lsrs	r5, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d006      	beq.n	800b250 <scalbnf+0x1c>
 800b242:	21ff      	movs	r1, #255	; 0xff
 800b244:	05c9      	lsls	r1, r1, #23
 800b246:	428d      	cmp	r5, r1
 800b248:	d303      	bcc.n	800b252 <scalbnf+0x1e>
 800b24a:	1c01      	adds	r1, r0, #0
 800b24c:	f7f5 f920 	bl	8000490 <__aeabi_fadd>
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	4208      	tst	r0, r1
 800b254:	d116      	bne.n	800b284 <scalbnf+0x50>
 800b256:	2198      	movs	r1, #152	; 0x98
 800b258:	05c9      	lsls	r1, r1, #23
 800b25a:	f7f5 fc7f 	bl	8000b5c <__aeabi_fmul>
 800b25e:	4b1b      	ldr	r3, [pc, #108]	; (800b2cc <scalbnf+0x98>)
 800b260:	429c      	cmp	r4, r3
 800b262:	db29      	blt.n	800b2b8 <scalbnf+0x84>
 800b264:	0002      	movs	r2, r0
 800b266:	15c3      	asrs	r3, r0, #23
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	3b19      	subs	r3, #25
 800b26c:	191b      	adds	r3, r3, r4
 800b26e:	2bfe      	cmp	r3, #254	; 0xfe
 800b270:	dd0a      	ble.n	800b288 <scalbnf+0x54>
 800b272:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <scalbnf+0x9c>)
 800b274:	2800      	cmp	r0, #0
 800b276:	da00      	bge.n	800b27a <scalbnf+0x46>
 800b278:	4b16      	ldr	r3, [pc, #88]	; (800b2d4 <scalbnf+0xa0>)
 800b27a:	4915      	ldr	r1, [pc, #84]	; (800b2d0 <scalbnf+0x9c>)
 800b27c:	1c18      	adds	r0, r3, #0
 800b27e:	f7f5 fc6d 	bl	8000b5c <__aeabi_fmul>
 800b282:	e7e5      	b.n	800b250 <scalbnf+0x1c>
 800b284:	0e1b      	lsrs	r3, r3, #24
 800b286:	e7f1      	b.n	800b26c <scalbnf+0x38>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dd04      	ble.n	800b296 <scalbnf+0x62>
 800b28c:	4812      	ldr	r0, [pc, #72]	; (800b2d8 <scalbnf+0xa4>)
 800b28e:	4002      	ands	r2, r0
 800b290:	05d8      	lsls	r0, r3, #23
 800b292:	4310      	orrs	r0, r2
 800b294:	e7dc      	b.n	800b250 <scalbnf+0x1c>
 800b296:	0019      	movs	r1, r3
 800b298:	3116      	adds	r1, #22
 800b29a:	da0f      	bge.n	800b2bc <scalbnf+0x88>
 800b29c:	4a0f      	ldr	r2, [pc, #60]	; (800b2dc <scalbnf+0xa8>)
 800b29e:	0fc3      	lsrs	r3, r0, #31
 800b2a0:	4294      	cmp	r4, r2
 800b2a2:	dd05      	ble.n	800b2b0 <scalbnf+0x7c>
 800b2a4:	480a      	ldr	r0, [pc, #40]	; (800b2d0 <scalbnf+0x9c>)
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d000      	beq.n	800b2ac <scalbnf+0x78>
 800b2aa:	480a      	ldr	r0, [pc, #40]	; (800b2d4 <scalbnf+0xa0>)
 800b2ac:	4908      	ldr	r1, [pc, #32]	; (800b2d0 <scalbnf+0x9c>)
 800b2ae:	e7e6      	b.n	800b27e <scalbnf+0x4a>
 800b2b0:	480b      	ldr	r0, [pc, #44]	; (800b2e0 <scalbnf+0xac>)
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d000      	beq.n	800b2b8 <scalbnf+0x84>
 800b2b6:	480b      	ldr	r0, [pc, #44]	; (800b2e4 <scalbnf+0xb0>)
 800b2b8:	4909      	ldr	r1, [pc, #36]	; (800b2e0 <scalbnf+0xac>)
 800b2ba:	e7e0      	b.n	800b27e <scalbnf+0x4a>
 800b2bc:	21cc      	movs	r1, #204	; 0xcc
 800b2be:	3319      	adds	r3, #25
 800b2c0:	05d8      	lsls	r0, r3, #23
 800b2c2:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <scalbnf+0xa4>)
 800b2c4:	0589      	lsls	r1, r1, #22
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	4310      	orrs	r0, r2
 800b2ca:	e7d8      	b.n	800b27e <scalbnf+0x4a>
 800b2cc:	ffff3cb0 	.word	0xffff3cb0
 800b2d0:	7149f2ca 	.word	0x7149f2ca
 800b2d4:	f149f2ca 	.word	0xf149f2ca
 800b2d8:	807fffff 	.word	0x807fffff
 800b2dc:	0000c350 	.word	0x0000c350
 800b2e0:	0da24260 	.word	0x0da24260
 800b2e4:	8da24260 	.word	0x8da24260

0800b2e8 <_init>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	46c0      	nop			; (mov r8, r8)
 800b2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ee:	bc08      	pop	{r3}
 800b2f0:	469e      	mov	lr, r3
 800b2f2:	4770      	bx	lr

0800b2f4 <_fini>:
 800b2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fa:	bc08      	pop	{r3}
 800b2fc:	469e      	mov	lr, r3
 800b2fe:	4770      	bx	lr
