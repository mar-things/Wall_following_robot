
wall_follower_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800b38c  0800b38c  0001b38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d8  0800b8d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8d8  0800b8d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8d8  0800b8d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000068  0800b948  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800b948  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018008  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c60  00000000  00000000  000380db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f99  00000000  00000000  0003d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d19  00000000  00000000  0003e0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b474  00000000  00000000  00055dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dfb6  00000000  00000000  0007125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c5c  00000000  00000000  000ff214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00103e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b374 	.word	0x0800b374

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	0800b374 	.word	0x0800b374

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fb71 	bl	8000adc <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fafd 	bl	8000a04 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fb63 	bl	8000adc <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb59 	bl	8000adc <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb09 	bl	8000a50 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 faff 	bl	8000a50 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_f2uiz>:
 8000460:	219e      	movs	r1, #158	; 0x9e
 8000462:	b510      	push	{r4, lr}
 8000464:	05c9      	lsls	r1, r1, #23
 8000466:	1c04      	adds	r4, r0, #0
 8000468:	f7ff fff0 	bl	800044c <__aeabi_fcmpge>
 800046c:	2800      	cmp	r0, #0
 800046e:	d103      	bne.n	8000478 <__aeabi_f2uiz+0x18>
 8000470:	1c20      	adds	r0, r4, #0
 8000472:	f000 fe7b 	bl	800116c <__aeabi_f2iz>
 8000476:	bd10      	pop	{r4, pc}
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	1c20      	adds	r0, r4, #0
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	f000 fcbf 	bl	8000e00 <__aeabi_fsub>
 8000482:	f000 fe73 	bl	800116c <__aeabi_f2iz>
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	469c      	mov	ip, r3
 800048c:	4460      	add	r0, ip
 800048e:	e7f2      	b.n	8000476 <__aeabi_f2uiz+0x16>

08000490 <__aeabi_fadd>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	4647      	mov	r7, r8
 8000494:	46ce      	mov	lr, r9
 8000496:	024a      	lsls	r2, r1, #9
 8000498:	0243      	lsls	r3, r0, #9
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	0fc4      	lsrs	r4, r0, #31
 800049e:	0a50      	lsrs	r0, r2, #9
 80004a0:	4680      	mov	r8, r0
 80004a2:	0048      	lsls	r0, r1, #1
 80004a4:	0a5b      	lsrs	r3, r3, #9
 80004a6:	0e00      	lsrs	r0, r0, #24
 80004a8:	0992      	lsrs	r2, r2, #6
 80004aa:	4694      	mov	ip, r2
 80004ac:	b580      	push	{r7, lr}
 80004ae:	001e      	movs	r6, r3
 80004b0:	4681      	mov	r9, r0
 80004b2:	0002      	movs	r2, r0
 80004b4:	0e2d      	lsrs	r5, r5, #24
 80004b6:	00df      	lsls	r7, r3, #3
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	428c      	cmp	r4, r1
 80004bc:	d024      	beq.n	8000508 <__aeabi_fadd+0x78>
 80004be:	1a28      	subs	r0, r5, r0
 80004c0:	2800      	cmp	r0, #0
 80004c2:	dd0e      	ble.n	80004e2 <__aeabi_fadd+0x52>
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	d13e      	bne.n	8000546 <__aeabi_fadd+0xb6>
 80004c8:	4662      	mov	r2, ip
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x40>
 80004ce:	e0fd      	b.n	80006cc <__aeabi_fadd+0x23c>
 80004d0:	1e42      	subs	r2, r0, #1
 80004d2:	2801      	cmp	r0, #1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x48>
 80004d6:	e137      	b.n	8000748 <__aeabi_fadd+0x2b8>
 80004d8:	28ff      	cmp	r0, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x4e>
 80004dc:	e0a9      	b.n	8000632 <__aeabi_fadd+0x1a2>
 80004de:	0010      	movs	r0, r2
 80004e0:	e039      	b.n	8000556 <__aeabi_fadd+0xc6>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d063      	beq.n	80005ae <__aeabi_fadd+0x11e>
 80004e6:	464b      	mov	r3, r9
 80004e8:	1b52      	subs	r2, r2, r5
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0x60>
 80004ee:	e0e0      	b.n	80006b2 <__aeabi_fadd+0x222>
 80004f0:	2f00      	cmp	r7, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x66>
 80004f4:	e0ce      	b.n	8000694 <__aeabi_fadd+0x204>
 80004f6:	1e53      	subs	r3, r2, #1
 80004f8:	2a01      	cmp	r2, #1
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0x6e>
 80004fc:	e155      	b.n	80007aa <__aeabi_fadd+0x31a>
 80004fe:	2aff      	cmp	r2, #255	; 0xff
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x74>
 8000502:	e094      	b.n	800062e <__aeabi_fadd+0x19e>
 8000504:	001a      	movs	r2, r3
 8000506:	e0d9      	b.n	80006bc <__aeabi_fadd+0x22c>
 8000508:	1a2a      	subs	r2, r5, r0
 800050a:	2a00      	cmp	r2, #0
 800050c:	dc00      	bgt.n	8000510 <__aeabi_fadd+0x80>
 800050e:	e099      	b.n	8000644 <__aeabi_fadd+0x1b4>
 8000510:	2800      	cmp	r0, #0
 8000512:	d062      	beq.n	80005da <__aeabi_fadd+0x14a>
 8000514:	2dff      	cmp	r5, #255	; 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x8a>
 8000518:	e08b      	b.n	8000632 <__aeabi_fadd+0x1a2>
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	4661      	mov	r1, ip
 800051e:	04db      	lsls	r3, r3, #19
 8000520:	4319      	orrs	r1, r3
 8000522:	468c      	mov	ip, r1
 8000524:	2a1b      	cmp	r2, #27
 8000526:	dc00      	bgt.n	800052a <__aeabi_fadd+0x9a>
 8000528:	e0d2      	b.n	80006d0 <__aeabi_fadd+0x240>
 800052a:	2301      	movs	r3, #1
 800052c:	19db      	adds	r3, r3, r7
 800052e:	015a      	lsls	r2, r3, #5
 8000530:	d56a      	bpl.n	8000608 <__aeabi_fadd+0x178>
 8000532:	3501      	adds	r5, #1
 8000534:	2dff      	cmp	r5, #255	; 0xff
 8000536:	d05b      	beq.n	80005f0 <__aeabi_fadd+0x160>
 8000538:	2201      	movs	r2, #1
 800053a:	49a3      	ldr	r1, [pc, #652]	; (80007c8 <__aeabi_fadd+0x338>)
 800053c:	401a      	ands	r2, r3
 800053e:	085b      	lsrs	r3, r3, #1
 8000540:	400b      	ands	r3, r1
 8000542:	4313      	orrs	r3, r2
 8000544:	e01c      	b.n	8000580 <__aeabi_fadd+0xf0>
 8000546:	2dff      	cmp	r5, #255	; 0xff
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0xbc>
 800054a:	e072      	b.n	8000632 <__aeabi_fadd+0x1a2>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	4662      	mov	r2, ip
 8000550:	04db      	lsls	r3, r3, #19
 8000552:	431a      	orrs	r2, r3
 8000554:	4694      	mov	ip, r2
 8000556:	281b      	cmp	r0, #27
 8000558:	dc00      	bgt.n	800055c <__aeabi_fadd+0xcc>
 800055a:	e090      	b.n	800067e <__aeabi_fadd+0x1ee>
 800055c:	2301      	movs	r3, #1
 800055e:	1afb      	subs	r3, r7, r3
 8000560:	015a      	lsls	r2, r3, #5
 8000562:	d551      	bpl.n	8000608 <__aeabi_fadd+0x178>
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	099e      	lsrs	r6, r3, #6
 8000568:	0030      	movs	r0, r6
 800056a:	f000 feb9 	bl	80012e0 <__clzsi2>
 800056e:	0033      	movs	r3, r6
 8000570:	3805      	subs	r0, #5
 8000572:	4083      	lsls	r3, r0
 8000574:	4285      	cmp	r5, r0
 8000576:	dc00      	bgt.n	800057a <__aeabi_fadd+0xea>
 8000578:	e075      	b.n	8000666 <__aeabi_fadd+0x1d6>
 800057a:	4a94      	ldr	r2, [pc, #592]	; (80007cc <__aeabi_fadd+0x33c>)
 800057c:	1a2d      	subs	r5, r5, r0
 800057e:	4013      	ands	r3, r2
 8000580:	075a      	lsls	r2, r3, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fadd+0xfe>
 8000584:	220f      	movs	r2, #15
 8000586:	401a      	ands	r2, r3
 8000588:	2a04      	cmp	r2, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fadd+0xfe>
 800058c:	3304      	adds	r3, #4
 800058e:	015a      	lsls	r2, r3, #5
 8000590:	d53c      	bpl.n	800060c <__aeabi_fadd+0x17c>
 8000592:	1c68      	adds	r0, r5, #1
 8000594:	2dfe      	cmp	r5, #254	; 0xfe
 8000596:	d02b      	beq.n	80005f0 <__aeabi_fadd+0x160>
 8000598:	019b      	lsls	r3, r3, #6
 800059a:	0a5e      	lsrs	r6, r3, #9
 800059c:	b2c0      	uxtb	r0, r0
 800059e:	05c0      	lsls	r0, r0, #23
 80005a0:	4330      	orrs	r0, r6
 80005a2:	07e4      	lsls	r4, r4, #31
 80005a4:	4320      	orrs	r0, r4
 80005a6:	bcc0      	pop	{r6, r7}
 80005a8:	46b9      	mov	r9, r7
 80005aa:	46b0      	mov	r8, r6
 80005ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ae:	20fe      	movs	r0, #254	; 0xfe
 80005b0:	1c6a      	adds	r2, r5, #1
 80005b2:	4210      	tst	r0, r2
 80005b4:	d172      	bne.n	800069c <__aeabi_fadd+0x20c>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x12c>
 80005ba:	e0ae      	b.n	800071a <__aeabi_fadd+0x28a>
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x132>
 80005c0:	e0ec      	b.n	800079c <__aeabi_fadd+0x30c>
 80005c2:	4663      	mov	r3, ip
 80005c4:	2000      	movs	r0, #0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0e9      	beq.n	800059e <__aeabi_fadd+0x10e>
 80005ca:	1afb      	subs	r3, r7, r3
 80005cc:	015a      	lsls	r2, r3, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x142>
 80005d0:	e0f3      	b.n	80007ba <__aeabi_fadd+0x32a>
 80005d2:	4663      	mov	r3, ip
 80005d4:	000c      	movs	r4, r1
 80005d6:	1bdb      	subs	r3, r3, r7
 80005d8:	e7d2      	b.n	8000580 <__aeabi_fadd+0xf0>
 80005da:	4661      	mov	r1, ip
 80005dc:	2900      	cmp	r1, #0
 80005de:	d05b      	beq.n	8000698 <__aeabi_fadd+0x208>
 80005e0:	1e51      	subs	r1, r2, #1
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x158>
 80005e6:	e0a7      	b.n	8000738 <__aeabi_fadd+0x2a8>
 80005e8:	2aff      	cmp	r2, #255	; 0xff
 80005ea:	d022      	beq.n	8000632 <__aeabi_fadd+0x1a2>
 80005ec:	000a      	movs	r2, r1
 80005ee:	e799      	b.n	8000524 <__aeabi_fadd+0x94>
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2600      	movs	r6, #0
 80005f4:	e7d3      	b.n	800059e <__aeabi_fadd+0x10e>
 80005f6:	21fe      	movs	r1, #254	; 0xfe
 80005f8:	1c6a      	adds	r2, r5, #1
 80005fa:	4211      	tst	r1, r2
 80005fc:	d073      	beq.n	80006e6 <__aeabi_fadd+0x256>
 80005fe:	2aff      	cmp	r2, #255	; 0xff
 8000600:	d0f6      	beq.n	80005f0 <__aeabi_fadd+0x160>
 8000602:	0015      	movs	r5, r2
 8000604:	4467      	add	r7, ip
 8000606:	087b      	lsrs	r3, r7, #1
 8000608:	075a      	lsls	r2, r3, #29
 800060a:	d1bb      	bne.n	8000584 <__aeabi_fadd+0xf4>
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	2dff      	cmp	r5, #255	; 0xff
 8000610:	d00f      	beq.n	8000632 <__aeabi_fadd+0x1a2>
 8000612:	025b      	lsls	r3, r3, #9
 8000614:	0a5e      	lsrs	r6, r3, #9
 8000616:	b2e8      	uxtb	r0, r5
 8000618:	e7c1      	b.n	800059e <__aeabi_fadd+0x10e>
 800061a:	4662      	mov	r2, ip
 800061c:	2a00      	cmp	r2, #0
 800061e:	d008      	beq.n	8000632 <__aeabi_fadd+0x1a2>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	03d2      	lsls	r2, r2, #15
 8000624:	4213      	tst	r3, r2
 8000626:	d004      	beq.n	8000632 <__aeabi_fadd+0x1a2>
 8000628:	4640      	mov	r0, r8
 800062a:	4210      	tst	r0, r2
 800062c:	d101      	bne.n	8000632 <__aeabi_fadd+0x1a2>
 800062e:	000c      	movs	r4, r1
 8000630:	4643      	mov	r3, r8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0dc      	beq.n	80005f0 <__aeabi_fadd+0x160>
 8000636:	2680      	movs	r6, #128	; 0x80
 8000638:	03f6      	lsls	r6, r6, #15
 800063a:	431e      	orrs	r6, r3
 800063c:	0276      	lsls	r6, r6, #9
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	0a76      	lsrs	r6, r6, #9
 8000642:	e7ac      	b.n	800059e <__aeabi_fadd+0x10e>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d0d6      	beq.n	80005f6 <__aeabi_fadd+0x166>
 8000648:	1b42      	subs	r2, r0, r5
 800064a:	2d00      	cmp	r5, #0
 800064c:	d05c      	beq.n	8000708 <__aeabi_fadd+0x278>
 800064e:	28ff      	cmp	r0, #255	; 0xff
 8000650:	d0ee      	beq.n	8000630 <__aeabi_fadd+0x1a0>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	04db      	lsls	r3, r3, #19
 8000656:	431f      	orrs	r7, r3
 8000658:	2a1b      	cmp	r2, #27
 800065a:	dc00      	bgt.n	800065e <__aeabi_fadd+0x1ce>
 800065c:	e082      	b.n	8000764 <__aeabi_fadd+0x2d4>
 800065e:	2301      	movs	r3, #1
 8000660:	464d      	mov	r5, r9
 8000662:	4463      	add	r3, ip
 8000664:	e763      	b.n	800052e <__aeabi_fadd+0x9e>
 8000666:	2220      	movs	r2, #32
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	3001      	adds	r0, #1
 800066c:	1a12      	subs	r2, r2, r0
 800066e:	0019      	movs	r1, r3
 8000670:	4093      	lsls	r3, r2
 8000672:	40c1      	lsrs	r1, r0
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	4193      	sbcs	r3, r2
 8000678:	2500      	movs	r5, #0
 800067a:	430b      	orrs	r3, r1
 800067c:	e780      	b.n	8000580 <__aeabi_fadd+0xf0>
 800067e:	2320      	movs	r3, #32
 8000680:	4661      	mov	r1, ip
 8000682:	1a1b      	subs	r3, r3, r0
 8000684:	4099      	lsls	r1, r3
 8000686:	4662      	mov	r2, ip
 8000688:	000b      	movs	r3, r1
 800068a:	40c2      	lsrs	r2, r0
 800068c:	1e59      	subs	r1, r3, #1
 800068e:	418b      	sbcs	r3, r1
 8000690:	4313      	orrs	r3, r2
 8000692:	e764      	b.n	800055e <__aeabi_fadd+0xce>
 8000694:	000c      	movs	r4, r1
 8000696:	4643      	mov	r3, r8
 8000698:	0015      	movs	r5, r2
 800069a:	e7b8      	b.n	800060e <__aeabi_fadd+0x17e>
 800069c:	4663      	mov	r3, ip
 800069e:	1afe      	subs	r6, r7, r3
 80006a0:	0173      	lsls	r3, r6, #5
 80006a2:	d445      	bmi.n	8000730 <__aeabi_fadd+0x2a0>
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x21a>
 80006a8:	e75e      	b.n	8000568 <__aeabi_fadd+0xd8>
 80006aa:	2400      	movs	r4, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	2600      	movs	r6, #0
 80006b0:	e775      	b.n	800059e <__aeabi_fadd+0x10e>
 80006b2:	2bff      	cmp	r3, #255	; 0xff
 80006b4:	d0bb      	beq.n	800062e <__aeabi_fadd+0x19e>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	04db      	lsls	r3, r3, #19
 80006ba:	431f      	orrs	r7, r3
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd47      	ble.n	8000750 <__aeabi_fadd+0x2c0>
 80006c0:	2301      	movs	r3, #1
 80006c2:	4662      	mov	r2, ip
 80006c4:	000c      	movs	r4, r1
 80006c6:	464d      	mov	r5, r9
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	e749      	b.n	8000560 <__aeabi_fadd+0xd0>
 80006cc:	0005      	movs	r5, r0
 80006ce:	e79e      	b.n	800060e <__aeabi_fadd+0x17e>
 80006d0:	4661      	mov	r1, ip
 80006d2:	2320      	movs	r3, #32
 80006d4:	40d1      	lsrs	r1, r2
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	4662      	mov	r2, ip
 80006da:	409a      	lsls	r2, r3
 80006dc:	0013      	movs	r3, r2
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	4193      	sbcs	r3, r2
 80006e2:	430b      	orrs	r3, r1
 80006e4:	e722      	b.n	800052c <__aeabi_fadd+0x9c>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d146      	bne.n	8000778 <__aeabi_fadd+0x2e8>
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d062      	beq.n	80007b4 <__aeabi_fadd+0x324>
 80006ee:	4663      	mov	r3, ip
 80006f0:	2000      	movs	r0, #0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x268>
 80006f6:	e752      	b.n	800059e <__aeabi_fadd+0x10e>
 80006f8:	003b      	movs	r3, r7
 80006fa:	4463      	add	r3, ip
 80006fc:	015a      	lsls	r2, r3, #5
 80006fe:	d583      	bpl.n	8000608 <__aeabi_fadd+0x178>
 8000700:	4a32      	ldr	r2, [pc, #200]	; (80007cc <__aeabi_fadd+0x33c>)
 8000702:	3501      	adds	r5, #1
 8000704:	4013      	ands	r3, r2
 8000706:	e77f      	b.n	8000608 <__aeabi_fadd+0x178>
 8000708:	2f00      	cmp	r7, #0
 800070a:	d0c4      	beq.n	8000696 <__aeabi_fadd+0x206>
 800070c:	1e53      	subs	r3, r2, #1
 800070e:	2a01      	cmp	r2, #1
 8000710:	d012      	beq.n	8000738 <__aeabi_fadd+0x2a8>
 8000712:	2aff      	cmp	r2, #255	; 0xff
 8000714:	d08c      	beq.n	8000630 <__aeabi_fadd+0x1a0>
 8000716:	001a      	movs	r2, r3
 8000718:	e79e      	b.n	8000658 <__aeabi_fadd+0x1c8>
 800071a:	2f00      	cmp	r7, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fadd+0x290>
 800071e:	e77c      	b.n	800061a <__aeabi_fadd+0x18a>
 8000720:	4663      	mov	r3, ip
 8000722:	2b00      	cmp	r3, #0
 8000724:	d183      	bne.n	800062e <__aeabi_fadd+0x19e>
 8000726:	2680      	movs	r6, #128	; 0x80
 8000728:	2400      	movs	r4, #0
 800072a:	20ff      	movs	r0, #255	; 0xff
 800072c:	03f6      	lsls	r6, r6, #15
 800072e:	e736      	b.n	800059e <__aeabi_fadd+0x10e>
 8000730:	4663      	mov	r3, ip
 8000732:	000c      	movs	r4, r1
 8000734:	1bde      	subs	r6, r3, r7
 8000736:	e717      	b.n	8000568 <__aeabi_fadd+0xd8>
 8000738:	003b      	movs	r3, r7
 800073a:	4463      	add	r3, ip
 800073c:	2501      	movs	r5, #1
 800073e:	015a      	lsls	r2, r3, #5
 8000740:	d400      	bmi.n	8000744 <__aeabi_fadd+0x2b4>
 8000742:	e761      	b.n	8000608 <__aeabi_fadd+0x178>
 8000744:	2502      	movs	r5, #2
 8000746:	e6f7      	b.n	8000538 <__aeabi_fadd+0xa8>
 8000748:	4663      	mov	r3, ip
 800074a:	2501      	movs	r5, #1
 800074c:	1afb      	subs	r3, r7, r3
 800074e:	e707      	b.n	8000560 <__aeabi_fadd+0xd0>
 8000750:	2320      	movs	r3, #32
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	0038      	movs	r0, r7
 8000756:	409f      	lsls	r7, r3
 8000758:	003b      	movs	r3, r7
 800075a:	40d0      	lsrs	r0, r2
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	4193      	sbcs	r3, r2
 8000760:	4303      	orrs	r3, r0
 8000762:	e7ae      	b.n	80006c2 <__aeabi_fadd+0x232>
 8000764:	2320      	movs	r3, #32
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	0039      	movs	r1, r7
 800076a:	409f      	lsls	r7, r3
 800076c:	003b      	movs	r3, r7
 800076e:	40d1      	lsrs	r1, r2
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	4193      	sbcs	r3, r2
 8000774:	430b      	orrs	r3, r1
 8000776:	e773      	b.n	8000660 <__aeabi_fadd+0x1d0>
 8000778:	2f00      	cmp	r7, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x2ee>
 800077c:	e758      	b.n	8000630 <__aeabi_fadd+0x1a0>
 800077e:	4662      	mov	r2, ip
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x2f6>
 8000784:	e755      	b.n	8000632 <__aeabi_fadd+0x1a2>
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	03d2      	lsls	r2, r2, #15
 800078a:	4213      	tst	r3, r2
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x300>
 800078e:	e750      	b.n	8000632 <__aeabi_fadd+0x1a2>
 8000790:	4641      	mov	r1, r8
 8000792:	4211      	tst	r1, r2
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x308>
 8000796:	e74c      	b.n	8000632 <__aeabi_fadd+0x1a2>
 8000798:	4643      	mov	r3, r8
 800079a:	e74a      	b.n	8000632 <__aeabi_fadd+0x1a2>
 800079c:	4663      	mov	r3, ip
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d083      	beq.n	80006aa <__aeabi_fadd+0x21a>
 80007a2:	000c      	movs	r4, r1
 80007a4:	4646      	mov	r6, r8
 80007a6:	2000      	movs	r0, #0
 80007a8:	e6f9      	b.n	800059e <__aeabi_fadd+0x10e>
 80007aa:	4663      	mov	r3, ip
 80007ac:	000c      	movs	r4, r1
 80007ae:	1bdb      	subs	r3, r3, r7
 80007b0:	3501      	adds	r5, #1
 80007b2:	e6d5      	b.n	8000560 <__aeabi_fadd+0xd0>
 80007b4:	4646      	mov	r6, r8
 80007b6:	2000      	movs	r0, #0
 80007b8:	e6f1      	b.n	800059e <__aeabi_fadd+0x10e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fadd+0x330>
 80007be:	e723      	b.n	8000608 <__aeabi_fadd+0x178>
 80007c0:	2400      	movs	r4, #0
 80007c2:	2600      	movs	r6, #0
 80007c4:	e6eb      	b.n	800059e <__aeabi_fadd+0x10e>
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	7dffffff 	.word	0x7dffffff
 80007cc:	fbffffff 	.word	0xfbffffff

080007d0 <__aeabi_fdiv>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	464f      	mov	r7, r9
 80007d4:	4646      	mov	r6, r8
 80007d6:	46d6      	mov	lr, sl
 80007d8:	0245      	lsls	r5, r0, #9
 80007da:	b5c0      	push	{r6, r7, lr}
 80007dc:	0047      	lsls	r7, r0, #1
 80007de:	1c0c      	adds	r4, r1, #0
 80007e0:	0a6d      	lsrs	r5, r5, #9
 80007e2:	0e3f      	lsrs	r7, r7, #24
 80007e4:	0fc6      	lsrs	r6, r0, #31
 80007e6:	2f00      	cmp	r7, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fdiv+0x1c>
 80007ea:	e06f      	b.n	80008cc <__aeabi_fdiv+0xfc>
 80007ec:	2fff      	cmp	r7, #255	; 0xff
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fdiv+0x22>
 80007f0:	e074      	b.n	80008dc <__aeabi_fdiv+0x10c>
 80007f2:	2300      	movs	r3, #0
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	4699      	mov	r9, r3
 80007f8:	469a      	mov	sl, r3
 80007fa:	00ed      	lsls	r5, r5, #3
 80007fc:	04d2      	lsls	r2, r2, #19
 80007fe:	4315      	orrs	r5, r2
 8000800:	3f7f      	subs	r7, #127	; 0x7f
 8000802:	0263      	lsls	r3, r4, #9
 8000804:	0a5b      	lsrs	r3, r3, #9
 8000806:	4698      	mov	r8, r3
 8000808:	0063      	lsls	r3, r4, #1
 800080a:	0e1b      	lsrs	r3, r3, #24
 800080c:	0fe4      	lsrs	r4, r4, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d04d      	beq.n	80008ae <__aeabi_fdiv+0xde>
 8000812:	2bff      	cmp	r3, #255	; 0xff
 8000814:	d045      	beq.n	80008a2 <__aeabi_fdiv+0xd2>
 8000816:	4642      	mov	r2, r8
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	00d2      	lsls	r2, r2, #3
 800081c:	04c9      	lsls	r1, r1, #19
 800081e:	4311      	orrs	r1, r2
 8000820:	4688      	mov	r8, r1
 8000822:	2200      	movs	r2, #0
 8000824:	3b7f      	subs	r3, #127	; 0x7f
 8000826:	0031      	movs	r1, r6
 8000828:	1aff      	subs	r7, r7, r3
 800082a:	464b      	mov	r3, r9
 800082c:	4061      	eors	r1, r4
 800082e:	b2c9      	uxtb	r1, r1
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d900      	bls.n	8000836 <__aeabi_fdiv+0x66>
 8000834:	e0b8      	b.n	80009a8 <__aeabi_fdiv+0x1d8>
 8000836:	4870      	ldr	r0, [pc, #448]	; (80009f8 <__aeabi_fdiv+0x228>)
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	58c3      	ldr	r3, [r0, r3]
 800083c:	469f      	mov	pc, r3
 800083e:	2300      	movs	r3, #0
 8000840:	4698      	mov	r8, r3
 8000842:	0026      	movs	r6, r4
 8000844:	4645      	mov	r5, r8
 8000846:	4692      	mov	sl, r2
 8000848:	4653      	mov	r3, sl
 800084a:	2b02      	cmp	r3, #2
 800084c:	d100      	bne.n	8000850 <__aeabi_fdiv+0x80>
 800084e:	e08d      	b.n	800096c <__aeabi_fdiv+0x19c>
 8000850:	2b03      	cmp	r3, #3
 8000852:	d100      	bne.n	8000856 <__aeabi_fdiv+0x86>
 8000854:	e0a1      	b.n	800099a <__aeabi_fdiv+0x1ca>
 8000856:	2b01      	cmp	r3, #1
 8000858:	d018      	beq.n	800088c <__aeabi_fdiv+0xbc>
 800085a:	003b      	movs	r3, r7
 800085c:	337f      	adds	r3, #127	; 0x7f
 800085e:	2b00      	cmp	r3, #0
 8000860:	dd6d      	ble.n	800093e <__aeabi_fdiv+0x16e>
 8000862:	076a      	lsls	r2, r5, #29
 8000864:	d004      	beq.n	8000870 <__aeabi_fdiv+0xa0>
 8000866:	220f      	movs	r2, #15
 8000868:	402a      	ands	r2, r5
 800086a:	2a04      	cmp	r2, #4
 800086c:	d000      	beq.n	8000870 <__aeabi_fdiv+0xa0>
 800086e:	3504      	adds	r5, #4
 8000870:	012a      	lsls	r2, r5, #4
 8000872:	d503      	bpl.n	800087c <__aeabi_fdiv+0xac>
 8000874:	4b61      	ldr	r3, [pc, #388]	; (80009fc <__aeabi_fdiv+0x22c>)
 8000876:	401d      	ands	r5, r3
 8000878:	003b      	movs	r3, r7
 800087a:	3380      	adds	r3, #128	; 0x80
 800087c:	2bfe      	cmp	r3, #254	; 0xfe
 800087e:	dd00      	ble.n	8000882 <__aeabi_fdiv+0xb2>
 8000880:	e074      	b.n	800096c <__aeabi_fdiv+0x19c>
 8000882:	01aa      	lsls	r2, r5, #6
 8000884:	0a52      	lsrs	r2, r2, #9
 8000886:	b2d8      	uxtb	r0, r3
 8000888:	e002      	b.n	8000890 <__aeabi_fdiv+0xc0>
 800088a:	000e      	movs	r6, r1
 800088c:	2000      	movs	r0, #0
 800088e:	2200      	movs	r2, #0
 8000890:	05c0      	lsls	r0, r0, #23
 8000892:	07f6      	lsls	r6, r6, #31
 8000894:	4310      	orrs	r0, r2
 8000896:	4330      	orrs	r0, r6
 8000898:	bce0      	pop	{r5, r6, r7}
 800089a:	46ba      	mov	sl, r7
 800089c:	46b1      	mov	r9, r6
 800089e:	46a8      	mov	r8, r5
 80008a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d13f      	bne.n	8000928 <__aeabi_fdiv+0x158>
 80008a8:	2202      	movs	r2, #2
 80008aa:	3fff      	subs	r7, #255	; 0xff
 80008ac:	e003      	b.n	80008b6 <__aeabi_fdiv+0xe6>
 80008ae:	4643      	mov	r3, r8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d12d      	bne.n	8000910 <__aeabi_fdiv+0x140>
 80008b4:	2201      	movs	r2, #1
 80008b6:	0031      	movs	r1, r6
 80008b8:	464b      	mov	r3, r9
 80008ba:	4061      	eors	r1, r4
 80008bc:	b2c9      	uxtb	r1, r1
 80008be:	4313      	orrs	r3, r2
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d838      	bhi.n	8000936 <__aeabi_fdiv+0x166>
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <__aeabi_fdiv+0x230>)
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	58c3      	ldr	r3, [r0, r3]
 80008ca:	469f      	mov	pc, r3
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d113      	bne.n	80008f8 <__aeabi_fdiv+0x128>
 80008d0:	2304      	movs	r3, #4
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b03      	subs	r3, #3
 80008d6:	2700      	movs	r7, #0
 80008d8:	469a      	mov	sl, r3
 80008da:	e792      	b.n	8000802 <__aeabi_fdiv+0x32>
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d105      	bne.n	80008ec <__aeabi_fdiv+0x11c>
 80008e0:	2308      	movs	r3, #8
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b06      	subs	r3, #6
 80008e6:	27ff      	movs	r7, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e78a      	b.n	8000802 <__aeabi_fdiv+0x32>
 80008ec:	230c      	movs	r3, #12
 80008ee:	4699      	mov	r9, r3
 80008f0:	3b09      	subs	r3, #9
 80008f2:	27ff      	movs	r7, #255	; 0xff
 80008f4:	469a      	mov	sl, r3
 80008f6:	e784      	b.n	8000802 <__aeabi_fdiv+0x32>
 80008f8:	0028      	movs	r0, r5
 80008fa:	f000 fcf1 	bl	80012e0 <__clzsi2>
 80008fe:	2776      	movs	r7, #118	; 0x76
 8000900:	1f43      	subs	r3, r0, #5
 8000902:	409d      	lsls	r5, r3
 8000904:	2300      	movs	r3, #0
 8000906:	427f      	negs	r7, r7
 8000908:	4699      	mov	r9, r3
 800090a:	469a      	mov	sl, r3
 800090c:	1a3f      	subs	r7, r7, r0
 800090e:	e778      	b.n	8000802 <__aeabi_fdiv+0x32>
 8000910:	4640      	mov	r0, r8
 8000912:	f000 fce5 	bl	80012e0 <__clzsi2>
 8000916:	4642      	mov	r2, r8
 8000918:	1f43      	subs	r3, r0, #5
 800091a:	409a      	lsls	r2, r3
 800091c:	2376      	movs	r3, #118	; 0x76
 800091e:	425b      	negs	r3, r3
 8000920:	4690      	mov	r8, r2
 8000922:	1a1b      	subs	r3, r3, r0
 8000924:	2200      	movs	r2, #0
 8000926:	e77e      	b.n	8000826 <__aeabi_fdiv+0x56>
 8000928:	2303      	movs	r3, #3
 800092a:	464a      	mov	r2, r9
 800092c:	431a      	orrs	r2, r3
 800092e:	4691      	mov	r9, r2
 8000930:	33fc      	adds	r3, #252	; 0xfc
 8000932:	2203      	movs	r2, #3
 8000934:	e777      	b.n	8000826 <__aeabi_fdiv+0x56>
 8000936:	000e      	movs	r6, r1
 8000938:	20ff      	movs	r0, #255	; 0xff
 800093a:	2200      	movs	r2, #0
 800093c:	e7a8      	b.n	8000890 <__aeabi_fdiv+0xc0>
 800093e:	2201      	movs	r2, #1
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dca2      	bgt.n	800088c <__aeabi_fdiv+0xbc>
 8000946:	379e      	adds	r7, #158	; 0x9e
 8000948:	002a      	movs	r2, r5
 800094a:	40bd      	lsls	r5, r7
 800094c:	40da      	lsrs	r2, r3
 800094e:	1e6b      	subs	r3, r5, #1
 8000950:	419d      	sbcs	r5, r3
 8000952:	4315      	orrs	r5, r2
 8000954:	076a      	lsls	r2, r5, #29
 8000956:	d004      	beq.n	8000962 <__aeabi_fdiv+0x192>
 8000958:	220f      	movs	r2, #15
 800095a:	402a      	ands	r2, r5
 800095c:	2a04      	cmp	r2, #4
 800095e:	d000      	beq.n	8000962 <__aeabi_fdiv+0x192>
 8000960:	3504      	adds	r5, #4
 8000962:	016a      	lsls	r2, r5, #5
 8000964:	d544      	bpl.n	80009f0 <__aeabi_fdiv+0x220>
 8000966:	2001      	movs	r0, #1
 8000968:	2200      	movs	r2, #0
 800096a:	e791      	b.n	8000890 <__aeabi_fdiv+0xc0>
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	2200      	movs	r2, #0
 8000970:	e78e      	b.n	8000890 <__aeabi_fdiv+0xc0>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	2600      	movs	r6, #0
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	03d2      	lsls	r2, r2, #15
 800097a:	e789      	b.n	8000890 <__aeabi_fdiv+0xc0>
 800097c:	2300      	movs	r3, #0
 800097e:	4698      	mov	r8, r3
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	03d2      	lsls	r2, r2, #15
 8000984:	4215      	tst	r5, r2
 8000986:	d008      	beq.n	800099a <__aeabi_fdiv+0x1ca>
 8000988:	4643      	mov	r3, r8
 800098a:	4213      	tst	r3, r2
 800098c:	d105      	bne.n	800099a <__aeabi_fdiv+0x1ca>
 800098e:	431a      	orrs	r2, r3
 8000990:	0252      	lsls	r2, r2, #9
 8000992:	0026      	movs	r6, r4
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0a52      	lsrs	r2, r2, #9
 8000998:	e77a      	b.n	8000890 <__aeabi_fdiv+0xc0>
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	03d2      	lsls	r2, r2, #15
 800099e:	432a      	orrs	r2, r5
 80009a0:	0252      	lsls	r2, r2, #9
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	0a52      	lsrs	r2, r2, #9
 80009a6:	e773      	b.n	8000890 <__aeabi_fdiv+0xc0>
 80009a8:	4642      	mov	r2, r8
 80009aa:	016b      	lsls	r3, r5, #5
 80009ac:	0155      	lsls	r5, r2, #5
 80009ae:	42ab      	cmp	r3, r5
 80009b0:	d21a      	bcs.n	80009e8 <__aeabi_fdiv+0x218>
 80009b2:	201b      	movs	r0, #27
 80009b4:	2200      	movs	r2, #0
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2601      	movs	r6, #1
 80009ba:	001c      	movs	r4, r3
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	db01      	blt.n	80009c8 <__aeabi_fdiv+0x1f8>
 80009c4:	429d      	cmp	r5, r3
 80009c6:	d801      	bhi.n	80009cc <__aeabi_fdiv+0x1fc>
 80009c8:	1b5b      	subs	r3, r3, r5
 80009ca:	4332      	orrs	r2, r6
 80009cc:	3801      	subs	r0, #1
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1f3      	bne.n	80009ba <__aeabi_fdiv+0x1ea>
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	4183      	sbcs	r3, r0
 80009d6:	4313      	orrs	r3, r2
 80009d8:	001d      	movs	r5, r3
 80009da:	003b      	movs	r3, r7
 80009dc:	337f      	adds	r3, #127	; 0x7f
 80009de:	000e      	movs	r6, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dd00      	ble.n	80009e6 <__aeabi_fdiv+0x216>
 80009e4:	e73d      	b.n	8000862 <__aeabi_fdiv+0x92>
 80009e6:	e7aa      	b.n	800093e <__aeabi_fdiv+0x16e>
 80009e8:	201a      	movs	r0, #26
 80009ea:	2201      	movs	r2, #1
 80009ec:	1b5b      	subs	r3, r3, r5
 80009ee:	e7e3      	b.n	80009b8 <__aeabi_fdiv+0x1e8>
 80009f0:	01aa      	lsls	r2, r5, #6
 80009f2:	2000      	movs	r0, #0
 80009f4:	0a52      	lsrs	r2, r2, #9
 80009f6:	e74b      	b.n	8000890 <__aeabi_fdiv+0xc0>
 80009f8:	0800b38c 	.word	0x0800b38c
 80009fc:	f7ffffff 	.word	0xf7ffffff
 8000a00:	0800b3cc 	.word	0x0800b3cc

08000a04 <__eqsf2>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	0042      	lsls	r2, r0, #1
 8000a08:	0245      	lsls	r5, r0, #9
 8000a0a:	024e      	lsls	r6, r1, #9
 8000a0c:	004c      	lsls	r4, r1, #1
 8000a0e:	0fc3      	lsrs	r3, r0, #31
 8000a10:	0a6d      	lsrs	r5, r5, #9
 8000a12:	2001      	movs	r0, #1
 8000a14:	0e12      	lsrs	r2, r2, #24
 8000a16:	0a76      	lsrs	r6, r6, #9
 8000a18:	0e24      	lsrs	r4, r4, #24
 8000a1a:	0fc9      	lsrs	r1, r1, #31
 8000a1c:	2aff      	cmp	r2, #255	; 0xff
 8000a1e:	d006      	beq.n	8000a2e <__eqsf2+0x2a>
 8000a20:	2cff      	cmp	r4, #255	; 0xff
 8000a22:	d003      	beq.n	8000a2c <__eqsf2+0x28>
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d101      	bne.n	8000a2c <__eqsf2+0x28>
 8000a28:	42b5      	cmp	r5, r6
 8000a2a:	d006      	beq.n	8000a3a <__eqsf2+0x36>
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d1fc      	bne.n	8000a2c <__eqsf2+0x28>
 8000a32:	2cff      	cmp	r4, #255	; 0xff
 8000a34:	d1fa      	bne.n	8000a2c <__eqsf2+0x28>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d1f8      	bne.n	8000a2c <__eqsf2+0x28>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d006      	beq.n	8000a4c <__eqsf2+0x48>
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d1f3      	bne.n	8000a2c <__eqsf2+0x28>
 8000a44:	0028      	movs	r0, r5
 8000a46:	1e43      	subs	r3, r0, #1
 8000a48:	4198      	sbcs	r0, r3
 8000a4a:	e7ef      	b.n	8000a2c <__eqsf2+0x28>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e7ed      	b.n	8000a2c <__eqsf2+0x28>

08000a50 <__gesf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0245      	lsls	r5, r0, #9
 8000a56:	024e      	lsls	r6, r1, #9
 8000a58:	004c      	lsls	r4, r1, #1
 8000a5a:	0fc3      	lsrs	r3, r0, #31
 8000a5c:	0a6d      	lsrs	r5, r5, #9
 8000a5e:	0e12      	lsrs	r2, r2, #24
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc8      	lsrs	r0, r1, #31
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d01b      	beq.n	8000aa2 <__gesf2+0x52>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d00e      	beq.n	8000a8c <__gesf2+0x3c>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d11b      	bne.n	8000aaa <__gesf2+0x5a>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d101      	bne.n	8000a7a <__gesf2+0x2a>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d01c      	beq.n	8000ab4 <__gesf2+0x64>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d00c      	beq.n	8000a98 <__gesf2+0x48>
 8000a7e:	4283      	cmp	r3, r0
 8000a80:	d01c      	beq.n	8000abc <__gesf2+0x6c>
 8000a82:	2102      	movs	r1, #2
 8000a84:	1e58      	subs	r0, r3, #1
 8000a86:	4008      	ands	r0, r1
 8000a88:	3801      	subs	r0, #1
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d122      	bne.n	8000ad6 <__gesf2+0x86>
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d1f4      	bne.n	8000a7e <__gesf2+0x2e>
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d1f2      	bne.n	8000a7e <__gesf2+0x2e>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d1f6      	bne.n	8000a8a <__gesf2+0x3a>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7f3      	b.n	8000a8a <__gesf2+0x3a>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d117      	bne.n	8000ad6 <__gesf2+0x86>
 8000aa6:	2cff      	cmp	r4, #255	; 0xff
 8000aa8:	d0f0      	beq.n	8000a8c <__gesf2+0x3c>
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d1e7      	bne.n	8000a7e <__gesf2+0x2e>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d1e5      	bne.n	8000a7e <__gesf2+0x2e>
 8000ab2:	e7e6      	b.n	8000a82 <__gesf2+0x32>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0e7      	beq.n	8000a8a <__gesf2+0x3a>
 8000aba:	e7e2      	b.n	8000a82 <__gesf2+0x32>
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	dc05      	bgt.n	8000acc <__gesf2+0x7c>
 8000ac0:	dbea      	blt.n	8000a98 <__gesf2+0x48>
 8000ac2:	42b5      	cmp	r5, r6
 8000ac4:	d802      	bhi.n	8000acc <__gesf2+0x7c>
 8000ac6:	d3e7      	bcc.n	8000a98 <__gesf2+0x48>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7de      	b.n	8000a8a <__gesf2+0x3a>
 8000acc:	4243      	negs	r3, r0
 8000ace:	4158      	adcs	r0, r3
 8000ad0:	0040      	lsls	r0, r0, #1
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7d9      	b.n	8000a8a <__gesf2+0x3a>
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	4240      	negs	r0, r0
 8000ada:	e7d6      	b.n	8000a8a <__gesf2+0x3a>

08000adc <__lesf2>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0245      	lsls	r5, r0, #9
 8000ae2:	024e      	lsls	r6, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d00b      	beq.n	8000b0e <__lesf2+0x32>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00d      	beq.n	8000b16 <__lesf2+0x3a>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11f      	bne.n	8000b3e <__lesf2+0x62>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d116      	bne.n	8000b30 <__lesf2+0x54>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d114      	bne.n	8000b30 <__lesf2+0x54>
 8000b06:	2000      	movs	r0, #0
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d010      	beq.n	8000b2e <__lesf2+0x52>
 8000b0c:	e009      	b.n	8000b22 <__lesf2+0x46>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d10c      	bne.n	8000b2c <__lesf2+0x50>
 8000b12:	2cff      	cmp	r4, #255	; 0xff
 8000b14:	d113      	bne.n	8000b3e <__lesf2+0x62>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d108      	bne.n	8000b2c <__lesf2+0x50>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d008      	beq.n	8000b30 <__lesf2+0x54>
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x6c>
 8000b22:	2102      	movs	r1, #2
 8000b24:	1e58      	subs	r0, r3, #1
 8000b26:	4008      	ands	r0, r1
 8000b28:	3801      	subs	r0, #1
 8000b2a:	e000      	b.n	8000b2e <__lesf2+0x52>
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d1f4      	bne.n	8000b1e <__lesf2+0x42>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1fa      	bne.n	8000b2e <__lesf2+0x52>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f7      	b.n	8000b2e <__lesf2+0x52>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d1ed      	bne.n	8000b1e <__lesf2+0x42>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d1eb      	bne.n	8000b1e <__lesf2+0x42>
 8000b46:	e7ec      	b.n	8000b22 <__lesf2+0x46>
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	dc05      	bgt.n	8000b58 <__lesf2+0x7c>
 8000b4c:	dbf2      	blt.n	8000b34 <__lesf2+0x58>
 8000b4e:	42b5      	cmp	r5, r6
 8000b50:	d802      	bhi.n	8000b58 <__lesf2+0x7c>
 8000b52:	d3ef      	bcc.n	8000b34 <__lesf2+0x58>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7ea      	b.n	8000b2e <__lesf2+0x52>
 8000b58:	4243      	negs	r3, r0
 8000b5a:	4158      	adcs	r0, r3
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7e5      	b.n	8000b2e <__lesf2+0x52>
 8000b62:	46c0      	nop			; (mov r8, r8)

08000b64 <__aeabi_fmul>:
 8000b64:	0243      	lsls	r3, r0, #9
 8000b66:	0a5b      	lsrs	r3, r3, #9
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	464f      	mov	r7, r9
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	4699      	mov	r9, r3
 8000b70:	46d6      	mov	lr, sl
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0045      	lsls	r5, r0, #1
 8000b76:	4698      	mov	r8, r3
 8000b78:	b5c0      	push	{r6, r7, lr}
 8000b7a:	464b      	mov	r3, r9
 8000b7c:	1c0f      	adds	r7, r1, #0
 8000b7e:	0e2d      	lsrs	r5, r5, #24
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0x20>
 8000b82:	e0cb      	b.n	8000d1c <__aeabi_fmul+0x1b8>
 8000b84:	2dff      	cmp	r5, #255	; 0xff
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fmul+0x26>
 8000b88:	e0cf      	b.n	8000d2a <__aeabi_fmul+0x1c6>
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	04d2      	lsls	r2, r2, #19
 8000b90:	431a      	orrs	r2, r3
 8000b92:	2300      	movs	r3, #0
 8000b94:	4691      	mov	r9, r2
 8000b96:	2600      	movs	r6, #0
 8000b98:	469a      	mov	sl, r3
 8000b9a:	3d7f      	subs	r5, #127	; 0x7f
 8000b9c:	027c      	lsls	r4, r7, #9
 8000b9e:	007b      	lsls	r3, r7, #1
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	0e1b      	lsrs	r3, r3, #24
 8000ba4:	0fff      	lsrs	r7, r7, #31
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fmul+0x48>
 8000baa:	e0a9      	b.n	8000d00 <__aeabi_fmul+0x19c>
 8000bac:	2bff      	cmp	r3, #255	; 0xff
 8000bae:	d011      	beq.n	8000bd4 <__aeabi_fmul+0x70>
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	00e4      	lsls	r4, r4, #3
 8000bb4:	04d2      	lsls	r2, r2, #19
 8000bb6:	4314      	orrs	r4, r2
 8000bb8:	4642      	mov	r2, r8
 8000bba:	3b7f      	subs	r3, #127	; 0x7f
 8000bbc:	195b      	adds	r3, r3, r5
 8000bbe:	407a      	eors	r2, r7
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	1c5d      	adds	r5, r3, #1
 8000bc6:	2e0a      	cmp	r6, #10
 8000bc8:	dd13      	ble.n	8000bf2 <__aeabi_fmul+0x8e>
 8000bca:	003a      	movs	r2, r7
 8000bcc:	2e0b      	cmp	r6, #11
 8000bce:	d047      	beq.n	8000c60 <__aeabi_fmul+0xfc>
 8000bd0:	4647      	mov	r7, r8
 8000bd2:	e03f      	b.n	8000c54 <__aeabi_fmul+0xf0>
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	33ff      	adds	r3, #255	; 0xff
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d11e      	bne.n	8000c1a <__aeabi_fmul+0xb6>
 8000bdc:	2202      	movs	r2, #2
 8000bde:	4316      	orrs	r6, r2
 8000be0:	4642      	mov	r2, r8
 8000be2:	3501      	adds	r5, #1
 8000be4:	407a      	eors	r2, r7
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	35ff      	adds	r5, #255	; 0xff
 8000bea:	2e0a      	cmp	r6, #10
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_fmul+0x8c>
 8000bee:	e0e4      	b.n	8000dba <__aeabi_fmul+0x256>
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	2e02      	cmp	r6, #2
 8000bf4:	dc1c      	bgt.n	8000c30 <__aeabi_fmul+0xcc>
 8000bf6:	3e01      	subs	r6, #1
 8000bf8:	2e01      	cmp	r6, #1
 8000bfa:	d842      	bhi.n	8000c82 <__aeabi_fmul+0x11e>
 8000bfc:	2802      	cmp	r0, #2
 8000bfe:	d03d      	beq.n	8000c7c <__aeabi_fmul+0x118>
 8000c00:	2801      	cmp	r0, #1
 8000c02:	d166      	bne.n	8000cd2 <__aeabi_fmul+0x16e>
 8000c04:	2000      	movs	r0, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	05c0      	lsls	r0, r0, #23
 8000c0a:	4308      	orrs	r0, r1
 8000c0c:	07d2      	lsls	r2, r2, #31
 8000c0e:	4310      	orrs	r0, r2
 8000c10:	bce0      	pop	{r5, r6, r7}
 8000c12:	46ba      	mov	sl, r7
 8000c14:	46b1      	mov	r9, r6
 8000c16:	46a8      	mov	r8, r5
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	4316      	orrs	r6, r2
 8000c1e:	4642      	mov	r2, r8
 8000c20:	3501      	adds	r5, #1
 8000c22:	407a      	eors	r2, r7
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	35ff      	adds	r5, #255	; 0xff
 8000c28:	2e0a      	cmp	r6, #10
 8000c2a:	dd00      	ble.n	8000c2e <__aeabi_fmul+0xca>
 8000c2c:	e0e4      	b.n	8000df8 <__aeabi_fmul+0x294>
 8000c2e:	2003      	movs	r0, #3
 8000c30:	2101      	movs	r1, #1
 8000c32:	40b1      	lsls	r1, r6
 8000c34:	26a6      	movs	r6, #166	; 0xa6
 8000c36:	00f6      	lsls	r6, r6, #3
 8000c38:	4231      	tst	r1, r6
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_fmul+0xee>
 8000c3c:	2690      	movs	r6, #144	; 0x90
 8000c3e:	00b6      	lsls	r6, r6, #2
 8000c40:	4231      	tst	r1, r6
 8000c42:	d116      	bne.n	8000c72 <__aeabi_fmul+0x10e>
 8000c44:	3eb9      	subs	r6, #185	; 0xb9
 8000c46:	3eff      	subs	r6, #255	; 0xff
 8000c48:	420e      	tst	r6, r1
 8000c4a:	d01a      	beq.n	8000c82 <__aeabi_fmul+0x11e>
 8000c4c:	46a1      	mov	r9, r4
 8000c4e:	4682      	mov	sl, r0
 8000c50:	e000      	b.n	8000c54 <__aeabi_fmul+0xf0>
 8000c52:	0017      	movs	r7, r2
 8000c54:	4653      	mov	r3, sl
 8000c56:	003a      	movs	r2, r7
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d00f      	beq.n	8000c7c <__aeabi_fmul+0x118>
 8000c5c:	464c      	mov	r4, r9
 8000c5e:	4650      	mov	r0, sl
 8000c60:	2803      	cmp	r0, #3
 8000c62:	d1cd      	bne.n	8000c00 <__aeabi_fmul+0x9c>
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	03c9      	lsls	r1, r1, #15
 8000c68:	4321      	orrs	r1, r4
 8000c6a:	0249      	lsls	r1, r1, #9
 8000c6c:	20ff      	movs	r0, #255	; 0xff
 8000c6e:	0a49      	lsrs	r1, r1, #9
 8000c70:	e7ca      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	2200      	movs	r2, #0
 8000c76:	20ff      	movs	r0, #255	; 0xff
 8000c78:	03c9      	lsls	r1, r1, #15
 8000c7a:	e7c5      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000c7c:	20ff      	movs	r0, #255	; 0xff
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e7c2      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	4649      	mov	r1, r9
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	0c24      	lsrs	r4, r4, #16
 8000c8a:	0027      	movs	r7, r4
 8000c8c:	0c0e      	lsrs	r6, r1, #16
 8000c8e:	0409      	lsls	r1, r1, #16
 8000c90:	0c09      	lsrs	r1, r1, #16
 8000c92:	4374      	muls	r4, r6
 8000c94:	434f      	muls	r7, r1
 8000c96:	4346      	muls	r6, r0
 8000c98:	4348      	muls	r0, r1
 8000c9a:	0c39      	lsrs	r1, r7, #16
 8000c9c:	1900      	adds	r0, r0, r4
 8000c9e:	1809      	adds	r1, r1, r0
 8000ca0:	428c      	cmp	r4, r1
 8000ca2:	d903      	bls.n	8000cac <__aeabi_fmul+0x148>
 8000ca4:	2080      	movs	r0, #128	; 0x80
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4466      	add	r6, ip
 8000cac:	043f      	lsls	r7, r7, #16
 8000cae:	0408      	lsls	r0, r1, #16
 8000cb0:	0c3f      	lsrs	r7, r7, #16
 8000cb2:	19c0      	adds	r0, r0, r7
 8000cb4:	0184      	lsls	r4, r0, #6
 8000cb6:	1e67      	subs	r7, r4, #1
 8000cb8:	41bc      	sbcs	r4, r7
 8000cba:	0c09      	lsrs	r1, r1, #16
 8000cbc:	0e80      	lsrs	r0, r0, #26
 8000cbe:	1989      	adds	r1, r1, r6
 8000cc0:	4304      	orrs	r4, r0
 8000cc2:	0189      	lsls	r1, r1, #6
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	0109      	lsls	r1, r1, #4
 8000cc8:	d571      	bpl.n	8000dae <__aeabi_fmul+0x24a>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	0861      	lsrs	r1, r4, #1
 8000cce:	401c      	ands	r4, r3
 8000cd0:	430c      	orrs	r4, r1
 8000cd2:	002b      	movs	r3, r5
 8000cd4:	337f      	adds	r3, #127	; 0x7f
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dd51      	ble.n	8000d7e <__aeabi_fmul+0x21a>
 8000cda:	0761      	lsls	r1, r4, #29
 8000cdc:	d004      	beq.n	8000ce8 <__aeabi_fmul+0x184>
 8000cde:	210f      	movs	r1, #15
 8000ce0:	4021      	ands	r1, r4
 8000ce2:	2904      	cmp	r1, #4
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fmul+0x184>
 8000ce6:	3404      	adds	r4, #4
 8000ce8:	0121      	lsls	r1, r4, #4
 8000cea:	d503      	bpl.n	8000cf4 <__aeabi_fmul+0x190>
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <__aeabi_fmul+0x298>)
 8000cee:	401c      	ands	r4, r3
 8000cf0:	002b      	movs	r3, r5
 8000cf2:	3380      	adds	r3, #128	; 0x80
 8000cf4:	2bfe      	cmp	r3, #254	; 0xfe
 8000cf6:	dcc1      	bgt.n	8000c7c <__aeabi_fmul+0x118>
 8000cf8:	01a1      	lsls	r1, r4, #6
 8000cfa:	0a49      	lsrs	r1, r1, #9
 8000cfc:	b2d8      	uxtb	r0, r3
 8000cfe:	e783      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d12c      	bne.n	8000d5e <__aeabi_fmul+0x1fa>
 8000d04:	2301      	movs	r3, #1
 8000d06:	4642      	mov	r2, r8
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	002b      	movs	r3, r5
 8000d0c:	407a      	eors	r2, r7
 8000d0e:	2001      	movs	r0, #1
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	1c5d      	adds	r5, r3, #1
 8000d14:	2e0a      	cmp	r6, #10
 8000d16:	dd00      	ble.n	8000d1a <__aeabi_fmul+0x1b6>
 8000d18:	e757      	b.n	8000bca <__aeabi_fmul+0x66>
 8000d1a:	e76a      	b.n	8000bf2 <__aeabi_fmul+0x8e>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d110      	bne.n	8000d42 <__aeabi_fmul+0x1de>
 8000d20:	2301      	movs	r3, #1
 8000d22:	2604      	movs	r6, #4
 8000d24:	2500      	movs	r5, #0
 8000d26:	469a      	mov	sl, r3
 8000d28:	e738      	b.n	8000b9c <__aeabi_fmul+0x38>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_fmul+0x1d4>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	2608      	movs	r6, #8
 8000d32:	25ff      	movs	r5, #255	; 0xff
 8000d34:	469a      	mov	sl, r3
 8000d36:	e731      	b.n	8000b9c <__aeabi_fmul+0x38>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	260c      	movs	r6, #12
 8000d3c:	25ff      	movs	r5, #255	; 0xff
 8000d3e:	469a      	mov	sl, r3
 8000d40:	e72c      	b.n	8000b9c <__aeabi_fmul+0x38>
 8000d42:	4648      	mov	r0, r9
 8000d44:	f000 facc 	bl	80012e0 <__clzsi2>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	1f43      	subs	r3, r0, #5
 8000d4c:	2576      	movs	r5, #118	; 0x76
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	426d      	negs	r5, r5
 8000d54:	4691      	mov	r9, r2
 8000d56:	2600      	movs	r6, #0
 8000d58:	469a      	mov	sl, r3
 8000d5a:	1a2d      	subs	r5, r5, r0
 8000d5c:	e71e      	b.n	8000b9c <__aeabi_fmul+0x38>
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f000 fabe 	bl	80012e0 <__clzsi2>
 8000d64:	4642      	mov	r2, r8
 8000d66:	1f43      	subs	r3, r0, #5
 8000d68:	409c      	lsls	r4, r3
 8000d6a:	1a2b      	subs	r3, r5, r0
 8000d6c:	3b76      	subs	r3, #118	; 0x76
 8000d6e:	407a      	eors	r2, r7
 8000d70:	2000      	movs	r0, #0
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	1c5d      	adds	r5, r3, #1
 8000d76:	2e0a      	cmp	r6, #10
 8000d78:	dd00      	ble.n	8000d7c <__aeabi_fmul+0x218>
 8000d7a:	e726      	b.n	8000bca <__aeabi_fmul+0x66>
 8000d7c:	e739      	b.n	8000bf2 <__aeabi_fmul+0x8e>
 8000d7e:	2101      	movs	r1, #1
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	2b1b      	cmp	r3, #27
 8000d84:	dd00      	ble.n	8000d88 <__aeabi_fmul+0x224>
 8000d86:	e73d      	b.n	8000c04 <__aeabi_fmul+0xa0>
 8000d88:	359e      	adds	r5, #158	; 0x9e
 8000d8a:	0021      	movs	r1, r4
 8000d8c:	40ac      	lsls	r4, r5
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	1e63      	subs	r3, r4, #1
 8000d92:	419c      	sbcs	r4, r3
 8000d94:	4321      	orrs	r1, r4
 8000d96:	074b      	lsls	r3, r1, #29
 8000d98:	d004      	beq.n	8000da4 <__aeabi_fmul+0x240>
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fmul+0x240>
 8000da2:	3104      	adds	r1, #4
 8000da4:	014b      	lsls	r3, r1, #5
 8000da6:	d504      	bpl.n	8000db2 <__aeabi_fmul+0x24e>
 8000da8:	2001      	movs	r0, #1
 8000daa:	2100      	movs	r1, #0
 8000dac:	e72c      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000dae:	001d      	movs	r5, r3
 8000db0:	e78f      	b.n	8000cd2 <__aeabi_fmul+0x16e>
 8000db2:	0189      	lsls	r1, r1, #6
 8000db4:	2000      	movs	r0, #0
 8000db6:	0a49      	lsrs	r1, r1, #9
 8000db8:	e726      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	2e0f      	cmp	r6, #15
 8000dbe:	d10c      	bne.n	8000dda <__aeabi_fmul+0x276>
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	03c9      	lsls	r1, r1, #15
 8000dc6:	420b      	tst	r3, r1
 8000dc8:	d00d      	beq.n	8000de6 <__aeabi_fmul+0x282>
 8000dca:	420c      	tst	r4, r1
 8000dcc:	d10b      	bne.n	8000de6 <__aeabi_fmul+0x282>
 8000dce:	4321      	orrs	r1, r4
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	003a      	movs	r2, r7
 8000dd4:	20ff      	movs	r0, #255	; 0xff
 8000dd6:	0a49      	lsrs	r1, r1, #9
 8000dd8:	e716      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000dda:	2e0b      	cmp	r6, #11
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_fmul+0x27c>
 8000dde:	e6f7      	b.n	8000bd0 <__aeabi_fmul+0x6c>
 8000de0:	46a1      	mov	r9, r4
 8000de2:	469a      	mov	sl, r3
 8000de4:	e736      	b.n	8000c54 <__aeabi_fmul+0xf0>
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	464b      	mov	r3, r9
 8000dea:	03c9      	lsls	r1, r1, #15
 8000dec:	4319      	orrs	r1, r3
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	4642      	mov	r2, r8
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a49      	lsrs	r1, r1, #9
 8000df6:	e707      	b.n	8000c08 <__aeabi_fmul+0xa4>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e7df      	b.n	8000dbc <__aeabi_fmul+0x258>
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__aeabi_fsub>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	46c6      	mov	lr, r8
 8000e04:	0243      	lsls	r3, r0, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	0045      	lsls	r5, r0, #1
 8000e0a:	00da      	lsls	r2, r3, #3
 8000e0c:	0fc4      	lsrs	r4, r0, #31
 8000e0e:	0248      	lsls	r0, r1, #9
 8000e10:	004f      	lsls	r7, r1, #1
 8000e12:	4694      	mov	ip, r2
 8000e14:	0a42      	lsrs	r2, r0, #9
 8000e16:	001e      	movs	r6, r3
 8000e18:	4690      	mov	r8, r2
 8000e1a:	b500      	push	{lr}
 8000e1c:	0e2d      	lsrs	r5, r5, #24
 8000e1e:	0e3f      	lsrs	r7, r7, #24
 8000e20:	0fc9      	lsrs	r1, r1, #31
 8000e22:	0980      	lsrs	r0, r0, #6
 8000e24:	2fff      	cmp	r7, #255	; 0xff
 8000e26:	d059      	beq.n	8000edc <__aeabi_fsub+0xdc>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4051      	eors	r1, r2
 8000e2c:	428c      	cmp	r4, r1
 8000e2e:	d039      	beq.n	8000ea4 <__aeabi_fsub+0xa4>
 8000e30:	1bea      	subs	r2, r5, r7
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	dd58      	ble.n	8000ee8 <__aeabi_fsub+0xe8>
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d068      	beq.n	8000f0c <__aeabi_fsub+0x10c>
 8000e3a:	2dff      	cmp	r5, #255	; 0xff
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x40>
 8000e3e:	e0d1      	b.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	04db      	lsls	r3, r3, #19
 8000e44:	4318      	orrs	r0, r3
 8000e46:	2a1b      	cmp	r2, #27
 8000e48:	dc00      	bgt.n	8000e4c <__aeabi_fsub+0x4c>
 8000e4a:	e0e3      	b.n	8001014 <__aeabi_fsub+0x214>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4662      	mov	r2, ip
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0x58>
 8000e56:	e0ac      	b.n	8000fb2 <__aeabi_fsub+0x1b2>
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	099e      	lsrs	r6, r3, #6
 8000e5c:	0030      	movs	r0, r6
 8000e5e:	f000 fa3f 	bl	80012e0 <__clzsi2>
 8000e62:	0033      	movs	r3, r6
 8000e64:	3805      	subs	r0, #5
 8000e66:	4083      	lsls	r3, r0
 8000e68:	4285      	cmp	r5, r0
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_fsub+0x6e>
 8000e6c:	e0c6      	b.n	8000ffc <__aeabi_fsub+0x1fc>
 8000e6e:	4ab2      	ldr	r2, [pc, #712]	; (8001138 <__aeabi_fsub+0x338>)
 8000e70:	1a2d      	subs	r5, r5, r0
 8000e72:	4013      	ands	r3, r2
 8000e74:	075a      	lsls	r2, r3, #29
 8000e76:	d004      	beq.n	8000e82 <__aeabi_fsub+0x82>
 8000e78:	220f      	movs	r2, #15
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	2a04      	cmp	r2, #4
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fsub+0x82>
 8000e80:	3304      	adds	r3, #4
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	d400      	bmi.n	8000e88 <__aeabi_fsub+0x88>
 8000e86:	e097      	b.n	8000fb8 <__aeabi_fsub+0x1b8>
 8000e88:	1c6a      	adds	r2, r5, #1
 8000e8a:	2dfe      	cmp	r5, #254	; 0xfe
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x90>
 8000e8e:	e084      	b.n	8000f9a <__aeabi_fsub+0x19a>
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	0a5e      	lsrs	r6, r3, #9
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	05d0      	lsls	r0, r2, #23
 8000e98:	4330      	orrs	r0, r6
 8000e9a:	07e4      	lsls	r4, r4, #31
 8000e9c:	4320      	orrs	r0, r4
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea4:	1bea      	subs	r2, r5, r7
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	dd41      	ble.n	8000f2e <__aeabi_fsub+0x12e>
 8000eaa:	2f00      	cmp	r7, #0
 8000eac:	d06b      	beq.n	8000f86 <__aeabi_fsub+0x186>
 8000eae:	2dff      	cmp	r5, #255	; 0xff
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_fsub+0xb4>
 8000eb2:	e097      	b.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	04db      	lsls	r3, r3, #19
 8000eb8:	4318      	orrs	r0, r3
 8000eba:	2a1b      	cmp	r2, #27
 8000ebc:	dc00      	bgt.n	8000ec0 <__aeabi_fsub+0xc0>
 8000ebe:	e0cc      	b.n	800105a <__aeabi_fsub+0x25a>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4463      	add	r3, ip
 8000ec4:	015a      	lsls	r2, r3, #5
 8000ec6:	d574      	bpl.n	8000fb2 <__aeabi_fsub+0x1b2>
 8000ec8:	3501      	adds	r5, #1
 8000eca:	2dff      	cmp	r5, #255	; 0xff
 8000ecc:	d065      	beq.n	8000f9a <__aeabi_fsub+0x19a>
 8000ece:	2201      	movs	r2, #1
 8000ed0:	499a      	ldr	r1, [pc, #616]	; (800113c <__aeabi_fsub+0x33c>)
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	085b      	lsrs	r3, r3, #1
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	e7cb      	b.n	8000e74 <__aeabi_fsub+0x74>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d01f      	beq.n	8000f20 <__aeabi_fsub+0x120>
 8000ee0:	428c      	cmp	r4, r1
 8000ee2:	d022      	beq.n	8000f2a <__aeabi_fsub+0x12a>
 8000ee4:	002a      	movs	r2, r5
 8000ee6:	3aff      	subs	r2, #255	; 0xff
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d035      	beq.n	8000f58 <__aeabi_fsub+0x158>
 8000eec:	1b7a      	subs	r2, r7, r5
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_fsub+0xf4>
 8000ef2:	e099      	b.n	8001028 <__aeabi_fsub+0x228>
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0xfc>
 8000efa:	e0dd      	b.n	80010b8 <__aeabi_fsub+0x2b8>
 8000efc:	1e53      	subs	r3, r2, #1
 8000efe:	2a01      	cmp	r2, #1
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x104>
 8000f02:	e105      	b.n	8001110 <__aeabi_fsub+0x310>
 8000f04:	2aff      	cmp	r2, #255	; 0xff
 8000f06:	d06b      	beq.n	8000fe0 <__aeabi_fsub+0x1e0>
 8000f08:	001a      	movs	r2, r3
 8000f0a:	e094      	b.n	8001036 <__aeabi_fsub+0x236>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d073      	beq.n	8000ff8 <__aeabi_fsub+0x1f8>
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x118>
 8000f16:	e0df      	b.n	80010d8 <__aeabi_fsub+0x2d8>
 8000f18:	2aff      	cmp	r2, #255	; 0xff
 8000f1a:	d063      	beq.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	e792      	b.n	8000e46 <__aeabi_fsub+0x46>
 8000f20:	2201      	movs	r2, #1
 8000f22:	4051      	eors	r1, r2
 8000f24:	42a1      	cmp	r1, r4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x12a>
 8000f28:	e782      	b.n	8000e30 <__aeabi_fsub+0x30>
 8000f2a:	002a      	movs	r2, r5
 8000f2c:	3aff      	subs	r2, #255	; 0xff
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d036      	beq.n	8000fa0 <__aeabi_fsub+0x1a0>
 8000f32:	1b7a      	subs	r2, r7, r5
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x13a>
 8000f38:	e0aa      	b.n	8001090 <__aeabi_fsub+0x290>
 8000f3a:	2fff      	cmp	r7, #255	; 0xff
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x140>
 8000f3e:	e0da      	b.n	80010f6 <__aeabi_fsub+0x2f6>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4661      	mov	r1, ip
 8000f44:	04db      	lsls	r3, r3, #19
 8000f46:	4319      	orrs	r1, r3
 8000f48:	468c      	mov	ip, r1
 8000f4a:	2a1b      	cmp	r2, #27
 8000f4c:	dc00      	bgt.n	8000f50 <__aeabi_fsub+0x150>
 8000f4e:	e0d4      	b.n	80010fa <__aeabi_fsub+0x2fa>
 8000f50:	2301      	movs	r3, #1
 8000f52:	003d      	movs	r5, r7
 8000f54:	181b      	adds	r3, r3, r0
 8000f56:	e7b5      	b.n	8000ec4 <__aeabi_fsub+0xc4>
 8000f58:	27fe      	movs	r7, #254	; 0xfe
 8000f5a:	1c6a      	adds	r2, r5, #1
 8000f5c:	4217      	tst	r7, r2
 8000f5e:	d171      	bne.n	8001044 <__aeabi_fsub+0x244>
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0x166>
 8000f64:	e09e      	b.n	80010a4 <__aeabi_fsub+0x2a4>
 8000f66:	4663      	mov	r3, ip
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x16e>
 8000f6c:	e0d5      	b.n	800111a <__aeabi_fsub+0x31a>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x176>
 8000f74:	e78f      	b.n	8000e96 <__aeabi_fsub+0x96>
 8000f76:	1a1b      	subs	r3, r3, r0
 8000f78:	015e      	lsls	r6, r3, #5
 8000f7a:	d400      	bmi.n	8000f7e <__aeabi_fsub+0x17e>
 8000f7c:	e0d6      	b.n	800112c <__aeabi_fsub+0x32c>
 8000f7e:	4663      	mov	r3, ip
 8000f80:	000c      	movs	r4, r1
 8000f82:	1ac3      	subs	r3, r0, r3
 8000f84:	e776      	b.n	8000e74 <__aeabi_fsub+0x74>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d036      	beq.n	8000ff8 <__aeabi_fsub+0x1f8>
 8000f8a:	1e51      	subs	r1, r2, #1
 8000f8c:	2a01      	cmp	r2, #1
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x192>
 8000f90:	e09a      	b.n	80010c8 <__aeabi_fsub+0x2c8>
 8000f92:	2aff      	cmp	r2, #255	; 0xff
 8000f94:	d026      	beq.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000f96:	000a      	movs	r2, r1
 8000f98:	e78f      	b.n	8000eba <__aeabi_fsub+0xba>
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	e77a      	b.n	8000e96 <__aeabi_fsub+0x96>
 8000fa0:	27fe      	movs	r7, #254	; 0xfe
 8000fa2:	1c6a      	adds	r2, r5, #1
 8000fa4:	4217      	tst	r7, r2
 8000fa6:	d062      	beq.n	800106e <__aeabi_fsub+0x26e>
 8000fa8:	2aff      	cmp	r2, #255	; 0xff
 8000faa:	d0f6      	beq.n	8000f9a <__aeabi_fsub+0x19a>
 8000fac:	0015      	movs	r5, r2
 8000fae:	4460      	add	r0, ip
 8000fb0:	0843      	lsrs	r3, r0, #1
 8000fb2:	075a      	lsls	r2, r3, #29
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x1b8>
 8000fb6:	e75f      	b.n	8000e78 <__aeabi_fsub+0x78>
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	2dff      	cmp	r5, #255	; 0xff
 8000fbc:	d012      	beq.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	0a5e      	lsrs	r6, r3, #9
 8000fc2:	b2ea      	uxtb	r2, r5
 8000fc4:	e767      	b.n	8000e96 <__aeabi_fsub+0x96>
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x1ce>
 8000fcc:	e093      	b.n	80010f6 <__aeabi_fsub+0x2f6>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	d008      	beq.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	03d2      	lsls	r2, r2, #15
 8000fd6:	4213      	tst	r3, r2
 8000fd8:	d004      	beq.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000fda:	4640      	mov	r0, r8
 8000fdc:	4210      	tst	r0, r2
 8000fde:	d101      	bne.n	8000fe4 <__aeabi_fsub+0x1e4>
 8000fe0:	000c      	movs	r4, r1
 8000fe2:	4643      	mov	r3, r8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0d8      	beq.n	8000f9a <__aeabi_fsub+0x19a>
 8000fe8:	2680      	movs	r6, #128	; 0x80
 8000fea:	03f6      	lsls	r6, r6, #15
 8000fec:	431e      	orrs	r6, r3
 8000fee:	0276      	lsls	r6, r6, #9
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	0a76      	lsrs	r6, r6, #9
 8000ff4:	e74f      	b.n	8000e96 <__aeabi_fsub+0x96>
 8000ff6:	4643      	mov	r3, r8
 8000ff8:	0015      	movs	r5, r2
 8000ffa:	e7de      	b.n	8000fba <__aeabi_fsub+0x1ba>
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	3001      	adds	r0, #1
 8001002:	1a12      	subs	r2, r2, r0
 8001004:	0019      	movs	r1, r3
 8001006:	4093      	lsls	r3, r2
 8001008:	40c1      	lsrs	r1, r0
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	4193      	sbcs	r3, r2
 800100e:	2500      	movs	r5, #0
 8001010:	430b      	orrs	r3, r1
 8001012:	e72f      	b.n	8000e74 <__aeabi_fsub+0x74>
 8001014:	2320      	movs	r3, #32
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	0001      	movs	r1, r0
 800101a:	4098      	lsls	r0, r3
 800101c:	0003      	movs	r3, r0
 800101e:	40d1      	lsrs	r1, r2
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	4193      	sbcs	r3, r2
 8001024:	430b      	orrs	r3, r1
 8001026:	e712      	b.n	8000e4e <__aeabi_fsub+0x4e>
 8001028:	2fff      	cmp	r7, #255	; 0xff
 800102a:	d0d9      	beq.n	8000fe0 <__aeabi_fsub+0x1e0>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	4664      	mov	r4, ip
 8001030:	04db      	lsls	r3, r3, #19
 8001032:	431c      	orrs	r4, r3
 8001034:	46a4      	mov	ip, r4
 8001036:	2a1b      	cmp	r2, #27
 8001038:	dd52      	ble.n	80010e0 <__aeabi_fsub+0x2e0>
 800103a:	2301      	movs	r3, #1
 800103c:	000c      	movs	r4, r1
 800103e:	003d      	movs	r5, r7
 8001040:	1ac3      	subs	r3, r0, r3
 8001042:	e706      	b.n	8000e52 <__aeabi_fsub+0x52>
 8001044:	4663      	mov	r3, ip
 8001046:	1a1e      	subs	r6, r3, r0
 8001048:	0173      	lsls	r3, r6, #5
 800104a:	d439      	bmi.n	80010c0 <__aeabi_fsub+0x2c0>
 800104c:	2e00      	cmp	r6, #0
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x252>
 8001050:	e704      	b.n	8000e5c <__aeabi_fsub+0x5c>
 8001052:	2400      	movs	r4, #0
 8001054:	2200      	movs	r2, #0
 8001056:	2600      	movs	r6, #0
 8001058:	e71d      	b.n	8000e96 <__aeabi_fsub+0x96>
 800105a:	2320      	movs	r3, #32
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	0001      	movs	r1, r0
 8001060:	4098      	lsls	r0, r3
 8001062:	0003      	movs	r3, r0
 8001064:	40d1      	lsrs	r1, r2
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	4193      	sbcs	r3, r2
 800106a:	430b      	orrs	r3, r1
 800106c:	e729      	b.n	8000ec2 <__aeabi_fsub+0xc2>
 800106e:	2d00      	cmp	r5, #0
 8001070:	d1a9      	bne.n	8000fc6 <__aeabi_fsub+0x1c6>
 8001072:	4663      	mov	r3, ip
 8001074:	2b00      	cmp	r3, #0
 8001076:	d056      	beq.n	8001126 <__aeabi_fsub+0x326>
 8001078:	2200      	movs	r2, #0
 800107a:	2800      	cmp	r0, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x280>
 800107e:	e70a      	b.n	8000e96 <__aeabi_fsub+0x96>
 8001080:	0003      	movs	r3, r0
 8001082:	4463      	add	r3, ip
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	d594      	bpl.n	8000fb2 <__aeabi_fsub+0x1b2>
 8001088:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <__aeabi_fsub+0x338>)
 800108a:	3501      	adds	r5, #1
 800108c:	4013      	ands	r3, r2
 800108e:	e790      	b.n	8000fb2 <__aeabi_fsub+0x1b2>
 8001090:	4663      	mov	r3, ip
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0af      	beq.n	8000ff6 <__aeabi_fsub+0x1f6>
 8001096:	1e53      	subs	r3, r2, #1
 8001098:	2a01      	cmp	r2, #1
 800109a:	d015      	beq.n	80010c8 <__aeabi_fsub+0x2c8>
 800109c:	2aff      	cmp	r2, #255	; 0xff
 800109e:	d02a      	beq.n	80010f6 <__aeabi_fsub+0x2f6>
 80010a0:	001a      	movs	r2, r3
 80010a2:	e752      	b.n	8000f4a <__aeabi_fsub+0x14a>
 80010a4:	4662      	mov	r2, ip
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d191      	bne.n	8000fce <__aeabi_fsub+0x1ce>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d198      	bne.n	8000fe0 <__aeabi_fsub+0x1e0>
 80010ae:	2680      	movs	r6, #128	; 0x80
 80010b0:	2400      	movs	r4, #0
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	03f6      	lsls	r6, r6, #15
 80010b6:	e6ee      	b.n	8000e96 <__aeabi_fsub+0x96>
 80010b8:	000c      	movs	r4, r1
 80010ba:	4643      	mov	r3, r8
 80010bc:	0015      	movs	r5, r2
 80010be:	e77c      	b.n	8000fba <__aeabi_fsub+0x1ba>
 80010c0:	4663      	mov	r3, ip
 80010c2:	000c      	movs	r4, r1
 80010c4:	1ac6      	subs	r6, r0, r3
 80010c6:	e6c9      	b.n	8000e5c <__aeabi_fsub+0x5c>
 80010c8:	0003      	movs	r3, r0
 80010ca:	4463      	add	r3, ip
 80010cc:	2501      	movs	r5, #1
 80010ce:	015a      	lsls	r2, r3, #5
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_fsub+0x2d4>
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fsub+0x1b2>
 80010d4:	2502      	movs	r5, #2
 80010d6:	e6fa      	b.n	8000ece <__aeabi_fsub+0xce>
 80010d8:	4663      	mov	r3, ip
 80010da:	2501      	movs	r5, #1
 80010dc:	1a1b      	subs	r3, r3, r0
 80010de:	e6b8      	b.n	8000e52 <__aeabi_fsub+0x52>
 80010e0:	4664      	mov	r4, ip
 80010e2:	2320      	movs	r3, #32
 80010e4:	40d4      	lsrs	r4, r2
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	4662      	mov	r2, ip
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	1e5a      	subs	r2, r3, #1
 80010f0:	4193      	sbcs	r3, r2
 80010f2:	4323      	orrs	r3, r4
 80010f4:	e7a2      	b.n	800103c <__aeabi_fsub+0x23c>
 80010f6:	4643      	mov	r3, r8
 80010f8:	e774      	b.n	8000fe4 <__aeabi_fsub+0x1e4>
 80010fa:	4661      	mov	r1, ip
 80010fc:	2320      	movs	r3, #32
 80010fe:	40d1      	lsrs	r1, r2
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	4662      	mov	r2, ip
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	4193      	sbcs	r3, r2
 800110c:	430b      	orrs	r3, r1
 800110e:	e720      	b.n	8000f52 <__aeabi_fsub+0x152>
 8001110:	4663      	mov	r3, ip
 8001112:	000c      	movs	r4, r1
 8001114:	2501      	movs	r5, #1
 8001116:	1ac3      	subs	r3, r0, r3
 8001118:	e69b      	b.n	8000e52 <__aeabi_fsub+0x52>
 800111a:	2800      	cmp	r0, #0
 800111c:	d099      	beq.n	8001052 <__aeabi_fsub+0x252>
 800111e:	000c      	movs	r4, r1
 8001120:	4646      	mov	r6, r8
 8001122:	2200      	movs	r2, #0
 8001124:	e6b7      	b.n	8000e96 <__aeabi_fsub+0x96>
 8001126:	4646      	mov	r6, r8
 8001128:	2200      	movs	r2, #0
 800112a:	e6b4      	b.n	8000e96 <__aeabi_fsub+0x96>
 800112c:	2b00      	cmp	r3, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_fsub+0x332>
 8001130:	e73f      	b.n	8000fb2 <__aeabi_fsub+0x1b2>
 8001132:	2400      	movs	r4, #0
 8001134:	2600      	movs	r6, #0
 8001136:	e6ae      	b.n	8000e96 <__aeabi_fsub+0x96>
 8001138:	fbffffff 	.word	0xfbffffff
 800113c:	7dffffff 	.word	0x7dffffff

08001140 <__aeabi_fcmpun>:
 8001140:	0243      	lsls	r3, r0, #9
 8001142:	024a      	lsls	r2, r1, #9
 8001144:	0040      	lsls	r0, r0, #1
 8001146:	0049      	lsls	r1, r1, #1
 8001148:	0a5b      	lsrs	r3, r3, #9
 800114a:	0a52      	lsrs	r2, r2, #9
 800114c:	0e09      	lsrs	r1, r1, #24
 800114e:	0e00      	lsrs	r0, r0, #24
 8001150:	28ff      	cmp	r0, #255	; 0xff
 8001152:	d006      	beq.n	8001162 <__aeabi_fcmpun+0x22>
 8001154:	2000      	movs	r0, #0
 8001156:	29ff      	cmp	r1, #255	; 0xff
 8001158:	d102      	bne.n	8001160 <__aeabi_fcmpun+0x20>
 800115a:	1e53      	subs	r3, r2, #1
 800115c:	419a      	sbcs	r2, r3
 800115e:	0010      	movs	r0, r2
 8001160:	4770      	bx	lr
 8001162:	38fe      	subs	r0, #254	; 0xfe
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1fb      	bne.n	8001160 <__aeabi_fcmpun+0x20>
 8001168:	e7f4      	b.n	8001154 <__aeabi_fcmpun+0x14>
 800116a:	46c0      	nop			; (mov r8, r8)

0800116c <__aeabi_f2iz>:
 800116c:	0241      	lsls	r1, r0, #9
 800116e:	0042      	lsls	r2, r0, #1
 8001170:	0fc3      	lsrs	r3, r0, #31
 8001172:	0a49      	lsrs	r1, r1, #9
 8001174:	2000      	movs	r0, #0
 8001176:	0e12      	lsrs	r2, r2, #24
 8001178:	2a7e      	cmp	r2, #126	; 0x7e
 800117a:	dd03      	ble.n	8001184 <__aeabi_f2iz+0x18>
 800117c:	2a9d      	cmp	r2, #157	; 0x9d
 800117e:	dd02      	ble.n	8001186 <__aeabi_f2iz+0x1a>
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <__aeabi_f2iz+0x3c>)
 8001182:	1898      	adds	r0, r3, r2
 8001184:	4770      	bx	lr
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	0400      	lsls	r0, r0, #16
 800118a:	4301      	orrs	r1, r0
 800118c:	2a95      	cmp	r2, #149	; 0x95
 800118e:	dc07      	bgt.n	80011a0 <__aeabi_f2iz+0x34>
 8001190:	2096      	movs	r0, #150	; 0x96
 8001192:	1a82      	subs	r2, r0, r2
 8001194:	40d1      	lsrs	r1, r2
 8001196:	4248      	negs	r0, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f3      	bne.n	8001184 <__aeabi_f2iz+0x18>
 800119c:	0008      	movs	r0, r1
 800119e:	e7f1      	b.n	8001184 <__aeabi_f2iz+0x18>
 80011a0:	3a96      	subs	r2, #150	; 0x96
 80011a2:	4091      	lsls	r1, r2
 80011a4:	e7f7      	b.n	8001196 <__aeabi_f2iz+0x2a>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	7fffffff 	.word	0x7fffffff

080011ac <__aeabi_i2f>:
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d013      	beq.n	80011da <__aeabi_i2f+0x2e>
 80011b2:	17c3      	asrs	r3, r0, #31
 80011b4:	18c5      	adds	r5, r0, r3
 80011b6:	405d      	eors	r5, r3
 80011b8:	0fc4      	lsrs	r4, r0, #31
 80011ba:	0028      	movs	r0, r5
 80011bc:	f000 f890 	bl	80012e0 <__clzsi2>
 80011c0:	239e      	movs	r3, #158	; 0x9e
 80011c2:	0001      	movs	r1, r0
 80011c4:	1a1b      	subs	r3, r3, r0
 80011c6:	2b96      	cmp	r3, #150	; 0x96
 80011c8:	dc0f      	bgt.n	80011ea <__aeabi_i2f+0x3e>
 80011ca:	2808      	cmp	r0, #8
 80011cc:	d031      	beq.n	8001232 <__aeabi_i2f+0x86>
 80011ce:	3908      	subs	r1, #8
 80011d0:	408d      	lsls	r5, r1
 80011d2:	026d      	lsls	r5, r5, #9
 80011d4:	0a6d      	lsrs	r5, r5, #9
 80011d6:	b2d8      	uxtb	r0, r3
 80011d8:	e002      	b.n	80011e0 <__aeabi_i2f+0x34>
 80011da:	2400      	movs	r4, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	2500      	movs	r5, #0
 80011e0:	05c0      	lsls	r0, r0, #23
 80011e2:	4328      	orrs	r0, r5
 80011e4:	07e4      	lsls	r4, r4, #31
 80011e6:	4320      	orrs	r0, r4
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
 80011ea:	2b99      	cmp	r3, #153	; 0x99
 80011ec:	dd0c      	ble.n	8001208 <__aeabi_i2f+0x5c>
 80011ee:	2205      	movs	r2, #5
 80011f0:	1a12      	subs	r2, r2, r0
 80011f2:	0028      	movs	r0, r5
 80011f4:	40d0      	lsrs	r0, r2
 80011f6:	0002      	movs	r2, r0
 80011f8:	0008      	movs	r0, r1
 80011fa:	301b      	adds	r0, #27
 80011fc:	4085      	lsls	r5, r0
 80011fe:	0028      	movs	r0, r5
 8001200:	1e45      	subs	r5, r0, #1
 8001202:	41a8      	sbcs	r0, r5
 8001204:	4302      	orrs	r2, r0
 8001206:	0015      	movs	r5, r2
 8001208:	2905      	cmp	r1, #5
 800120a:	dc16      	bgt.n	800123a <__aeabi_i2f+0x8e>
 800120c:	002a      	movs	r2, r5
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <__aeabi_i2f+0xa0>)
 8001210:	4002      	ands	r2, r0
 8001212:	076e      	lsls	r6, r5, #29
 8001214:	d009      	beq.n	800122a <__aeabi_i2f+0x7e>
 8001216:	260f      	movs	r6, #15
 8001218:	4035      	ands	r5, r6
 800121a:	2d04      	cmp	r5, #4
 800121c:	d005      	beq.n	800122a <__aeabi_i2f+0x7e>
 800121e:	3204      	adds	r2, #4
 8001220:	0155      	lsls	r5, r2, #5
 8001222:	d502      	bpl.n	800122a <__aeabi_i2f+0x7e>
 8001224:	239f      	movs	r3, #159	; 0x9f
 8001226:	4002      	ands	r2, r0
 8001228:	1a5b      	subs	r3, r3, r1
 800122a:	0192      	lsls	r2, r2, #6
 800122c:	0a55      	lsrs	r5, r2, #9
 800122e:	b2d8      	uxtb	r0, r3
 8001230:	e7d6      	b.n	80011e0 <__aeabi_i2f+0x34>
 8001232:	026d      	lsls	r5, r5, #9
 8001234:	2096      	movs	r0, #150	; 0x96
 8001236:	0a6d      	lsrs	r5, r5, #9
 8001238:	e7d2      	b.n	80011e0 <__aeabi_i2f+0x34>
 800123a:	1f4a      	subs	r2, r1, #5
 800123c:	4095      	lsls	r5, r2
 800123e:	002a      	movs	r2, r5
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <__aeabi_i2f+0xa0>)
 8001242:	4002      	ands	r2, r0
 8001244:	076e      	lsls	r6, r5, #29
 8001246:	d0f0      	beq.n	800122a <__aeabi_i2f+0x7e>
 8001248:	e7e5      	b.n	8001216 <__aeabi_i2f+0x6a>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_ui2f>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	1e04      	subs	r4, r0, #0
 8001254:	d00e      	beq.n	8001274 <__aeabi_ui2f+0x24>
 8001256:	f000 f843 	bl	80012e0 <__clzsi2>
 800125a:	239e      	movs	r3, #158	; 0x9e
 800125c:	0001      	movs	r1, r0
 800125e:	1a1b      	subs	r3, r3, r0
 8001260:	2b96      	cmp	r3, #150	; 0x96
 8001262:	dc0c      	bgt.n	800127e <__aeabi_ui2f+0x2e>
 8001264:	2808      	cmp	r0, #8
 8001266:	d02c      	beq.n	80012c2 <__aeabi_ui2f+0x72>
 8001268:	3908      	subs	r1, #8
 800126a:	408c      	lsls	r4, r1
 800126c:	0264      	lsls	r4, r4, #9
 800126e:	0a64      	lsrs	r4, r4, #9
 8001270:	b2d8      	uxtb	r0, r3
 8001272:	e001      	b.n	8001278 <__aeabi_ui2f+0x28>
 8001274:	2000      	movs	r0, #0
 8001276:	2400      	movs	r4, #0
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4320      	orrs	r0, r4
 800127c:	bd70      	pop	{r4, r5, r6, pc}
 800127e:	2b99      	cmp	r3, #153	; 0x99
 8001280:	dd0a      	ble.n	8001298 <__aeabi_ui2f+0x48>
 8001282:	0002      	movs	r2, r0
 8001284:	0020      	movs	r0, r4
 8001286:	321b      	adds	r2, #27
 8001288:	4090      	lsls	r0, r2
 800128a:	0002      	movs	r2, r0
 800128c:	1e50      	subs	r0, r2, #1
 800128e:	4182      	sbcs	r2, r0
 8001290:	2005      	movs	r0, #5
 8001292:	1a40      	subs	r0, r0, r1
 8001294:	40c4      	lsrs	r4, r0
 8001296:	4314      	orrs	r4, r2
 8001298:	2905      	cmp	r1, #5
 800129a:	dc16      	bgt.n	80012ca <__aeabi_ui2f+0x7a>
 800129c:	0022      	movs	r2, r4
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <__aeabi_ui2f+0x8c>)
 80012a0:	4002      	ands	r2, r0
 80012a2:	0765      	lsls	r5, r4, #29
 80012a4:	d009      	beq.n	80012ba <__aeabi_ui2f+0x6a>
 80012a6:	250f      	movs	r5, #15
 80012a8:	402c      	ands	r4, r5
 80012aa:	2c04      	cmp	r4, #4
 80012ac:	d005      	beq.n	80012ba <__aeabi_ui2f+0x6a>
 80012ae:	3204      	adds	r2, #4
 80012b0:	0154      	lsls	r4, r2, #5
 80012b2:	d502      	bpl.n	80012ba <__aeabi_ui2f+0x6a>
 80012b4:	239f      	movs	r3, #159	; 0x9f
 80012b6:	4002      	ands	r2, r0
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	0192      	lsls	r2, r2, #6
 80012bc:	0a54      	lsrs	r4, r2, #9
 80012be:	b2d8      	uxtb	r0, r3
 80012c0:	e7da      	b.n	8001278 <__aeabi_ui2f+0x28>
 80012c2:	0264      	lsls	r4, r4, #9
 80012c4:	2096      	movs	r0, #150	; 0x96
 80012c6:	0a64      	lsrs	r4, r4, #9
 80012c8:	e7d6      	b.n	8001278 <__aeabi_ui2f+0x28>
 80012ca:	1f4a      	subs	r2, r1, #5
 80012cc:	4094      	lsls	r4, r2
 80012ce:	0022      	movs	r2, r4
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <__aeabi_ui2f+0x8c>)
 80012d2:	4002      	ands	r2, r0
 80012d4:	0765      	lsls	r5, r4, #29
 80012d6:	d0f0      	beq.n	80012ba <__aeabi_ui2f+0x6a>
 80012d8:	e7e5      	b.n	80012a6 <__aeabi_ui2f+0x56>
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	fbffffff 	.word	0xfbffffff

080012e0 <__clzsi2>:
 80012e0:	211c      	movs	r1, #28
 80012e2:	2301      	movs	r3, #1
 80012e4:	041b      	lsls	r3, r3, #16
 80012e6:	4298      	cmp	r0, r3
 80012e8:	d301      	bcc.n	80012ee <__clzsi2+0xe>
 80012ea:	0c00      	lsrs	r0, r0, #16
 80012ec:	3910      	subs	r1, #16
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d301      	bcc.n	80012f8 <__clzsi2+0x18>
 80012f4:	0a00      	lsrs	r0, r0, #8
 80012f6:	3908      	subs	r1, #8
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d301      	bcc.n	8001302 <__clzsi2+0x22>
 80012fe:	0900      	lsrs	r0, r0, #4
 8001300:	3904      	subs	r1, #4
 8001302:	a202      	add	r2, pc, #8	; (adr r2, 800130c <__clzsi2+0x2c>)
 8001304:	5c10      	ldrb	r0, [r2, r0]
 8001306:	1840      	adds	r0, r0, r1
 8001308:	4770      	bx	lr
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	02020304 	.word	0x02020304
 8001310:	01010101 	.word	0x01010101
	...

0800131c <reverse_bytes>:
  ALGO_PHASECAL_LIM                           = 0x30,
  ALGO_PHASECAL_CONFIG_TIMEOUT                = 0x30,
};

void reverse_bytes(uint8_t* data, const uint8_t size)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size / 2; ++i)
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e029      	b.n	8001388 <reverse_bytes+0x6c>
	{
		const uint8_t tmp = data[i];
 8001334:	200f      	movs	r0, #15
 8001336:	183b      	adds	r3, r7, r0
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	18d2      	adds	r2, r2, r3
 800133e:	240e      	movs	r4, #14
 8001340:	193b      	adds	r3, r7, r4
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	701a      	strb	r2, [r3, #0]
		data[i] = data[size - 1 - i];
 8001346:	1cfb      	adds	r3, r7, #3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	183b      	adds	r3, r7, r0
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	001a      	movs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	189a      	adds	r2, r3, r2
 8001358:	183b      	adds	r3, r7, r0
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	18cb      	adds	r3, r1, r3
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
		data[size - 1 - i] = tmp;
 8001364:	1cfb      	adds	r3, r7, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	0001      	movs	r1, r0
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	001a      	movs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	189b      	adds	r3, r3, r2
 8001378:	193a      	adds	r2, r7, r4
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size / 2; ++i)
 800137e:	187b      	adds	r3, r7, r1
 8001380:	187a      	adds	r2, r7, r1
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	3201      	adds	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	1cfb      	adds	r3, r7, #3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	220f      	movs	r2, #15
 8001392:	18ba      	adds	r2, r7, r2
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3cc      	bcc.n	8001334 <reverse_bytes+0x18>
	}
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b005      	add	sp, #20
 80013a2:	bd90      	pop	{r4, r7, pc}

080013a4 <laser_write>:

HAL_StatusTypeDef laser_write(laser_handle* laser, uint8_t reg, uint8_t* data, const uint8_t size)
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	0008      	movs	r0, r1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	0019      	movs	r1, r3
 80013b2:	240b      	movs	r4, #11
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	1c02      	adds	r2, r0, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	260a      	movs	r6, #10
 80013bc:	19bb      	adds	r3, r7, r6
 80013be:	1c0a      	adds	r2, r1, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	//Convert LSB first to MSB first
	reverse_bytes(data, size);
 80013c2:	19bb      	adds	r3, r7, r6
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff ffa6 	bl	800131c <reverse_bytes>

	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6818      	ldr	r0, [r3, #0]
													   laser->address,
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	799b      	ldrb	r3, [r3, #6]
	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 80013d8:	b299      	uxth	r1, r3
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29d      	uxth	r5, r3
 80013e0:	19bb      	adds	r3, r7, r6
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
													   reg,
													   sizeof(reg),
													   data,
													   size,
													   laser->timeout);
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	8892      	ldrh	r2, [r2, #4]
	const HAL_StatusTypeDef status = HAL_I2C_Mem_Write(laser->hi2c,
 80013ea:	2417      	movs	r4, #23
 80013ec:	193c      	adds	r4, r7, r4
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	002a      	movs	r2, r5
 80013fa:	f005 f929 	bl	8006650 <HAL_I2C_Mem_Write>
 80013fe:	0003      	movs	r3, r0
 8001400:	7023      	strb	r3, [r4, #0]

	//Convert MSB first to LSB first
	reverse_bytes(data, size);
 8001402:	19bb      	adds	r3, r7, r6
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff86 	bl	800131c <reverse_bytes>

	return status;
 8001410:	2417      	movs	r4, #23
 8001412:	193b      	adds	r3, r7, r4
 8001414:	781b      	ldrb	r3, [r3, #0]
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b007      	add	sp, #28
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800141e <laser_read>:

HAL_StatusTypeDef laser_read(laser_handle* laser, uint8_t reg, uint8_t* data, const uint8_t size)
{
 800141e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001420:	b089      	sub	sp, #36	; 0x24
 8001422:	af02      	add	r7, sp, #8
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	0008      	movs	r0, r1
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	0019      	movs	r1, r3
 800142c:	260b      	movs	r6, #11
 800142e:	19bb      	adds	r3, r7, r6
 8001430:	1c02      	adds	r2, r0, #0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	230a      	movs	r3, #10
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	1c0a      	adds	r2, r1, #0
 800143a:	701a      	strb	r2, [r3, #0]
	//Select register
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6818      	ldr	r0, [r3, #0]
													   laser->address,
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	799b      	ldrb	r3, [r3, #6]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 8001444:	b299      	uxth	r1, r3
													   &reg,
													   sizeof(reg),
													   laser->timeout);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(laser->hi2c,
 800144a:	2517      	movs	r5, #23
 800144c:	197c      	adds	r4, r7, r5
 800144e:	19ba      	adds	r2, r7, r6
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	f004 feec 	bl	8006230 <HAL_I2C_Master_Transmit>
 8001458:	0003      	movs	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 800145c:	197b      	adds	r3, r7, r5
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <laser_read+0x4c>
		return status;
 8001464:	197b      	adds	r3, r7, r5
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	e024      	b.n	80014b4 <laser_read+0x96>

	//Read register contents
	status = HAL_I2C_Master_Receive(laser->hi2c,
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6818      	ldr	r0, [r3, #0]
									laser->address + 1,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	799b      	ldrb	r3, [r3, #6]
 8001472:	b29b      	uxth	r3, r3
	status = HAL_I2C_Master_Receive(laser->hi2c,
 8001474:	3301      	adds	r3, #1
 8001476:	b299      	uxth	r1, r3
 8001478:	260a      	movs	r6, #10
 800147a:	19bb      	adds	r3, r7, r6
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b29d      	uxth	r5, r3
									data,
									size,
									laser->timeout);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	889b      	ldrh	r3, [r3, #4]
	status = HAL_I2C_Master_Receive(laser->hi2c,
 8001484:	2217      	movs	r2, #23
 8001486:	18bc      	adds	r4, r7, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	002b      	movs	r3, r5
 800148e:	f004 ffd7 	bl	8006440 <HAL_I2C_Master_Receive>
 8001492:	0003      	movs	r3, r0
 8001494:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 8001496:	2217      	movs	r2, #23
 8001498:	18bb      	adds	r3, r7, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <laser_read+0x90>
	{
		//Convert MSB first to LSB first
		reverse_bytes(data, size);
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff37 	bl	800131c <reverse_bytes>
	}

	return status;
 80014ae:	2317      	movs	r3, #23
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b007      	add	sp, #28
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014bc <laser_write_u8>:

HAL_StatusTypeDef laser_write_u8(laser_handle* laser, uint8_t reg, uint8_t data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	0008      	movs	r0, r1
 80014c6:	0011      	movs	r1, r2
 80014c8:	1cfb      	adds	r3, r7, #3
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	return laser_write(laser, reg, &data, sizeof(data));
 80014d4:	1cba      	adds	r2, r7, #2
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	2301      	movs	r3, #1
 80014de:	f7ff ff61 	bl	80013a4 <laser_write>
 80014e2:	0003      	movs	r3, r0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <laser_write_u16>:

HAL_StatusTypeDef laser_write_u16(laser_handle* laser, uint8_t reg, uint16_t data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	0008      	movs	r0, r1
 80014f6:	0011      	movs	r1, r2
 80014f8:	1cfb      	adds	r3, r7, #3
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	003b      	movs	r3, r7
 8001500:	1c0a      	adds	r2, r1, #0
 8001502:	801a      	strh	r2, [r3, #0]
	return laser_write(laser, reg, (uint8_t*)&data, sizeof(data));
 8001504:	003a      	movs	r2, r7
 8001506:	1cfb      	adds	r3, r7, #3
 8001508:	7819      	ldrb	r1, [r3, #0]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	2302      	movs	r3, #2
 800150e:	f7ff ff49 	bl	80013a4 <laser_write>
 8001512:	0003      	movs	r3, r0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <laser_read_u8>:

HAL_StatusTypeDef laser_read_u8(laser_handle* laser, uint8_t reg, uint8_t* data)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	200b      	movs	r0, #11
 8001528:	183b      	adds	r3, r7, r0
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	701a      	strb	r2, [r3, #0]
	return laser_read(laser, reg, data, sizeof(uint8_t));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	183b      	adds	r3, r7, r0
 8001532:	7819      	ldrb	r1, [r3, #0]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	2301      	movs	r3, #1
 8001538:	f7ff ff71 	bl	800141e <laser_read>
 800153c:	0003      	movs	r3, r0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}

08001546 <laser_read_u16>:

HAL_StatusTypeDef laser_read_u16(laser_handle* laser, uint8_t reg, uint16_t* data)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	200b      	movs	r0, #11
 8001552:	183b      	adds	r3, r7, r0
 8001554:	1c0a      	adds	r2, r1, #0
 8001556:	701a      	strb	r2, [r3, #0]
	return laser_read(laser, reg, (uint8_t*)data, sizeof(uint16_t));
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	183b      	adds	r3, r7, r0
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	2302      	movs	r3, #2
 8001562:	f7ff ff5c 	bl	800141e <laser_read>
 8001566:	0003      	movs	r3, r0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}

08001570 <laser_calibrate>:

HAL_StatusTypeDef laser_calibrate(laser_handle* laser, uint8_t vhv_init_byte)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	000a      	movs	r2, r1
 800157a:	1cfb      	adds	r3, r7, #3
 800157c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = laser_write_u8(laser, SYSRANGE_START, 0x01 | vhv_init_byte);
 800157e:	1cfb      	adds	r3, r7, #3
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4313      	orrs	r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	2517      	movs	r5, #23
 800158a:	197c      	adds	r4, r7, r5
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2100      	movs	r1, #0
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff93 	bl	80014bc <laser_write_u8>
 8001596:	0003      	movs	r3, r0
 8001598:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800159a:	197b      	adds	r3, r7, r5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <laser_calibrate+0x38>
		return status;
 80015a2:	197b      	adds	r3, r7, r5
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	e03d      	b.n	8001624 <laser_calibrate+0xb4>

	uint8_t tmp;
	const uint32_t tick = HAL_GetTick();
 80015a8:	f004 f800 	bl	80055ac <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	613b      	str	r3, [r7, #16]
	do
	{
	  status = laser_read_u8(laser, RESULT_INTERRUPT_STATUS, &tmp);
 80015b0:	2517      	movs	r5, #23
 80015b2:	197c      	adds	r4, r7, r5
 80015b4:	230f      	movs	r3, #15
 80015b6:	18fa      	adds	r2, r7, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2113      	movs	r1, #19
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ffad 	bl	800151c <laser_read_u8>
 80015c2:	0003      	movs	r3, r0
 80015c4:	7023      	strb	r3, [r4, #0]
	  if (status != HAL_OK)
 80015c6:	197b      	adds	r3, r7, r5
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <laser_calibrate+0x64>
		return status;
 80015ce:	197b      	adds	r3, r7, r5
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	e027      	b.n	8001624 <laser_calibrate+0xb4>

	  if (HAL_GetTick() - tick >= laser->timeout)
 80015d4:	f003 ffea 	bl	80055ac <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	8892      	ldrh	r2, [r2, #4]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d301      	bcc.n	80015ea <laser_calibrate+0x7a>
		  return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e01c      	b.n	8001624 <laser_calibrate+0xb4>

	} while (tmp == 0);
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0dd      	beq.n	80015b0 <laser_calibrate+0x40>

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015f4:	2517      	movs	r5, #23
 80015f6:	197c      	adds	r4, r7, r5
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	210b      	movs	r1, #11
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ff5c 	bl	80014bc <laser_write_u8>
 8001604:	0003      	movs	r3, r0
 8001606:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <laser_calibrate+0xa6>
		return status;
 8001610:	197b      	adds	r3, r7, r5
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	e006      	b.n	8001624 <laser_calibrate+0xb4>

	return laser_write_u8(laser, SYSRANGE_START, 0x00);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff4d 	bl	80014bc <laser_write_u8>
 8001622:	0003      	movs	r3, r0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bdb0      	pop	{r4, r5, r7, pc}

0800162c <laser_init>:

HAL_StatusTypeDef laser_init(laser_handle* laser)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	// "Set I2C standard mode"
	status = laser_write_u8(laser, 0x88, 0x00);
 8001634:	251d      	movs	r5, #29
 8001636:	197c      	adds	r4, r7, r5
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	2188      	movs	r1, #136	; 0x88
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff ff3c 	bl	80014bc <laser_write_u8>
 8001644:	0003      	movs	r3, r0
 8001646:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001648:	197b      	adds	r3, r7, r5
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <laser_init+0x2c>
		return status;
 8001650:	197b      	adds	r3, r7, r5
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	f000 fff6 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x01);
 8001658:	251d      	movs	r5, #29
 800165a:	197c      	adds	r4, r7, r5
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff ff2a 	bl	80014bc <laser_write_u8>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <laser_init+0x50>
		return status;
 8001674:	197b      	adds	r3, r7, r5
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f000 ffe4 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800167c:	251d      	movs	r5, #29
 800167e:	197c      	adds	r4, r7, r5
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	21ff      	movs	r1, #255	; 0xff
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ff18 	bl	80014bc <laser_write_u8>
 800168c:	0003      	movs	r3, r0
 800168e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001690:	197b      	adds	r3, r7, r5
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <laser_init+0x74>
		return status;
 8001698:	197b      	adds	r3, r7, r5
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	f000 ffd2 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x00);
 80016a0:	251d      	movs	r5, #29
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7ff ff06 	bl	80014bc <laser_write_u8>
 80016b0:	0003      	movs	r3, r0
 80016b2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <laser_init+0x98>
		return status;
 80016bc:	197b      	adds	r3, r7, r5
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f000 ffc0 	bl	8002644 <laser_init+0x1018>

	status = laser_read_u8(laser, 0x91, &laser->g_stop);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1dda      	adds	r2, r3, #7
 80016c8:	251d      	movs	r5, #29
 80016ca:	197c      	adds	r4, r7, r5
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2191      	movs	r1, #145	; 0x91
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ff23 	bl	800151c <laser_read_u8>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <laser_init+0xbe>
		return status;
 80016e2:	197b      	adds	r3, r7, r5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f000 ffad 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x01);
 80016ea:	251d      	movs	r5, #29
 80016ec:	197c      	adds	r4, r7, r5
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	2100      	movs	r1, #0
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fee1 	bl	80014bc <laser_write_u8>
 80016fa:	0003      	movs	r3, r0
 80016fc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <laser_init+0xe2>
		return status;
 8001706:	197b      	adds	r3, r7, r5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	f000 ff9b 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 800170e:	251d      	movs	r5, #29
 8001710:	197c      	adds	r4, r7, r5
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	21ff      	movs	r1, #255	; 0xff
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fecf 	bl	80014bc <laser_write_u8>
 800171e:	0003      	movs	r3, r0
 8001720:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001722:	197b      	adds	r3, r7, r5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <laser_init+0x106>
		return status;
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f000 ff89 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x00);
 8001732:	251d      	movs	r5, #29
 8001734:	197c      	adds	r4, r7, r5
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff febd 	bl	80014bc <laser_write_u8>
 8001742:	0003      	movs	r3, r0
 8001744:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001746:	197b      	adds	r3, r7, r5
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <laser_init+0x12a>
		return status;
 800174e:	197b      	adds	r3, r7, r5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f000 ff77 	bl	8002644 <laser_init+0x1018>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	uint8_t msrc_ctrl;
	status = laser_read_u8(laser, MSRC_CONFIG_CONTROL, &msrc_ctrl);
 8001756:	251d      	movs	r5, #29
 8001758:	197c      	adds	r4, r7, r5
 800175a:	231b      	movs	r3, #27
 800175c:	18fa      	adds	r2, r7, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2160      	movs	r1, #96	; 0x60
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff feda 	bl	800151c <laser_read_u8>
 8001768:	0003      	movs	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800176c:	197b      	adds	r3, r7, r5
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <laser_init+0x150>
		return status;
 8001774:	197b      	adds	r3, r7, r5
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f000 ff64 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, MSRC_CONFIG_CONTROL, msrc_ctrl | 0x12);
 800177c:	231b      	movs	r3, #27
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2212      	movs	r2, #18
 8001784:	4313      	orrs	r3, r2
 8001786:	b2da      	uxtb	r2, r3
 8001788:	251d      	movs	r5, #29
 800178a:	197c      	adds	r4, r7, r5
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2160      	movs	r1, #96	; 0x60
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff fe93 	bl	80014bc <laser_write_u8>
 8001796:	0003      	movs	r3, r0
 8001798:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800179a:	197b      	adds	r3, r7, r5
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <laser_init+0x17e>
		return status;
 80017a2:	197b      	adds	r3, r7, r5
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f000 ff4d 	bl	8002644 <laser_init+0x1018>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	status = laser_set_signal_rate(laser, SIGNAL_RATE);
 80017aa:	251d      	movs	r5, #29
 80017ac:	197c      	adds	r4, r7, r5
 80017ae:	22fa      	movs	r2, #250	; 0xfa
 80017b0:	0592      	lsls	r2, r2, #22
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1c11      	adds	r1, r2, #0
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 ff4a 	bl	8002650 <laser_set_signal_rate>
 80017bc:	0003      	movs	r3, r0
 80017be:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80017c0:	197b      	adds	r3, r7, r5
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <laser_init+0x1a4>
		return status;
 80017c8:	197b      	adds	r3, r7, r5
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f000 ff3a 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80017d0:	251d      	movs	r5, #29
 80017d2:	197c      	adds	r4, r7, r5
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	2101      	movs	r1, #1
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff fe6e 	bl	80014bc <laser_write_u8>
 80017e0:	0003      	movs	r3, r0
 80017e2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80017e4:	197b      	adds	r3, r7, r5
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <laser_init+0x1c8>
		return status;
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f000 ff28 	bl	8002644 <laser_init+0x1018>

	// VL53L0X_StaticInit() begin

	uint8_t spad_count;
	uint8_t spad_type_is_aperture;
	status = laser_get_spad(laser, &spad_count, &spad_type_is_aperture);
 80017f4:	251d      	movs	r5, #29
 80017f6:	197c      	adds	r4, r7, r5
 80017f8:	2319      	movs	r3, #25
 80017fa:	18fa      	adds	r2, r7, r3
 80017fc:	231a      	movs	r3, #26
 80017fe:	18f9      	adds	r1, r7, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 ff4e 	bl	80026a4 <laser_get_spad>
 8001808:	0003      	movs	r3, r0
 800180a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800180c:	197b      	adds	r3, r7, r5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <laser_init+0x1f0>
		return status;
 8001814:	197b      	adds	r3, r7, r5
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f000 ff14 	bl	8002644 <laser_init+0x1018>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	status = laser_read(laser, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800181c:	251d      	movs	r5, #29
 800181e:	197c      	adds	r4, r7, r5
 8001820:	2310      	movs	r3, #16
 8001822:	18fa      	adds	r2, r7, r3
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	2306      	movs	r3, #6
 8001828:	21b0      	movs	r1, #176	; 0xb0
 800182a:	f7ff fdf8 	bl	800141e <laser_read>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <laser_init+0x216>
		return status;
 800183a:	197b      	adds	r3, r7, r5
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f000 ff01 	bl	8002644 <laser_init+0x1018>
	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001842:	251d      	movs	r5, #29
 8001844:	197c      	adds	r4, r7, r5
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	21ff      	movs	r1, #255	; 0xff
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fe35 	bl	80014bc <laser_write_u8>
 8001852:	0003      	movs	r3, r0
 8001854:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001856:	197b      	adds	r3, r7, r5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <laser_init+0x23a>
		return status;
 800185e:	197b      	adds	r3, r7, r5
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	f000 feef 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001866:	251d      	movs	r5, #29
 8001868:	197c      	adds	r4, r7, r5
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	214f      	movs	r1, #79	; 0x4f
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fe23 	bl	80014bc <laser_write_u8>
 8001876:	0003      	movs	r3, r0
 8001878:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <laser_init+0x25e>
		return status;
 8001882:	197b      	adds	r3, r7, r5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f000 fedd 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800188a:	251d      	movs	r5, #29
 800188c:	197c      	adds	r4, r7, r5
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	222c      	movs	r2, #44	; 0x2c
 8001892:	214e      	movs	r1, #78	; 0x4e
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fe11 	bl	80014bc <laser_write_u8>
 800189a:	0003      	movs	r3, r0
 800189c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800189e:	197b      	adds	r3, r7, r5
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <laser_init+0x282>
		return status;
 80018a6:	197b      	adds	r3, r7, r5
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f000 fecb 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80018ae:	251d      	movs	r5, #29
 80018b0:	197c      	adds	r4, r7, r5
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	21ff      	movs	r1, #255	; 0xff
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fdff 	bl	80014bc <laser_write_u8>
 80018be:	0003      	movs	r3, r0
 80018c0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80018c2:	197b      	adds	r3, r7, r5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <laser_init+0x2a6>
		return status;
 80018ca:	197b      	adds	r3, r7, r5
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f000 feb9 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80018d2:	251d      	movs	r5, #29
 80018d4:	197c      	adds	r4, r7, r5
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	22b4      	movs	r2, #180	; 0xb4
 80018da:	21b6      	movs	r1, #182	; 0xb6
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fded 	bl	80014bc <laser_write_u8>
 80018e2:	0003      	movs	r3, r0
 80018e4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <laser_init+0x2ca>
		return status;
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f000 fea7 	bl	8002644 <laser_init+0x1018>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80018f6:	2319      	movs	r3, #25
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <laser_init+0x2d8>
 8001900:	220c      	movs	r2, #12
 8001902:	e000      	b.n	8001906 <laser_init+0x2da>
 8001904:	2200      	movs	r2, #0
 8001906:	231c      	movs	r3, #28
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	701a      	strb	r2, [r3, #0]
	uint8_t spads_enabled = 0;
 800190c:	231f      	movs	r3, #31
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 48; i++)
 8001914:	231e      	movs	r3, #30
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e049      	b.n	80019b2 <laser_init+0x386>
	{
	if (i < first_spad_to_enable || spads_enabled == spad_count)
 800191e:	231e      	movs	r3, #30
 8001920:	18fa      	adds	r2, r7, r3
 8001922:	231c      	movs	r3, #28
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d307      	bcc.n	800193e <laser_init+0x312>
 800192e:	231a      	movs	r3, #26
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	221f      	movs	r2, #31
 8001936:	18ba      	adds	r2, r7, r2
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d11a      	bne.n	8001974 <laser_init+0x348>
	{
	  // This bit is lower than the first one that should be enabled, or
	  // (reference_spad_count) bits have already been enabled, so zero this bit
	  ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800193e:	211e      	movs	r1, #30
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	b2d8      	uxtb	r0, r3
 8001948:	0002      	movs	r2, r0
 800194a:	2410      	movs	r4, #16
 800194c:	193b      	adds	r3, r7, r4
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	b25b      	sxtb	r3, r3
 8001952:	187a      	adds	r2, r7, r1
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	2107      	movs	r1, #7
 8001958:	400a      	ands	r2, r1
 800195a:	2101      	movs	r1, #1
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	b252      	sxtb	r2, r2
 8001962:	43d2      	mvns	r2, r2
 8001964:	b252      	sxtb	r2, r2
 8001966:	4013      	ands	r3, r2
 8001968:	b25b      	sxtb	r3, r3
 800196a:	0002      	movs	r2, r0
 800196c:	b2d9      	uxtb	r1, r3
 800196e:	193b      	adds	r3, r7, r4
 8001970:	5499      	strb	r1, [r3, r2]
 8001972:	e018      	b.n	80019a6 <laser_init+0x37a>
	}
	else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001974:	201e      	movs	r0, #30
 8001976:	183b      	adds	r3, r7, r0
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	001a      	movs	r2, r3
 8001980:	2310      	movs	r3, #16
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	5c9b      	ldrb	r3, [r3, r2]
 8001986:	0019      	movs	r1, r3
 8001988:	183b      	adds	r3, r7, r0
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2207      	movs	r2, #7
 800198e:	4013      	ands	r3, r2
 8001990:	4119      	asrs	r1, r3
 8001992:	000b      	movs	r3, r1
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d005      	beq.n	80019a6 <laser_init+0x37a>
	{
	  spads_enabled++;
 800199a:	211f      	movs	r1, #31
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	3201      	adds	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 48; i++)
 80019a6:	211e      	movs	r1, #30
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	3201      	adds	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	231e      	movs	r3, #30
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b2f      	cmp	r3, #47	; 0x2f
 80019ba:	d9b0      	bls.n	800191e <laser_init+0x2f2>
	}
	}

	status = laser_write(laser, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80019bc:	251d      	movs	r5, #29
 80019be:	197c      	adds	r4, r7, r5
 80019c0:	2310      	movs	r3, #16
 80019c2:	18fa      	adds	r2, r7, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	2306      	movs	r3, #6
 80019c8:	21b0      	movs	r1, #176	; 0xb0
 80019ca:	f7ff fceb 	bl	80013a4 <laser_write>
 80019ce:	0003      	movs	r3, r0
 80019d0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <laser_init+0x3b6>
		return status;
 80019da:	197b      	adds	r3, r7, r5
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f000 fe31 	bl	8002644 <laser_init+0x1018>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	status = laser_write_u8(laser, 0xFF, 0x01);
 80019e2:	251d      	movs	r5, #29
 80019e4:	197c      	adds	r4, r7, r5
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	21ff      	movs	r1, #255	; 0xff
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fd65 	bl	80014bc <laser_write_u8>
 80019f2:	0003      	movs	r3, r0
 80019f4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <laser_init+0x3da>
		return status;
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	f000 fe1f 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x00);
 8001a06:	251d      	movs	r5, #29
 8001a08:	197c      	adds	r4, r7, r5
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff fd53 	bl	80014bc <laser_write_u8>
 8001a16:	0003      	movs	r3, r0
 8001a18:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a1a:	197b      	adds	r3, r7, r5
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <laser_init+0x3fe>
		return status;
 8001a22:	197b      	adds	r3, r7, r5
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f000 fe0d 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8001a2a:	251d      	movs	r5, #29
 8001a2c:	197c      	adds	r4, r7, r5
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	21ff      	movs	r1, #255	; 0xff
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fd41 	bl	80014bc <laser_write_u8>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <laser_init+0x422>
		return status;
 8001a46:	197b      	adds	r3, r7, r5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f000 fdfb 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x09, 0x00);
 8001a4e:	251d      	movs	r5, #29
 8001a50:	197c      	adds	r4, r7, r5
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	2109      	movs	r1, #9
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff fd2f 	bl	80014bc <laser_write_u8>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a62:	197b      	adds	r3, r7, r5
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <laser_init+0x446>
		return status;
 8001a6a:	197b      	adds	r3, r7, r5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f000 fde9 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x10, 0x00);
 8001a72:	251d      	movs	r5, #29
 8001a74:	197c      	adds	r4, r7, r5
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fd1d 	bl	80014bc <laser_write_u8>
 8001a82:	0003      	movs	r3, r0
 8001a84:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <laser_init+0x46a>
		return status;
 8001a8e:	197b      	adds	r3, r7, r5
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	f000 fdd7 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x11, 0x00);
 8001a96:	251d      	movs	r5, #29
 8001a98:	197c      	adds	r4, r7, r5
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2111      	movs	r1, #17
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff fd0b 	bl	80014bc <laser_write_u8>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001aaa:	197b      	adds	r3, r7, r5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <laser_init+0x48e>
		return status;
 8001ab2:	197b      	adds	r3, r7, r5
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f000 fdc5 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x24, 0x01);
 8001aba:	251d      	movs	r5, #29
 8001abc:	197c      	adds	r4, r7, r5
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2124      	movs	r1, #36	; 0x24
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fcf9 	bl	80014bc <laser_write_u8>
 8001aca:	0003      	movs	r3, r0
 8001acc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ace:	197b      	adds	r3, r7, r5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <laser_init+0x4b2>
		return status;
 8001ad6:	197b      	adds	r3, r7, r5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f000 fdb3 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x25, 0xFF);
 8001ade:	251d      	movs	r5, #29
 8001ae0:	197c      	adds	r4, r7, r5
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	22ff      	movs	r2, #255	; 0xff
 8001ae6:	2125      	movs	r1, #37	; 0x25
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fce7 	bl	80014bc <laser_write_u8>
 8001aee:	0003      	movs	r3, r0
 8001af0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001af2:	197b      	adds	r3, r7, r5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <laser_init+0x4d6>
		return status;
 8001afa:	197b      	adds	r3, r7, r5
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f000 fda1 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x75, 0x00);
 8001b02:	251d      	movs	r5, #29
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2175      	movs	r1, #117	; 0x75
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fcd5 	bl	80014bc <laser_write_u8>
 8001b12:	0003      	movs	r3, r0
 8001b14:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b16:	197b      	adds	r3, r7, r5
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <laser_init+0x4fa>
		return status;
 8001b1e:	197b      	adds	r3, r7, r5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	f000 fd8f 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001b26:	251d      	movs	r5, #29
 8001b28:	197c      	adds	r4, r7, r5
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fcc3 	bl	80014bc <laser_write_u8>
 8001b36:	0003      	movs	r3, r0
 8001b38:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b3a:	197b      	adds	r3, r7, r5
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <laser_init+0x51e>
		return status;
 8001b42:	197b      	adds	r3, r7, r5
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f000 fd7d 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4E, 0x2C);
 8001b4a:	251d      	movs	r5, #29
 8001b4c:	197c      	adds	r4, r7, r5
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	222c      	movs	r2, #44	; 0x2c
 8001b52:	214e      	movs	r1, #78	; 0x4e
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fcb1 	bl	80014bc <laser_write_u8>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b5e:	197b      	adds	r3, r7, r5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <laser_init+0x542>
		return status;
 8001b66:	197b      	adds	r3, r7, r5
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	f000 fd6b 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x48, 0x00);
 8001b6e:	251d      	movs	r5, #29
 8001b70:	197c      	adds	r4, r7, r5
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2148      	movs	r1, #72	; 0x48
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fc9f 	bl	80014bc <laser_write_u8>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001b82:	197b      	adds	r3, r7, r5
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <laser_init+0x566>
		return status;
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f000 fd59 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x30, 0x20);
 8001b92:	251d      	movs	r5, #29
 8001b94:	197c      	adds	r4, r7, r5
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	2130      	movs	r1, #48	; 0x30
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fc8d 	bl	80014bc <laser_write_u8>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ba6:	197b      	adds	r3, r7, r5
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <laser_init+0x58a>
		return status;
 8001bae:	197b      	adds	r3, r7, r5
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f000 fd47 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8001bb6:	251d      	movs	r5, #29
 8001bb8:	197c      	adds	r4, r7, r5
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	21ff      	movs	r1, #255	; 0xff
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fc7b 	bl	80014bc <laser_write_u8>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <laser_init+0x5ae>
		return status;
 8001bd2:	197b      	adds	r3, r7, r5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f000 fd35 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x30, 0x09);
 8001bda:	251d      	movs	r5, #29
 8001bdc:	197c      	adds	r4, r7, r5
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2209      	movs	r2, #9
 8001be2:	2130      	movs	r1, #48	; 0x30
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff fc69 	bl	80014bc <laser_write_u8>
 8001bea:	0003      	movs	r3, r0
 8001bec:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <laser_init+0x5d2>
		return status;
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f000 fd23 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x54, 0x00);
 8001bfe:	251d      	movs	r5, #29
 8001c00:	197c      	adds	r4, r7, r5
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2154      	movs	r1, #84	; 0x54
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fc57 	bl	80014bc <laser_write_u8>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <laser_init+0x5f6>
		return status;
 8001c1a:	197b      	adds	r3, r7, r5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	f000 fd11 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x31, 0x04);
 8001c22:	251d      	movs	r5, #29
 8001c24:	197c      	adds	r4, r7, r5
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	2131      	movs	r1, #49	; 0x31
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fc45 	bl	80014bc <laser_write_u8>
 8001c32:	0003      	movs	r3, r0
 8001c34:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c36:	197b      	adds	r3, r7, r5
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <laser_init+0x61a>
		return status;
 8001c3e:	197b      	adds	r3, r7, r5
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	f000 fcff 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x32, 0x03);
 8001c46:	251d      	movs	r5, #29
 8001c48:	197c      	adds	r4, r7, r5
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	2132      	movs	r1, #50	; 0x32
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fc33 	bl	80014bc <laser_write_u8>
 8001c56:	0003      	movs	r3, r0
 8001c58:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c5a:	197b      	adds	r3, r7, r5
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <laser_init+0x63e>
		return status;
 8001c62:	197b      	adds	r3, r7, r5
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	f000 fced 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x40, 0x83);
 8001c6a:	251d      	movs	r5, #29
 8001c6c:	197c      	adds	r4, r7, r5
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2283      	movs	r2, #131	; 0x83
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fc21 	bl	80014bc <laser_write_u8>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001c7e:	197b      	adds	r3, r7, r5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <laser_init+0x662>
		return status;
 8001c86:	197b      	adds	r3, r7, r5
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f000 fcdb 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x46, 0x25);
 8001c8e:	251d      	movs	r5, #29
 8001c90:	197c      	adds	r4, r7, r5
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2225      	movs	r2, #37	; 0x25
 8001c96:	2146      	movs	r1, #70	; 0x46
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff fc0f 	bl	80014bc <laser_write_u8>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <laser_init+0x686>
		return status;
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f000 fcc9 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x60, 0x00);
 8001cb2:	251d      	movs	r5, #29
 8001cb4:	197c      	adds	r4, r7, r5
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2160      	movs	r1, #96	; 0x60
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fbfd 	bl	80014bc <laser_write_u8>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <laser_init+0x6aa>
		return status;
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f000 fcb7 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x27, 0x00);
 8001cd6:	251d      	movs	r5, #29
 8001cd8:	197c      	adds	r4, r7, r5
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2127      	movs	r1, #39	; 0x27
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff fbeb 	bl	80014bc <laser_write_u8>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001cea:	197b      	adds	r3, r7, r5
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <laser_init+0x6ce>
		return status;
 8001cf2:	197b      	adds	r3, r7, r5
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f000 fca5 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x50, 0x06);
 8001cfa:	251d      	movs	r5, #29
 8001cfc:	197c      	adds	r4, r7, r5
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2206      	movs	r2, #6
 8001d02:	2150      	movs	r1, #80	; 0x50
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fbd9 	bl	80014bc <laser_write_u8>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d0e:	197b      	adds	r3, r7, r5
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <laser_init+0x6f2>
		return status;
 8001d16:	197b      	adds	r3, r7, r5
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	f000 fc93 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x51, 0x00);
 8001d1e:	251d      	movs	r5, #29
 8001d20:	197c      	adds	r4, r7, r5
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2151      	movs	r1, #81	; 0x51
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff fbc7 	bl	80014bc <laser_write_u8>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d32:	197b      	adds	r3, r7, r5
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <laser_init+0x716>
		return status;
 8001d3a:	197b      	adds	r3, r7, r5
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f000 fc81 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x52, 0x96);
 8001d42:	251d      	movs	r5, #29
 8001d44:	197c      	adds	r4, r7, r5
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2296      	movs	r2, #150	; 0x96
 8001d4a:	2152      	movs	r1, #82	; 0x52
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff fbb5 	bl	80014bc <laser_write_u8>
 8001d52:	0003      	movs	r3, r0
 8001d54:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <laser_init+0x73a>
		return status;
 8001d5e:	197b      	adds	r3, r7, r5
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f000 fc6f 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x56, 0x08);
 8001d66:	251d      	movs	r5, #29
 8001d68:	197c      	adds	r4, r7, r5
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	2156      	movs	r1, #86	; 0x56
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff fba3 	bl	80014bc <laser_write_u8>
 8001d76:	0003      	movs	r3, r0
 8001d78:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d7a:	197b      	adds	r3, r7, r5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <laser_init+0x75e>
		return status;
 8001d82:	197b      	adds	r3, r7, r5
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f000 fc5d 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x57, 0x30);
 8001d8a:	251d      	movs	r5, #29
 8001d8c:	197c      	adds	r4, r7, r5
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2230      	movs	r2, #48	; 0x30
 8001d92:	2157      	movs	r1, #87	; 0x57
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fb91 	bl	80014bc <laser_write_u8>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001d9e:	197b      	adds	r3, r7, r5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <laser_init+0x782>
		return status;
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f000 fc4b 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x61, 0x00);
 8001dae:	251d      	movs	r5, #29
 8001db0:	197c      	adds	r4, r7, r5
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2161      	movs	r1, #97	; 0x61
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff fb7f 	bl	80014bc <laser_write_u8>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001dc2:	197b      	adds	r3, r7, r5
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <laser_init+0x7a6>
		return status;
 8001dca:	197b      	adds	r3, r7, r5
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f000 fc39 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x62, 0x00);
 8001dd2:	251d      	movs	r5, #29
 8001dd4:	197c      	adds	r4, r7, r5
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2162      	movs	r1, #98	; 0x62
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fb6d 	bl	80014bc <laser_write_u8>
 8001de2:	0003      	movs	r3, r0
 8001de4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <laser_init+0x7ca>
		return status;
 8001dee:	197b      	adds	r3, r7, r5
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f000 fc27 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x64, 0x00);
 8001df6:	251d      	movs	r5, #29
 8001df8:	197c      	adds	r4, r7, r5
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2164      	movs	r1, #100	; 0x64
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fb5b 	bl	80014bc <laser_write_u8>
 8001e06:	0003      	movs	r3, r0
 8001e08:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <laser_init+0x7ee>
		return status;
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f000 fc15 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x65, 0x00);
 8001e1a:	251d      	movs	r5, #29
 8001e1c:	197c      	adds	r4, r7, r5
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	2165      	movs	r1, #101	; 0x65
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fb49 	bl	80014bc <laser_write_u8>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e2e:	197b      	adds	r3, r7, r5
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <laser_init+0x812>
		return status;
 8001e36:	197b      	adds	r3, r7, r5
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f000 fc03 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x66, 0xA0);
 8001e3e:	251d      	movs	r5, #29
 8001e40:	197c      	adds	r4, r7, r5
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	22a0      	movs	r2, #160	; 0xa0
 8001e46:	2166      	movs	r1, #102	; 0x66
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fb37 	bl	80014bc <laser_write_u8>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e52:	197b      	adds	r3, r7, r5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <laser_init+0x836>
		return status;
 8001e5a:	197b      	adds	r3, r7, r5
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f000 fbf1 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001e62:	251d      	movs	r5, #29
 8001e64:	197c      	adds	r4, r7, r5
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	21ff      	movs	r1, #255	; 0xff
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fb25 	bl	80014bc <laser_write_u8>
 8001e72:	0003      	movs	r3, r0
 8001e74:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <laser_init+0x85a>
		return status;
 8001e7e:	197b      	adds	r3, r7, r5
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f000 fbdf 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x22, 0x32);
 8001e86:	251d      	movs	r5, #29
 8001e88:	197c      	adds	r4, r7, r5
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2232      	movs	r2, #50	; 0x32
 8001e8e:	2122      	movs	r1, #34	; 0x22
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fb13 	bl	80014bc <laser_write_u8>
 8001e96:	0003      	movs	r3, r0
 8001e98:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001e9a:	197b      	adds	r3, r7, r5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <laser_init+0x87e>
		return status;
 8001ea2:	197b      	adds	r3, r7, r5
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f000 fbcd 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x47, 0x14);
 8001eaa:	251d      	movs	r5, #29
 8001eac:	197c      	adds	r4, r7, r5
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2214      	movs	r2, #20
 8001eb2:	2147      	movs	r1, #71	; 0x47
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fb01 	bl	80014bc <laser_write_u8>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ebe:	197b      	adds	r3, r7, r5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <laser_init+0x8a2>
		return status;
 8001ec6:	197b      	adds	r3, r7, r5
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f000 fbbb 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x49, 0xFF);
 8001ece:	251d      	movs	r5, #29
 8001ed0:	197c      	adds	r4, r7, r5
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	2149      	movs	r1, #73	; 0x49
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff faef 	bl	80014bc <laser_write_u8>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ee2:	197b      	adds	r3, r7, r5
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <laser_init+0x8c6>
		return status;
 8001eea:	197b      	adds	r3, r7, r5
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f000 fba9 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4A, 0x00);
 8001ef2:	251d      	movs	r5, #29
 8001ef4:	197c      	adds	r4, r7, r5
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	214a      	movs	r1, #74	; 0x4a
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fadd 	bl	80014bc <laser_write_u8>
 8001f02:	0003      	movs	r3, r0
 8001f04:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f06:	197b      	adds	r3, r7, r5
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <laser_init+0x8ea>
		return status;
 8001f0e:	197b      	adds	r3, r7, r5
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f000 fb97 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8001f16:	251d      	movs	r5, #29
 8001f18:	197c      	adds	r4, r7, r5
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	21ff      	movs	r1, #255	; 0xff
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff facb 	bl	80014bc <laser_write_u8>
 8001f26:	0003      	movs	r3, r0
 8001f28:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <laser_init+0x90e>
		return status;
 8001f32:	197b      	adds	r3, r7, r5
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f000 fb85 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x7A, 0x0A);
 8001f3a:	251d      	movs	r5, #29
 8001f3c:	197c      	adds	r4, r7, r5
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	220a      	movs	r2, #10
 8001f42:	217a      	movs	r1, #122	; 0x7a
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fab9 	bl	80014bc <laser_write_u8>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f4e:	197b      	adds	r3, r7, r5
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <laser_init+0x932>
		return status;
 8001f56:	197b      	adds	r3, r7, r5
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f000 fb73 	bl	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x7B, 0x00);
 8001f5e:	251d      	movs	r5, #29
 8001f60:	197c      	adds	r4, r7, r5
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	217b      	movs	r1, #123	; 0x7b
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff faa7 	bl	80014bc <laser_write_u8>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f72:	197b      	adds	r3, r7, r5
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <laser_init+0x954>
		return status;
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	e361      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x78, 0x21);
 8001f80:	251d      	movs	r5, #29
 8001f82:	197c      	adds	r4, r7, r5
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2221      	movs	r2, #33	; 0x21
 8001f88:	2178      	movs	r1, #120	; 0x78
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff fa96 	bl	80014bc <laser_write_u8>
 8001f90:	0003      	movs	r3, r0
 8001f92:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001f94:	197b      	adds	r3, r7, r5
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <laser_init+0x976>
		return status;
 8001f9c:	197b      	adds	r3, r7, r5
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	e350      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8001fa2:	251d      	movs	r5, #29
 8001fa4:	197c      	adds	r4, r7, r5
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	21ff      	movs	r1, #255	; 0xff
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7ff fa85 	bl	80014bc <laser_write_u8>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001fb6:	197b      	adds	r3, r7, r5
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <laser_init+0x998>
		return status;
 8001fbe:	197b      	adds	r3, r7, r5
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	e33f      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x23, 0x34);
 8001fc4:	251d      	movs	r5, #29
 8001fc6:	197c      	adds	r4, r7, r5
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2234      	movs	r2, #52	; 0x34
 8001fcc:	2123      	movs	r1, #35	; 0x23
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fa74 	bl	80014bc <laser_write_u8>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <laser_init+0x9ba>
		return status;
 8001fe0:	197b      	adds	r3, r7, r5
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	e32e      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x42, 0x00);
 8001fe6:	251d      	movs	r5, #29
 8001fe8:	197c      	adds	r4, r7, r5
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2142      	movs	r1, #66	; 0x42
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fa63 	bl	80014bc <laser_write_u8>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <laser_init+0x9dc>
		return status;
 8002002:	197b      	adds	r3, r7, r5
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	e31d      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x44, 0xFF);
 8002008:	251d      	movs	r5, #29
 800200a:	197c      	adds	r4, r7, r5
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	2144      	movs	r1, #68	; 0x44
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff fa52 	bl	80014bc <laser_write_u8>
 8002018:	0003      	movs	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800201c:	197b      	adds	r3, r7, r5
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <laser_init+0x9fe>
		return status;
 8002024:	197b      	adds	r3, r7, r5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	e30c      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x45, 0x26);
 800202a:	251d      	movs	r5, #29
 800202c:	197c      	adds	r4, r7, r5
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2226      	movs	r2, #38	; 0x26
 8002032:	2145      	movs	r1, #69	; 0x45
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff fa41 	bl	80014bc <laser_write_u8>
 800203a:	0003      	movs	r3, r0
 800203c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800203e:	197b      	adds	r3, r7, r5
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <laser_init+0xa20>
		return status;
 8002046:	197b      	adds	r3, r7, r5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	e2fb      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x46, 0x05);
 800204c:	251d      	movs	r5, #29
 800204e:	197c      	adds	r4, r7, r5
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2205      	movs	r2, #5
 8002054:	2146      	movs	r1, #70	; 0x46
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff fa30 	bl	80014bc <laser_write_u8>
 800205c:	0003      	movs	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002060:	197b      	adds	r3, r7, r5
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <laser_init+0xa42>
		return status;
 8002068:	197b      	adds	r3, r7, r5
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	e2ea      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x40, 0x40);
 800206e:	251d      	movs	r5, #29
 8002070:	197c      	adds	r4, r7, r5
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fa1f 	bl	80014bc <laser_write_u8>
 800207e:	0003      	movs	r3, r0
 8002080:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002082:	197b      	adds	r3, r7, r5
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <laser_init+0xa64>
		return status;
 800208a:	197b      	adds	r3, r7, r5
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	e2d9      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x0E, 0x06);
 8002090:	251d      	movs	r5, #29
 8002092:	197c      	adds	r4, r7, r5
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2206      	movs	r2, #6
 8002098:	210e      	movs	r1, #14
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff fa0e 	bl	80014bc <laser_write_u8>
 80020a0:	0003      	movs	r3, r0
 80020a2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020a4:	197b      	adds	r3, r7, r5
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <laser_init+0xa86>
		return status;
 80020ac:	197b      	adds	r3, r7, r5
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	e2c8      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x20, 0x1A);
 80020b2:	251d      	movs	r5, #29
 80020b4:	197c      	adds	r4, r7, r5
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	221a      	movs	r2, #26
 80020ba:	2120      	movs	r1, #32
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff f9fd 	bl	80014bc <laser_write_u8>
 80020c2:	0003      	movs	r3, r0
 80020c4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020c6:	197b      	adds	r3, r7, r5
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <laser_init+0xaa8>
		return status;
 80020ce:	197b      	adds	r3, r7, r5
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	e2b7      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x43, 0x40);
 80020d4:	251d      	movs	r5, #29
 80020d6:	197c      	adds	r4, r7, r5
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	2143      	movs	r1, #67	; 0x43
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff f9ec 	bl	80014bc <laser_write_u8>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80020e8:	197b      	adds	r3, r7, r5
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <laser_init+0xaca>
		return status;
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	e2a6      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80020f6:	251d      	movs	r5, #29
 80020f8:	197c      	adds	r4, r7, r5
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	21ff      	movs	r1, #255	; 0xff
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff f9db 	bl	80014bc <laser_write_u8>
 8002106:	0003      	movs	r3, r0
 8002108:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800210a:	197b      	adds	r3, r7, r5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <laser_init+0xaec>
		return status;
 8002112:	197b      	adds	r3, r7, r5
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	e295      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x34, 0x03);
 8002118:	251d      	movs	r5, #29
 800211a:	197c      	adds	r4, r7, r5
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2203      	movs	r2, #3
 8002120:	2134      	movs	r1, #52	; 0x34
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff f9ca 	bl	80014bc <laser_write_u8>
 8002128:	0003      	movs	r3, r0
 800212a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800212c:	197b      	adds	r3, r7, r5
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <laser_init+0xb0e>
		return status;
 8002134:	197b      	adds	r3, r7, r5
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	e284      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x35, 0x44);
 800213a:	251d      	movs	r5, #29
 800213c:	197c      	adds	r4, r7, r5
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2244      	movs	r2, #68	; 0x44
 8002142:	2135      	movs	r1, #53	; 0x35
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff f9b9 	bl	80014bc <laser_write_u8>
 800214a:	0003      	movs	r3, r0
 800214c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800214e:	197b      	adds	r3, r7, r5
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <laser_init+0xb30>
		return status;
 8002156:	197b      	adds	r3, r7, r5
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	e273      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800215c:	251d      	movs	r5, #29
 800215e:	197c      	adds	r4, r7, r5
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	21ff      	movs	r1, #255	; 0xff
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff f9a8 	bl	80014bc <laser_write_u8>
 800216c:	0003      	movs	r3, r0
 800216e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002170:	197b      	adds	r3, r7, r5
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <laser_init+0xb52>
		return status;
 8002178:	197b      	adds	r3, r7, r5
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	e262      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x31, 0x04);
 800217e:	251d      	movs	r5, #29
 8002180:	197c      	adds	r4, r7, r5
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	2131      	movs	r1, #49	; 0x31
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff f997 	bl	80014bc <laser_write_u8>
 800218e:	0003      	movs	r3, r0
 8002190:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002192:	197b      	adds	r3, r7, r5
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <laser_init+0xb74>
		return status;
 800219a:	197b      	adds	r3, r7, r5
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	e251      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4B, 0x09);
 80021a0:	251d      	movs	r5, #29
 80021a2:	197c      	adds	r4, r7, r5
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2209      	movs	r2, #9
 80021a8:	214b      	movs	r1, #75	; 0x4b
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7ff f986 	bl	80014bc <laser_write_u8>
 80021b0:	0003      	movs	r3, r0
 80021b2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021b4:	197b      	adds	r3, r7, r5
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <laser_init+0xb96>
		return status;
 80021bc:	197b      	adds	r3, r7, r5
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	e240      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4C, 0x05);
 80021c2:	251d      	movs	r5, #29
 80021c4:	197c      	adds	r4, r7, r5
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2205      	movs	r2, #5
 80021ca:	214c      	movs	r1, #76	; 0x4c
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff f975 	bl	80014bc <laser_write_u8>
 80021d2:	0003      	movs	r3, r0
 80021d4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021d6:	197b      	adds	r3, r7, r5
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <laser_init+0xbb8>
		return status;
 80021de:	197b      	adds	r3, r7, r5
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	e22f      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x4D, 0x04);
 80021e4:	251d      	movs	r5, #29
 80021e6:	197c      	adds	r4, r7, r5
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2204      	movs	r2, #4
 80021ec:	214d      	movs	r1, #77	; 0x4d
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7ff f964 	bl	80014bc <laser_write_u8>
 80021f4:	0003      	movs	r3, r0
 80021f6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <laser_init+0xbda>
		return status;
 8002200:	197b      	adds	r3, r7, r5
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	e21e      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8002206:	251d      	movs	r5, #29
 8002208:	197c      	adds	r4, r7, r5
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	21ff      	movs	r1, #255	; 0xff
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff f953 	bl	80014bc <laser_write_u8>
 8002216:	0003      	movs	r3, r0
 8002218:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800221a:	197b      	adds	r3, r7, r5
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <laser_init+0xbfc>
		return status;
 8002222:	197b      	adds	r3, r7, r5
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	e20d      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x44, 0x00);
 8002228:	251d      	movs	r5, #29
 800222a:	197c      	adds	r4, r7, r5
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	2144      	movs	r1, #68	; 0x44
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff f942 	bl	80014bc <laser_write_u8>
 8002238:	0003      	movs	r3, r0
 800223a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800223c:	197b      	adds	r3, r7, r5
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <laser_init+0xc1e>
		return status;
 8002244:	197b      	adds	r3, r7, r5
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	e1fc      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x45, 0x20);
 800224a:	251d      	movs	r5, #29
 800224c:	197c      	adds	r4, r7, r5
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	2145      	movs	r1, #69	; 0x45
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff f931 	bl	80014bc <laser_write_u8>
 800225a:	0003      	movs	r3, r0
 800225c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800225e:	197b      	adds	r3, r7, r5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <laser_init+0xc40>
		return status;
 8002266:	197b      	adds	r3, r7, r5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	e1eb      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x47, 0x08);
 800226c:	251d      	movs	r5, #29
 800226e:	197c      	adds	r4, r7, r5
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2208      	movs	r2, #8
 8002274:	2147      	movs	r1, #71	; 0x47
 8002276:	0018      	movs	r0, r3
 8002278:	f7ff f920 	bl	80014bc <laser_write_u8>
 800227c:	0003      	movs	r3, r0
 800227e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002280:	197b      	adds	r3, r7, r5
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <laser_init+0xc62>
		return status;
 8002288:	197b      	adds	r3, r7, r5
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	e1da      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x48, 0x28);
 800228e:	251d      	movs	r5, #29
 8002290:	197c      	adds	r4, r7, r5
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2228      	movs	r2, #40	; 0x28
 8002296:	2148      	movs	r1, #72	; 0x48
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff f90f 	bl	80014bc <laser_write_u8>
 800229e:	0003      	movs	r3, r0
 80022a0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022a2:	197b      	adds	r3, r7, r5
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <laser_init+0xc84>
		return status;
 80022aa:	197b      	adds	r3, r7, r5
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	e1c9      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x67, 0x00);
 80022b0:	251d      	movs	r5, #29
 80022b2:	197c      	adds	r4, r7, r5
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	2167      	movs	r1, #103	; 0x67
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff f8fe 	bl	80014bc <laser_write_u8>
 80022c0:	0003      	movs	r3, r0
 80022c2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <laser_init+0xca6>
		return status;
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	e1b8      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x70, 0x04);
 80022d2:	251d      	movs	r5, #29
 80022d4:	197c      	adds	r4, r7, r5
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	2170      	movs	r1, #112	; 0x70
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff f8ed 	bl	80014bc <laser_write_u8>
 80022e2:	0003      	movs	r3, r0
 80022e4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80022e6:	197b      	adds	r3, r7, r5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <laser_init+0xcc8>
		return status;
 80022ee:	197b      	adds	r3, r7, r5
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	e1a7      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x71, 0x01);
 80022f4:	251d      	movs	r5, #29
 80022f6:	197c      	adds	r4, r7, r5
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	2171      	movs	r1, #113	; 0x71
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff f8dc 	bl	80014bc <laser_write_u8>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002308:	197b      	adds	r3, r7, r5
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <laser_init+0xcea>
		return status;
 8002310:	197b      	adds	r3, r7, r5
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	e196      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x72, 0xFE);
 8002316:	251d      	movs	r5, #29
 8002318:	197c      	adds	r4, r7, r5
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	22fe      	movs	r2, #254	; 0xfe
 800231e:	2172      	movs	r1, #114	; 0x72
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff f8cb 	bl	80014bc <laser_write_u8>
 8002326:	0003      	movs	r3, r0
 8002328:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800232a:	197b      	adds	r3, r7, r5
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <laser_init+0xd0c>
		return status;
 8002332:	197b      	adds	r3, r7, r5
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	e185      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x76, 0x00);
 8002338:	251d      	movs	r5, #29
 800233a:	197c      	adds	r4, r7, r5
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	2176      	movs	r1, #118	; 0x76
 8002342:	0018      	movs	r0, r3
 8002344:	f7ff f8ba 	bl	80014bc <laser_write_u8>
 8002348:	0003      	movs	r3, r0
 800234a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800234c:	197b      	adds	r3, r7, r5
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <laser_init+0xd2e>
		return status;
 8002354:	197b      	adds	r3, r7, r5
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	e174      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x77, 0x00);
 800235a:	251d      	movs	r5, #29
 800235c:	197c      	adds	r4, r7, r5
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	2177      	movs	r1, #119	; 0x77
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff f8a9 	bl	80014bc <laser_write_u8>
 800236a:	0003      	movs	r3, r0
 800236c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800236e:	197b      	adds	r3, r7, r5
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <laser_init+0xd50>
		return status;
 8002376:	197b      	adds	r3, r7, r5
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	e163      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800237c:	251d      	movs	r5, #29
 800237e:	197c      	adds	r4, r7, r5
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	21ff      	movs	r1, #255	; 0xff
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff f898 	bl	80014bc <laser_write_u8>
 800238c:	0003      	movs	r3, r0
 800238e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002390:	197b      	adds	r3, r7, r5
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <laser_init+0xd72>
		return status;
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	e152      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x0D, 0x01);
 800239e:	251d      	movs	r5, #29
 80023a0:	197c      	adds	r4, r7, r5
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	210d      	movs	r1, #13
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff f887 	bl	80014bc <laser_write_u8>
 80023ae:	0003      	movs	r3, r0
 80023b0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <laser_init+0xd94>
		return status;
 80023ba:	197b      	adds	r3, r7, r5
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	e141      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80023c0:	251d      	movs	r5, #29
 80023c2:	197c      	adds	r4, r7, r5
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	21ff      	movs	r1, #255	; 0xff
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff f876 	bl	80014bc <laser_write_u8>
 80023d0:	0003      	movs	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023d4:	197b      	adds	r3, r7, r5
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <laser_init+0xdb6>
		return status;
 80023dc:	197b      	adds	r3, r7, r5
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	e130      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x01);
 80023e2:	251d      	movs	r5, #29
 80023e4:	197c      	adds	r4, r7, r5
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7ff f865 	bl	80014bc <laser_write_u8>
 80023f2:	0003      	movs	r3, r0
 80023f4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80023f6:	197b      	adds	r3, r7, r5
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <laser_init+0xdd8>
		return status;
 80023fe:	197b      	adds	r3, r7, r5
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	e11f      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x01, 0xF8);
 8002404:	251d      	movs	r5, #29
 8002406:	197c      	adds	r4, r7, r5
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	22f8      	movs	r2, #248	; 0xf8
 800240c:	2101      	movs	r1, #1
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff f854 	bl	80014bc <laser_write_u8>
 8002414:	0003      	movs	r3, r0
 8002416:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002418:	197b      	adds	r3, r7, r5
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <laser_init+0xdfa>
		return status;
 8002420:	197b      	adds	r3, r7, r5
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	e10e      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8002426:	251d      	movs	r5, #29
 8002428:	197c      	adds	r4, r7, r5
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	21ff      	movs	r1, #255	; 0xff
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff f843 	bl	80014bc <laser_write_u8>
 8002436:	0003      	movs	r3, r0
 8002438:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800243a:	197b      	adds	r3, r7, r5
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <laser_init+0xe1c>
		return status;
 8002442:	197b      	adds	r3, r7, r5
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	e0fd      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x8E, 0x01);
 8002448:	251d      	movs	r5, #29
 800244a:	197c      	adds	r4, r7, r5
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	218e      	movs	r1, #142	; 0x8e
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff f832 	bl	80014bc <laser_write_u8>
 8002458:	0003      	movs	r3, r0
 800245a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800245c:	197b      	adds	r3, r7, r5
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <laser_init+0xe3e>
		return status;
 8002464:	197b      	adds	r3, r7, r5
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	e0ec      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x00, 0x01);
 800246a:	251d      	movs	r5, #29
 800246c:	197c      	adds	r4, r7, r5
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	2100      	movs	r1, #0
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff f821 	bl	80014bc <laser_write_u8>
 800247a:	0003      	movs	r3, r0
 800247c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <laser_init+0xe60>
		return status;
 8002486:	197b      	adds	r3, r7, r5
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	e0db      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0xFF, 0x00);
 800248c:	251d      	movs	r5, #29
 800248e:	197c      	adds	r4, r7, r5
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	21ff      	movs	r1, #255	; 0xff
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff f810 	bl	80014bc <laser_write_u8>
 800249c:	0003      	movs	r3, r0
 800249e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80024a0:	197b      	adds	r3, r7, r5
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <laser_init+0xe82>
		return status;
 80024a8:	197b      	adds	r3, r7, r5
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	e0ca      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, 0x80, 0x00);
 80024ae:	251d      	movs	r5, #29
 80024b0:	197c      	adds	r4, r7, r5
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe ffff 	bl	80014bc <laser_write_u8>
 80024be:	0003      	movs	r3, r0
 80024c0:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80024c2:	197b      	adds	r3, r7, r5
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <laser_init+0xea4>
		return status;
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	e0b9      	b.n	8002644 <laser_init+0x1018>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80024d0:	251d      	movs	r5, #29
 80024d2:	197c      	adds	r4, r7, r5
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	210a      	movs	r1, #10
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fe ffee 	bl	80014bc <laser_write_u8>
 80024e0:	0003      	movs	r3, r0
 80024e2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80024e4:	197b      	adds	r3, r7, r5
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <laser_init+0xec6>
		return status;
 80024ec:	197b      	adds	r3, r7, r5
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	e0a8      	b.n	8002644 <laser_init+0x1018>

	uint8_t tmp;
	status = laser_read_u8(laser, GPIO_HV_MUX_ACTIVE_HIGH, &tmp);
 80024f2:	251d      	movs	r5, #29
 80024f4:	197c      	adds	r4, r7, r5
 80024f6:	230f      	movs	r3, #15
 80024f8:	18fa      	adds	r2, r7, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2184      	movs	r1, #132	; 0x84
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff f80c 	bl	800151c <laser_read_u8>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002508:	197b      	adds	r3, r7, r5
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <laser_init+0xeea>
		return status;
 8002510:	197b      	adds	r3, r7, r5
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	e096      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, GPIO_HV_MUX_ACTIVE_HIGH, tmp & ~0x10); // active low
 8002516:	230f      	movs	r3, #15
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2210      	movs	r2, #16
 800251e:	4393      	bics	r3, r2
 8002520:	b2da      	uxtb	r2, r3
 8002522:	251d      	movs	r5, #29
 8002524:	197c      	adds	r4, r7, r5
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2184      	movs	r1, #132	; 0x84
 800252a:	0018      	movs	r0, r3
 800252c:	f7fe ffc6 	bl	80014bc <laser_write_u8>
 8002530:	0003      	movs	r3, r0
 8002532:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002534:	197b      	adds	r3, r7, r5
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <laser_init+0xf16>
		return status;
 800253c:	197b      	adds	r3, r7, r5
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	e080      	b.n	8002644 <laser_init+0x1018>

	status = laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002542:	251d      	movs	r5, #29
 8002544:	197c      	adds	r4, r7, r5
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	210b      	movs	r1, #11
 800254c:	0018      	movs	r0, r3
 800254e:	f7fe ffb5 	bl	80014bc <laser_write_u8>
 8002552:	0003      	movs	r3, r0
 8002554:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002556:	197b      	adds	r3, r7, r5
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <laser_init+0xf38>
		return status;
 800255e:	197b      	adds	r3, r7, r5
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	e06f      	b.n	8002644 <laser_init+0x1018>
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8002564:	251d      	movs	r5, #29
 8002566:	197c      	adds	r4, r7, r5
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	22e8      	movs	r2, #232	; 0xe8
 800256c:	2101      	movs	r1, #1
 800256e:	0018      	movs	r0, r3
 8002570:	f7fe ffa4 	bl	80014bc <laser_write_u8>
 8002574:	0003      	movs	r3, r0
 8002576:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002578:	197b      	adds	r3, r7, r5
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <laser_init+0xf5a>
		return status;
 8002580:	197b      	adds	r3, r7, r5
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e05e      	b.n	8002644 <laser_init+0x1018>

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	status = laser_set_timing_budget(laser, TIMING_BUDGET);
 8002586:	251d      	movs	r5, #29
 8002588:	197c      	adds	r4, r7, r5
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <laser_init+0x1020>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fc75 	bl	8002e80 <laser_set_timing_budget>
 8002596:	0003      	movs	r3, r0
 8002598:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800259a:	197b      	adds	r3, r7, r5
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <laser_init+0xf7c>
		return status;
 80025a2:	197b      	adds	r3, r7, r5
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	e04d      	b.n	8002644 <laser_init+0x1018>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0x01);
 80025a8:	251d      	movs	r5, #29
 80025aa:	197c      	adds	r4, r7, r5
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	2101      	movs	r1, #1
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fe ff82 	bl	80014bc <laser_write_u8>
 80025b8:	0003      	movs	r3, r0
 80025ba:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80025bc:	197b      	adds	r3, r7, r5
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <laser_init+0xf9e>
		return status;
 80025c4:	197b      	adds	r3, r7, r5
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e03c      	b.n	8002644 <laser_init+0x1018>

	status = laser_calibrate(laser, 0x40);
 80025ca:	251d      	movs	r5, #29
 80025cc:	197c      	adds	r4, r7, r5
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fe ffcc 	bl	8001570 <laser_calibrate>
 80025d8:	0003      	movs	r3, r0
 80025da:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <laser_init+0xfbe>
		return status;
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	e02c      	b.n	8002644 <laser_init+0x1018>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0x02);
 80025ea:	251d      	movs	r5, #29
 80025ec:	197c      	adds	r4, r7, r5
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	2101      	movs	r1, #1
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fe ff61 	bl	80014bc <laser_write_u8>
 80025fa:	0003      	movs	r3, r0
 80025fc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80025fe:	197b      	adds	r3, r7, r5
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <laser_init+0xfe0>
		return status;
 8002606:	197b      	adds	r3, r7, r5
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	e01b      	b.n	8002644 <laser_init+0x1018>

	status = laser_calibrate(laser, 0x00);
 800260c:	251d      	movs	r5, #29
 800260e:	197c      	adds	r4, r7, r5
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2100      	movs	r1, #0
 8002614:	0018      	movs	r0, r3
 8002616:	f7fe ffab 	bl	8001570 <laser_calibrate>
 800261a:	0003      	movs	r3, r0
 800261c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800261e:	197b      	adds	r3, r7, r5
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <laser_init+0x1000>
		return status;
 8002626:	197b      	adds	r3, r7, r5
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	e00b      	b.n	8002644 <laser_init+0x1018>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	status = laser_write_u8(laser, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800262c:	251d      	movs	r5, #29
 800262e:	197c      	adds	r4, r7, r5
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22e8      	movs	r2, #232	; 0xe8
 8002634:	2101      	movs	r1, #1
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe ff40 	bl	80014bc <laser_write_u8>
 800263c:	0003      	movs	r3, r0
 800263e:	7023      	strb	r3, [r4, #0]
	// VL53L0X_PerformRefCalibration() end

	return status;
 8002640:	197b      	adds	r3, r7, r5
 8002642:	781b      	ldrb	r3, [r3, #0]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b008      	add	sp, #32
 800264a:	bdb0      	pop	{r4, r5, r7, pc}
 800264c:	0000c350 	.word	0x0000c350

08002650 <laser_set_signal_rate>:

HAL_StatusTypeDef laser_set_signal_rate(laser_handle* laser, float limit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	if (limit < 0.f || limit > 511.99f)
 800265a:	2100      	movs	r1, #0
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7fd fed7 	bl	8000410 <__aeabi_fcmplt>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d105      	bne.n	8002672 <laser_set_signal_rate+0x22>
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <laser_set_signal_rate+0x50>)
 8002668:	6838      	ldr	r0, [r7, #0]
 800266a:	f7fd fee5 	bl	8000438 <__aeabi_fcmpgt>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d001      	beq.n	8002676 <laser_set_signal_rate+0x26>
		return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e010      	b.n	8002698 <laser_set_signal_rate+0x48>

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	return laser_write_u16(laser, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit * (1 << 7));
 8002676:	2186      	movs	r1, #134	; 0x86
 8002678:	05c9      	lsls	r1, r1, #23
 800267a:	6838      	ldr	r0, [r7, #0]
 800267c:	f7fe fa72 	bl	8000b64 <__aeabi_fmul>
 8002680:	1c03      	adds	r3, r0, #0
 8002682:	1c18      	adds	r0, r3, #0
 8002684:	f7fd feec 	bl	8000460 <__aeabi_f2uiz>
 8002688:	0003      	movs	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2144      	movs	r1, #68	; 0x44
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe ff2b 	bl	80014ec <laser_write_u16>
 8002696:	0003      	movs	r3, r0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	43fffeb8 	.word	0x43fffeb8

080026a4 <laser_get_spad>:

	return status;
}

HAL_StatusTypeDef laser_get_spad(laser_handle* laser, uint8_t* count, uint8_t* type_is_aperture)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t tmp;

	status = laser_write_u8(laser, 0x80, 0x01);
 80026b0:	251f      	movs	r5, #31
 80026b2:	197c      	adds	r4, r7, r5
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7fe fefe 	bl	80014bc <laser_write_u8>
 80026c0:	0003      	movs	r3, r0
 80026c2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80026c4:	197b      	adds	r3, r7, r5
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <laser_get_spad+0x2e>
		return status;
 80026cc:	197b      	adds	r3, r7, r5
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	e1a6      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x01);
 80026d2:	251f      	movs	r5, #31
 80026d4:	197c      	adds	r4, r7, r5
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	21ff      	movs	r1, #255	; 0xff
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe feed 	bl	80014bc <laser_write_u8>
 80026e2:	0003      	movs	r3, r0
 80026e4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80026e6:	197b      	adds	r3, r7, r5
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <laser_get_spad+0x50>
		return status;
 80026ee:	197b      	adds	r3, r7, r5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	e195      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x00, 0x00);
 80026f4:	251f      	movs	r5, #31
 80026f6:	197c      	adds	r4, r7, r5
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fe fedc 	bl	80014bc <laser_write_u8>
 8002704:	0003      	movs	r3, r0
 8002706:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002708:	197b      	adds	r3, r7, r5
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <laser_get_spad+0x72>
		return status;
 8002710:	197b      	adds	r3, r7, r5
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	e184      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x06);
 8002716:	251f      	movs	r5, #31
 8002718:	197c      	adds	r4, r7, r5
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2206      	movs	r2, #6
 800271e:	21ff      	movs	r1, #255	; 0xff
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe fecb 	bl	80014bc <laser_write_u8>
 8002726:	0003      	movs	r3, r0
 8002728:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800272a:	197b      	adds	r3, r7, r5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <laser_get_spad+0x94>
		return status;
 8002732:	197b      	adds	r3, r7, r5
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	e173      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x83, &tmp);
 8002738:	251f      	movs	r5, #31
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2317      	movs	r3, #23
 800273e:	18fa      	adds	r2, r7, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2183      	movs	r1, #131	; 0x83
 8002744:	0018      	movs	r0, r3
 8002746:	f7fe fee9 	bl	800151c <laser_read_u8>
 800274a:	0003      	movs	r3, r0
 800274c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800274e:	197b      	adds	r3, r7, r5
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <laser_get_spad+0xb8>
		return status;
 8002756:	197b      	adds	r3, r7, r5
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	e161      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, tmp | 0x04);
 800275c:	2317      	movs	r3, #23
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	4313      	orrs	r3, r2
 8002766:	b2da      	uxtb	r2, r3
 8002768:	251f      	movs	r5, #31
 800276a:	197c      	adds	r4, r7, r5
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2183      	movs	r1, #131	; 0x83
 8002770:	0018      	movs	r0, r3
 8002772:	f7fe fea3 	bl	80014bc <laser_write_u8>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <laser_get_spad+0xe4>
		return status;
 8002782:	197b      	adds	r3, r7, r5
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	e14b      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x07);
 8002788:	251f      	movs	r5, #31
 800278a:	197c      	adds	r4, r7, r5
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2207      	movs	r2, #7
 8002790:	21ff      	movs	r1, #255	; 0xff
 8002792:	0018      	movs	r0, r3
 8002794:	f7fe fe92 	bl	80014bc <laser_write_u8>
 8002798:	0003      	movs	r3, r0
 800279a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800279c:	197b      	adds	r3, r7, r5
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <laser_get_spad+0x106>
		return status;
 80027a4:	197b      	adds	r3, r7, r5
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	e13a      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x81, 0x01);
 80027aa:	251f      	movs	r5, #31
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	2181      	movs	r1, #129	; 0x81
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7fe fe81 	bl	80014bc <laser_write_u8>
 80027ba:	0003      	movs	r3, r0
 80027bc:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80027be:	197b      	adds	r3, r7, r5
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <laser_get_spad+0x128>
		return status;
 80027c6:	197b      	adds	r3, r7, r5
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	e129      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x80, 0x01);
 80027cc:	251f      	movs	r5, #31
 80027ce:	197c      	adds	r4, r7, r5
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fe70 	bl	80014bc <laser_write_u8>
 80027dc:	0003      	movs	r3, r0
 80027de:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80027e0:	197b      	adds	r3, r7, r5
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <laser_get_spad+0x14a>
		return status;
 80027e8:	197b      	adds	r3, r7, r5
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	e118      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x94, 0x6b);
 80027ee:	251f      	movs	r5, #31
 80027f0:	197c      	adds	r4, r7, r5
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	226b      	movs	r2, #107	; 0x6b
 80027f6:	2194      	movs	r1, #148	; 0x94
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fe5f 	bl	80014bc <laser_write_u8>
 80027fe:	0003      	movs	r3, r0
 8002800:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002802:	197b      	adds	r3, r7, r5
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <laser_get_spad+0x16c>
		return status;
 800280a:	197b      	adds	r3, r7, r5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	e107      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, 0x00);
 8002810:	251f      	movs	r5, #31
 8002812:	197c      	adds	r4, r7, r5
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	2183      	movs	r1, #131	; 0x83
 800281a:	0018      	movs	r0, r3
 800281c:	f7fe fe4e 	bl	80014bc <laser_write_u8>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <laser_get_spad+0x18e>
		return status;
 800282c:	197b      	adds	r3, r7, r5
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	e0f6      	b.n	8002a20 <laser_get_spad+0x37c>

	const uint32_t ticks = HAL_GetTick();
 8002832:	f002 febb 	bl	80055ac <HAL_GetTick>
 8002836:	0003      	movs	r3, r0
 8002838:	61bb      	str	r3, [r7, #24]
	do
	{
		status = laser_read_u8(laser, 0x83, &tmp);
 800283a:	251f      	movs	r5, #31
 800283c:	197c      	adds	r4, r7, r5
 800283e:	2317      	movs	r3, #23
 8002840:	18fa      	adds	r2, r7, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2183      	movs	r1, #131	; 0x83
 8002846:	0018      	movs	r0, r3
 8002848:	f7fe fe68 	bl	800151c <laser_read_u8>
 800284c:	0003      	movs	r3, r0
 800284e:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 8002850:	197b      	adds	r3, r7, r5
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <laser_get_spad+0x1ba>
			return status;
 8002858:	197b      	adds	r3, r7, r5
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	e0e0      	b.n	8002a20 <laser_get_spad+0x37c>

		if (HAL_GetTick() - ticks >= laser->timeout)
 800285e:	f002 fea5 	bl	80055ac <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	8892      	ldrh	r2, [r2, #4]
 800286c:	4293      	cmp	r3, r2
 800286e:	d301      	bcc.n	8002874 <laser_get_spad+0x1d0>
			return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0d5      	b.n	8002a20 <laser_get_spad+0x37c>
	} while (tmp == 0x00);
 8002874:	2317      	movs	r3, #23
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0dd      	beq.n	800283a <laser_get_spad+0x196>

	status = laser_write_u8(laser, 0x83, 0x01);
 800287e:	251f      	movs	r5, #31
 8002880:	197c      	adds	r4, r7, r5
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	2183      	movs	r1, #131	; 0x83
 8002888:	0018      	movs	r0, r3
 800288a:	f7fe fe17 	bl	80014bc <laser_write_u8>
 800288e:	0003      	movs	r3, r0
 8002890:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002892:	197b      	adds	r3, r7, r5
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <laser_get_spad+0x1fc>
		return status;
 800289a:	197b      	adds	r3, r7, r5
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	e0bf      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, 0x01);
 80028a0:	251f      	movs	r5, #31
 80028a2:	197c      	adds	r4, r7, r5
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	2183      	movs	r1, #131	; 0x83
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fe fe06 	bl	80014bc <laser_write_u8>
 80028b0:	0003      	movs	r3, r0
 80028b2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80028b4:	197b      	adds	r3, r7, r5
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <laser_get_spad+0x21e>
		return status;
 80028bc:	197b      	adds	r3, r7, r5
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	e0ae      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x92, &tmp);
 80028c2:	251f      	movs	r5, #31
 80028c4:	197c      	adds	r4, r7, r5
 80028c6:	2317      	movs	r3, #23
 80028c8:	18fa      	adds	r2, r7, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2192      	movs	r1, #146	; 0x92
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7fe fe24 	bl	800151c <laser_read_u8>
 80028d4:	0003      	movs	r3, r0
 80028d6:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80028d8:	197b      	adds	r3, r7, r5
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <laser_get_spad+0x242>
		return status;
 80028e0:	197b      	adds	r3, r7, r5
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	e09c      	b.n	8002a20 <laser_get_spad+0x37c>

	*count = tmp & 0x7f;
 80028e6:	2117      	movs	r1, #23
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	227f      	movs	r2, #127	; 0x7f
 80028ee:	4013      	ands	r3, r2
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	09db      	lsrs	r3, r3, #7
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	701a      	strb	r2, [r3, #0]

	status = laser_write_u8(laser, 0x81, 0x00);
 8002902:	251f      	movs	r5, #31
 8002904:	197c      	adds	r4, r7, r5
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	2181      	movs	r1, #129	; 0x81
 800290c:	0018      	movs	r0, r3
 800290e:	f7fe fdd5 	bl	80014bc <laser_write_u8>
 8002912:	0003      	movs	r3, r0
 8002914:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002916:	197b      	adds	r3, r7, r5
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <laser_get_spad+0x280>
		return status;
 800291e:	197b      	adds	r3, r7, r5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	e07d      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x06);
 8002924:	251f      	movs	r5, #31
 8002926:	197c      	adds	r4, r7, r5
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2206      	movs	r2, #6
 800292c:	21ff      	movs	r1, #255	; 0xff
 800292e:	0018      	movs	r0, r3
 8002930:	f7fe fdc4 	bl	80014bc <laser_write_u8>
 8002934:	0003      	movs	r3, r0
 8002936:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002938:	197b      	adds	r3, r7, r5
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <laser_get_spad+0x2a2>
		return status;
 8002940:	197b      	adds	r3, r7, r5
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	e06c      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_read_u8(laser, 0x83, &tmp);
 8002946:	251f      	movs	r5, #31
 8002948:	197c      	adds	r4, r7, r5
 800294a:	2317      	movs	r3, #23
 800294c:	18fa      	adds	r2, r7, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2183      	movs	r1, #131	; 0x83
 8002952:	0018      	movs	r0, r3
 8002954:	f7fe fde2 	bl	800151c <laser_read_u8>
 8002958:	0003      	movs	r3, r0
 800295a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800295c:	197b      	adds	r3, r7, r5
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <laser_get_spad+0x2c6>
		return status;
 8002964:	197b      	adds	r3, r7, r5
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	e05a      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x83, tmp  & ~0x04);
 800296a:	2317      	movs	r3, #23
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2204      	movs	r2, #4
 8002972:	4393      	bics	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	251f      	movs	r5, #31
 8002978:	197c      	adds	r4, r7, r5
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2183      	movs	r1, #131	; 0x83
 800297e:	0018      	movs	r0, r3
 8002980:	f7fe fd9c 	bl	80014bc <laser_write_u8>
 8002984:	0003      	movs	r3, r0
 8002986:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002988:	197b      	adds	r3, r7, r5
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <laser_get_spad+0x2f2>
		return status;
 8002990:	197b      	adds	r3, r7, r5
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	e044      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x01);
 8002996:	251f      	movs	r5, #31
 8002998:	197c      	adds	r4, r7, r5
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	21ff      	movs	r1, #255	; 0xff
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7fe fd8b 	bl	80014bc <laser_write_u8>
 80029a6:	0003      	movs	r3, r0
 80029a8:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80029aa:	197b      	adds	r3, r7, r5
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <laser_get_spad+0x314>
		return status;
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	e033      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x00, 0x01);
 80029b8:	251f      	movs	r5, #31
 80029ba:	197c      	adds	r4, r7, r5
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	2100      	movs	r1, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fe fd7a 	bl	80014bc <laser_write_u8>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80029cc:	197b      	adds	r3, r7, r5
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <laser_get_spad+0x336>
		return status;
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	e022      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0xFF, 0x00);
 80029da:	251f      	movs	r5, #31
 80029dc:	197c      	adds	r4, r7, r5
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	21ff      	movs	r1, #255	; 0xff
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7fe fd69 	bl	80014bc <laser_write_u8>
 80029ea:	0003      	movs	r3, r0
 80029ec:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80029ee:	197b      	adds	r3, r7, r5
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <laser_get_spad+0x358>
		return status;
 80029f6:	197b      	adds	r3, r7, r5
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	e011      	b.n	8002a20 <laser_get_spad+0x37c>

	status = laser_write_u8(laser, 0x80, 0x00);
 80029fc:	251f      	movs	r5, #31
 80029fe:	197c      	adds	r4, r7, r5
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fe fd58 	bl	80014bc <laser_write_u8>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <laser_get_spad+0x37a>
		return status;
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	e000      	b.n	8002a20 <laser_get_spad+0x37c>

	return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b008      	add	sp, #32
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}

08002a28 <laser_get_seq_en>:

HAL_StatusTypeDef laser_get_seq_en(laser_handle* laser, SequenceStepEnables * enables)
{
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config;
	HAL_StatusTypeDef status = laser_read_u8(laser, SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8002a32:	260f      	movs	r6, #15
 8002a34:	19bc      	adds	r4, r7, r6
 8002a36:	250e      	movs	r5, #14
 8002a38:	197a      	adds	r2, r7, r5
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fe fd6c 	bl	800151c <laser_read_u8>
 8002a44:	0003      	movs	r3, r0
 8002a46:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 8002a48:	19bb      	adds	r3, r7, r6
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12a      	bne.n	8002aa6 <laser_get_seq_en+0x7e>
	{
		enables->tcc          = (sequence_config >> 4) & 0x1;
 8002a50:	0029      	movs	r1, r5
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
		enables->dss          = (sequence_config >> 3) & 0x1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	08db      	lsrs	r3, r3, #3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	709a      	strb	r2, [r3, #2]
		enables->msrc         = (sequence_config >> 2) & 0x1;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	705a      	strb	r2, [r3, #1]
		enables->pre_range    = (sequence_config >> 6) & 0x1;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2201      	movs	r2, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	70da      	strb	r2, [r3, #3]
		enables->final_range  = (sequence_config >> 7) & 0x1;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	09db      	lsrs	r3, r3, #7
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	711a      	strb	r2, [r3, #4]
	}

	return status;
 8002aa6:	230f      	movs	r3, #15
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b005      	add	sp, #20
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab4 <laser_us_to_mclks>:

uint32_t laser_us_to_mclks(uint16_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	0002      	movs	r2, r0
 8002abc:	1dbb      	adds	r3, r7, #6
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	1d7b      	adds	r3, r7, #5
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	const uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002ac6:	1d7b      	adds	r3, r7, #5
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	0013      	movs	r3, r2
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	015b      	lsls	r3, r3, #5
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	0213      	lsls	r3, r2, #8
 8002ada:	001a      	movs	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	33f5      	adds	r3, #245	; 0xf5
 8002ae0:	33ff      	adds	r3, #255	; 0xff
 8002ae2:	22fa      	movs	r2, #250	; 0xfa
 8002ae4:	0091      	lsls	r1, r2, #2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fb0a 	bl	8000100 <__udivsi3>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	881a      	ldrh	r2, [r3, #0]
 8002af4:	0013      	movs	r3, r2
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	001a      	movs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	18d3      	adds	r3, r2, r3
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd faf8 	bl	8000100 <__udivsi3>
 8002b10:	0003      	movs	r3, r0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <laser_mclks_to_us>:

uint32_t laser_mclks_to_us(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	0002      	movs	r2, r0
 8002b22:	1dbb      	adds	r3, r7, #6
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	1d7b      	adds	r3, r7, #5
 8002b28:	1c0a      	adds	r2, r1, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
	const uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002b2c:	1d7b      	adds	r3, r7, #5
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	0013      	movs	r3, r2
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	015b      	lsls	r3, r3, #5
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	011a      	lsls	r2, r3, #4
 8002b3c:	1ad2      	subs	r2, r2, r3
 8002b3e:	0213      	lsls	r3, r2, #8
 8002b40:	001a      	movs	r2, r3
 8002b42:	0013      	movs	r3, r2
 8002b44:	33f5      	adds	r3, #245	; 0xf5
 8002b46:	33ff      	adds	r3, #255	; 0xff
 8002b48:	22fa      	movs	r2, #250	; 0xfa
 8002b4a:	0091      	lsls	r1, r2, #2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fd fad7 	bl	8000100 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	60fb      	str	r3, [r7, #12]
	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002b56:	1dbb      	adds	r3, r7, #6
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	435a      	muls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	18d3      	adds	r3, r2, r3
 8002b64:	22fa      	movs	r2, #250	; 0xfa
 8002b66:	0091      	lsls	r1, r2, #2
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7fd fac9 	bl	8000100 <__udivsi3>
 8002b6e:	0003      	movs	r3, r0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <decodeTimeout>:

uint16_t decodeTimeout(uint16_t reg_val)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	0002      	movs	r2, r0
 8002b80:	1dbb      	adds	r3, r7, #6
 8002b82:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	4013      	ands	r3, r2
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b8c:	1dba      	adds	r2, r7, #6
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	0a12      	lsrs	r2, r2, #8
 8002b92:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b94:	4093      	lsls	r3, r2
 8002b96:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b29b      	uxth	r3, r3
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <laser_get_seq_timeouts>:

HAL_StatusTypeDef laser_get_seq_timeouts(laser_handle* laser, SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002ba4:	b5b0      	push	{r4, r5, r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  status = laser_get_pulse_period(laser, VcselPeriodPreRange, (uint8_t*)&timeouts->pre_range_vcsel_period_pclks);
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	2517      	movs	r5, #23
 8002bb4:	197c      	adds	r4, r7, r5
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f8a0 	bl	8002d00 <laser_get_pulse_period>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002bc4:	197b      	adds	r3, r7, r5
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <laser_get_seq_timeouts+0x2e>
	  return status;
 8002bcc:	197b      	adds	r3, r7, r5
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	e092      	b.n	8002cf8 <laser_get_seq_timeouts+0x154>

  status = laser_read_u8(laser, MSRC_CONFIG_TIMEOUT_MACROP, (uint8_t*)&timeouts->msrc_dss_tcc_mclks);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	2517      	movs	r5, #23
 8002bd8:	197c      	adds	r4, r7, r5
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2146      	movs	r1, #70	; 0x46
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fe fc9c 	bl	800151c <laser_read_u8>
 8002be4:	0003      	movs	r3, r0
 8002be6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002be8:	197b      	adds	r3, r7, r5
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <laser_get_seq_timeouts+0x52>
  	  return status;
 8002bf0:	197b      	adds	r3, r7, r5
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	e080      	b.n	8002cf8 <laser_get_seq_timeouts+0x154>
  timeouts->msrc_dss_tcc_mclks++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	889b      	ldrh	r3, [r3, #4]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	809a      	strh	r2, [r3, #4]

  timeouts->msrc_dss_tcc_us =
		  laser_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	881b      	ldrh	r3, [r3, #0]
		  laser_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0010      	movs	r0, r2
 8002c10:	f7ff ff83 	bl	8002b1a <laser_mclks_to_us>
 8002c14:	0002      	movs	r2, r0
  timeouts->msrc_dss_tcc_us =
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60da      	str	r2, [r3, #12]

  uint16_t tmp;
  status = laser_read_u16(laser, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &tmp);
 8002c1a:	2517      	movs	r5, #23
 8002c1c:	197c      	adds	r4, r7, r5
 8002c1e:	2314      	movs	r3, #20
 8002c20:	18fa      	adds	r2, r7, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2151      	movs	r1, #81	; 0x51
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fe fc8d 	bl	8001546 <laser_read_u16>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002c30:	197b      	adds	r3, r7, r5
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <laser_get_seq_timeouts+0x9a>
	  return status;
 8002c38:	197b      	adds	r3, r7, r5
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	e05c      	b.n	8002cf8 <laser_get_seq_timeouts+0x154>
  timeouts->pre_range_mclks = decodeTimeout(tmp);
 8002c3e:	2314      	movs	r3, #20
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff ff97 	bl	8002b78 <decodeTimeout>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	80da      	strh	r2, [r3, #6]

  timeouts->pre_range_us =
		  laser_mclks_to_us(timeouts->pre_range_mclks,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	881b      	ldrh	r3, [r3, #0]
		  laser_mclks_to_us(timeouts->pre_range_mclks,
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f7ff ff5b 	bl	8002b1a <laser_mclks_to_us>
 8002c64:	0002      	movs	r2, r0
  timeouts->pre_range_us =
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	611a      	str	r2, [r3, #16]

  status = laser_get_pulse_period(laser, VcselPeriodFinalRange, (uint8_t*)&timeouts->final_range_vcsel_period_pclks);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	2517      	movs	r5, #23
 8002c70:	197c      	adds	r4, r7, r5
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2101      	movs	r1, #1
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f842 	bl	8002d00 <laser_get_pulse_period>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <laser_get_seq_timeouts+0xea>
	  return status;
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	e034      	b.n	8002cf8 <laser_get_seq_timeouts+0x154>

  status = laser_read_u16(laser, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &tmp);
 8002c8e:	2517      	movs	r5, #23
 8002c90:	197c      	adds	r4, r7, r5
 8002c92:	2314      	movs	r3, #20
 8002c94:	18fa      	adds	r2, r7, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2171      	movs	r1, #113	; 0x71
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fe fc53 	bl	8001546 <laser_read_u16>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8002ca4:	197b      	adds	r3, r7, r5
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <laser_get_seq_timeouts+0x10e>
	  return status;
 8002cac:	197b      	adds	r3, r7, r5
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	e022      	b.n	8002cf8 <laser_get_seq_timeouts+0x154>

  timeouts->final_range_mclks = decodeTimeout(tmp);
 8002cb2:	2314      	movs	r3, #20
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <decodeTimeout>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	78db      	ldrb	r3, [r3, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <laser_get_seq_timeouts+0x13a>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	891a      	ldrh	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	88db      	ldrh	r3, [r3, #6]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
		  laser_mclks_to_us(timeouts->final_range_mclks,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	885b      	ldrh	r3, [r3, #2]
		  laser_mclks_to_us(timeouts->final_range_mclks,
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	0019      	movs	r1, r3
 8002cea:	0010      	movs	r0, r2
 8002cec:	f7ff ff15 	bl	8002b1a <laser_mclks_to_us>
 8002cf0:	0002      	movs	r2, r0
  timeouts->final_range_us =
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bdb0      	pop	{r4, r5, r7, pc}

08002d00 <laser_get_pulse_period>:

HAL_StatusTypeDef laser_get_pulse_period(laser_handle* laser, vcselPeriodType type, uint8_t* period)
{
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	200b      	movs	r0, #11
 8002d0c:	183b      	adds	r3, r7, r0
 8002d0e:	1c0a      	adds	r2, r1, #0
 8002d10:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
  if (type == VcselPeriodPreRange)
 8002d12:	183b      	adds	r3, r7, r0
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <laser_get_pulse_period+0x4e>
  {
	  status = laser_read_u8(laser, PRE_RANGE_CONFIG_VCSEL_PERIOD, period);
 8002d1a:	2517      	movs	r5, #23
 8002d1c:	197c      	adds	r4, r7, r5
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2150      	movs	r1, #80	; 0x50
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fe fbf9 	bl	800151c <laser_read_u8>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]
	  if (status == HAL_OK)
 8002d2e:	197b      	adds	r3, r7, r5
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <laser_get_pulse_period+0x46>
		  *period = decodeVcselPeriod(*period);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	18db      	adds	r3, r3, r3
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	701a      	strb	r2, [r3, #0]
	  return status;
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	e01f      	b.n	8002d8e <laser_get_pulse_period+0x8e>
  }
  else if (type == VcselPeriodFinalRange)
 8002d4e:	230b      	movs	r3, #11
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <laser_get_pulse_period+0x8c>
  {
	status = laser_read_u8(laser, FINAL_RANGE_CONFIG_VCSEL_PERIOD, period);
 8002d58:	2517      	movs	r5, #23
 8002d5a:	197c      	adds	r4, r7, r5
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2170      	movs	r1, #112	; 0x70
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fe fbda 	bl	800151c <laser_read_u8>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	7023      	strb	r3, [r4, #0]
	if (status == HAL_OK)
 8002d6c:	197b      	adds	r3, r7, r5
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <laser_get_pulse_period+0x84>
		*period = decodeVcselPeriod(*period);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	18db      	adds	r3, r3, r3
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	701a      	strb	r2, [r3, #0]
	return status;
 8002d84:	2317      	movs	r3, #23
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	e000      	b.n	8002d8e <laser_get_pulse_period+0x8e>
  }

  return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bdb0      	pop	{r4, r5, r7, pc}

08002d96 <laser_read_continuous>:

HAL_StatusTypeDef laser_read_continuous(laser_handle* laser, uint16_t* mm)
{
 8002d96:	b5b0      	push	{r4, r5, r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	uint8_t tmp;

	const uint32_t tick = HAL_GetTick();
 8002da0:	f002 fc04 	bl	80055ac <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	60fb      	str	r3, [r7, #12]
	do
	{
		status = laser_read_u8(laser, RESULT_INTERRUPT_STATUS, &tmp);
 8002da8:	250b      	movs	r5, #11
 8002daa:	197c      	adds	r4, r7, r5
 8002dac:	230a      	movs	r3, #10
 8002dae:	18fa      	adds	r2, r7, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2113      	movs	r1, #19
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fbb1 	bl	800151c <laser_read_u8>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 8002dbe:	197b      	adds	r3, r7, r5
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <laser_read_continuous+0x36>
			return status;
 8002dc6:	197b      	adds	r3, r7, r5
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	e020      	b.n	8002e0e <laser_read_continuous+0x78>

		if (HAL_GetTick() - tick >= laser->timeout)
 8002dcc:	f002 fbee 	bl	80055ac <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	8892      	ldrh	r2, [r2, #4]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d301      	bcc.n	8002de2 <laser_read_continuous+0x4c>
			return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e015      	b.n	8002e0e <laser_read_continuous+0x78>

	} while (tmp == 0);
 8002de2:	230a      	movs	r3, #10
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0dd      	beq.n	8002da8 <laser_read_continuous+0x12>

	status = laser_read_u16(laser, RESULT_RANGE_STATUS + 10, mm);;
 8002dec:	230b      	movs	r3, #11
 8002dee:	18fc      	adds	r4, r7, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	211e      	movs	r1, #30
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fe fba5 	bl	8001546 <laser_read_u16>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	7023      	strb	r3, [r4, #0]

	return laser_write_u8(laser, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	210b      	movs	r1, #11
 8002e06:	0018      	movs	r0, r3
 8002e08:	f7fe fb58 	bl	80014bc <laser_write_u8>
 8002e0c:	0003      	movs	r3, r0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bdb0      	pop	{r4, r5, r7, pc}

08002e16 <encodeTimeout>:

  return HAL_OK;
}

uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002e26:	230a      	movs	r3, #10
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]

  if (timeout_mclks > 0)
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01e      	beq.n	8002e74 <encodeTimeout+0x5e>
  {
    ls_byte = timeout_mclks - 1;
 8002e36:	1dbb      	adds	r3, r7, #6
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002e3e:	e008      	b.n	8002e52 <encodeTimeout+0x3c>
    {
      ls_byte >>= 1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002e46:	210a      	movs	r1, #10
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	881a      	ldrh	r2, [r3, #0]
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	3201      	adds	r2, #1
 8002e50:	801a      	strh	r2, [r3, #0]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	4393      	bics	r3, r2
 8002e58:	d1f2      	bne.n	8002e40 <encodeTimeout+0x2a>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	21ff      	movs	r1, #255	; 0xff
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	e000      	b.n	8002e76 <encodeTimeout+0x60>
  }
  else { return 0; }
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <laser_set_timing_budget>:

HAL_StatusTypeDef laser_set_timing_budget(laser_handle* laser, uint32_t budget_us)
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b092      	sub	sp, #72	; 0x48
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002e8a:	2340      	movs	r3, #64	; 0x40
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	22a5      	movs	r2, #165	; 0xa5
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 8002e94:	233e      	movs	r3, #62	; 0x3e
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	22f0      	movs	r2, #240	; 0xf0
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 8002e9e:	233c      	movs	r3, #60	; 0x3c
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	22a5      	movs	r2, #165	; 0xa5
 8002ea4:	0092      	lsls	r2, r2, #2
 8002ea6:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 8002ea8:	233a      	movs	r3, #58	; 0x3a
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	4a63      	ldr	r2, [pc, #396]	; (800303c <laser_set_timing_budget+0x1bc>)
 8002eae:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 8002eb0:	2338      	movs	r3, #56	; 0x38
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	4a62      	ldr	r2, [pc, #392]	; (8003040 <laser_set_timing_budget+0x1c0>)
 8002eb6:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 8002eb8:	2336      	movs	r3, #54	; 0x36
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	22a5      	movs	r2, #165	; 0xa5
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 8002ec2:	2334      	movs	r3, #52	; 0x34
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	; (8003044 <laser_set_timing_budget+0x1c4>)
 8002ec8:	801a      	strh	r2, [r3, #0]

	uint32_t const MinTimingBudget = 20000;
 8002eca:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <laser_set_timing_budget+0x1c8>)
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30

	if (budget_us < MinTimingBudget) { return HAL_ERROR; }
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d201      	bcs.n	8002eda <laser_set_timing_budget+0x5a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0ab      	b.n	8003032 <laser_set_timing_budget+0x1b2>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	233e      	movs	r3, #62	; 0x3e
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	18d3      	adds	r3, r2, r3
 8002ee8:	647b      	str	r3, [r7, #68]	; 0x44

	status = laser_get_seq_en(laser, &enables);
 8002eea:	252f      	movs	r5, #47	; 0x2f
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	2320      	movs	r3, #32
 8002ef0:	18fa      	adds	r2, r7, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7ff fd96 	bl	8002a28 <laser_get_seq_en>
 8002efc:	0003      	movs	r3, r0
 8002efe:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002f00:	197b      	adds	r3, r7, r5
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <laser_set_timing_budget+0x8e>
		return status;
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	e091      	b.n	8003032 <laser_set_timing_budget+0x1b2>
	status = laser_get_seq_timeouts(laser, &enables, &timeouts);
 8002f0e:	252f      	movs	r5, #47	; 0x2f
 8002f10:	197c      	adds	r4, r7, r5
 8002f12:	2308      	movs	r3, #8
 8002f14:	18fa      	adds	r2, r7, r3
 8002f16:	2320      	movs	r3, #32
 8002f18:	18f9      	adds	r1, r7, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff fe41 	bl	8002ba4 <laser_get_seq_timeouts>
 8002f22:	0003      	movs	r3, r0
 8002f24:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8002f26:	197b      	adds	r3, r7, r5
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <laser_set_timing_budget+0xb4>
		return status;
 8002f2e:	197b      	adds	r3, r7, r5
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	e07e      	b.n	8003032 <laser_set_timing_budget+0x1b2>

	if (enables.tcc)
 8002f34:	2320      	movs	r3, #32
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <laser_set_timing_budget+0xd2>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002f3e:	2308      	movs	r3, #8
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	233a      	movs	r3, #58	; 0x3a
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	18d3      	adds	r3, r2, r3
 8002f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4e:	18d3      	adds	r3, r2, r3
 8002f50:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.dss)
 8002f52:	2320      	movs	r3, #32
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	789b      	ldrb	r3, [r3, #2]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <laser_set_timing_budget+0xf4>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	2338      	movs	r3, #56	; 0x38
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	18d3      	adds	r3, r2, r3
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6e:	18d3      	adds	r3, r2, r3
 8002f70:	647b      	str	r3, [r7, #68]	; 0x44
 8002f72:	e00e      	b.n	8002f92 <laser_set_timing_budget+0x112>
	}
	else if (enables.msrc)
 8002f74:	2320      	movs	r3, #32
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <laser_set_timing_budget+0x112>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002f7e:	2308      	movs	r3, #8
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	233c      	movs	r3, #60	; 0x3c
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	18d3      	adds	r3, r2, r3
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.pre_range)
 8002f92:	2320      	movs	r3, #32
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <laser_set_timing_budget+0x130>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	2336      	movs	r3, #54	; 0x36
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fac:	18d3      	adds	r3, r2, r3
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.final_range)
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	791b      	ldrb	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d03a      	beq.n	8003030 <laser_set_timing_budget+0x1b0>
	{
		used_budget_us += FinalRangeOverhead;
 8002fba:	2334      	movs	r3, #52	; 0x34
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > budget_us)
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <laser_set_timing_budget+0x152>
		{
		  // "Requested timeout too big."
		  return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02f      	b.n	8003032 <laser_set_timing_budget+0x1b2>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks =
				laser_us_to_mclks(final_range_timeout_us,
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	b29a      	uxth	r2, r3
									 timeouts.final_range_vcsel_period_pclks);
 8002fde:	2408      	movs	r4, #8
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	885b      	ldrh	r3, [r3, #2]
				laser_us_to_mclks(final_range_timeout_us,
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7ff fd63 	bl	8002ab4 <laser_us_to_mclks>
 8002fee:	0002      	movs	r2, r0
		uint16_t final_range_timeout_mclks =
 8002ff0:	2042      	movs	r0, #66	; 0x42
 8002ff2:	183b      	adds	r3, r7, r0
 8002ff4:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <laser_set_timing_budget+0x18e>
		{
		  final_range_timeout_mclks += timeouts.pre_range_mclks;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	88d9      	ldrh	r1, [r3, #6]
 8003004:	183b      	adds	r3, r7, r0
 8003006:	183a      	adds	r2, r7, r0
 8003008:	8812      	ldrh	r2, [r2, #0]
 800300a:	188a      	adds	r2, r1, r2
 800300c:	801a      	strh	r2, [r3, #0]
		}

		status = laser_write_u16(laser, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, encodeTimeout(final_range_timeout_mclks));
 800300e:	2342      	movs	r3, #66	; 0x42
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fefe 	bl	8002e16 <encodeTimeout>
 800301a:	0003      	movs	r3, r0
 800301c:	001a      	movs	r2, r3
 800301e:	232f      	movs	r3, #47	; 0x2f
 8003020:	18fc      	adds	r4, r7, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2171      	movs	r1, #113	; 0x71
 8003026:	0018      	movs	r0, r3
 8003028:	f7fe fa60 	bl	80014ec <laser_write_u16>
 800302c:	0003      	movs	r3, r0
 800302e:	7023      	strb	r3, [r4, #0]


		// set_sequence_step_timeout() end
	}

	return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b012      	add	sp, #72	; 0x48
 8003038:	bdb0      	pop	{r4, r5, r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	0000024e 	.word	0x0000024e
 8003040:	000002b2 	.word	0x000002b2
 8003044:	00000226 	.word	0x00000226
 8003048:	00004e20 	.word	0x00004e20

0800304c <laser_start_continuous>:

HAL_StatusTypeDef laser_start_continuous(laser_handle* laser)
{
 800304c:	b5b0      	push	{r4, r5, r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	uint32_t period_ms = 0; //BACK to BACK mode, can be passed as parameter
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = laser_write_u8(laser, 0x80, 0x01);
 8003058:	2517      	movs	r5, #23
 800305a:	197c      	adds	r4, r7, r5
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe fa2a 	bl	80014bc <laser_write_u8>
 8003068:	0003      	movs	r3, r0
 800306a:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800306c:	197b      	adds	r3, r7, r5
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <laser_start_continuous+0x2e>
		return status;
 8003074:	197b      	adds	r3, r7, r5
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	e0b0      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0xFF, 0x01);
 800307a:	2517      	movs	r5, #23
 800307c:	197c      	adds	r4, r7, r5
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	21ff      	movs	r1, #255	; 0xff
 8003084:	0018      	movs	r0, r3
 8003086:	f7fe fa19 	bl	80014bc <laser_write_u8>
 800308a:	0003      	movs	r3, r0
 800308c:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <laser_start_continuous+0x50>
		return status;
 8003096:	197b      	adds	r3, r7, r5
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	e09f      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x00, 0x00);
 800309c:	2517      	movs	r5, #23
 800309e:	197c      	adds	r4, r7, r5
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7fe fa08 	bl	80014bc <laser_write_u8>
 80030ac:	0003      	movs	r3, r0
 80030ae:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030b0:	197b      	adds	r3, r7, r5
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <laser_start_continuous+0x72>
		return status;
 80030b8:	197b      	adds	r3, r7, r5
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	e08e      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x91, laser->g_stop);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	79da      	ldrb	r2, [r3, #7]
 80030c2:	2517      	movs	r5, #23
 80030c4:	197c      	adds	r4, r7, r5
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2191      	movs	r1, #145	; 0x91
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7fe f9f6 	bl	80014bc <laser_write_u8>
 80030d0:	0003      	movs	r3, r0
 80030d2:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030d4:	197b      	adds	r3, r7, r5
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <laser_start_continuous+0x96>
		return status;
 80030dc:	197b      	adds	r3, r7, r5
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	e07c      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x00, 0x01);
 80030e2:	2517      	movs	r5, #23
 80030e4:	197c      	adds	r4, r7, r5
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	2100      	movs	r1, #0
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fe f9e5 	bl	80014bc <laser_write_u8>
 80030f2:	0003      	movs	r3, r0
 80030f4:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 80030f6:	197b      	adds	r3, r7, r5
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <laser_start_continuous+0xb8>
		return status;
 80030fe:	197b      	adds	r3, r7, r5
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	e06b      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0xFF, 0x00);
 8003104:	2517      	movs	r5, #23
 8003106:	197c      	adds	r4, r7, r5
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	21ff      	movs	r1, #255	; 0xff
 800310e:	0018      	movs	r0, r3
 8003110:	f7fe f9d4 	bl	80014bc <laser_write_u8>
 8003114:	0003      	movs	r3, r0
 8003116:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 8003118:	197b      	adds	r3, r7, r5
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <laser_start_continuous+0xda>
		return status;
 8003120:	197b      	adds	r3, r7, r5
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	e05a      	b.n	80031dc <laser_start_continuous+0x190>

	status = laser_write_u8(laser, 0x80, 0x00);
 8003126:	2517      	movs	r5, #23
 8003128:	197c      	adds	r4, r7, r5
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	0018      	movs	r0, r3
 8003132:	f7fe f9c3 	bl	80014bc <laser_write_u8>
 8003136:	0003      	movs	r3, r0
 8003138:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK)
 800313a:	197b      	adds	r3, r7, r5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <laser_start_continuous+0xfc>
		return status;
 8003142:	197b      	adds	r3, r7, r5
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	e049      	b.n	80031dc <laser_start_continuous+0x190>

  if (period_ms != 0)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d039      	beq.n	80031c2 <laser_start_continuous+0x176>
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val;
    status = laser_read_u16(laser, OSC_CALIBRATE_VAL, &osc_calibrate_val);
 800314e:	2517      	movs	r5, #23
 8003150:	197c      	adds	r4, r7, r5
 8003152:	230e      	movs	r3, #14
 8003154:	18fa      	adds	r2, r7, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	21f8      	movs	r1, #248	; 0xf8
 800315a:	0018      	movs	r0, r3
 800315c:	f7fe f9f3 	bl	8001546 <laser_read_u16>
 8003160:	0003      	movs	r3, r0
 8003162:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8003164:	197b      	adds	r3, r7, r5
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <laser_start_continuous+0x126>
		return status;
 800316c:	197b      	adds	r3, r7, r5
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	e034      	b.n	80031dc <laser_start_continuous+0x190>

    if (osc_calibrate_val != 0)
 8003172:	220e      	movs	r2, #14
 8003174:	18bb      	adds	r3, r7, r2
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <laser_start_continuous+0x13c>
    {
      period_ms *= osc_calibrate_val;
 800317c:	18bb      	adds	r3, r7, r2
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	001a      	movs	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4353      	muls	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
    }

    status = laser_write(laser, SYSTEM_INTERMEASUREMENT_PERIOD, (uint8_t*)&period_ms, sizeof(period_ms));
 8003188:	2517      	movs	r5, #23
 800318a:	197c      	adds	r4, r7, r5
 800318c:	2310      	movs	r3, #16
 800318e:	18fa      	adds	r2, r7, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	2304      	movs	r3, #4
 8003194:	2104      	movs	r1, #4
 8003196:	f7fe f905 	bl	80013a4 <laser_write>
 800319a:	0003      	movs	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800319e:	197b      	adds	r3, r7, r5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <laser_start_continuous+0x160>
		return status;
 80031a6:	197b      	adds	r3, r7, r5
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	e017      	b.n	80031dc <laser_start_continuous+0x190>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    status = laser_write_u8(laser, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80031ac:	2317      	movs	r3, #23
 80031ae:	18fc      	adds	r4, r7, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	2100      	movs	r1, #0
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7fe f980 	bl	80014bc <laser_write_u8>
 80031bc:	0003      	movs	r3, r0
 80031be:	7023      	strb	r3, [r4, #0]
 80031c0:	e009      	b.n	80031d6 <laser_start_continuous+0x18a>
  }
  else
  {
    // continuous back-to-back mode
    status = laser_write_u8(laser, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fc      	adds	r4, r7, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	2100      	movs	r1, #0
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7fe f975 	bl	80014bc <laser_write_u8>
 80031d2:	0003      	movs	r3, r0
 80031d4:	7023      	strb	r3, [r4, #0]
  }

  return status;
 80031d6:	2317      	movs	r3, #23
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}

080031e4 <laser_set_address>:

HAL_StatusTypeDef laser_set_address(laser_handle* laser, uint8_t new_address)
{
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	000a      	movs	r2, r1
 80031ee:	1cfb      	adds	r3, r7, #3
 80031f0:	701a      	strb	r2, [r3, #0]
	const HAL_StatusTypeDef status = laser_write_u8(laser, I2C_SLAVE_DEVICE_ADDRESS, new_address >> 1);
 80031f2:	1cfb      	adds	r3, r7, #3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	250f      	movs	r5, #15
 80031fc:	197c      	adds	r4, r7, r5
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	218a      	movs	r1, #138	; 0x8a
 8003202:	0018      	movs	r0, r3
 8003204:	f7fe f95a 	bl	80014bc <laser_write_u8>
 8003208:	0003      	movs	r3, r0
 800320a:	7023      	strb	r3, [r4, #0]

	if (status == HAL_OK)
 800320c:	197b      	adds	r3, r7, r5
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <laser_set_address+0x38>
		laser->address = new_address;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1cfa      	adds	r2, r7, #3
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	719a      	strb	r2, [r3, #6]

	return status;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800322c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_DMA_Init+0x38>)
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <MX_DMA_Init+0x38>)
 8003238:	2101      	movs	r1, #1
 800323a:	430a      	orrs	r2, r1
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_DMA_Init+0x38>)
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	2201      	movs	r2, #1
 8003244:	4013      	ands	r3, r2
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2009      	movs	r0, #9
 8003250:	f002 fa86 	bl	8005760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003254:	2009      	movs	r0, #9
 8003256:	f002 fa98 	bl	800578a <HAL_NVIC_EnableIRQ>

}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b002      	add	sp, #8
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	40021000 	.word	0x40021000

08003268 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326e:	240c      	movs	r4, #12
 8003270:	193b      	adds	r3, r7, r4
 8003272:	0018      	movs	r0, r3
 8003274:	2314      	movs	r3, #20
 8003276:	001a      	movs	r2, r3
 8003278:	2100      	movs	r1, #0
 800327a:	f007 f89d 	bl	800a3b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <MX_GPIO_Init+0x104>)
 8003280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <MX_GPIO_Init+0x104>)
 8003284:	2101      	movs	r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	635a      	str	r2, [r3, #52]	; 0x34
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <MX_GPIO_Init+0x104>)
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <MX_GPIO_Init+0x104>)
 8003298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <MX_GPIO_Init+0x104>)
 800329c:	2102      	movs	r1, #2
 800329e:	430a      	orrs	r2, r1
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <MX_GPIO_Init+0x104>)
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	2202      	movs	r2, #2
 80032a8:	4013      	ands	r3, r2
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	4b2f      	ldr	r3, [pc, #188]	; (800336c <MX_GPIO_Init+0x104>)
 80032b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <MX_GPIO_Init+0x104>)
 80032b4:	2108      	movs	r1, #8
 80032b6:	430a      	orrs	r2, r1
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <MX_GPIO_Init+0x104>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2208      	movs	r2, #8
 80032c0:	4013      	ands	r3, r2
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_BACKWARD_Pin|EN_LASER_6_Pin|EN_LASER_7_Pin, GPIO_PIN_RESET);
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <MX_GPIO_Init+0x108>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	211c      	movs	r1, #28
 80032cc:	0018      	movs	r0, r3
 80032ce:	f002 fefb 	bl	80060c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_RESET);
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	0219      	lsls	r1, r3, #8
 80032d6:	23a0      	movs	r3, #160	; 0xa0
 80032d8:	05db      	lsls	r3, r3, #23
 80032da:	2200      	movs	r2, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f002 fef3 	bl	80060c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LASER_2_Pin|EN_LASER_3_Pin|EN_LASER_4_Pin|EN_LASER_5_Pin, GPIO_PIN_RESET);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <MX_GPIO_Init+0x10c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	210f      	movs	r1, #15
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 feed 	bl	80060c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_BACKWARD_Pin|EN_LASER_6_Pin|EN_LASER_7_Pin;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	221c      	movs	r2, #28
 80032f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	2201      	movs	r2, #1
 80032f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	193b      	adds	r3, r7, r4
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	193b      	adds	r3, r7, r4
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <MX_GPIO_Init+0x108>)
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f002 fd77 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_LASER_1_Pin;
 8003312:	0021      	movs	r1, r4
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	0212      	lsls	r2, r2, #8
 800331a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331c:	000c      	movs	r4, r1
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2201      	movs	r2, #1
 8003322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_LASER_1_GPIO_Port, &GPIO_InitStruct);
 8003330:	193a      	adds	r2, r7, r4
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f002 fd61 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EN_LASER_2_Pin|EN_LASER_3_Pin|EN_LASER_4_Pin|EN_LASER_5_Pin;
 800333e:	0021      	movs	r1, r4
 8003340:	187b      	adds	r3, r7, r1
 8003342:	220f      	movs	r2, #15
 8003344:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2201      	movs	r2, #1
 800334a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003358:	187b      	adds	r3, r7, r1
 800335a:	4a06      	ldr	r2, [pc, #24]	; (8003374 <MX_GPIO_Init+0x10c>)
 800335c:	0019      	movs	r1, r3
 800335e:	0010      	movs	r0, r2
 8003360:	f002 fd4e 	bl	8005e00 <HAL_GPIO_Init>

}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b009      	add	sp, #36	; 0x24
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	50000400 	.word	0x50000400
 8003374:	50000c00 	.word	0x50000c00

08003378 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <MX_I2C1_Init+0x74>)
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <MX_I2C1_Init+0x78>)
 8003380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <MX_I2C1_Init+0x74>)
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <MX_I2C1_Init+0x7c>)
 8003386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <MX_I2C1_Init+0x74>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <MX_I2C1_Init+0x74>)
 8003390:	2201      	movs	r2, #1
 8003392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <MX_I2C1_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <MX_I2C1_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <MX_I2C1_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_I2C1_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <MX_I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_I2C1_Init+0x74>)
 80033b4:	0018      	movs	r0, r3
 80033b6:	f002 fea5 	bl	8006104 <HAL_I2C_Init>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033be:	f000 fd1b 	bl	8003df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <MX_I2C1_Init+0x74>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	0018      	movs	r0, r3
 80033c8:	f003 fd64 	bl	8006e94 <HAL_I2CEx_ConfigAnalogFilter>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033d0:	f000 fd12 	bl	8003df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <MX_I2C1_Init+0x74>)
 80033d6:	2100      	movs	r1, #0
 80033d8:	0018      	movs	r0, r3
 80033da:	f003 fda7 	bl	8006f2c <HAL_I2CEx_ConfigDigitalFilter>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033e2:	f000 fd09 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000084 	.word	0x20000084
 80033f0:	40005400 	.word	0x40005400
 80033f4:	00303d5b 	.word	0x00303d5b

080033f8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <MX_I2C2_Init+0x74>)
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <MX_I2C2_Init+0x78>)
 8003400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <MX_I2C2_Init+0x74>)
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <MX_I2C2_Init+0x7c>)
 8003406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <MX_I2C2_Init+0x74>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <MX_I2C2_Init+0x74>)
 8003410:	2201      	movs	r2, #1
 8003412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <MX_I2C2_Init+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <MX_I2C2_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <MX_I2C2_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_I2C2_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_I2C2_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_I2C2_Init+0x74>)
 8003434:	0018      	movs	r0, r3
 8003436:	f002 fe65 	bl	8006104 <HAL_I2C_Init>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d001      	beq.n	8003442 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800343e:	f000 fcdb 	bl	8003df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <MX_I2C2_Init+0x74>)
 8003444:	2100      	movs	r1, #0
 8003446:	0018      	movs	r0, r3
 8003448:	f003 fd24 	bl	8006e94 <HAL_I2CEx_ConfigAnalogFilter>
 800344c:	1e03      	subs	r3, r0, #0
 800344e:	d001      	beq.n	8003454 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003450:	f000 fcd2 	bl	8003df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <MX_I2C2_Init+0x74>)
 8003456:	2100      	movs	r1, #0
 8003458:	0018      	movs	r0, r3
 800345a:	f003 fd67 	bl	8006f2c <HAL_I2CEx_ConfigDigitalFilter>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d001      	beq.n	8003466 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003462:	f000 fcc9 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	200000d8 	.word	0x200000d8
 8003470:	40005800 	.word	0x40005800
 8003474:	00303d5b 	.word	0x00303d5b

08003478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b093      	sub	sp, #76	; 0x4c
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	2334      	movs	r3, #52	; 0x34
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	0018      	movs	r0, r3
 8003486:	2314      	movs	r3, #20
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f006 ff94 	bl	800a3b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003490:	241c      	movs	r4, #28
 8003492:	193b      	adds	r3, r7, r4
 8003494:	0018      	movs	r0, r3
 8003496:	2318      	movs	r3, #24
 8003498:	001a      	movs	r2, r3
 800349a:	2100      	movs	r1, #0
 800349c:	f006 ff8c 	bl	800a3b8 <memset>
  if(i2cHandle->Instance==I2C1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3e      	ldr	r2, [pc, #248]	; (80035a0 <HAL_I2C_MspInit+0x128>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d13f      	bne.n	800352a <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	2220      	movs	r2, #32
 80034ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	0018      	movs	r0, r3
 80034ba:	f004 fa89 	bl	80079d0 <HAL_RCCEx_PeriphCLKConfig>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034c2:	f000 fc99 	bl	8003df8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 80034cc:	2102      	movs	r1, #2
 80034ce:	430a      	orrs	r2, r1
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	2202      	movs	r2, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034de:	2134      	movs	r1, #52	; 0x34
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	22c0      	movs	r2, #192	; 0xc0
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	2212      	movs	r2, #18
 80034ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2206      	movs	r2, #6
 80034fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	187b      	adds	r3, r7, r1
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <HAL_I2C_MspInit+0x130>)
 8003504:	0019      	movs	r1, r3
 8003506:	0010      	movs	r0, r2
 8003508:	f002 fc7a 	bl	8005e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 800350e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	0389      	lsls	r1, r1, #14
 8003516:	430a      	orrs	r2, r1
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 800351c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	039b      	lsls	r3, r3, #14
 8003522:	4013      	ands	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003528:	e036      	b.n	8003598 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_I2C_MspInit+0x134>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d131      	bne.n	8003598 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 8003536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	635a      	str	r2, [r3, #52]	; 0x34
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LASER_SCL_Pin|LASER_SDA_Pin;
 800354c:	2134      	movs	r1, #52	; 0x34
 800354e:	187b      	adds	r3, r7, r1
 8003550:	22c0      	movs	r2, #192	; 0xc0
 8003552:	0152      	lsls	r2, r2, #5
 8003554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2212      	movs	r2, #18
 800355a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2206      	movs	r2, #6
 800356c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	187a      	adds	r2, r7, r1
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f002 fc42 	bl	8005e00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 800357e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	03c9      	lsls	r1, r1, #15
 8003586:	430a      	orrs	r2, r1
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_I2C_MspInit+0x12c>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	03db      	lsls	r3, r3, #15
 8003592:	4013      	ands	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b013      	add	sp, #76	; 0x4c
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40005400 	.word	0x40005400
 80035a4:	40021000 	.word	0x40021000
 80035a8:	50000400 	.word	0x50000400
 80035ac:	40005800 	.word	0x40005800

080035b0 <lasers_offset>:

extern I2C_HandleTypeDef hi2c2;
laser_handle lasers[7];

void lasers_offset(uint16_t* lasers, const int8_t* offsets)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 7; ++i)
 80035ba:	230f      	movs	r3, #15
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e034      	b.n	800362e <lasers_offset+0x7e>
	{
		if (lasers[i] < -offsets[i])
 80035c4:	200f      	movs	r0, #15
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	18d3      	adds	r3, r2, r3
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	0019      	movs	r1, r3
 80035d4:	183b      	adds	r3, r7, r0
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	18d3      	adds	r3, r2, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	425b      	negs	r3, r3
 80035e2:	4299      	cmp	r1, r3
 80035e4:	da07      	bge.n	80035f6 <lasers_offset+0x46>
		{
			lasers[i] = 0;
 80035e6:	183b      	adds	r3, r7, r0
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	801a      	strh	r2, [r3, #0]
			continue;
 80035f4:	e015      	b.n	8003622 <lasers_offset+0x72>
		}

		lasers[i] += offsets[i];
 80035f6:	200f      	movs	r0, #15
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	18d3      	adds	r3, r2, r3
 8003602:	8819      	ldrh	r1, [r3, #0]
 8003604:	183b      	adds	r3, r7, r0
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	b25b      	sxtb	r3, r3
 8003610:	b29a      	uxth	r2, r3
 8003612:	183b      	adds	r3, r7, r0
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	18c3      	adds	r3, r0, r3
 800361c:	188a      	adds	r2, r1, r2
 800361e:	b292      	uxth	r2, r2
 8003620:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 7; ++i)
 8003622:	220f      	movs	r2, #15
 8003624:	18bb      	adds	r3, r7, r2
 8003626:	18ba      	adds	r2, r7, r2
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	3201      	adds	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	230f      	movs	r3, #15
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d9c5      	bls.n	80035c4 <lasers_offset+0x14>
	}
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <lasers_deinit>:

void lasers_deinit()
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_RESET);
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	0219      	lsls	r1, r3, #8
 800364c:	23a0      	movs	r3, #160	; 0xa0
 800364e:	05db      	lsls	r3, r3, #23
 8003650:	2200      	movs	r2, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f002 fd38 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_2_GPIO_Port, EN_LASER_2_Pin, GPIO_PIN_RESET);
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <lasers_deinit+0x68>)
 800365a:	2200      	movs	r2, #0
 800365c:	2101      	movs	r1, #1
 800365e:	0018      	movs	r0, r3
 8003660:	f002 fd32 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_3_GPIO_Port, EN_LASER_3_Pin, GPIO_PIN_RESET);
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <lasers_deinit+0x68>)
 8003666:	2200      	movs	r2, #0
 8003668:	2102      	movs	r1, #2
 800366a:	0018      	movs	r0, r3
 800366c:	f002 fd2c 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_4_GPIO_Port, EN_LASER_4_Pin, GPIO_PIN_RESET);
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <lasers_deinit+0x68>)
 8003672:	2200      	movs	r2, #0
 8003674:	2104      	movs	r1, #4
 8003676:	0018      	movs	r0, r3
 8003678:	f002 fd26 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_5_GPIO_Port, EN_LASER_5_Pin, GPIO_PIN_RESET);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <lasers_deinit+0x68>)
 800367e:	2200      	movs	r2, #0
 8003680:	2108      	movs	r1, #8
 8003682:	0018      	movs	r0, r3
 8003684:	f002 fd20 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_6_GPIO_Port, EN_LASER_6_Pin, GPIO_PIN_RESET);
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <lasers_deinit+0x6c>)
 800368a:	2200      	movs	r2, #0
 800368c:	2108      	movs	r1, #8
 800368e:	0018      	movs	r0, r3
 8003690:	f002 fd1a 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_LASER_7_GPIO_Port, EN_LASER_7_Pin, GPIO_PIN_RESET);
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <lasers_deinit+0x6c>)
 8003696:	2200      	movs	r2, #0
 8003698:	2110      	movs	r1, #16
 800369a:	0018      	movs	r0, r3
 800369c:	f002 fd14 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80036a0:	200a      	movs	r0, #10
 80036a2:	f001 ff8d 	bl	80055c0 <HAL_Delay>
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	50000c00 	.word	0x50000c00
 80036b0:	50000400 	.word	0x50000400

080036b4 <lasers_init>:

uint8_t lasers_init()
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	//Set default parameters
	for (uint8_t i = 0; i < 7; ++i)
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e01b      	b.n	80036fa <lasers_init+0x46>
	{
		lasers[i].address = 0x52;
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4a89      	ldr	r2, [pc, #548]	; (80038ec <lasers_init+0x238>)
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	18d3      	adds	r3, r2, r3
 80036cc:	3306      	adds	r3, #6
 80036ce:	2252      	movs	r2, #82	; 0x52
 80036d0:	701a      	strb	r2, [r3, #0]
		lasers[i].timeout = 300;
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4a85      	ldr	r2, [pc, #532]	; (80038ec <lasers_init+0x238>)
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	3304      	adds	r3, #4
 80036de:	2296      	movs	r2, #150	; 0x96
 80036e0:	0052      	lsls	r2, r2, #1
 80036e2:	801a      	strh	r2, [r3, #0]
		lasers[i].hi2c = &hi2c2;
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	4b80      	ldr	r3, [pc, #512]	; (80038ec <lasers_init+0x238>)
 80036ea:	00d2      	lsls	r2, r2, #3
 80036ec:	4980      	ldr	r1, [pc, #512]	; (80038f0 <lasers_init+0x23c>)
 80036ee:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 7; ++i)
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	1dfa      	adds	r2, r7, #7
 80036f4:	7812      	ldrb	r2, [r2, #0]
 80036f6:	3201      	adds	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	1dfb      	adds	r3, r7, #7
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d9df      	bls.n	80036c2 <lasers_init+0xe>
	}

	//================================ Laser 1 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_1_GPIO_Port, EN_LASER_1_Pin, GPIO_PIN_SET);
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	0219      	lsls	r1, r3, #8
 8003706:	23a0      	movs	r3, #160	; 0xa0
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	2201      	movs	r2, #1
 800370c:	0018      	movs	r0, r3
 800370e:	f002 fcdb 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003712:	200a      	movs	r0, #10
 8003714:	f001 ff54 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers, 0x20) != HAL_OK)
 8003718:	4b74      	ldr	r3, [pc, #464]	; (80038ec <lasers_init+0x238>)
 800371a:	2120      	movs	r1, #32
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff fd61 	bl	80031e4 <laser_set_address>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <lasers_init+0x76>
		return 0;
 8003726:	2300      	movs	r3, #0
 8003728:	e0dc      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers) != HAL_OK)
 800372a:	4b70      	ldr	r3, [pc, #448]	; (80038ec <lasers_init+0x238>)
 800372c:	0018      	movs	r0, r3
 800372e:	f7fd ff7d 	bl	800162c <laser_init>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d001      	beq.n	800373a <lasers_init+0x86>
		return 0;
 8003736:	2300      	movs	r3, #0
 8003738:	e0d4      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers) != HAL_OK)
 800373a:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <lasers_init+0x238>)
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff fc85 	bl	800304c <laser_start_continuous>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <lasers_init+0x96>
		return 0;
 8003746:	2300      	movs	r3, #0
 8003748:	e0cc      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 2 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_2_GPIO_Port, EN_LASER_2_Pin, GPIO_PIN_SET);
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <lasers_init+0x240>)
 800374c:	2201      	movs	r2, #1
 800374e:	2101      	movs	r1, #1
 8003750:	0018      	movs	r0, r3
 8003752:	f002 fcb9 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003756:	200a      	movs	r0, #10
 8003758:	f001 ff32 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 1, 0x22) != HAL_OK)
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <lasers_init+0x244>)
 800375e:	2122      	movs	r1, #34	; 0x22
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fd3f 	bl	80031e4 <laser_set_address>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <lasers_init+0xba>
		return 0;
 800376a:	2300      	movs	r3, #0
 800376c:	e0ba      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 1) != HAL_OK)
 800376e:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <lasers_init+0x244>)
 8003770:	0018      	movs	r0, r3
 8003772:	f7fd ff5b 	bl	800162c <laser_init>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d001      	beq.n	800377e <lasers_init+0xca>
		return 0;
 800377a:	2300      	movs	r3, #0
 800377c:	e0b2      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 1) != HAL_OK)
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <lasers_init+0x244>)
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff fc63 	bl	800304c <laser_start_continuous>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <lasers_init+0xda>
		return 0;
 800378a:	2300      	movs	r3, #0
 800378c:	e0aa      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 3 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_3_GPIO_Port, EN_LASER_3_Pin, GPIO_PIN_SET);
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <lasers_init+0x240>)
 8003790:	2201      	movs	r2, #1
 8003792:	2102      	movs	r1, #2
 8003794:	0018      	movs	r0, r3
 8003796:	f002 fc97 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800379a:	200a      	movs	r0, #10
 800379c:	f001 ff10 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 2, 0x24) != HAL_OK)
 80037a0:	4b56      	ldr	r3, [pc, #344]	; (80038fc <lasers_init+0x248>)
 80037a2:	2124      	movs	r1, #36	; 0x24
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fd1d 	bl	80031e4 <laser_set_address>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d001      	beq.n	80037b2 <lasers_init+0xfe>
		return 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e098      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 2) != HAL_OK)
 80037b2:	4b52      	ldr	r3, [pc, #328]	; (80038fc <lasers_init+0x248>)
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fd ff39 	bl	800162c <laser_init>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <lasers_init+0x10e>
		return 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	e090      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 2) != HAL_OK)
 80037c2:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <lasers_init+0x248>)
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff fc41 	bl	800304c <laser_start_continuous>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d001      	beq.n	80037d2 <lasers_init+0x11e>
		return 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e088      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 4 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_4_GPIO_Port, EN_LASER_4_Pin, GPIO_PIN_SET);
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <lasers_init+0x240>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	2104      	movs	r1, #4
 80037d8:	0018      	movs	r0, r3
 80037da:	f002 fc75 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80037de:	200a      	movs	r0, #10
 80037e0:	f001 feee 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 3, 0x26) != HAL_OK)
 80037e4:	4b46      	ldr	r3, [pc, #280]	; (8003900 <lasers_init+0x24c>)
 80037e6:	2126      	movs	r1, #38	; 0x26
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fcfb 	bl	80031e4 <laser_set_address>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <lasers_init+0x142>
		return 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e076      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 3) != HAL_OK)
 80037f6:	4b42      	ldr	r3, [pc, #264]	; (8003900 <lasers_init+0x24c>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fd ff17 	bl	800162c <laser_init>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <lasers_init+0x152>
		return 0;
 8003802:	2300      	movs	r3, #0
 8003804:	e06e      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 3) != HAL_OK)
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <lasers_init+0x24c>)
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff fc1f 	bl	800304c <laser_start_continuous>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d001      	beq.n	8003816 <lasers_init+0x162>
		return 0;
 8003812:	2300      	movs	r3, #0
 8003814:	e066      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 5 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_5_GPIO_Port, EN_LASER_5_Pin, GPIO_PIN_SET);
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <lasers_init+0x240>)
 8003818:	2201      	movs	r2, #1
 800381a:	2108      	movs	r1, #8
 800381c:	0018      	movs	r0, r3
 800381e:	f002 fc53 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003822:	200a      	movs	r0, #10
 8003824:	f001 fecc 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 4, 0x28) != HAL_OK)
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <lasers_init+0x250>)
 800382a:	2128      	movs	r1, #40	; 0x28
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fcd9 	bl	80031e4 <laser_set_address>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d001      	beq.n	800383a <lasers_init+0x186>
		return 0;
 8003836:	2300      	movs	r3, #0
 8003838:	e054      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 4) != HAL_OK)
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <lasers_init+0x250>)
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fef5 	bl	800162c <laser_init>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d001      	beq.n	800384a <lasers_init+0x196>
		return 0;
 8003846:	2300      	movs	r3, #0
 8003848:	e04c      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 4) != HAL_OK)
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <lasers_init+0x250>)
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff fbfd 	bl	800304c <laser_start_continuous>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d001      	beq.n	800385a <lasers_init+0x1a6>
		return 0;
 8003856:	2300      	movs	r3, #0
 8003858:	e044      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 6 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_6_GPIO_Port, EN_LASER_6_Pin, GPIO_PIN_SET);
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <lasers_init+0x254>)
 800385c:	2201      	movs	r2, #1
 800385e:	2108      	movs	r1, #8
 8003860:	0018      	movs	r0, r3
 8003862:	f002 fc31 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003866:	200a      	movs	r0, #10
 8003868:	f001 feaa 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 5, 0x30) != HAL_OK)
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <lasers_init+0x258>)
 800386e:	2130      	movs	r1, #48	; 0x30
 8003870:	0018      	movs	r0, r3
 8003872:	f7ff fcb7 	bl	80031e4 <laser_set_address>
 8003876:	1e03      	subs	r3, r0, #0
 8003878:	d001      	beq.n	800387e <lasers_init+0x1ca>
		return 0;
 800387a:	2300      	movs	r3, #0
 800387c:	e032      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 5) != HAL_OK)
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <lasers_init+0x258>)
 8003880:	0018      	movs	r0, r3
 8003882:	f7fd fed3 	bl	800162c <laser_init>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <lasers_init+0x1da>
		return 0;
 800388a:	2300      	movs	r3, #0
 800388c:	e02a      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 5) != HAL_OK)
 800388e:	4b1f      	ldr	r3, [pc, #124]	; (800390c <lasers_init+0x258>)
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff fbdb 	bl	800304c <laser_start_continuous>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d001      	beq.n	800389e <lasers_init+0x1ea>
		return 0;
 800389a:	2300      	movs	r3, #0
 800389c:	e022      	b.n	80038e4 <lasers_init+0x230>

	//================================ Laser 7 ================================
	//Set enable pin high
	HAL_GPIO_WritePin(EN_LASER_7_GPIO_Port, EN_LASER_7_Pin, GPIO_PIN_SET);
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <lasers_init+0x254>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	2110      	movs	r1, #16
 80038a4:	0018      	movs	r0, r3
 80038a6:	f002 fc0f 	bl	80060c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038aa:	200a      	movs	r0, #10
 80038ac:	f001 fe88 	bl	80055c0 <HAL_Delay>

	//Set new address
	if (laser_set_address(lasers + 6, 0x32) != HAL_OK)
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <lasers_init+0x25c>)
 80038b2:	2132      	movs	r1, #50	; 0x32
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff fc95 	bl	80031e4 <laser_set_address>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <lasers_init+0x20e>
		return 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	e010      	b.n	80038e4 <lasers_init+0x230>

	//Init laser
	if (laser_init(lasers + 6) != HAL_OK)
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <lasers_init+0x25c>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fd feb1 	bl	800162c <laser_init>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <lasers_init+0x21e>
		return 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e008      	b.n	80038e4 <lasers_init+0x230>

	//Start continuous ranging
	if (laser_start_continuous(lasers + 6) != HAL_OK)
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <lasers_init+0x25c>)
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff fbb9 	bl	800304c <laser_start_continuous>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <lasers_init+0x22e>
		return 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <lasers_init+0x230>

	return 1;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000012c 	.word	0x2000012c
 80038f0:	200000d8 	.word	0x200000d8
 80038f4:	50000c00 	.word	0x50000c00
 80038f8:	20000134 	.word	0x20000134
 80038fc:	2000013c 	.word	0x2000013c
 8003900:	20000144 	.word	0x20000144
 8003904:	2000014c 	.word	0x2000014c
 8003908:	50000400 	.word	0x50000400
 800390c:	20000154 	.word	0x20000154
 8003910:	2000015c 	.word	0x2000015c

08003914 <lasers_read>:

HAL_StatusTypeDef lasers_read(uint16_t* lasers_mm)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	for (uint8_t i = 0; i < 7; ++i)
 800391c:	230f      	movs	r3, #15
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e01e      	b.n	8003964 <lasers_read+0x50>
	{
		status = laser_read_continuous(lasers + i, lasers_mm + i);
 8003926:	210f      	movs	r1, #15
 8003928:	187b      	adds	r3, r7, r1
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	00da      	lsls	r2, r3, #3
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <lasers_read+0x64>)
 8003930:	18d0      	adds	r0, r2, r3
 8003932:	187b      	adds	r3, r7, r1
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	18d3      	adds	r3, r2, r3
 800393c:	250e      	movs	r5, #14
 800393e:	197c      	adds	r4, r7, r5
 8003940:	0019      	movs	r1, r3
 8003942:	f7ff fa28 	bl	8002d96 <laser_read_continuous>
 8003946:	0003      	movs	r3, r0
 8003948:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 800394a:	197b      	adds	r3, r7, r5
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <lasers_read+0x44>
			return status;
 8003952:	197b      	adds	r3, r7, r5
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	e00b      	b.n	8003970 <lasers_read+0x5c>
	for (uint8_t i = 0; i < 7; ++i)
 8003958:	220f      	movs	r2, #15
 800395a:	18bb      	adds	r3, r7, r2
 800395c:	18ba      	adds	r2, r7, r2
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	3201      	adds	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d9db      	bls.n	8003926 <lasers_read+0x12>
	}
	return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bdb0      	pop	{r4, r5, r7, pc}
 8003978:	2000012c 	.word	0x2000012c

0800397c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  memset(laser_offsets, 0, sizeof(laser_offsets));
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <main+0xdc>)
 8003982:	2207      	movs	r2, #7
 8003984:	2100      	movs	r1, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f006 fd16 	bl	800a3b8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398c:	f001 fd92 	bl	80054b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003990:	f000 f86c 	bl	8003a6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //NRF's UART interface produces noise on initialization. STM picks up this noise and offsets the UART DMA RX buffer.
  //To avoid this wait for NRF to finish it's initialization and then initialize STM.
  HAL_Delay(2000);
 8003994:	23fa      	movs	r3, #250	; 0xfa
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	0018      	movs	r0, r3
 800399a:	f001 fe11 	bl	80055c0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800399e:	f7ff fc63 	bl	8003268 <MX_GPIO_Init>
  MX_DMA_Init();
 80039a2:	f7ff fc43 	bl	800322c <MX_DMA_Init>
  MX_I2C1_Init();
 80039a6:	f7ff fce7 	bl	8003378 <MX_I2C1_Init>
  MX_I2C2_Init();
 80039aa:	f7ff fd25 	bl	80033f8 <MX_I2C2_Init>
  MX_TIM14_Init();
 80039ae:	f000 fdbd 	bl	800452c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80039b2:	f000 fed3 	bl	800475c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80039b6:	f000 ff1f 	bl	80047f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80039ba:	f000 fd4b 	bl	8004454 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (lasers_init() == 0) return -1;
 80039be:	f7ff fe79 	bl	80036b4 <lasers_init>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d102      	bne.n	80039cc <main+0x50>
 80039c6:	2301      	movs	r3, #1
 80039c8:	425b      	negs	r3, r3
 80039ca:	e041      	b.n	8003a50 <main+0xd4>
  if (nrf_init(1000) != HAL_OK) return -1;
 80039cc:	23fa      	movs	r3, #250	; 0xfa
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fb3d 	bl	8004050 <nrf_init>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d002      	beq.n	80039e0 <main+0x64>
 80039da:	2301      	movs	r3, #1
 80039dc:	425b      	negs	r3, r3
 80039de:	e037      	b.n	8003a50 <main+0xd4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read/write data from/to NRF
	  handle_communications();
 80039e0:	f000 f88c 	bl	8003afc <handle_communications>

	  if (initialized != 1)
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <main+0xe0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d12d      	bne.n	8003a48 <main+0xcc>
		  continue;

	  //If at least one laser fails to return a measurement restart them all
	  if (lasers_read(laser_values) != HAL_OK)
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <main+0xe4>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff ff90 	bl	8003914 <lasers_read>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d008      	beq.n	8003a0a <main+0x8e>
	  {
		  lasers_deinit();
 80039f8:	f7ff fe24 	bl	8003644 <lasers_deinit>

		  if (lasers_init() == 0)
 80039fc:	f7ff fe5a 	bl	80036b4 <lasers_init>
 8003a00:	1e03      	subs	r3, r0, #0
 8003a02:	d123      	bne.n	8003a4c <main+0xd0>
			  return -1;
 8003a04:	2301      	movs	r3, #1
 8003a06:	425b      	negs	r3, r3
 8003a08:	e022      	b.n	8003a50 <main+0xd4>

		  continue;
	  }

	  //Apply laser offsets
	  lasers_offset(laser_values, laser_offsets);
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <main+0xdc>)
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <main+0xe4>)
 8003a0e:	0011      	movs	r1, r2
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff fdcd 	bl	80035b0 <lasers_offset>

	  //Check for timeout
	  if (nrf_timeout() == 1)
 8003a16:	f000 fbb3 	bl	8004180 <nrf_timeout>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <main+0xb4>
	  {
		  initialized = 0;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <main+0xe0>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
		  servo_deinit();
 8003a26:	f000 fbfd 	bl	8004224 <servo_deinit>
		  motor_deinit();
 8003a2a:	f000 fa25 	bl	8003e78 <motor_deinit>
		  continue;
 8003a2e:	e00e      	b.n	8003a4e <main+0xd2>
	  }

	  //Follow wall if auto_mode is 1
	  if (auto_mode == 1)
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <main+0xe8>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d1d3      	bne.n	80039e0 <main+0x64>
		  auto_controls(laser_values, followed_wall, 0);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <main+0xec>)
 8003a3a:	7819      	ldrb	r1, [r3, #0]
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <main+0xe4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	0018      	movs	r0, r3
 8003a42:	f001 fc47 	bl	80052d4 <auto_controls>
 8003a46:	e7cb      	b.n	80039e0 <main+0x64>
		  continue;
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	e7c9      	b.n	80039e0 <main+0x64>
		  continue;
 8003a4c:	46c0      	nop			; (mov r8, r8)
	  handle_communications();
 8003a4e:	e7c7      	b.n	80039e0 <main+0x64>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000174 	.word	0x20000174
 8003a5c:	20000172 	.word	0x20000172
 8003a60:	20000164 	.word	0x20000164
 8003a64:	2000017b 	.word	0x2000017b
 8003a68:	2000017c 	.word	0x2000017c

08003a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b093      	sub	sp, #76	; 0x4c
 8003a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a72:	2414      	movs	r4, #20
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	0018      	movs	r0, r3
 8003a78:	2334      	movs	r3, #52	; 0x34
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f006 fc9b 	bl	800a3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	0018      	movs	r0, r3
 8003a86:	2310      	movs	r3, #16
 8003a88:	001a      	movs	r2, r3
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f006 fc94 	bl	800a3b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f003 fa95 	bl	8006fc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa0:	193b      	adds	r3, r7, r4
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	0052      	lsls	r2, r2, #1
 8003aa6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	0018      	movs	r0, r3
 8003abe:	f003 facd 	bl	800705c <HAL_RCC_OscConfig>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d001      	beq.n	8003aca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003ac6:	f000 f997 	bl	8003df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	2207      	movs	r2, #7
 8003ace:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f003 fdc8 	bl	800767c <HAL_RCC_ClockConfig>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d001      	beq.n	8003af4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003af0:	f000 f982 	bl	8003df8 <Error_Handler>
  }
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b013      	add	sp, #76	; 0x4c
 8003afa:	bd90      	pop	{r4, r7, pc}

08003afc <handle_communications>:

/* USER CODE BEGIN 4 */
void handle_communications()
{
 8003afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afe:	46ce      	mov	lr, r9
 8003b00:	4647      	mov	r7, r8
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b08d      	sub	sp, #52	; 0x34
 8003b06:	af04      	add	r7, sp, #16
	if (nrf_available() != 1)
 8003b08:	f000 fafa 	bl	8004100 <nrf_available>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d000      	beq.n	8003b14 <handle_communications+0x18>
 8003b12:	e159      	b.n	8003dc8 <handle_communications+0x2cc>
		return;

	nrf_update_heartbeat();
 8003b14:	f000 fb4a 	bl	80041ac <nrf_update_heartbeat>

	const uint8_t* buffer = nrf_rx_buffer();
 8003b18:	f000 fafc 	bl	8004114 <nrf_rx_buffer>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	61bb      	str	r3, [r7, #24]
	const uint8_t id = buffer[0];
 8003b20:	2117      	movs	r1, #23
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]

	if (id == 1) //app sent initialization parameters
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d000      	beq.n	8003b34 <handle_communications+0x38>
 8003b32:	e0a8      	b.n	8003c86 <handle_communications+0x18a>
	{
		if (initialized == 1)
 8003b34:	4ba8      	ldr	r3, [pc, #672]	; (8003dd8 <handle_communications+0x2dc>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <handle_communications+0x4e>
		{
			servo_deinit();
 8003b3c:	f000 fb72 	bl	8004224 <servo_deinit>
			motor_deinit();
 8003b40:	f000 f99a 	bl	8003e78 <motor_deinit>
			initialized = 0;
 8003b44:	4ba4      	ldr	r3, [pc, #656]	; (8003dd8 <handle_communications+0x2dc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
		}

		for (uint8_t i = 0; i < 7; ++i)
 8003b4a:	231f      	movs	r3, #31
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e011      	b.n	8003b78 <handle_communications+0x7c>
			laser_offsets[i] = (int8_t)buffer[i + 1];
 8003b54:	211f      	movs	r1, #31
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	18d3      	adds	r3, r2, r3
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	0008      	movs	r0, r1
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b251      	sxtb	r1, r2
 8003b6a:	4a9c      	ldr	r2, [pc, #624]	; (8003ddc <handle_communications+0x2e0>)
 8003b6c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; ++i)
 8003b6e:	183b      	adds	r3, r7, r0
 8003b70:	183a      	adds	r2, r7, r0
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	3201      	adds	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	231f      	movs	r3, #31
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d9e8      	bls.n	8003b54 <handle_communications+0x58>

		const uint8_t invert_servo = *((uint8_t*)(buffer + 14));
 8003b82:	2312      	movs	r3, #18
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	7b92      	ldrb	r2, [r2, #14]
 8003b8a:	701a      	strb	r2, [r3, #0]
		uint16_t servo_max_left, servo_middle, servo_max_right;

		memcpy(&servo_max_left, buffer + 8, 2);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	0019      	movs	r1, r3
 8003b90:	3108      	adds	r1, #8
 8003b92:	2410      	movs	r4, #16
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	2202      	movs	r2, #2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f006 fc3f 	bl	800a41c <memcpy>
		memcpy(&servo_middle, buffer + 10, 2);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	310a      	adds	r1, #10
 8003ba4:	250e      	movs	r5, #14
 8003ba6:	197b      	adds	r3, r7, r5
 8003ba8:	2202      	movs	r2, #2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f006 fc36 	bl	800a41c <memcpy>
		memcpy(&servo_max_right, buffer + 12, 2);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	310c      	adds	r1, #12
 8003bb6:	260c      	movs	r6, #12
 8003bb8:	19bb      	adds	r3, r7, r6
 8003bba:	2202      	movs	r2, #2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f006 fc2d 	bl	800a41c <memcpy>

		//Calculate timer's CCR values from angles
		servo_max_left = (uint16_t)((float)servo_max_left / 180.f * 1141.f) + 174;
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7fd fb42 	bl	8001250 <__aeabi_ui2f>
 8003bcc:	1c03      	adds	r3, r0, #0
 8003bce:	4984      	ldr	r1, [pc, #528]	; (8003de0 <handle_communications+0x2e4>)
 8003bd0:	1c18      	adds	r0, r3, #0
 8003bd2:	f7fc fdfd 	bl	80007d0 <__aeabi_fdiv>
 8003bd6:	1c03      	adds	r3, r0, #0
 8003bd8:	4982      	ldr	r1, [pc, #520]	; (8003de4 <handle_communications+0x2e8>)
 8003bda:	1c18      	adds	r0, r3, #0
 8003bdc:	f7fc ffc2 	bl	8000b64 <__aeabi_fmul>
 8003be0:	1c03      	adds	r3, r0, #0
 8003be2:	1c18      	adds	r0, r3, #0
 8003be4:	f7fc fc3c 	bl	8000460 <__aeabi_f2uiz>
 8003be8:	0003      	movs	r3, r0
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	33ae      	adds	r3, #174	; 0xae
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	801a      	strh	r2, [r3, #0]
		servo_middle = (uint16_t)((float)servo_middle / 180.f * 1141.f) + 174;
 8003bf4:	197b      	adds	r3, r7, r5
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fd fb29 	bl	8001250 <__aeabi_ui2f>
 8003bfe:	1c03      	adds	r3, r0, #0
 8003c00:	4977      	ldr	r1, [pc, #476]	; (8003de0 <handle_communications+0x2e4>)
 8003c02:	1c18      	adds	r0, r3, #0
 8003c04:	f7fc fde4 	bl	80007d0 <__aeabi_fdiv>
 8003c08:	1c03      	adds	r3, r0, #0
 8003c0a:	4976      	ldr	r1, [pc, #472]	; (8003de4 <handle_communications+0x2e8>)
 8003c0c:	1c18      	adds	r0, r3, #0
 8003c0e:	f7fc ffa9 	bl	8000b64 <__aeabi_fmul>
 8003c12:	1c03      	adds	r3, r0, #0
 8003c14:	1c18      	adds	r0, r3, #0
 8003c16:	f7fc fc23 	bl	8000460 <__aeabi_f2uiz>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	33ae      	adds	r3, #174	; 0xae
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	801a      	strh	r2, [r3, #0]
		servo_max_right = (uint16_t)((float)servo_max_right / 180.f * 1141.f) + 174;
 8003c26:	19bb      	adds	r3, r7, r6
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fd fb10 	bl	8001250 <__aeabi_ui2f>
 8003c30:	1c03      	adds	r3, r0, #0
 8003c32:	496b      	ldr	r1, [pc, #428]	; (8003de0 <handle_communications+0x2e4>)
 8003c34:	1c18      	adds	r0, r3, #0
 8003c36:	f7fc fdcb 	bl	80007d0 <__aeabi_fdiv>
 8003c3a:	1c03      	adds	r3, r0, #0
 8003c3c:	4969      	ldr	r1, [pc, #420]	; (8003de4 <handle_communications+0x2e8>)
 8003c3e:	1c18      	adds	r0, r3, #0
 8003c40:	f7fc ff90 	bl	8000b64 <__aeabi_fmul>
 8003c44:	1c03      	adds	r3, r0, #0
 8003c46:	1c18      	adds	r0, r3, #0
 8003c48:	f7fc fc0a 	bl	8000460 <__aeabi_f2uiz>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	33ae      	adds	r3, #174	; 0xae
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	19bb      	adds	r3, r7, r6
 8003c56:	801a      	strh	r2, [r3, #0]

		servo_init(servo_max_left, servo_middle, servo_max_right, invert_servo);
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	197b      	adds	r3, r7, r5
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	0019      	movs	r1, r3
 8003c64:	19bb      	adds	r3, r7, r6
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	001a      	movs	r2, r3
 8003c6a:	2312      	movs	r3, #18
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f000 faa8 	bl	80041c4 <servo_init>

		nrf_write(id, 0, 0); //send ack
 8003c74:	2317      	movs	r3, #23
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f9fe 	bl	8004080 <nrf_write>
 8003c84:	e0a1      	b.n	8003dca <handle_communications+0x2ce>
		return;
	}
	else if (id == 2)
 8003c86:	2317      	movs	r3, #23
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d172      	bne.n	8003d76 <handle_communications+0x27a>
	{
		const uint8_t invert_motor = *((uint8_t*)(buffer + 1));
 8003c90:	2116      	movs	r1, #22
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	7852      	ldrb	r2, [r2, #1]
 8003c98:	701a      	strb	r2, [r3, #0]
		const uint8_t hbridge = *((uint8_t*)(buffer + 2));
 8003c9a:	2015      	movs	r0, #21
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	7892      	ldrb	r2, [r2, #2]
 8003ca2:	701a      	strb	r2, [r3, #0]

		motor_init(hbridge, invert_motor);
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	183b      	adds	r3, r7, r0
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f8a8 	bl	8003e04 <motor_init>

		uint16_t min_laser, max_laser, target, radius, servo_sensitivity;
		uint8_t laser_amount, speed;

		memcpy(&min_laser, buffer + 3, 2);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1cd9      	adds	r1, r3, #3
 8003cb8:	240a      	movs	r4, #10
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f006 fbac 	bl	800a41c <memcpy>
		memcpy(&max_laser, buffer + 5, 2);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1d59      	adds	r1, r3, #5
 8003cc8:	2608      	movs	r6, #8
 8003cca:	19bb      	adds	r3, r7, r6
 8003ccc:	2202      	movs	r2, #2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f006 fba4 	bl	800a41c <memcpy>
		memcpy(&radius, buffer + 7, 2);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1dd9      	adds	r1, r3, #7
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2202      	movs	r2, #2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f006 fb9d 	bl	800a41c <memcpy>
		memcpy(&target, buffer + 9, 2);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	3109      	adds	r1, #9
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	2202      	movs	r2, #2
 8003cec:	0018      	movs	r0, r3
 8003cee:	f006 fb95 	bl	800a41c <memcpy>

		speed = *((uint8_t*)(buffer + 11));
 8003cf2:	2514      	movs	r5, #20
 8003cf4:	197b      	adds	r3, r7, r5
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	7ad2      	ldrb	r2, [r2, #11]
 8003cfa:	701a      	strb	r2, [r3, #0]
		laser_amount = *((uint8_t*)(buffer + 12));
 8003cfc:	2213      	movs	r2, #19
 8003cfe:	18bb      	adds	r3, r7, r2
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	7b12      	ldrb	r2, [r2, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

		memcpy(&servo_sensitivity, buffer + 13, 2);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	0019      	movs	r1, r3
 8003d0a:	310d      	adds	r1, #13
 8003d0c:	1cbb      	adds	r3, r7, #2
 8003d0e:	2202      	movs	r2, #2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f006 fb83 	bl	800a41c <memcpy>

		auto_controls_init(
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	2500      	movs	r5, #0
 8003d1a:	575d      	ldrsb	r5, [r3, r5]
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	881e      	ldrh	r6, [r3, #0]
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	8819      	ldrh	r1, [r3, #0]
 8003d24:	4688      	mov	r8, r1
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	8819      	ldrh	r1, [r3, #0]
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	881c      	ldrh	r4, [r3, #0]
				max_laser,
				min_laser,
				target,
				radius,
				laser_amount,
				(float)servo_sensitivity / 100.f);
 8003d30:	1cbb      	adds	r3, r7, #2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fd fa8b 	bl	8001250 <__aeabi_ui2f>
 8003d3a:	1c03      	adds	r3, r0, #0
		auto_controls_init(
 8003d3c:	492a      	ldr	r1, [pc, #168]	; (8003de8 <handle_communications+0x2ec>)
 8003d3e:	1c18      	adds	r0, r3, #0
 8003d40:	f7fc fd46 	bl	80007d0 <__aeabi_fdiv>
 8003d44:	1c03      	adds	r3, r0, #0
 8003d46:	9302      	str	r3, [sp, #8]
 8003d48:	2213      	movs	r2, #19
 8003d4a:	18bb      	adds	r3, r7, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	9400      	str	r4, [sp, #0]
 8003d52:	464b      	mov	r3, r9
 8003d54:	4642      	mov	r2, r8
 8003d56:	0031      	movs	r1, r6
 8003d58:	0028      	movs	r0, r5
 8003d5a:	f001 fb3f 	bl	80053dc <auto_controls_init>

		initialized = 1;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <handle_communications+0x2dc>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]

		nrf_write(id, 0, 0); //send ack
 8003d64:	2317      	movs	r3, #23
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f986 	bl	8004080 <nrf_write>
 8003d74:	e029      	b.n	8003dca <handle_communications+0x2ce>
		return;
	}
	else if (id == 4) //app sent controls
 8003d76:	2317      	movs	r3, #23
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d124      	bne.n	8003dca <handle_communications+0x2ce>
	{
		auto_mode = *((uint8_t*)(buffer + 1));
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	785a      	ldrb	r2, [r3, #1]
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <handle_communications+0x2f0>)
 8003d86:	701a      	strb	r2, [r3, #0]
		followed_wall = *((uint8_t*)(buffer + 2));
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	789a      	ldrb	r2, [r3, #2]
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <handle_communications+0x2f4>)
 8003d8e:	701a      	strb	r2, [r3, #0]

		if (auto_mode == 0)
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <handle_communications+0x2f0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <handle_communications+0x2ba>
		{
			servo_set(*((int8_t*)(buffer + 3)));
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3303      	adds	r3, #3
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fa4d 	bl	8004240 <servo_set>
			motor_set_speed(*((int8_t*)(buffer + 4)), 0);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3304      	adds	r3, #4
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 f87f 	bl	8003eb4 <motor_set_speed>
		}

		nrf_write(id, (const uint8_t*)laser_values, sizeof(laser_values)); //send ack
 8003db6:	490f      	ldr	r1, [pc, #60]	; (8003df4 <handle_communications+0x2f8>)
 8003db8:	2317      	movs	r3, #23
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	220e      	movs	r2, #14
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 f95d 	bl	8004080 <nrf_write>
		return;
 8003dc6:	e000      	b.n	8003dca <handle_communications+0x2ce>
		return;
 8003dc8:	46c0      	nop			; (mov r8, r8)
	}
}
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b009      	add	sp, #36	; 0x24
 8003dce:	bcc0      	pop	{r6, r7}
 8003dd0:	46b9      	mov	r9, r7
 8003dd2:	46b0      	mov	r8, r6
 8003dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	20000172 	.word	0x20000172
 8003ddc:	20000174 	.word	0x20000174
 8003de0:	43340000 	.word	0x43340000
 8003de4:	448ea000 	.word	0x448ea000
 8003de8:	42c80000 	.word	0x42c80000
 8003dec:	2000017b 	.word	0x2000017b
 8003df0:	2000017c 	.word	0x2000017c
 8003df4:	20000164 	.word	0x20000164

08003df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfc:	b672      	cpsid	i
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e00:	e7fe      	b.n	8003e00 <Error_Handler+0x8>
	...

08003e04 <motor_init>:

int8_t last_speed = 0;
uint32_t boost_time = 0;

HAL_StatusTypeDef motor_init(uint8_t hbridge, uint8_t inverted)
{
 8003e04:	b5b0      	push	{r4, r5, r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	1dbb      	adds	r3, r7, #6
 8003e12:	1c0a      	adds	r2, r1, #0
 8003e14:	701a      	strb	r2, [r3, #0]
	hbridge_type = hbridge;
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <motor_init+0x68>)
 8003e18:	1dfa      	adds	r2, r7, #7
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	701a      	strb	r2, [r3, #0]
	motor_inverted = inverted;
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <motor_init+0x6c>)
 8003e20:	1dba      	adds	r2, r7, #6
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
	htim3.Instance->CCR1 = 0;
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <motor_init+0x70>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR4 = 0;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <motor_init+0x70>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

	const HAL_StatusTypeDef status = HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003e36:	250f      	movs	r5, #15
 8003e38:	197c      	adds	r4, r7, r5
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <motor_init+0x70>)
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f003 ff9c 	bl	8007d7c <HAL_TIM_PWM_Start>
 8003e44:	0003      	movs	r3, r0
 8003e46:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8003e48:	197b      	adds	r3, r7, r5
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <motor_init+0x52>
		return status;
 8003e50:	197b      	adds	r3, r7, r5
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	e005      	b.n	8003e62 <motor_init+0x5e>

	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <motor_init+0x70>)
 8003e58:	210c      	movs	r1, #12
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f003 ff8e 	bl	8007d7c <HAL_TIM_PWM_Start>
 8003e60:	0003      	movs	r3, r0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	2000017d 	.word	0x2000017d
 8003e70:	2000017e 	.word	0x2000017e
 8003e74:	200001c0 	.word	0x200001c0

08003e78 <motor_deinit>:

HAL_StatusTypeDef motor_deinit()
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
	const HAL_StatusTypeDef status = HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003e7e:	1dfc      	adds	r4, r7, #7
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <motor_deinit+0x38>)
 8003e82:	2100      	movs	r1, #0
 8003e84:	0018      	movs	r0, r3
 8003e86:	f004 f851 	bl	8007f2c <HAL_TIM_PWM_Stop>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <motor_deinit+0x24>
		return status;
 8003e96:	1dfb      	adds	r3, r7, #7
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	e005      	b.n	8003ea8 <motor_deinit+0x30>

	return HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <motor_deinit+0x38>)
 8003e9e:	210c      	movs	r1, #12
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f004 f843 	bl	8007f2c <HAL_TIM_PWM_Stop>
 8003ea6:	0003      	movs	r3, r0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b003      	add	sp, #12
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	200001c0 	.word	0x200001c0

08003eb4 <motor_set_speed>:

void motor_set_speed(int8_t speed, int8_t boost)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	0002      	movs	r2, r0
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	1dbb      	adds	r3, r7, #6
 8003ec2:	1c0a      	adds	r2, r1, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
	if (boost_time != 0)
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <motor_set_speed+0x184>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <motor_set_speed+0x36>
	{
		if (HAL_GetTick() - boost_time >= 300)
 8003ece:	f001 fb6d 	bl	80055ac <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	4b58      	ldr	r3, [pc, #352]	; (8004038 <motor_set_speed+0x184>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1ad2      	subs	r2, r2, r3
 8003eda:	2396      	movs	r3, #150	; 0x96
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d200      	bcs.n	8003ee4 <motor_set_speed+0x30>
 8003ee2:	e0a4      	b.n	800402e <motor_set_speed+0x17a>
			boost_time = 0;
 8003ee4:	4b54      	ldr	r3, [pc, #336]	; (8004038 <motor_set_speed+0x184>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
		else
			return;
	}

	if (boost_time == 0 && boost != 0 && speed != last_speed && last_speed == 0)
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <motor_set_speed+0x184>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d125      	bne.n	8003f3e <motor_set_speed+0x8a>
 8003ef2:	1dbb      	adds	r3, r7, #6
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <motor_set_speed+0x8a>
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <motor_set_speed+0x188>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	1dfa      	adds	r2, r7, #7
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	b252      	sxtb	r2, r2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d018      	beq.n	8003f3e <motor_set_speed+0x8a>
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	; (800403c <motor_set_speed+0x188>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <motor_set_speed+0x8a>
	{
		boost_time = HAL_GetTick();
 8003f16:	f001 fb49 	bl	80055ac <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <motor_set_speed+0x184>)
 8003f1e:	601a      	str	r2, [r3, #0]

		if (speed >= 0)
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b7f      	cmp	r3, #127	; 0x7f
 8003f26:	d804      	bhi.n	8003f32 <motor_set_speed+0x7e>
			speed = boost;
 8003f28:	1dfb      	adds	r3, r7, #7
 8003f2a:	1dba      	adds	r2, r7, #6
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e005      	b.n	8003f3e <motor_set_speed+0x8a>
		else
			speed = -boost;
 8003f32:	1dbb      	adds	r3, r7, #6
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	425b      	negs	r3, r3
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	701a      	strb	r2, [r3, #0]
	}

	if (motor_inverted == 1)
 8003f3e:	4b40      	ldr	r3, [pc, #256]	; (8004040 <motor_set_speed+0x18c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <motor_set_speed+0x9e>
		speed *= -1;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	701a      	strb	r2, [r3, #0]

	if (hbridge_type == 0)
 8003f52:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <motor_set_speed+0x190>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d13b      	bne.n	8003fd2 <motor_set_speed+0x11e>
	{
		if (speed == 0) //Neutral
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <motor_set_speed+0xce>
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_RESET);
 8003f64:	4b38      	ldr	r3, [pc, #224]	; (8004048 <motor_set_speed+0x194>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	2104      	movs	r1, #4
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f002 f8ac 	bl	80060c8 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 0;
 8003f70:	4b36      	ldr	r3, [pc, #216]	; (800404c <motor_set_speed+0x198>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = 0;
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <motor_set_speed+0x198>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f80:	e050      	b.n	8004024 <motor_set_speed+0x170>
		}
		else if (speed > 0) //Forward
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dd10      	ble.n	8003fae <motor_set_speed+0xfa>
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_RESET);
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <motor_set_speed+0x194>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2104      	movs	r1, #4
 8003f92:	0018      	movs	r0, r3
 8003f94:	f002 f898 	bl	80060c8 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 100;
 8003f98:	4b2c      	ldr	r3, [pc, #176]	; (800404c <motor_set_speed+0x198>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2264      	movs	r2, #100	; 0x64
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(speed);
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <motor_set_speed+0x198>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1dfa      	adds	r2, r7, #7
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	b252      	sxtb	r2, r2
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34
 8003fac:	e03a      	b.n	8004024 <motor_set_speed+0x170>
		}
		else //Backward
		{
			HAL_GPIO_WritePin(MOTOR_BACKWARD_GPIO_Port, MOTOR_BACKWARD_Pin, GPIO_PIN_SET);
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <motor_set_speed+0x194>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f002 f887 	bl	80060c8 <HAL_GPIO_WritePin>
			htim3.Instance->CCR4 = 0;
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <motor_set_speed+0x198>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(-speed);
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	425a      	negs	r2, r3
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <motor_set_speed+0x198>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd0:	e028      	b.n	8004024 <motor_set_speed+0x170>
		}
	}
	else
	{
		if (speed == 0) //Neutral
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <motor_set_speed+0x13a>
		{
			htim3.Instance->CCR1 = 0;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <motor_set_speed+0x198>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR4 = 0;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <motor_set_speed+0x198>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
 8003fec:	e01a      	b.n	8004024 <motor_set_speed+0x170>
		}
		else if (speed > 0) //Forward
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dd0a      	ble.n	800400e <motor_set_speed+0x15a>
		{
			htim3.Instance->CCR4 = 0;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <motor_set_speed+0x198>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = (uint32_t)(speed);
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <motor_set_speed+0x198>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1dfa      	adds	r2, r7, #7
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	b252      	sxtb	r2, r2
 800400a:	635a      	str	r2, [r3, #52]	; 0x34
 800400c:	e00a      	b.n	8004024 <motor_set_speed+0x170>
		}
		else //Backward
		{
			htim3.Instance->CCR4 = (uint32_t)(-speed);
 800400e:	1dfb      	adds	r3, r7, #7
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b25b      	sxtb	r3, r3
 8004014:	425a      	negs	r2, r3
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <motor_set_speed+0x198>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR1 = 0;
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <motor_set_speed+0x198>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	last_speed = speed;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <motor_set_speed+0x188>)
 8004026:	1dfa      	adds	r2, r7, #7
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e000      	b.n	8004030 <motor_set_speed+0x17c>
			return;
 800402e:	46c0      	nop			; (mov r8, r8)
}
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	20000180 	.word	0x20000180
 800403c:	2000017f 	.word	0x2000017f
 8004040:	2000017e 	.word	0x2000017e
 8004044:	2000017d 	.word	0x2000017d
 8004048:	50000400 	.word	0x50000400
 800404c:	200001c0 	.word	0x200001c0

08004050 <nrf_init>:

uint32_t last_heartbeat_time = 0;
uint32_t timeout_duration;

HAL_StatusTypeDef nrf_init(const uint32_t timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	timeout_duration = timeout;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <nrf_init+0x24>)
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
	return HAL_UART_Receive_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 800405e:	4906      	ldr	r1, [pc, #24]	; (8004078 <nrf_init+0x28>)
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <nrf_init+0x2c>)
 8004062:	2210      	movs	r2, #16
 8004064:	0018      	movs	r0, r3
 8004066:	f004 fd73 	bl	8008b50 <HAL_UART_Receive_DMA>
 800406a:	0003      	movs	r3, r0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200001ac 	.word	0x200001ac
 8004078:	20000184 	.word	0x20000184
 800407c:	200002ec 	.word	0x200002ec

08004080 <nrf_write>:

HAL_StatusTypeDef nrf_write(const uint8_t id, const uint8_t* buffer, const uint8_t size)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6039      	str	r1, [r7, #0]
 8004088:	0011      	movs	r1, r2
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	1c02      	adds	r2, r0, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	1c0a      	adds	r2, r1, #0
 8004094:	701a      	strb	r2, [r3, #0]
	while (tx_buffer_ready != 1)
 8004096:	e002      	b.n	800409e <nrf_write+0x1e>
		HAL_Delay(1);
 8004098:	2001      	movs	r0, #1
 800409a:	f001 fa91 	bl	80055c0 <HAL_Delay>
	while (tx_buffer_ready != 1)
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <nrf_write+0x70>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d1f8      	bne.n	8004098 <nrf_write+0x18>

	if (size == 0)
 80040a6:	1dbb      	adds	r3, r7, #6
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <nrf_write+0x3c>
		memset(tx_buffer, 0, sizeof(tx_buffer));
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <nrf_write+0x74>)
 80040b0:	2210      	movs	r2, #16
 80040b2:	2100      	movs	r1, #0
 80040b4:	0018      	movs	r0, r3
 80040b6:	f006 f97f 	bl	800a3b8 <memset>
 80040ba:	e006      	b.n	80040ca <nrf_write+0x4a>
	else
		memcpy(tx_buffer + 1, buffer, size);
 80040bc:	480e      	ldr	r0, [pc, #56]	; (80040f8 <nrf_write+0x78>)
 80040be:	1dbb      	adds	r3, r7, #6
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	0019      	movs	r1, r3
 80040c6:	f006 f9a9 	bl	800a41c <memcpy>

	tx_buffer[0] = id;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <nrf_write+0x74>)
 80040cc:	1dfa      	adds	r2, r7, #7
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]

	tx_buffer_ready = 0;
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <nrf_write+0x70>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80040d8:	4906      	ldr	r1, [pc, #24]	; (80040f4 <nrf_write+0x74>)
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <nrf_write+0x7c>)
 80040dc:	2210      	movs	r2, #16
 80040de:	0018      	movs	r0, r3
 80040e0:	f004 fc8e 	bl	8008a00 <HAL_UART_Transmit_IT>
 80040e4:	0003      	movs	r3, r0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000198 	.word	0x20000198
 80040f8:	20000199 	.word	0x20000199
 80040fc:	200002ec 	.word	0x200002ec

08004100 <nrf_available>:

uint8_t nrf_available()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
	return rx_buffer_ready;
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <nrf_available+0x10>)
 8004106:	781b      	ldrb	r3, [r3, #0]
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	20000194 	.word	0x20000194

08004114 <nrf_rx_buffer>:

const uint8_t* nrf_rx_buffer()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
	rx_buffer_ready = 0;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <nrf_rx_buffer+0x14>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
	return rx_buffer;
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <nrf_rx_buffer+0x18>)
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	20000194 	.word	0x20000194
 800412c:	20000184 	.word	0x20000184

08004130 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_UART_RxCpltCallback+0x20>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d103      	bne.n	8004148 <HAL_UART_RxCpltCallback+0x18>
		return;

	rx_buffer_ready = 1;
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_UART_RxCpltCallback+0x24>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e000      	b.n	800414a <HAL_UART_RxCpltCallback+0x1a>
		return;
 8004148:	46c0      	nop			; (mov r8, r8)
}
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200002ec 	.word	0x200002ec
 8004154:	20000194 	.word	0x20000194

08004158 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_UART_TxCpltCallback+0x20>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d103      	bne.n	8004170 <HAL_UART_TxCpltCallback+0x18>
		return;

	tx_buffer_ready = 1;
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_UART_TxCpltCallback+0x24>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e000      	b.n	8004172 <HAL_UART_TxCpltCallback+0x1a>
		return;
 8004170:	46c0      	nop			; (mov r8, r8)
}
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200002ec 	.word	0x200002ec
 800417c:	20000000 	.word	0x20000000

08004180 <nrf_timeout>:

uint8_t nrf_timeout()
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_heartbeat_time) >= timeout_duration)
 8004184:	f001 fa12 	bl	80055ac <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <nrf_timeout+0x24>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <nrf_timeout+0x28>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d301      	bcc.n	800419c <nrf_timeout+0x1c>
		return 1;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <nrf_timeout+0x1e>

	return 0;
 800419c:	2300      	movs	r3, #0
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200001a8 	.word	0x200001a8
 80041a8:	200001ac 	.word	0x200001ac

080041ac <nrf_update_heartbeat>:

void nrf_update_heartbeat()
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	last_heartbeat_time = HAL_GetTick();
 80041b0:	f001 f9fc 	bl	80055ac <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <nrf_update_heartbeat+0x14>)
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200001a8 	.word	0x200001a8

080041c4 <servo_init>:
uint32_t rmax;
uint32_t mid;
uint8_t invert;

HAL_StatusTypeDef servo_init(const uint32_t left_max, const uint32_t middle, const uint32_t right_max, uint8_t inverted)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	001a      	movs	r2, r3
 80041d2:	1cfb      	adds	r3, r7, #3
 80041d4:	701a      	strb	r2, [r3, #0]
	mid = middle;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <servo_init+0x4c>)
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	601a      	str	r2, [r3, #0]
	lmax = left_max;
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <servo_init+0x50>)
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
	rmax = right_max;
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <servo_init+0x54>)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	invert = inverted;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <servo_init+0x58>)
 80041ea:	1cfa      	adds	r2, r7, #3
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]

	htim14.Instance->CCR1 = mid;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <servo_init+0x5c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a06      	ldr	r2, [pc, #24]	; (8004210 <servo_init+0x4c>)
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
	return HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <servo_init+0x5c>)
 80041fc:	2100      	movs	r1, #0
 80041fe:	0018      	movs	r0, r3
 8004200:	f003 fdbc 	bl	8007d7c <HAL_TIM_PWM_Start>
 8004204:	0003      	movs	r3, r0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	200001b8 	.word	0x200001b8
 8004214:	200001b0 	.word	0x200001b0
 8004218:	200001b4 	.word	0x200001b4
 800421c:	200001bc 	.word	0x200001bc
 8004220:	2000020c 	.word	0x2000020c

08004224 <servo_deinit>:
	servo_set(100);
	HAL_Delay(1000);
}

HAL_StatusTypeDef servo_deinit()
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	return HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <servo_deinit+0x18>)
 800422a:	2100      	movs	r1, #0
 800422c:	0018      	movs	r0, r3
 800422e:	f003 fe7d 	bl	8007f2c <HAL_TIM_PWM_Stop>
 8004232:	0003      	movs	r3, r0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	2000020c 	.word	0x2000020c

08004240 <servo_set>:

void servo_set(int8_t position)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af02      	add	r7, sp, #8
 8004246:	0002      	movs	r2, r0
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	701a      	strb	r2, [r3, #0]
    if (position >= 0)
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b7f      	cmp	r3, #127	; 0x7f
 8004252:	d849      	bhi.n	80042e8 <servo_set+0xa8>
    {
        if (invert == 1)
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <servo_set+0x144>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d122      	bne.n	80042a2 <servo_set+0x62>
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, rmax, mid, (float)position);
 800425c:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <servo_set+0x148>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fc fff5 	bl	8001250 <__aeabi_ui2f>
 8004266:	1c04      	adds	r4, r0, #0
 8004268:	4b48      	ldr	r3, [pc, #288]	; (800438c <servo_set+0x14c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fc ffef 	bl	8001250 <__aeabi_ui2f>
 8004272:	1c05      	adds	r5, r0, #0
 8004274:	1dfb      	adds	r3, r7, #7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b25b      	sxtb	r3, r3
 800427a:	0018      	movs	r0, r3
 800427c:	f7fc ff96 	bl	80011ac <__aeabi_i2f>
 8004280:	1c03      	adds	r3, r0, #0
 8004282:	2100      	movs	r1, #0
 8004284:	4842      	ldr	r0, [pc, #264]	; (8004390 <servo_set+0x150>)
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	1c2b      	adds	r3, r5, #0
 800428a:	1c22      	adds	r2, r4, #0
 800428c:	f000 fbce 	bl	8004a2c <mapf>
 8004290:	1c02      	adds	r2, r0, #0
 8004292:	4b40      	ldr	r3, [pc, #256]	; (8004394 <servo_set+0x154>)
 8004294:	681c      	ldr	r4, [r3, #0]
 8004296:	1c10      	adds	r0, r2, #0
 8004298:	f7fc f8e2 	bl	8000460 <__aeabi_f2uiz>
 800429c:	0003      	movs	r3, r0
 800429e:	6363      	str	r3, [r4, #52]	; 0x34
        if (invert == 1)
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, lmax, (float)position);
        else
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, lmax, mid, (float)position);
    }
}
 80042a0:	e06b      	b.n	800437a <servo_set+0x13a>
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, rmax, (float)position);
 80042a2:	4b3a      	ldr	r3, [pc, #232]	; (800438c <servo_set+0x14c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7fc ffd2 	bl	8001250 <__aeabi_ui2f>
 80042ac:	1c04      	adds	r4, r0, #0
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <servo_set+0x148>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7fc ffcc 	bl	8001250 <__aeabi_ui2f>
 80042b8:	1c05      	adds	r5, r0, #0
 80042ba:	1dfb      	adds	r3, r7, #7
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7fc ff73 	bl	80011ac <__aeabi_i2f>
 80042c6:	1c03      	adds	r3, r0, #0
 80042c8:	4933      	ldr	r1, [pc, #204]	; (8004398 <servo_set+0x158>)
 80042ca:	2000      	movs	r0, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	1c2b      	adds	r3, r5, #0
 80042d0:	1c22      	adds	r2, r4, #0
 80042d2:	f000 fbab 	bl	8004a2c <mapf>
 80042d6:	1c02      	adds	r2, r0, #0
 80042d8:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <servo_set+0x154>)
 80042da:	681c      	ldr	r4, [r3, #0]
 80042dc:	1c10      	adds	r0, r2, #0
 80042de:	f7fc f8bf 	bl	8000460 <__aeabi_f2uiz>
 80042e2:	0003      	movs	r3, r0
 80042e4:	6363      	str	r3, [r4, #52]	; 0x34
}
 80042e6:	e048      	b.n	800437a <servo_set+0x13a>
        if (invert == 1)
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <servo_set+0x144>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d122      	bne.n	8004336 <servo_set+0xf6>
            htim14.Instance->CCR1 = (uint32_t)mapf(.0f, 100.f, mid, lmax, (float)position);
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <servo_set+0x14c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fc ffab 	bl	8001250 <__aeabi_ui2f>
 80042fa:	1c04      	adds	r4, r0, #0
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <servo_set+0x15c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0018      	movs	r0, r3
 8004302:	f7fc ffa5 	bl	8001250 <__aeabi_ui2f>
 8004306:	1c05      	adds	r5, r0, #0
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b25b      	sxtb	r3, r3
 800430e:	0018      	movs	r0, r3
 8004310:	f7fc ff4c 	bl	80011ac <__aeabi_i2f>
 8004314:	1c03      	adds	r3, r0, #0
 8004316:	4920      	ldr	r1, [pc, #128]	; (8004398 <servo_set+0x158>)
 8004318:	2000      	movs	r0, #0
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	1c2b      	adds	r3, r5, #0
 800431e:	1c22      	adds	r2, r4, #0
 8004320:	f000 fb84 	bl	8004a2c <mapf>
 8004324:	1c02      	adds	r2, r0, #0
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <servo_set+0x154>)
 8004328:	681c      	ldr	r4, [r3, #0]
 800432a:	1c10      	adds	r0, r2, #0
 800432c:	f7fc f898 	bl	8000460 <__aeabi_f2uiz>
 8004330:	0003      	movs	r3, r0
 8004332:	6363      	str	r3, [r4, #52]	; 0x34
}
 8004334:	e021      	b.n	800437a <servo_set+0x13a>
            htim14.Instance->CCR1 = (uint32_t)mapf(-100.0f, .0f, lmax, mid, (float)position);
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <servo_set+0x15c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	0018      	movs	r0, r3
 800433c:	f7fc ff88 	bl	8001250 <__aeabi_ui2f>
 8004340:	1c04      	adds	r4, r0, #0
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <servo_set+0x14c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	0018      	movs	r0, r3
 8004348:	f7fc ff82 	bl	8001250 <__aeabi_ui2f>
 800434c:	1c05      	adds	r5, r0, #0
 800434e:	1dfb      	adds	r3, r7, #7
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b25b      	sxtb	r3, r3
 8004354:	0018      	movs	r0, r3
 8004356:	f7fc ff29 	bl	80011ac <__aeabi_i2f>
 800435a:	1c03      	adds	r3, r0, #0
 800435c:	2100      	movs	r1, #0
 800435e:	480c      	ldr	r0, [pc, #48]	; (8004390 <servo_set+0x150>)
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	1c2b      	adds	r3, r5, #0
 8004364:	1c22      	adds	r2, r4, #0
 8004366:	f000 fb61 	bl	8004a2c <mapf>
 800436a:	1c02      	adds	r2, r0, #0
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <servo_set+0x154>)
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	1c10      	adds	r0, r2, #0
 8004372:	f7fc f875 	bl	8000460 <__aeabi_f2uiz>
 8004376:	0003      	movs	r3, r0
 8004378:	6363      	str	r3, [r4, #52]	; 0x34
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bdb0      	pop	{r4, r5, r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	200001bc 	.word	0x200001bc
 8004388:	200001b4 	.word	0x200001b4
 800438c:	200001b8 	.word	0x200001b8
 8004390:	c2c80000 	.word	0xc2c80000
 8004394:	2000020c 	.word	0x2000020c
 8004398:	42c80000 	.word	0x42c80000
 800439c:	200001b0 	.word	0x200001b0

080043a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_MspInit+0x44>)
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_MspInit+0x44>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	430a      	orrs	r2, r1
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_MspInit+0x44>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2201      	movs	r2, #1
 80043b8:	4013      	ands	r3, r2
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_MspInit+0x44>)
 80043c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_MspInit+0x44>)
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	0549      	lsls	r1, r1, #21
 80043c8:	430a      	orrs	r2, r1
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_MspInit+0x44>)
 80043ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	055b      	lsls	r3, r3, #21
 80043d4:	4013      	ands	r3, r2
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	40021000 	.word	0x40021000

080043e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043ec:	e7fe      	b.n	80043ec <NMI_Handler+0x4>

080043ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043f2:	e7fe      	b.n	80043f2 <HardFault_Handler+0x4>

080043f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800440c:	f001 f8bc 	bl	8005588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <DMA1_Channel1_IRQHandler+0x14>)
 800441e:	0018      	movs	r0, r3
 8004420:	f001 fbac 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	20000380 	.word	0x20000380

08004430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <USART2_IRQHandler+0x14>)
 8004436:	0018      	movs	r0, r3
 8004438:	f004 fbe2 	bl	8008c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	200002ec 	.word	0x200002ec

08004448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800445a:	231c      	movs	r3, #28
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	0018      	movs	r0, r3
 8004460:	230c      	movs	r3, #12
 8004462:	001a      	movs	r2, r3
 8004464:	2100      	movs	r1, #0
 8004466:	f005 ffa7 	bl	800a3b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800446a:	003b      	movs	r3, r7
 800446c:	0018      	movs	r0, r3
 800446e:	231c      	movs	r3, #28
 8004470:	001a      	movs	r2, r3
 8004472:	2100      	movs	r1, #0
 8004474:	f005 ffa0 	bl	800a3b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <MX_TIM3_Init+0xcc>)
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <MX_TIM3_Init+0xd0>)
 800447c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <MX_TIM3_Init+0xcc>)
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <MX_TIM3_Init+0xd4>)
 8004482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <MX_TIM3_Init+0xcc>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800448a:	4b25      	ldr	r3, [pc, #148]	; (8004520 <MX_TIM3_Init+0xcc>)
 800448c:	2263      	movs	r2, #99	; 0x63
 800448e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004490:	4b23      	ldr	r3, [pc, #140]	; (8004520 <MX_TIM3_Init+0xcc>)
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <MX_TIM3_Init+0xcc>)
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <MX_TIM3_Init+0xcc>)
 800449e:	0018      	movs	r0, r3
 80044a0:	f003 fc14 	bl	8007ccc <HAL_TIM_PWM_Init>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d001      	beq.n	80044ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80044a8:	f7ff fca6 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ac:	211c      	movs	r1, #28
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044ba:	187a      	adds	r2, r7, r1
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <MX_TIM3_Init+0xcc>)
 80044be:	0011      	movs	r1, r2
 80044c0:	0018      	movs	r0, r3
 80044c2:	f004 f9e5 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 80044c6:	1e03      	subs	r3, r0, #0
 80044c8:	d001      	beq.n	80044ce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80044ca:	f7ff fc95 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ce:	003b      	movs	r3, r7
 80044d0:	2260      	movs	r2, #96	; 0x60
 80044d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80044d4:	003b      	movs	r3, r7
 80044d6:	2200      	movs	r2, #0
 80044d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044da:	003b      	movs	r3, r7
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044e0:	003b      	movs	r3, r7
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044e6:	0039      	movs	r1, r7
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <MX_TIM3_Init+0xcc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	0018      	movs	r0, r3
 80044ee:	f003 fda3 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 80044f2:	1e03      	subs	r3, r0, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80044f6:	f7ff fc7f 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044fa:	0039      	movs	r1, r7
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <MX_TIM3_Init+0xcc>)
 80044fe:	220c      	movs	r2, #12
 8004500:	0018      	movs	r0, r3
 8004502:	f003 fd99 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800450a:	f7ff fc75 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <MX_TIM3_Init+0xcc>)
 8004510:	0018      	movs	r0, r3
 8004512:	f000 f899 	bl	8004648 <HAL_TIM_MspPostInit>

}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b00a      	add	sp, #40	; 0x28
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	200001c0 	.word	0x200001c0
 8004524:	40000400 	.word	0x40000400
 8004528:	0000063f 	.word	0x0000063f

0800452c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	0018      	movs	r0, r3
 8004536:	231c      	movs	r3, #28
 8004538:	001a      	movs	r2, r3
 800453a:	2100      	movs	r1, #0
 800453c:	f005 ff3c 	bl	800a3b8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004540:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <MX_TIM14_Init+0x98>)
 8004544:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004548:	221f      	movs	r2, #31
 800454a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454c:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <MX_TIM14_Init+0x94>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <MX_TIM14_Init+0x9c>)
 8004556:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <MX_TIM14_Init+0x94>)
 800455a:	2200      	movs	r2, #0
 800455c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004560:	2200      	movs	r2, #0
 8004562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004566:	0018      	movs	r0, r3
 8004568:	f003 fb58 	bl	8007c1c <HAL_TIM_Base_Init>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d001      	beq.n	8004574 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8004570:	f7ff fc42 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <MX_TIM14_Init+0x94>)
 8004576:	0018      	movs	r0, r3
 8004578:	f003 fba8 	bl	8007ccc <HAL_TIM_PWM_Init>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8004580:	f7ff fc3a 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	2260      	movs	r2, #96	; 0x60
 8004588:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	2200      	movs	r2, #0
 800458e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459c:	1d39      	adds	r1, r7, #4
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <MX_TIM14_Init+0x94>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	0018      	movs	r0, r3
 80045a4:	f003 fd48 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80045ac:	f7ff fc24 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <MX_TIM14_Init+0x94>)
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 f848 	bl	8004648 <HAL_TIM_MspPostInit>

}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b008      	add	sp, #32
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2000020c 	.word	0x2000020c
 80045c4:	40002000 	.word	0x40002000
 80045c8:	0000270f 	.word	0x0000270f

080045cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_TIM_PWM_MspInit+0x34>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10b      	bne.n	80045f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_TIM_PWM_MspInit+0x38>)
 80045e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_TIM_PWM_MspInit+0x38>)
 80045e4:	2102      	movs	r1, #2
 80045e6:	430a      	orrs	r2, r1
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_TIM_PWM_MspInit+0x38>)
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2202      	movs	r2, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	40000400 	.word	0x40000400
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_TIM_Base_MspInit+0x38>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_TIM_Base_MspInit+0x3c>)
 800461c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_TIM_Base_MspInit+0x3c>)
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	0209      	lsls	r1, r1, #8
 8004624:	430a      	orrs	r2, r1
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_TIM_Base_MspInit+0x3c>)
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	40002000 	.word	0x40002000
 8004644:	40021000 	.word	0x40021000

08004648 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b08b      	sub	sp, #44	; 0x2c
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004650:	2414      	movs	r4, #20
 8004652:	193b      	adds	r3, r7, r4
 8004654:	0018      	movs	r0, r3
 8004656:	2314      	movs	r3, #20
 8004658:	001a      	movs	r2, r3
 800465a:	2100      	movs	r1, #0
 800465c:	f005 feac 	bl	800a3b8 <memset>
  if(timHandle->Instance==TIM3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a39      	ldr	r2, [pc, #228]	; (800474c <HAL_TIM_MspPostInit+0x104>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d144      	bne.n	80046f4 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 800466c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004670:	2101      	movs	r1, #1
 8004672:	430a      	orrs	r2, r1
 8004674:	635a      	str	r2, [r3, #52]	; 0x34
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	2201      	movs	r2, #1
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004682:	4b33      	ldr	r3, [pc, #204]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004686:	4b32      	ldr	r3, [pc, #200]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004688:	2102      	movs	r1, #2
 800468a:	430a      	orrs	r2, r1
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	2202      	movs	r2, #2
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_Pin;
 800469a:	193b      	adds	r3, r7, r4
 800469c:	2240      	movs	r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	193b      	adds	r3, r7, r4
 80046a2:	2202      	movs	r2, #2
 80046a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ac:	193b      	adds	r3, r7, r4
 80046ae:	2200      	movs	r2, #0
 80046b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80046b2:	193b      	adds	r3, r7, r4
 80046b4:	2201      	movs	r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_EN_GPIO_Port, &GPIO_InitStruct);
 80046b8:	193a      	adds	r2, r7, r4
 80046ba:	23a0      	movs	r3, #160	; 0xa0
 80046bc:	05db      	lsls	r3, r3, #23
 80046be:	0011      	movs	r1, r2
 80046c0:	0018      	movs	r0, r3
 80046c2:	f001 fb9d 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_FORWARD_Pin;
 80046c6:	0021      	movs	r1, r4
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	2202      	movs	r2, #2
 80046cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2202      	movs	r2, #2
 80046d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	2200      	movs	r2, #0
 80046de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	2201      	movs	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_FORWARD_GPIO_Port, &GPIO_InitStruct);
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_TIM_MspPostInit+0x10c>)
 80046ea:	0019      	movs	r1, r3
 80046ec:	0010      	movs	r0, r2
 80046ee:	f001 fb87 	bl	8005e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80046f2:	e027      	b.n	8004744 <HAL_TIM_MspPostInit+0xfc>
  else if(timHandle->Instance==TIM14)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a17      	ldr	r2, [pc, #92]	; (8004758 <HAL_TIM_MspPostInit+0x110>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 8004704:	2101      	movs	r1, #1
 8004706:	430a      	orrs	r2, r1
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_TIM_MspPostInit+0x108>)
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	2201      	movs	r2, #1
 8004710:	4013      	ands	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8004716:	2114      	movs	r1, #20
 8004718:	187b      	adds	r3, r7, r1
 800471a:	2210      	movs	r2, #16
 800471c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	187b      	adds	r3, r7, r1
 8004720:	2202      	movs	r2, #2
 8004722:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	187b      	adds	r3, r7, r1
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472a:	187b      	adds	r3, r7, r1
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8004730:	187b      	adds	r3, r7, r1
 8004732:	2204      	movs	r2, #4
 8004734:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8004736:	187a      	adds	r2, r7, r1
 8004738:	23a0      	movs	r3, #160	; 0xa0
 800473a:	05db      	lsls	r3, r3, #23
 800473c:	0011      	movs	r1, r2
 800473e:	0018      	movs	r0, r3
 8004740:	f001 fb5e 	bl	8005e00 <HAL_GPIO_Init>
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b00b      	add	sp, #44	; 0x2c
 800474a:	bd90      	pop	{r4, r7, pc}
 800474c:	40000400 	.word	0x40000400
 8004750:	40021000 	.word	0x40021000
 8004754:	50000400 	.word	0x50000400
 8004758:	40002000 	.word	0x40002000

0800475c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004762:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <MX_USART1_UART_Init+0x98>)
 8004764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004768:	22e1      	movs	r2, #225	; 0xe1
 800476a:	0252      	lsls	r2, r2, #9
 800476c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004776:	2200      	movs	r2, #0
 8004778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004782:	220c      	movs	r2, #12
 8004784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004786:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004788:	2200      	movs	r2, #0
 800478a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800478c:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004792:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 8004794:	2200      	movs	r2, #0
 8004796:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 800479a:	2200      	movs	r2, #0
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 80047a6:	0018      	movs	r0, r3
 80047a8:	f004 f8d4 	bl	8008954 <HAL_UART_Init>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d001      	beq.n	80047b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80047b0:	f7ff fb22 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 80047b6:	2100      	movs	r1, #0
 80047b8:	0018      	movs	r0, r3
 80047ba:	f005 fd1d 	bl	800a1f8 <HAL_UARTEx_SetTxFifoThreshold>
 80047be:	1e03      	subs	r3, r0, #0
 80047c0:	d001      	beq.n	80047c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80047c2:	f7ff fb19 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 80047c8:	2100      	movs	r1, #0
 80047ca:	0018      	movs	r0, r3
 80047cc:	f005 fd54 	bl	800a278 <HAL_UARTEx_SetRxFifoThreshold>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80047d4:	f7ff fb10 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <MX_USART1_UART_Init+0x94>)
 80047da:	0018      	movs	r0, r3
 80047dc:	f005 fcd2 	bl	800a184 <HAL_UARTEx_DisableFifoMode>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d001      	beq.n	80047e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80047e4:	f7ff fb08 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000258 	.word	0x20000258
 80047f4:	40013800 	.word	0x40013800

080047f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047fc:	4b16      	ldr	r3, [pc, #88]	; (8004858 <MX_USART2_UART_Init+0x60>)
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <MX_USART2_UART_Init+0x64>)
 8004800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004804:	22e1      	movs	r2, #225	; 0xe1
 8004806:	0252      	lsls	r2, r2, #9
 8004808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <MX_USART2_UART_Init+0x60>)
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004812:	2200      	movs	r2, #0
 8004814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <MX_USART2_UART_Init+0x60>)
 800481e:	220c      	movs	r2, #12
 8004820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004824:	2200      	movs	r2, #0
 8004826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <MX_USART2_UART_Init+0x60>)
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004830:	2200      	movs	r2, #0
 8004832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <MX_USART2_UART_Init+0x60>)
 800483c:	2200      	movs	r2, #0
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <MX_USART2_UART_Init+0x60>)
 8004842:	0018      	movs	r0, r3
 8004844:	f004 f886 	bl	8008954 <HAL_UART_Init>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d001      	beq.n	8004850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800484c:	f7ff fad4 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	200002ec 	.word	0x200002ec
 800485c:	40004400 	.word	0x40004400

08004860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b093      	sub	sp, #76	; 0x4c
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004868:	2334      	movs	r3, #52	; 0x34
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	0018      	movs	r0, r3
 800486e:	2314      	movs	r3, #20
 8004870:	001a      	movs	r2, r3
 8004872:	2100      	movs	r1, #0
 8004874:	f005 fda0 	bl	800a3b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004878:	241c      	movs	r4, #28
 800487a:	193b      	adds	r3, r7, r4
 800487c:	0018      	movs	r0, r3
 800487e:	2318      	movs	r3, #24
 8004880:	001a      	movs	r2, r3
 8004882:	2100      	movs	r1, #0
 8004884:	f005 fd98 	bl	800a3b8 <memset>
  if(uartHandle->Instance==USART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_UART_MspInit+0x188>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d13e      	bne.n	8004910 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004892:	193b      	adds	r3, r7, r4
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004898:	193b      	adds	r3, r7, r4
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	0018      	movs	r0, r3
 80048a2:	f003 f895 	bl	80079d0 <HAL_RCCEx_PeriphCLKConfig>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d001      	beq.n	80048ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80048aa:	f7ff faa5 	bl	8003df8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ae:	4b4f      	ldr	r3, [pc, #316]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	01c9      	lsls	r1, r1, #7
 80048b8:	430a      	orrs	r2, r1
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
 80048bc:	4b4b      	ldr	r3, [pc, #300]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	01db      	lsls	r3, r3, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ca:	4b48      	ldr	r3, [pc, #288]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048d0:	2102      	movs	r1, #2
 80048d2:	430a      	orrs	r2, r1
 80048d4:	635a      	str	r2, [r3, #52]	; 0x34
 80048d6:	4b45      	ldr	r3, [pc, #276]	; (80049ec <HAL_UART_MspInit+0x18c>)
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	2202      	movs	r2, #2
 80048dc:	4013      	ands	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048e2:	2134      	movs	r1, #52	; 0x34
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	22c0      	movs	r2, #192	; 0xc0
 80048e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	2202      	movs	r2, #2
 80048ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	2200      	movs	r2, #0
 80048fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80048fc:	187b      	adds	r3, r7, r1
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004902:	187b      	adds	r3, r7, r1
 8004904:	4a3a      	ldr	r2, [pc, #232]	; (80049f0 <HAL_UART_MspInit+0x190>)
 8004906:	0019      	movs	r1, r3
 8004908:	0010      	movs	r0, r2
 800490a:	f001 fa79 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800490e:	e067      	b.n	80049e0 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <HAL_UART_MspInit+0x194>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d162      	bne.n	80049e0 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 800491a:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_UART_MspInit+0x18c>)
 800491c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_UART_MspInit+0x18c>)
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	0289      	lsls	r1, r1, #10
 8004924:	430a      	orrs	r2, r1
 8004926:	63da      	str	r2, [r3, #60]	; 0x3c
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_UART_MspInit+0x18c>)
 800492a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004936:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_UART_MspInit+0x18c>)
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	4b2c      	ldr	r3, [pc, #176]	; (80049ec <HAL_UART_MspInit+0x18c>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	635a      	str	r2, [r3, #52]	; 0x34
 8004942:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_UART_MspInit+0x18c>)
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	2201      	movs	r2, #1
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_TX_Pin|NRF_RX_Pin;
 800494e:	2134      	movs	r1, #52	; 0x34
 8004950:	187b      	adds	r3, r7, r1
 8004952:	220c      	movs	r2, #12
 8004954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004956:	187b      	adds	r3, r7, r1
 8004958:	2202      	movs	r2, #2
 800495a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004962:	187b      	adds	r3, r7, r1
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004968:	187b      	adds	r3, r7, r1
 800496a:	2201      	movs	r2, #1
 800496c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800496e:	187a      	adds	r2, r7, r1
 8004970:	23a0      	movs	r3, #160	; 0xa0
 8004972:	05db      	lsls	r3, r3, #23
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f001 fa42 	bl	8005e00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_UART_MspInit+0x198>)
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_UART_MspInit+0x19c>)
 8004980:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <HAL_UART_MspInit+0x198>)
 8004984:	2234      	movs	r2, #52	; 0x34
 8004986:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_UART_MspInit+0x198>)
 800498a:	2200      	movs	r2, #0
 800498c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_UART_MspInit+0x198>)
 8004990:	2200      	movs	r2, #0
 8004992:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_UART_MspInit+0x198>)
 8004996:	2280      	movs	r2, #128	; 0x80
 8004998:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <HAL_UART_MspInit+0x198>)
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049a8:	2220      	movs	r2, #32
 80049aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 ff05 	bl	80057c4 <HAL_DMA_Init>
 80049ba:	1e03      	subs	r3, r0, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_UART_MspInit+0x162>
      Error_Handler();
 80049be:	f7ff fa1b 	bl	8003df8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049c8:	505a      	str	r2, [r3, r1]
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_UART_MspInit+0x198>)
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	201c      	movs	r0, #28
 80049d6:	f000 fec3 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049da:	201c      	movs	r0, #28
 80049dc:	f000 fed5 	bl	800578a <HAL_NVIC_EnableIRQ>
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b013      	add	sp, #76	; 0x4c
 80049e6:	bd90      	pop	{r4, r7, pc}
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40021000 	.word	0x40021000
 80049f0:	50000400 	.word	0x50000400
 80049f4:	40004400 	.word	0x40004400
 80049f8:	20000380 	.word	0x20000380
 80049fc:	40020008 	.word	0x40020008

08004a00 <deg2rad>:
#include "utils.h"
#include "math.h"

float deg2rad(float degrees)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	return degrees * 3.14159f / 180.f;
 8004a08:	4906      	ldr	r1, [pc, #24]	; (8004a24 <deg2rad+0x24>)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc f8aa 	bl	8000b64 <__aeabi_fmul>
 8004a10:	1c03      	adds	r3, r0, #0
 8004a12:	4905      	ldr	r1, [pc, #20]	; (8004a28 <deg2rad+0x28>)
 8004a14:	1c18      	adds	r0, r3, #0
 8004a16:	f7fb fedb 	bl	80007d0 <__aeabi_fdiv>
 8004a1a:	1c03      	adds	r3, r0, #0
}
 8004a1c:	1c18      	adds	r0, r3, #0
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40490fd0 	.word	0x40490fd0
 8004a28:	43340000 	.word	0x43340000

08004a2c <mapf>:
{
	return min + (max - min) * value;
}

float mapf(const float a_min, const float a_max, const float b_min, const float b_max, const float a)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
	return b_min + (b_max - b_min) / (a_max - a_min) * (a - a_min);
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f7fc f9df 	bl	8000e00 <__aeabi_fsub>
 8004a42:	1c03      	adds	r3, r0, #0
 8004a44:	1c1c      	adds	r4, r3, #0
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	68b8      	ldr	r0, [r7, #8]
 8004a4a:	f7fc f9d9 	bl	8000e00 <__aeabi_fsub>
 8004a4e:	1c03      	adds	r3, r0, #0
 8004a50:	1c19      	adds	r1, r3, #0
 8004a52:	1c20      	adds	r0, r4, #0
 8004a54:	f7fb febc 	bl	80007d0 <__aeabi_fdiv>
 8004a58:	1c03      	adds	r3, r0, #0
 8004a5a:	1c1c      	adds	r4, r3, #0
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	6a38      	ldr	r0, [r7, #32]
 8004a60:	f7fc f9ce 	bl	8000e00 <__aeabi_fsub>
 8004a64:	1c03      	adds	r3, r0, #0
 8004a66:	1c19      	adds	r1, r3, #0
 8004a68:	1c20      	adds	r0, r4, #0
 8004a6a:	f7fc f87b 	bl	8000b64 <__aeabi_fmul>
 8004a6e:	1c03      	adds	r3, r0, #0
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	1c18      	adds	r0, r3, #0
 8004a74:	f7fb fd0c 	bl	8000490 <__aeabi_fadd>
 8004a78:	1c03      	adds	r3, r0, #0
}
 8004a7a:	1c18      	adds	r0, r3, #0
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b005      	add	sp, #20
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <clampf>:

float clampf(float value, float min, float max)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
	if (value <= min)
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fb fcc7 	bl	8000424 <__aeabi_fcmple>
 8004a96:	1e03      	subs	r3, r0, #0
 8004a98:	d001      	beq.n	8004a9e <clampf+0x1c>
		return min;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	e008      	b.n	8004ab0 <clampf+0x2e>

	if (value >= max)
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7fb fcd3 	bl	800044c <__aeabi_fcmpge>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d001      	beq.n	8004aae <clampf+0x2c>
		return max;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	e000      	b.n	8004ab0 <clampf+0x2e>

	return value;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	1c18      	adds	r0, r3, #0
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <select_target>:
uint16_t target_circle_radius;
uint8_t laser_count;
float steering_sensitivity;

float select_target(const float x1, const float x2, const float y_intercept, const uint8_t followed_wall)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	001a      	movs	r2, r3
 8004ac6:	1cfb      	adds	r3, r7, #3
 8004ac8:	701a      	strb	r2, [r3, #0]
	float mapped;

	if (followed_wall == 0)
 8004aca:	1cfb      	adds	r3, r7, #3
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d000      	beq.n	8004ad4 <select_target+0x1c>
 8004ad2:	e07d      	b.n	8004bd0 <select_target+0x118>
	{
		if (y_intercept > .0f)
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fb fcae 	bl	8000438 <__aeabi_fcmpgt>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d03b      	beq.n	8004b58 <select_target+0xa0>
		{
			if (x1 > x2)
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7fb fca8 	bl	8000438 <__aeabi_fcmpgt>
 8004ae8:	1e03      	subs	r3, r0, #0
 8004aea:	d01a      	beq.n	8004b22 <select_target+0x6a>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004aec:	4b79      	ldr	r3, [pc, #484]	; (8004cd4 <select_target+0x21c>)
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fc fbad 	bl	8001250 <__aeabi_ui2f>
 8004af6:	1c02      	adds	r2, r0, #0
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	4053      	eors	r3, r2
 8004afe:	001c      	movs	r4, r3
 8004b00:	4b74      	ldr	r3, [pc, #464]	; (8004cd4 <select_target+0x21c>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fc fba3 	bl	8001250 <__aeabi_ui2f>
 8004b0a:	1c01      	adds	r1, r0, #0
 8004b0c:	4872      	ldr	r0, [pc, #456]	; (8004cd8 <select_target+0x220>)
 8004b0e:	4a73      	ldr	r2, [pc, #460]	; (8004cdc <select_target+0x224>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	1c03      	adds	r3, r0, #0
 8004b16:	1c20      	adds	r0, r4, #0
 8004b18:	f7ff ff88 	bl	8004a2c <mapf>
 8004b1c:	1c03      	adds	r3, r0, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e0d3      	b.n	8004cca <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004b22:	4b6c      	ldr	r3, [pc, #432]	; (8004cd4 <select_target+0x21c>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fc fb92 	bl	8001250 <__aeabi_ui2f>
 8004b2c:	1c02      	adds	r2, r0, #0
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	4053      	eors	r3, r2
 8004b34:	001c      	movs	r4, r3
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <select_target+0x21c>)
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fc fb88 	bl	8001250 <__aeabi_ui2f>
 8004b40:	1c01      	adds	r1, r0, #0
 8004b42:	4865      	ldr	r0, [pc, #404]	; (8004cd8 <select_target+0x220>)
 8004b44:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <select_target+0x224>)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	1c03      	adds	r3, r0, #0
 8004b4c:	1c20      	adds	r0, r4, #0
 8004b4e:	f7ff ff6d 	bl	8004a2c <mapf>
 8004b52:	1c03      	adds	r3, r0, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e0b8      	b.n	8004cca <select_target+0x212>
		}
		else
		{
			if (x1 > x2)
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7fb fc6c 	bl	8000438 <__aeabi_fcmpgt>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d01a      	beq.n	8004b9a <select_target+0xe2>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004b64:	4b5b      	ldr	r3, [pc, #364]	; (8004cd4 <select_target+0x21c>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fc fb71 	bl	8001250 <__aeabi_ui2f>
 8004b6e:	1c02      	adds	r2, r0, #0
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	4053      	eors	r3, r2
 8004b76:	001c      	movs	r4, r3
 8004b78:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <select_target+0x21c>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fc fb67 	bl	8001250 <__aeabi_ui2f>
 8004b82:	1c01      	adds	r1, r0, #0
 8004b84:	4854      	ldr	r0, [pc, #336]	; (8004cd8 <select_target+0x220>)
 8004b86:	4a55      	ldr	r2, [pc, #340]	; (8004cdc <select_target+0x224>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	1c03      	adds	r3, r0, #0
 8004b8e:	1c20      	adds	r0, r4, #0
 8004b90:	f7ff ff4c 	bl	8004a2c <mapf>
 8004b94:	1c03      	adds	r3, r0, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e097      	b.n	8004cca <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004b9a:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <select_target+0x21c>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fc fb56 	bl	8001250 <__aeabi_ui2f>
 8004ba4:	1c02      	adds	r2, r0, #0
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	4053      	eors	r3, r2
 8004bac:	001c      	movs	r4, r3
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <select_target+0x21c>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fc fb4c 	bl	8001250 <__aeabi_ui2f>
 8004bb8:	1c01      	adds	r1, r0, #0
 8004bba:	4847      	ldr	r0, [pc, #284]	; (8004cd8 <select_target+0x220>)
 8004bbc:	4a47      	ldr	r2, [pc, #284]	; (8004cdc <select_target+0x224>)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	1c03      	adds	r3, r0, #0
 8004bc4:	1c20      	adds	r0, r4, #0
 8004bc6:	f7ff ff31 	bl	8004a2c <mapf>
 8004bca:	1c03      	adds	r3, r0, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e07c      	b.n	8004cca <select_target+0x212>
		}
	}
	else
	{
		if (y_intercept > .0f)
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fb fc30 	bl	8000438 <__aeabi_fcmpgt>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d03b      	beq.n	8004c54 <select_target+0x19c>
		{
			if (x1 > x2)
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7fb fc2a 	bl	8000438 <__aeabi_fcmpgt>
 8004be4:	1e03      	subs	r3, r0, #0
 8004be6:	d01a      	beq.n	8004c1e <select_target+0x166>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <select_target+0x21c>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7fc fb2f 	bl	8001250 <__aeabi_ui2f>
 8004bf2:	1c02      	adds	r2, r0, #0
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	4053      	eors	r3, r2
 8004bfa:	001c      	movs	r4, r3
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <select_target+0x21c>)
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7fc fb25 	bl	8001250 <__aeabi_ui2f>
 8004c06:	1c01      	adds	r1, r0, #0
 8004c08:	4833      	ldr	r0, [pc, #204]	; (8004cd8 <select_target+0x220>)
 8004c0a:	4a34      	ldr	r2, [pc, #208]	; (8004cdc <select_target+0x224>)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	1c03      	adds	r3, r0, #0
 8004c12:	1c20      	adds	r0, r4, #0
 8004c14:	f7ff ff0a 	bl	8004a2c <mapf>
 8004c18:	1c03      	adds	r3, r0, #0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e055      	b.n	8004cca <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <select_target+0x21c>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fc fb14 	bl	8001250 <__aeabi_ui2f>
 8004c28:	1c02      	adds	r2, r0, #0
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	4053      	eors	r3, r2
 8004c30:	001c      	movs	r4, r3
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <select_target+0x21c>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fc fb0a 	bl	8001250 <__aeabi_ui2f>
 8004c3c:	1c01      	adds	r1, r0, #0
 8004c3e:	4826      	ldr	r0, [pc, #152]	; (8004cd8 <select_target+0x220>)
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <select_target+0x224>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	1c03      	adds	r3, r0, #0
 8004c48:	1c20      	adds	r0, r4, #0
 8004c4a:	f7ff feef 	bl	8004a2c <mapf>
 8004c4e:	1c03      	adds	r3, r0, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e03a      	b.n	8004cca <select_target+0x212>
		}
		else
		{
			if (x1 > x2)
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7fb fbee 	bl	8000438 <__aeabi_fcmpgt>
 8004c5c:	1e03      	subs	r3, r0, #0
 8004c5e:	d01a      	beq.n	8004c96 <select_target+0x1de>
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x1);
 8004c60:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <select_target+0x21c>)
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fc faf3 	bl	8001250 <__aeabi_ui2f>
 8004c6a:	1c02      	adds	r2, r0, #0
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	4053      	eors	r3, r2
 8004c72:	001c      	movs	r4, r3
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <select_target+0x21c>)
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fc fae9 	bl	8001250 <__aeabi_ui2f>
 8004c7e:	1c01      	adds	r1, r0, #0
 8004c80:	4815      	ldr	r0, [pc, #84]	; (8004cd8 <select_target+0x220>)
 8004c82:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <select_target+0x224>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	1c03      	adds	r3, r0, #0
 8004c8a:	1c20      	adds	r0, r4, #0
 8004c8c:	f7ff fece 	bl	8004a2c <mapf>
 8004c90:	1c03      	adds	r3, r0, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e019      	b.n	8004cca <select_target+0x212>
			else
				mapped = mapf(-(float)target_circle_radius, (float)target_circle_radius, -100.f, 100.f, x2);
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <select_target+0x21c>)
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fc fad8 	bl	8001250 <__aeabi_ui2f>
 8004ca0:	1c02      	adds	r2, r0, #0
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	4053      	eors	r3, r2
 8004ca8:	001c      	movs	r4, r3
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <select_target+0x21c>)
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fc face 	bl	8001250 <__aeabi_ui2f>
 8004cb4:	1c01      	adds	r1, r0, #0
 8004cb6:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <select_target+0x220>)
 8004cb8:	4a08      	ldr	r2, [pc, #32]	; (8004cdc <select_target+0x224>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	1c03      	adds	r3, r0, #0
 8004cc0:	1c20      	adds	r0, r4, #0
 8004cc2:	f7ff feb3 	bl	8004a2c <mapf>
 8004cc6:	1c03      	adds	r3, r0, #0
 8004cc8:	617b      	str	r3, [r7, #20]
		}
	}

	return mapped;
 8004cca:	697b      	ldr	r3, [r7, #20]
}
 8004ccc:	1c18      	adds	r0, r3, #0
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b007      	add	sp, #28
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	200003e4 	.word	0x200003e4
 8004cd8:	42c80000 	.word	0x42c80000
 8004cdc:	c2c80000 	.word	0xc2c80000

08004ce0 <any_walls_detected>:

uint8_t any_walls_detected(const uint16_t* lasers, const uint8_t followed_wall)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	000a      	movs	r2, r1
 8004cea:	1cfb      	adds	r3, r7, #3
 8004cec:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8004cee:	1cfb      	adds	r3, r7, #3
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11f      	bne.n	8004d36 <any_walls_detected+0x56>
	{
		for (uint8_t i = 0; i < laser_count; ++i)
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e012      	b.n	8004d26 <any_walls_detected+0x46>
			if (lasers[i] <= max_laser_distance)
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	18d3      	adds	r3, r2, r3
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <any_walls_detected+0xa0>)
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d801      	bhi.n	8004d1a <any_walls_detected+0x3a>
				return 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e02e      	b.n	8004d78 <any_walls_detected+0x98>
		for (uint8_t i = 0; i < laser_count; ++i)
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	18bb      	adds	r3, r7, r2
 8004d1e:	18ba      	adds	r2, r7, r2
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	3201      	adds	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <any_walls_detected+0xa4>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	18ba      	adds	r2, r7, r2
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d3e5      	bcc.n	8004d00 <any_walls_detected+0x20>
 8004d34:	e01f      	b.n	8004d76 <any_walls_detected+0x96>
	}
	else
	{
		for (uint8_t i = 7 - laser_count; i < 7; ++i)
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <any_walls_detected+0xa4>)
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	230e      	movs	r3, #14
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2107      	movs	r1, #7
 8004d40:	1a8a      	subs	r2, r1, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e012      	b.n	8004d6c <any_walls_detected+0x8c>
			if (lasers[i] <= max_laser_distance)
 8004d46:	230e      	movs	r3, #14
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <any_walls_detected+0xa0>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d801      	bhi.n	8004d60 <any_walls_detected+0x80>
				return 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e00b      	b.n	8004d78 <any_walls_detected+0x98>
		for (uint8_t i = 7 - laser_count; i < 7; ++i)
 8004d60:	220e      	movs	r2, #14
 8004d62:	18bb      	adds	r3, r7, r2
 8004d64:	18ba      	adds	r2, r7, r2
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	3201      	adds	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	230e      	movs	r3, #14
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d9e7      	bls.n	8004d46 <any_walls_detected+0x66>
	}

	return 0;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200003de 	.word	0x200003de
 8004d84:	200003e6 	.word	0x200003e6

08004d88 <need_escaping>:

uint8_t need_escaping(const uint16_t* lasers, float scaling)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 2; i <= 4; ++i)
 8004d92:	230f      	movs	r3, #15
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e020      	b.n	8004dde <need_escaping+0x56>
		if (lasers[i] <= (uint16_t)((float)min_laser_distance * scaling))
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	18d3      	adds	r3, r2, r3
 8004da8:	881c      	ldrh	r4, [r3, #0]
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <need_escaping+0x6c>)
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fc fa4e 	bl	8001250 <__aeabi_ui2f>
 8004db4:	1c03      	adds	r3, r0, #0
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	1c18      	adds	r0, r3, #0
 8004dba:	f7fb fed3 	bl	8000b64 <__aeabi_fmul>
 8004dbe:	1c03      	adds	r3, r0, #0
 8004dc0:	1c18      	adds	r0, r3, #0
 8004dc2:	f7fb fb4d 	bl	8000460 <__aeabi_f2uiz>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	d801      	bhi.n	8004dd2 <need_escaping+0x4a>
			return 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e00b      	b.n	8004dea <need_escaping+0x62>
	for (uint8_t i = 2; i <= 4; ++i)
 8004dd2:	220f      	movs	r2, #15
 8004dd4:	18bb      	adds	r3, r7, r2
 8004dd6:	18ba      	adds	r2, r7, r2
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	3201      	adds	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	230f      	movs	r3, #15
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d9d9      	bls.n	8004d9c <need_escaping+0x14>

	return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b005      	add	sp, #20
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	200003e0 	.word	0x200003e0

08004df8 <widest_laser_pair>:

void widest_laser_pair(const uint16_t* lasers, uint8_t* left, uint8_t* right, const uint8_t followed_wall)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	001a      	movs	r2, r3
 8004e06:	1cfb      	adds	r3, r7, #3
 8004e08:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8004e0a:	1cfb      	adds	r3, r7, #3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <widest_laser_pair+0x2e>
	{
		*left = 0;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
		*right = laser_count - 1;
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <widest_laser_pair+0x90>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e010      	b.n	8004e48 <widest_laser_pair+0x50>
	}
	else
	{
		*left = 7 - laser_count;
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <widest_laser_pair+0x90>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	701a      	strb	r2, [r3, #0]
		*right = 6;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2206      	movs	r2, #6
 8004e38:	701a      	strb	r2, [r3, #0]
	}

	while (lasers[*left] > max_laser_distance)
 8004e3a:	e005      	b.n	8004e48 <widest_laser_pair+0x50>
		(*left)++;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	701a      	strb	r2, [r3, #0]
	while (lasers[*left] > max_laser_distance)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	18d3      	adds	r3, r2, r3
 8004e52:	881a      	ldrh	r2, [r3, #0]
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <widest_laser_pair+0x94>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d8ef      	bhi.n	8004e3c <widest_laser_pair+0x44>

	while (lasers[*right] > max_laser_distance)
 8004e5c:	e005      	b.n	8004e6a <widest_laser_pair+0x72>
		(*right)--;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	701a      	strb	r2, [r3, #0]
	while (lasers[*right] > max_laser_distance)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	881a      	ldrh	r2, [r3, #0]
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <widest_laser_pair+0x94>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d8ef      	bhi.n	8004e5e <widest_laser_pair+0x66>
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b004      	add	sp, #16
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200003e6 	.word	0x200003e6
 8004e8c:	200003de 	.word	0x200003de

08004e90 <on_single_detection>:

void on_single_detection(uint8_t index)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	0002      	movs	r2, r0
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	701a      	strb	r2, [r3, #0]
	//Turn wheels towards detected wall
	const float mapped = mapf(0.f, 6.f, -100.f, 100.f, (float)index);
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fc f9d5 	bl	8001250 <__aeabi_ui2f>
 8004ea6:	1c03      	adds	r3, r0, #0
 8004ea8:	4c0a      	ldr	r4, [pc, #40]	; (8004ed4 <on_single_detection+0x44>)
 8004eaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <on_single_detection+0x48>)
 8004eac:	490b      	ldr	r1, [pc, #44]	; (8004edc <on_single_detection+0x4c>)
 8004eae:	2000      	movs	r0, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	1c23      	adds	r3, r4, #0
 8004eb4:	f7ff fdba 	bl	8004a2c <mapf>
 8004eb8:	1c03      	adds	r3, r0, #0
 8004eba:	60fb      	str	r3, [r7, #12]
	servo_set((int8_t)mapped);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7fc f955 	bl	800116c <__aeabi_f2iz>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	b25b      	sxtb	r3, r3
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7ff f9ba 	bl	8004240 <servo_set>
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b005      	add	sp, #20
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	42c80000 	.word	0x42c80000
 8004ed8:	c2c80000 	.word	0xc2c80000
 8004edc:	40c00000 	.word	0x40c00000

08004ee0 <on_multiple_detections>:

void on_multiple_detections(const uint16_t* lasers,
							const uint8_t left_index,
							const uint8_t right_index,
							const uint8_t followed_wall)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b096      	sub	sp, #88	; 0x58
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	000c      	movs	r4, r1
 8004eea:	0010      	movs	r0, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	1cfb      	adds	r3, r7, #3
 8004ef0:	1c22      	adds	r2, r4, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	1cbb      	adds	r3, r7, #2
 8004ef6:	1c02      	adds	r2, r0, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	1c7b      	adds	r3, r7, #1
 8004efc:	1c0a      	adds	r2, r1, #0
 8004efe:	701a      	strb	r2, [r3, #0]
	//Angle in radians between horizontal axis and left laser (clockwise)
	const float angle_left = deg2rad((float)(left_index) * 30.f);
 8004f00:	1cfb      	adds	r3, r7, #3
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7fc f9a3 	bl	8001250 <__aeabi_ui2f>
 8004f0a:	1c03      	adds	r3, r0, #0
 8004f0c:	49d6      	ldr	r1, [pc, #856]	; (8005268 <on_multiple_detections+0x388>)
 8004f0e:	1c18      	adds	r0, r3, #0
 8004f10:	f7fb fe28 	bl	8000b64 <__aeabi_fmul>
 8004f14:	1c03      	adds	r3, r0, #0
 8004f16:	1c18      	adds	r0, r3, #0
 8004f18:	f7ff fd72 	bl	8004a00 <deg2rad>
 8004f1c:	1c03      	adds	r3, r0, #0
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48

	//Angle in radians between horizontal axis and right laser (counter clockwise)
	const float angle_right = deg2rad((float)(6 - right_index) * 30.f);
 8004f20:	1cbb      	adds	r3, r7, #2
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2206      	movs	r2, #6
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7fc f93f 	bl	80011ac <__aeabi_i2f>
 8004f2e:	1c03      	adds	r3, r0, #0
 8004f30:	49cd      	ldr	r1, [pc, #820]	; (8005268 <on_multiple_detections+0x388>)
 8004f32:	1c18      	adds	r0, r3, #0
 8004f34:	f7fb fe16 	bl	8000b64 <__aeabi_fmul>
 8004f38:	1c03      	adds	r3, r0, #0
 8004f3a:	1c18      	adds	r0, r3, #0
 8004f3c:	f7ff fd60 	bl	8004a00 <deg2rad>
 8004f40:	1c03      	adds	r3, r0, #0
 8004f42:	647b      	str	r3, [r7, #68]	; 0x44

	//Left laser intersection with wall coordinates
	const float x_left = (float)lasers[left_index] * -cosf(angle_left);
 8004f44:	1cfb      	adds	r3, r7, #3
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	18d3      	adds	r3, r2, r3
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7fc f97d 	bl	8001250 <__aeabi_ui2f>
 8004f56:	1c04      	adds	r4, r0, #0
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	1c18      	adds	r0, r3, #0
 8004f5c:	f005 fb94 	bl	800a688 <cosf>
 8004f60:	1c02      	adds	r2, r0, #0
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	4053      	eors	r3, r2
 8004f68:	1c19      	adds	r1, r3, #0
 8004f6a:	1c20      	adds	r0, r4, #0
 8004f6c:	f7fb fdfa 	bl	8000b64 <__aeabi_fmul>
 8004f70:	1c03      	adds	r3, r0, #0
 8004f72:	643b      	str	r3, [r7, #64]	; 0x40
	const float y_left = (float)lasers[left_index] * sinf(angle_left);
 8004f74:	1cfb      	adds	r3, r7, #3
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7fc f965 	bl	8001250 <__aeabi_ui2f>
 8004f86:	1c04      	adds	r4, r0, #0
 8004f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8a:	1c18      	adds	r0, r3, #0
 8004f8c:	f005 fbb4 	bl	800a6f8 <sinf>
 8004f90:	1c03      	adds	r3, r0, #0
 8004f92:	1c19      	adds	r1, r3, #0
 8004f94:	1c20      	adds	r0, r4, #0
 8004f96:	f7fb fde5 	bl	8000b64 <__aeabi_fmul>
 8004f9a:	1c03      	adds	r3, r0, #0
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Right laser intersection with wall coordinates
	const float x_right = (float)lasers[right_index] * cosf(angle_right);
 8004f9e:	1cbb      	adds	r3, r7, #2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	18d3      	adds	r3, r2, r3
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fc f950 	bl	8001250 <__aeabi_ui2f>
 8004fb0:	1c04      	adds	r4, r0, #0
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb4:	1c18      	adds	r0, r3, #0
 8004fb6:	f005 fb67 	bl	800a688 <cosf>
 8004fba:	1c03      	adds	r3, r0, #0
 8004fbc:	1c19      	adds	r1, r3, #0
 8004fbe:	1c20      	adds	r0, r4, #0
 8004fc0:	f7fb fdd0 	bl	8000b64 <__aeabi_fmul>
 8004fc4:	1c03      	adds	r3, r0, #0
 8004fc6:	63bb      	str	r3, [r7, #56]	; 0x38
	const float y_right = (float)lasers[right_index] * sinf(angle_right);
 8004fc8:	1cbb      	adds	r3, r7, #2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	18d3      	adds	r3, r2, r3
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fc f93b 	bl	8001250 <__aeabi_ui2f>
 8004fda:	1c04      	adds	r4, r0, #0
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fde:	1c18      	adds	r0, r3, #0
 8004fe0:	f005 fb8a 	bl	800a6f8 <sinf>
 8004fe4:	1c03      	adds	r3, r0, #0
 8004fe6:	1c19      	adds	r1, r3, #0
 8004fe8:	1c20      	adds	r0, r4, #0
 8004fea:	f7fb fdbb 	bl	8000b64 <__aeabi_fmul>
 8004fee:	1c03      	adds	r3, r0, #0
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34

	//Slope of the wall
	const float slope = (y_right - y_left) / (x_right - x_left);
 8004ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ff6:	f7fb ff03 	bl	8000e00 <__aeabi_fsub>
 8004ffa:	1c03      	adds	r3, r0, #0
 8004ffc:	1c1c      	adds	r4, r3, #0
 8004ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005002:	f7fb fefd 	bl	8000e00 <__aeabi_fsub>
 8005006:	1c03      	adds	r3, r0, #0
 8005008:	1c19      	adds	r1, r3, #0
 800500a:	1c20      	adds	r0, r4, #0
 800500c:	f7fb fbe0 	bl	80007d0 <__aeabi_fdiv>
 8005010:	1c03      	adds	r3, r0, #0
 8005012:	633b      	str	r3, [r7, #48]	; 0x30

	//Convert slope to angle (between horizontal axis and wall)
	const float angle = atanf(slope);
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	1c18      	adds	r0, r3, #0
 8005018:	f005 fa26 	bl	800a468 <atanf>
 800501c:	1c03      	adds	r3, r0, #0
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Calculate points on the imaginary wall which has been offset by TARGET_WALL_DISTANCE
	float x1, y1;

	const float y_intercept_wall = y_left - slope * x_left;
 8005020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005024:	f7fb fd9e 	bl	8000b64 <__aeabi_fmul>
 8005028:	1c03      	adds	r3, r0, #0
 800502a:	1c19      	adds	r1, r3, #0
 800502c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800502e:	f7fb fee7 	bl	8000e00 <__aeabi_fsub>
 8005032:	1c03      	adds	r3, r0, #0
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28

	if (y_intercept_wall > 0.f) //If slope is positive add positive offset to x
 8005036:	2100      	movs	r1, #0
 8005038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503a:	f7fb f9fd 	bl	8000438 <__aeabi_fcmpgt>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d02c      	beq.n	800509c <on_multiple_detections+0x1bc>
	{
		x1 = x_left + (float)target_wall_distance * sinf(angle);
 8005042:	4b8a      	ldr	r3, [pc, #552]	; (800526c <on_multiple_detections+0x38c>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	0018      	movs	r0, r3
 8005048:	f7fc f902 	bl	8001250 <__aeabi_ui2f>
 800504c:	1c04      	adds	r4, r0, #0
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	1c18      	adds	r0, r3, #0
 8005052:	f005 fb51 	bl	800a6f8 <sinf>
 8005056:	1c03      	adds	r3, r0, #0
 8005058:	1c19      	adds	r1, r3, #0
 800505a:	1c20      	adds	r0, r4, #0
 800505c:	f7fb fd82 	bl	8000b64 <__aeabi_fmul>
 8005060:	1c03      	adds	r3, r0, #0
 8005062:	1c19      	adds	r1, r3, #0
 8005064:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005066:	f7fb fa13 	bl	8000490 <__aeabi_fadd>
 800506a:	1c03      	adds	r3, r0, #0
 800506c:	657b      	str	r3, [r7, #84]	; 0x54
		y1 = y_left - (float)target_wall_distance * cosf(angle);
 800506e:	4b7f      	ldr	r3, [pc, #508]	; (800526c <on_multiple_detections+0x38c>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	0018      	movs	r0, r3
 8005074:	f7fc f8ec 	bl	8001250 <__aeabi_ui2f>
 8005078:	1c04      	adds	r4, r0, #0
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	1c18      	adds	r0, r3, #0
 800507e:	f005 fb03 	bl	800a688 <cosf>
 8005082:	1c03      	adds	r3, r0, #0
 8005084:	1c19      	adds	r1, r3, #0
 8005086:	1c20      	adds	r0, r4, #0
 8005088:	f7fb fd6c 	bl	8000b64 <__aeabi_fmul>
 800508c:	1c03      	adds	r3, r0, #0
 800508e:	1c19      	adds	r1, r3, #0
 8005090:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005092:	f7fb feb5 	bl	8000e00 <__aeabi_fsub>
 8005096:	1c03      	adds	r3, r0, #0
 8005098:	653b      	str	r3, [r7, #80]	; 0x50
 800509a:	e02b      	b.n	80050f4 <on_multiple_detections+0x214>
	}
	else //If slope is negative add negative offset to x
	{
		x1 = x_left - (float)target_wall_distance * sinf(angle);
 800509c:	4b73      	ldr	r3, [pc, #460]	; (800526c <on_multiple_detections+0x38c>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fc f8d5 	bl	8001250 <__aeabi_ui2f>
 80050a6:	1c04      	adds	r4, r0, #0
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	1c18      	adds	r0, r3, #0
 80050ac:	f005 fb24 	bl	800a6f8 <sinf>
 80050b0:	1c03      	adds	r3, r0, #0
 80050b2:	1c19      	adds	r1, r3, #0
 80050b4:	1c20      	adds	r0, r4, #0
 80050b6:	f7fb fd55 	bl	8000b64 <__aeabi_fmul>
 80050ba:	1c03      	adds	r3, r0, #0
 80050bc:	1c19      	adds	r1, r3, #0
 80050be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80050c0:	f7fb fe9e 	bl	8000e00 <__aeabi_fsub>
 80050c4:	1c03      	adds	r3, r0, #0
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
		y1 = y_left + (float)target_wall_distance * cosf(angle);
 80050c8:	4b68      	ldr	r3, [pc, #416]	; (800526c <on_multiple_detections+0x38c>)
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fc f8bf 	bl	8001250 <__aeabi_ui2f>
 80050d2:	1c04      	adds	r4, r0, #0
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	1c18      	adds	r0, r3, #0
 80050d8:	f005 fad6 	bl	800a688 <cosf>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	1c19      	adds	r1, r3, #0
 80050e0:	1c20      	adds	r0, r4, #0
 80050e2:	f7fb fd3f 	bl	8000b64 <__aeabi_fmul>
 80050e6:	1c03      	adds	r3, r0, #0
 80050e8:	1c19      	adds	r1, r3, #0
 80050ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050ec:	f7fb f9d0 	bl	8000490 <__aeabi_fadd>
 80050f0:	1c03      	adds	r3, r0, #0
 80050f2:	653b      	str	r3, [r7, #80]	; 0x50
	}

	//Calculate the y intercept of imaginary wall
	const float y_intercept_target = y1 - x1 * slope;
 80050f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050f8:	f7fb fd34 	bl	8000b64 <__aeabi_fmul>
 80050fc:	1c03      	adds	r3, r0, #0
 80050fe:	1c19      	adds	r1, r3, #0
 8005100:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005102:	f7fb fe7d 	bl	8000e00 <__aeabi_fsub>
 8005106:	1c03      	adds	r3, r0, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24

	//Calculate intersection between robot's circle and imaginary wall
	const float f = 1 + slope * slope;
 800510a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510e:	f7fb fd29 	bl	8000b64 <__aeabi_fmul>
 8005112:	1c03      	adds	r3, r0, #0
 8005114:	21fe      	movs	r1, #254	; 0xfe
 8005116:	0589      	lsls	r1, r1, #22
 8005118:	1c18      	adds	r0, r3, #0
 800511a:	f7fb f9b9 	bl	8000490 <__aeabi_fadd>
 800511e:	1c03      	adds	r3, r0, #0
 8005120:	623b      	str	r3, [r7, #32]
	const float g = 2 * slope * y_intercept_target;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	1c19      	adds	r1, r3, #0
 8005126:	1c18      	adds	r0, r3, #0
 8005128:	f7fb f9b2 	bl	8000490 <__aeabi_fadd>
 800512c:	1c03      	adds	r3, r0, #0
 800512e:	1c19      	adds	r1, r3, #0
 8005130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005132:	f7fb fd17 	bl	8000b64 <__aeabi_fmul>
 8005136:	1c03      	adds	r3, r0, #0
 8005138:	61fb      	str	r3, [r7, #28]
	const float h = y_intercept_target * y_intercept_target - (float)target_circle_radius * (float)target_circle_radius;
 800513a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800513c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513e:	f7fb fd11 	bl	8000b64 <__aeabi_fmul>
 8005142:	1c03      	adds	r3, r0, #0
 8005144:	1c1d      	adds	r5, r3, #0
 8005146:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <on_multiple_detections+0x390>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	0018      	movs	r0, r3
 800514c:	f7fc f880 	bl	8001250 <__aeabi_ui2f>
 8005150:	1c04      	adds	r4, r0, #0
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <on_multiple_detections+0x390>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	0018      	movs	r0, r3
 8005158:	f7fc f87a 	bl	8001250 <__aeabi_ui2f>
 800515c:	1c03      	adds	r3, r0, #0
 800515e:	1c19      	adds	r1, r3, #0
 8005160:	1c20      	adds	r0, r4, #0
 8005162:	f7fb fcff 	bl	8000b64 <__aeabi_fmul>
 8005166:	1c03      	adds	r3, r0, #0
 8005168:	1c19      	adds	r1, r3, #0
 800516a:	1c28      	adds	r0, r5, #0
 800516c:	f7fb fe48 	bl	8000e00 <__aeabi_fsub>
 8005170:	1c03      	adds	r3, r0, #0
 8005172:	61bb      	str	r3, [r7, #24]

	float D = g * g - 4 * f * h;
 8005174:	69f9      	ldr	r1, [r7, #28]
 8005176:	69f8      	ldr	r0, [r7, #28]
 8005178:	f7fb fcf4 	bl	8000b64 <__aeabi_fmul>
 800517c:	1c03      	adds	r3, r0, #0
 800517e:	1c1c      	adds	r4, r3, #0
 8005180:	2181      	movs	r1, #129	; 0x81
 8005182:	05c9      	lsls	r1, r1, #23
 8005184:	6a38      	ldr	r0, [r7, #32]
 8005186:	f7fb fced 	bl	8000b64 <__aeabi_fmul>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f7fb fce8 	bl	8000b64 <__aeabi_fmul>
 8005194:	1c03      	adds	r3, r0, #0
 8005196:	1c19      	adds	r1, r3, #0
 8005198:	1c20      	adds	r0, r4, #0
 800519a:	f7fb fe31 	bl	8000e00 <__aeabi_fsub>
 800519e:	1c03      	adds	r3, r0, #0
 80051a0:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (D < 0.f)
 80051a2:	2100      	movs	r1, #0
 80051a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051a6:	f7fb f933 	bl	8000410 <__aeabi_fcmplt>
 80051aa:	1e03      	subs	r3, r0, #0
 80051ac:	d002      	beq.n	80051b4 <on_multiple_detections+0x2d4>
		D = 0.f;
 80051ae:	2300      	movs	r3, #0
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b2:	e005      	b.n	80051c0 <on_multiple_detections+0x2e0>
	else
		D = sqrtf(D);
 80051b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b6:	1c18      	adds	r0, r3, #0
 80051b8:	f005 f939 	bl	800a42e <sqrtf>
 80051bc:	1c03      	adds	r3, r0, #0
 80051be:	64fb      	str	r3, [r7, #76]	; 0x4c

	const float target_x1 = (-g + D) / 2.f / f;
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051c4:	f7fb fe1c 	bl	8000e00 <__aeabi_fsub>
 80051c8:	1c03      	adds	r3, r0, #0
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	05c9      	lsls	r1, r1, #23
 80051ce:	1c18      	adds	r0, r3, #0
 80051d0:	f7fb fafe 	bl	80007d0 <__aeabi_fdiv>
 80051d4:	1c03      	adds	r3, r0, #0
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	1c18      	adds	r0, r3, #0
 80051da:	f7fb faf9 	bl	80007d0 <__aeabi_fdiv>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	617b      	str	r3, [r7, #20]
	const float target_x2 = (-g - D) / 2.f / f;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	0612      	lsls	r2, r2, #24
 80051e8:	4053      	eors	r3, r2
 80051ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051ec:	1c18      	adds	r0, r3, #0
 80051ee:	f7fb fe07 	bl	8000e00 <__aeabi_fsub>
 80051f2:	1c03      	adds	r3, r0, #0
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	05c9      	lsls	r1, r1, #23
 80051f8:	1c18      	adds	r0, r3, #0
 80051fa:	f7fb fae9 	bl	80007d0 <__aeabi_fdiv>
 80051fe:	1c03      	adds	r3, r0, #0
 8005200:	6a39      	ldr	r1, [r7, #32]
 8005202:	1c18      	adds	r0, r3, #0
 8005204:	f7fb fae4 	bl	80007d0 <__aeabi_fdiv>
 8005208:	1c03      	adds	r3, r0, #0
 800520a:	613b      	str	r3, [r7, #16]

	//Pick which point is best to follow
	const float mapped = select_target(target_x1, target_x2, y_left - x_left * slope, followed_wall);
 800520c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005210:	f7fb fca8 	bl	8000b64 <__aeabi_fmul>
 8005214:	1c03      	adds	r3, r0, #0
 8005216:	1c19      	adds	r1, r3, #0
 8005218:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800521a:	f7fb fdf1 	bl	8000e00 <__aeabi_fsub>
 800521e:	1c03      	adds	r3, r0, #0
 8005220:	1c1a      	adds	r2, r3, #0
 8005222:	1c7b      	adds	r3, r7, #1
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	6939      	ldr	r1, [r7, #16]
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f7ff fc45 	bl	8004ab8 <select_target>
 800522e:	1c03      	adds	r3, r0, #0
 8005230:	60fb      	str	r3, [r7, #12]

	//Scale mapped value by steering_sensitivity to increase sensitivity and clamp to [-100;100] range
	servo_set((int8_t)clampf(mapped * steering_sensitivity, -100.f, 100.f));
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <on_multiple_detections+0x394>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	1c18      	adds	r0, r3, #0
 800523a:	f7fb fc93 	bl	8000b64 <__aeabi_fmul>
 800523e:	1c03      	adds	r3, r0, #0
 8005240:	1c18      	adds	r0, r3, #0
 8005242:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <on_multiple_detections+0x398>)
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <on_multiple_detections+0x39c>)
 8005246:	1c19      	adds	r1, r3, #0
 8005248:	f7ff fc1b 	bl	8004a82 <clampf>
 800524c:	1c03      	adds	r3, r0, #0
 800524e:	1c18      	adds	r0, r3, #0
 8005250:	f7fb ff8c 	bl	800116c <__aeabi_f2iz>
 8005254:	0003      	movs	r3, r0
 8005256:	b25b      	sxtb	r3, r3
 8005258:	0018      	movs	r0, r3
 800525a:	f7fe fff1 	bl	8004240 <servo_set>
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b016      	add	sp, #88	; 0x58
 8005264:	bdb0      	pop	{r4, r5, r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	41f00000 	.word	0x41f00000
 800526c:	200003e2 	.word	0x200003e2
 8005270:	200003e4 	.word	0x200003e4
 8005274:	200003e8 	.word	0x200003e8
 8005278:	42c80000 	.word	0x42c80000
 800527c:	c2c80000 	.word	0xc2c80000

08005280 <on_escape>:

void on_escape(const uint8_t followed_wall, const int8_t boost)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	0002      	movs	r2, r0
 8005288:	1dfb      	adds	r3, r7, #7
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	1dbb      	adds	r3, r7, #6
 800528e:	1c0a      	adds	r2, r1, #0
 8005290:	701a      	strb	r2, [r3, #0]
	if (followed_wall == 0)
 8005292:	1dfb      	adds	r3, r7, #7
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <on_escape+0x26>
	{
		servo_set(-100);
 800529a:	2364      	movs	r3, #100	; 0x64
 800529c:	425b      	negs	r3, r3
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fe ffce 	bl	8004240 <servo_set>
 80052a4:	e002      	b.n	80052ac <on_escape+0x2c>
	}
	else
	{
		servo_set(100);
 80052a6:	2064      	movs	r0, #100	; 0x64
 80052a8:	f7fe ffca 	bl	8004240 <servo_set>
	}

	motor_set_speed(-auto_speed, boost);
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <on_escape+0x50>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	425b      	negs	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	b25a      	sxtb	r2, r3
 80052ba:	1dbb      	adds	r3, r7, #6
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	0019      	movs	r1, r3
 80052c2:	0010      	movs	r0, r2
 80052c4:	f7fe fdf6 	bl	8003eb4 <motor_set_speed>
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200003dd 	.word	0x200003dd

080052d4 <auto_controls>:

void auto_controls(const uint16_t* lasers,
		const uint8_t followed_wall,
		const int8_t boost)
{
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	0008      	movs	r0, r1
 80052de:	0011      	movs	r1, r2
 80052e0:	1cfb      	adds	r3, r7, #3
 80052e2:	1c02      	adds	r2, r0, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	1cbb      	adds	r3, r7, #2
 80052e8:	1c0a      	adds	r2, r1, #0
 80052ea:	701a      	strb	r2, [r3, #0]
	if (need_escaping(lasers, 1.f))
 80052ec:	22fe      	movs	r2, #254	; 0xfe
 80052ee:	0592      	lsls	r2, r2, #22
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1c11      	adds	r1, r2, #0
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff fd47 	bl	8004d88 <need_escaping>
 80052fa:	1e03      	subs	r3, r0, #0
 80052fc:	d00c      	beq.n	8005318 <auto_controls+0x44>
	{
		escaping = 1;
 80052fe:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <auto_controls+0x100>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
		on_escape(followed_wall, boost);
 8005304:	1cbb      	adds	r3, r7, #2
 8005306:	2200      	movs	r2, #0
 8005308:	569a      	ldrsb	r2, [r3, r2]
 800530a:	1cfb      	adds	r3, r7, #3
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	0011      	movs	r1, r2
 8005310:	0018      	movs	r0, r3
 8005312:	f7ff ffb5 	bl	8005280 <on_escape>
		return;
 8005316:	e05a      	b.n	80053ce <auto_controls+0xfa>
	}

	if (need_escaping(lasers, 1.5f) && escaping == 1)
 8005318:	22ff      	movs	r2, #255	; 0xff
 800531a:	0592      	lsls	r2, r2, #22
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1c11      	adds	r1, r2, #0
 8005320:	0018      	movs	r0, r3
 8005322:	f7ff fd31 	bl	8004d88 <need_escaping>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d00d      	beq.n	8005346 <auto_controls+0x72>
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <auto_controls+0x100>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d109      	bne.n	8005346 <auto_controls+0x72>
	{
		on_escape(followed_wall, boost);
 8005332:	1cbb      	adds	r3, r7, #2
 8005334:	2200      	movs	r2, #0
 8005336:	569a      	ldrsb	r2, [r3, r2]
 8005338:	1cfb      	adds	r3, r7, #3
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	0011      	movs	r1, r2
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff ff9e 	bl	8005280 <on_escape>
		return;
 8005344:	e043      	b.n	80053ce <auto_controls+0xfa>
	}
	else
	{
		escaping = 0;
 8005346:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <auto_controls+0x100>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
	}

	motor_set_speed(auto_speed, boost);
 800534c:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <auto_controls+0x104>)
 800534e:	2200      	movs	r2, #0
 8005350:	569a      	ldrsb	r2, [r3, r2]
 8005352:	1cbb      	adds	r3, r7, #2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b25b      	sxtb	r3, r3
 8005358:	0019      	movs	r1, r3
 800535a:	0010      	movs	r0, r2
 800535c:	f7fe fdaa 	bl	8003eb4 <motor_set_speed>

	//If no walls detected go in followed wall direction
	if (any_walls_detected(lasers, followed_wall) == 0)
 8005360:	1cfb      	adds	r3, r7, #3
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0011      	movs	r1, r2
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff fcb9 	bl	8004ce0 <any_walls_detected>
 800536e:	1e03      	subs	r3, r0, #0
 8005370:	d10d      	bne.n	800538e <auto_controls+0xba>
	{
		if (followed_wall == 0)
 8005372:	1cfb      	adds	r3, r7, #3
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <auto_controls+0xb2>
		{
			servo_set(-75);
 800537a:	234b      	movs	r3, #75	; 0x4b
 800537c:	425b      	negs	r3, r3
 800537e:	0018      	movs	r0, r3
 8005380:	f7fe ff5e 	bl	8004240 <servo_set>
		{
			servo_set(75);
		}


		return;
 8005384:	e023      	b.n	80053ce <auto_controls+0xfa>
			servo_set(75);
 8005386:	204b      	movs	r0, #75	; 0x4b
 8005388:	f7fe ff5a 	bl	8004240 <servo_set>
		return;
 800538c:	e01f      	b.n	80053ce <auto_controls+0xfa>
	}

	//Find widest pair
	uint8_t left_index;
	uint8_t right_index;
	widest_laser_pair(lasers, &left_index, &right_index, followed_wall);
 800538e:	1cfb      	adds	r3, r7, #3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	240e      	movs	r4, #14
 8005394:	193a      	adds	r2, r7, r4
 8005396:	250f      	movs	r5, #15
 8005398:	1979      	adds	r1, r7, r5
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fd2c 	bl	8004df8 <widest_laser_pair>

	if (left_index == right_index) // Only one laser detected a wall
 80053a0:	197b      	adds	r3, r7, r5
 80053a2:	781a      	ldrb	r2, [r3, #0]
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d105      	bne.n	80053b8 <auto_controls+0xe4>
	{
		on_single_detection(right_index);
 80053ac:	193b      	adds	r3, r7, r4
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff fd6d 	bl	8004e90 <on_single_detection>
 80053b6:	e00a      	b.n	80053ce <auto_controls+0xfa>
	}
	else //Multiple lasers detected a wall
	{
		on_multiple_detections(lasers, left_index, right_index, followed_wall);
 80053b8:	230f      	movs	r3, #15
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	230e      	movs	r3, #14
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	1cfb      	adds	r3, r7, #3
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fd89 	bl	8004ee0 <on_multiple_detections>
	}
}
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b004      	add	sp, #16
 80053d2:	bdb0      	pop	{r4, r5, r7, pc}
 80053d4:	200003dc 	.word	0x200003dc
 80053d8:	200003dd 	.word	0x200003dd

080053dc <auto_controls_init>:
		const uint16_t target,
		const uint16_t radius,
		const uint8_t laser_amount,
		const float servo_sensitivity
)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	0005      	movs	r5, r0
 80053e4:	000c      	movs	r4, r1
 80053e6:	0010      	movs	r0, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	1dfb      	adds	r3, r7, #7
 80053ec:	1c2a      	adds	r2, r5, #0
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	1c22      	adds	r2, r4, #0
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	1cbb      	adds	r3, r7, #2
 80053f8:	1c02      	adds	r2, r0, #0
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	003b      	movs	r3, r7
 80053fe:	1c0a      	adds	r2, r1, #0
 8005400:	801a      	strh	r2, [r3, #0]
	laser_count = laser_amount;
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <auto_controls_init+0x68>)
 8005404:	221c      	movs	r2, #28
 8005406:	18ba      	adds	r2, r7, r2
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	701a      	strb	r2, [r3, #0]
	max_laser_distance = max_laser;
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <auto_controls_init+0x6c>)
 800540e:	1d3a      	adds	r2, r7, #4
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	801a      	strh	r2, [r3, #0]
	min_laser_distance = min_laser;
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <auto_controls_init+0x70>)
 8005416:	1cba      	adds	r2, r7, #2
 8005418:	8812      	ldrh	r2, [r2, #0]
 800541a:	801a      	strh	r2, [r3, #0]
	target_wall_distance = target;
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <auto_controls_init+0x74>)
 800541e:	003a      	movs	r2, r7
 8005420:	8812      	ldrh	r2, [r2, #0]
 8005422:	801a      	strh	r2, [r3, #0]
	target_circle_radius = radius;
 8005424:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <auto_controls_init+0x78>)
 8005426:	2318      	movs	r3, #24
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	8013      	strh	r3, [r2, #0]
	auto_speed = speed;
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <auto_controls_init+0x7c>)
 8005430:	1dfa      	adds	r2, r7, #7
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	701a      	strb	r2, [r3, #0]
	steering_sensitivity = servo_sensitivity;
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <auto_controls_init+0x80>)
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	601a      	str	r2, [r3, #0]
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bdb0      	pop	{r4, r5, r7, pc}
 8005444:	200003e6 	.word	0x200003e6
 8005448:	200003de 	.word	0x200003de
 800544c:	200003e0 	.word	0x200003e0
 8005450:	200003e2 	.word	0x200003e2
 8005454:	200003e4 	.word	0x200003e4
 8005458:	200003dd 	.word	0x200003dd
 800545c:	200003e8 	.word	0x200003e8

08005460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005460:	480d      	ldr	r0, [pc, #52]	; (8005498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005462:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005464:	f7fe fff0 	bl	8004448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005468:	480c      	ldr	r0, [pc, #48]	; (800549c <LoopForever+0x6>)
  ldr r1, =_edata
 800546a:	490d      	ldr	r1, [pc, #52]	; (80054a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800546c:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <LoopForever+0xe>)
  movs r3, #0
 800546e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005470:	e002      	b.n	8005478 <LoopCopyDataInit>

08005472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005476:	3304      	adds	r3, #4

08005478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800547a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800547c:	d3f9      	bcc.n	8005472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800547e:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005480:	4c0a      	ldr	r4, [pc, #40]	; (80054ac <LoopForever+0x16>)
  movs r3, #0
 8005482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005484:	e001      	b.n	800548a <LoopFillZerobss>

08005486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005488:	3204      	adds	r2, #4

0800548a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800548a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800548c:	d3fb      	bcc.n	8005486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800548e:	f004 ffa1 	bl	800a3d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005492:	f7fe fa73 	bl	800397c <main>

08005496 <LoopForever>:

LoopForever:
  b LoopForever
 8005496:	e7fe      	b.n	8005496 <LoopForever>
  ldr   r0, =_estack
 8005498:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800549c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80054a4:	0800b8e0 	.word	0x0800b8e0
  ldr r2, =_sbss
 80054a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80054ac:	20000528 	.word	0x20000528

080054b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054b0:	e7fe      	b.n	80054b0 <ADC1_IRQHandler>
	...

080054b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054ba:	1dfb      	adds	r3, r7, #7
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_Init+0x3c>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_Init+0x3c>)
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	0049      	lsls	r1, r1, #1
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054ce:	2003      	movs	r0, #3
 80054d0:	f000 f810 	bl	80054f4 <HAL_InitTick>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e001      	b.n	80054e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80054e0:	f7fe ff5e 	bl	80043a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054e4:	1dfb      	adds	r3, r7, #7
 80054e6:	781b      	ldrb	r3, [r3, #0]
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40022000 	.word	0x40022000

080054f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054fc:	230f      	movs	r3, #15
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005504:	4b1d      	ldr	r3, [pc, #116]	; (800557c <HAL_InitTick+0x88>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d02b      	beq.n	8005564 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_InitTick+0x8c>)
 800550e:	681c      	ldr	r4, [r3, #0]
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_InitTick+0x88>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	0019      	movs	r1, r3
 8005516:	23fa      	movs	r3, #250	; 0xfa
 8005518:	0098      	lsls	r0, r3, #2
 800551a:	f7fa fdf1 	bl	8000100 <__udivsi3>
 800551e:	0003      	movs	r3, r0
 8005520:	0019      	movs	r1, r3
 8005522:	0020      	movs	r0, r4
 8005524:	f7fa fdec 	bl	8000100 <__udivsi3>
 8005528:	0003      	movs	r3, r0
 800552a:	0018      	movs	r0, r3
 800552c:	f000 f93d 	bl	80057aa <HAL_SYSTICK_Config>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d112      	bne.n	800555a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d80a      	bhi.n	8005550 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	2301      	movs	r3, #1
 800553e:	425b      	negs	r3, r3
 8005540:	2200      	movs	r2, #0
 8005542:	0018      	movs	r0, r3
 8005544:	f000 f90c 	bl	8005760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <HAL_InitTick+0x90>)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e00d      	b.n	800556c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005550:	230f      	movs	r3, #15
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e008      	b.n	800556c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800555a:	230f      	movs	r3, #15
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e003      	b.n	800556c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005564:	230f      	movs	r3, #15
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	2201      	movs	r2, #1
 800556a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800556c:	230f      	movs	r3, #15
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	781b      	ldrb	r3, [r3, #0]
}
 8005572:	0018      	movs	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	b005      	add	sp, #20
 8005578:	bd90      	pop	{r4, r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	2000000c 	.word	0x2000000c
 8005580:	20000004 	.word	0x20000004
 8005584:	20000008 	.word	0x20000008

08005588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_IncTick+0x1c>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	001a      	movs	r2, r3
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <HAL_IncTick+0x20>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	18d2      	adds	r2, r2, r3
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_IncTick+0x20>)
 800559a:	601a      	str	r2, [r3, #0]
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	2000000c 	.word	0x2000000c
 80055a8:	200003ec 	.word	0x200003ec

080055ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  return uwTick;
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <HAL_GetTick+0x10>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	200003ec 	.word	0x200003ec

080055c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff fff0 	bl	80055ac <HAL_GetTick>
 80055cc:	0003      	movs	r3, r0
 80055ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	d005      	beq.n	80055e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_Delay+0x44>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	001a      	movs	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	f7ff ffe0 	bl	80055ac <HAL_GetTick>
 80055ec:	0002      	movs	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d8f7      	bhi.n	80055e8 <HAL_Delay+0x28>
  {
  }
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	2000000c 	.word	0x2000000c

08005608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	0002      	movs	r2, r0
 8005610:	1dfb      	adds	r3, r7, #7
 8005612:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005614:	1dfb      	adds	r3, r7, #7
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b7f      	cmp	r3, #127	; 0x7f
 800561a:	d809      	bhi.n	8005630 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561c:	1dfb      	adds	r3, r7, #7
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	001a      	movs	r2, r3
 8005622:	231f      	movs	r3, #31
 8005624:	401a      	ands	r2, r3
 8005626:	4b04      	ldr	r3, [pc, #16]	; (8005638 <__NVIC_EnableIRQ+0x30>)
 8005628:	2101      	movs	r1, #1
 800562a:	4091      	lsls	r1, r2
 800562c:	000a      	movs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000e100 	.word	0xe000e100

0800563c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	0002      	movs	r2, r0
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	1dfb      	adds	r3, r7, #7
 8005648:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800564a:	1dfb      	adds	r3, r7, #7
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b7f      	cmp	r3, #127	; 0x7f
 8005650:	d828      	bhi.n	80056a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005652:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <__NVIC_SetPriority+0xd4>)
 8005654:	1dfb      	adds	r3, r7, #7
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b25b      	sxtb	r3, r3
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	33c0      	adds	r3, #192	; 0xc0
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	589b      	ldr	r3, [r3, r2]
 8005662:	1dfa      	adds	r2, r7, #7
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	0011      	movs	r1, r2
 8005668:	2203      	movs	r2, #3
 800566a:	400a      	ands	r2, r1
 800566c:	00d2      	lsls	r2, r2, #3
 800566e:	21ff      	movs	r1, #255	; 0xff
 8005670:	4091      	lsls	r1, r2
 8005672:	000a      	movs	r2, r1
 8005674:	43d2      	mvns	r2, r2
 8005676:	401a      	ands	r2, r3
 8005678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	22ff      	movs	r2, #255	; 0xff
 8005680:	401a      	ands	r2, r3
 8005682:	1dfb      	adds	r3, r7, #7
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	0018      	movs	r0, r3
 8005688:	2303      	movs	r3, #3
 800568a:	4003      	ands	r3, r0
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005690:	481f      	ldr	r0, [pc, #124]	; (8005710 <__NVIC_SetPriority+0xd4>)
 8005692:	1dfb      	adds	r3, r7, #7
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b25b      	sxtb	r3, r3
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	430a      	orrs	r2, r1
 800569c:	33c0      	adds	r3, #192	; 0xc0
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80056a2:	e031      	b.n	8005708 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <__NVIC_SetPriority+0xd8>)
 80056a6:	1dfb      	adds	r3, r7, #7
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	0019      	movs	r1, r3
 80056ac:	230f      	movs	r3, #15
 80056ae:	400b      	ands	r3, r1
 80056b0:	3b08      	subs	r3, #8
 80056b2:	089b      	lsrs	r3, r3, #2
 80056b4:	3306      	adds	r3, #6
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	18d3      	adds	r3, r2, r3
 80056ba:	3304      	adds	r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1dfa      	adds	r2, r7, #7
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	0011      	movs	r1, r2
 80056c4:	2203      	movs	r2, #3
 80056c6:	400a      	ands	r2, r1
 80056c8:	00d2      	lsls	r2, r2, #3
 80056ca:	21ff      	movs	r1, #255	; 0xff
 80056cc:	4091      	lsls	r1, r2
 80056ce:	000a      	movs	r2, r1
 80056d0:	43d2      	mvns	r2, r2
 80056d2:	401a      	ands	r2, r3
 80056d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	401a      	ands	r2, r3
 80056de:	1dfb      	adds	r3, r7, #7
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	0018      	movs	r0, r3
 80056e4:	2303      	movs	r3, #3
 80056e6:	4003      	ands	r3, r0
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056ec:	4809      	ldr	r0, [pc, #36]	; (8005714 <__NVIC_SetPriority+0xd8>)
 80056ee:	1dfb      	adds	r3, r7, #7
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	001c      	movs	r4, r3
 80056f4:	230f      	movs	r3, #15
 80056f6:	4023      	ands	r3, r4
 80056f8:	3b08      	subs	r3, #8
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	430a      	orrs	r2, r1
 80056fe:	3306      	adds	r3, #6
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	18c3      	adds	r3, r0, r3
 8005704:	3304      	adds	r3, #4
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b003      	add	sp, #12
 800570e:	bd90      	pop	{r4, r7, pc}
 8005710:	e000e100 	.word	0xe000e100
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	045b      	lsls	r3, r3, #17
 8005728:	429a      	cmp	r2, r3
 800572a:	d301      	bcc.n	8005730 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800572c:	2301      	movs	r3, #1
 800572e:	e010      	b.n	8005752 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <SysTick_Config+0x44>)
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	3a01      	subs	r2, #1
 8005736:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005738:	2301      	movs	r3, #1
 800573a:	425b      	negs	r3, r3
 800573c:	2103      	movs	r1, #3
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff ff7c 	bl	800563c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <SysTick_Config+0x44>)
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800574a:	4b04      	ldr	r3, [pc, #16]	; (800575c <SysTick_Config+0x44>)
 800574c:	2207      	movs	r2, #7
 800574e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005750:	2300      	movs	r3, #0
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b002      	add	sp, #8
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	e000e010 	.word	0xe000e010

08005760 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	210f      	movs	r1, #15
 800576c:	187b      	adds	r3, r7, r1
 800576e:	1c02      	adds	r2, r0, #0
 8005770:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	187b      	adds	r3, r7, r1
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b25b      	sxtb	r3, r3
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f7ff ff5d 	bl	800563c <__NVIC_SetPriority>
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b004      	add	sp, #16
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	0002      	movs	r2, r0
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005796:	1dfb      	adds	r3, r7, #7
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b25b      	sxtb	r3, r3
 800579c:	0018      	movs	r0, r3
 800579e:	f7ff ff33 	bl	8005608 <__NVIC_EnableIRQ>
}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b002      	add	sp, #8
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff ffaf 	bl	8005718 <SysTick_Config>
 80057ba:	0003      	movs	r3, r0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e077      	b.n	80058c6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3d      	ldr	r2, [pc, #244]	; (80058d0 <HAL_DMA_Init+0x10c>)
 80057dc:	4694      	mov	ip, r2
 80057de:	4463      	add	r3, ip
 80057e0:	2114      	movs	r1, #20
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fa fc8c 	bl	8000100 <__udivsi3>
 80057e8:	0003      	movs	r3, r0
 80057ea:	009a      	lsls	r2, r3, #2
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2225      	movs	r2, #37	; 0x25
 80057f4:	2102      	movs	r1, #2
 80057f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4934      	ldr	r1, [pc, #208]	; (80058d4 <HAL_DMA_Init+0x110>)
 8005804:	400a      	ands	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 fa8d 	bl	8005d60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	01db      	lsls	r3, r3, #7
 800584e:	429a      	cmp	r2, r3
 8005850:	d102      	bne.n	8005858 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	213f      	movs	r1, #63	; 0x3f
 8005862:	400a      	ands	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800586e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d011      	beq.n	800589c <HAL_DMA_Init+0xd8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b04      	cmp	r3, #4
 800587e:	d80d      	bhi.n	800589c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 fa98 	bl	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	e008      	b.n	80058ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2225      	movs	r2, #37	; 0x25
 80058b8:	2101      	movs	r1, #1
 80058ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	2100      	movs	r1, #0
 80058c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b002      	add	sp, #8
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	bffdfff8 	.word	0xbffdfff8
 80058d4:	ffff800f 	.word	0xffff800f

080058d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2317      	movs	r3, #23
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2224      	movs	r2, #36	; 0x24
 80058f2:	5c9b      	ldrb	r3, [r3, r2]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_DMA_Start_IT+0x24>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e06f      	b.n	80059dc <HAL_DMA_Start_IT+0x104>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	2101      	movs	r1, #1
 8005902:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2225      	movs	r2, #37	; 0x25
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d157      	bne.n	80059c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2225      	movs	r2, #37	; 0x25
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	438a      	bics	r2, r1
 800592c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f9d3 	bl	8005ce0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	210e      	movs	r1, #14
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	e00f      	b.n	8005974 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2104      	movs	r1, #4
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	210a      	movs	r1, #10
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	025b      	lsls	r3, r3, #9
 800597e:	4013      	ands	r3, r2
 8005980:	d008      	beq.n	8005994 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	0049      	lsls	r1, r1, #1
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	0049      	lsls	r1, r1, #1
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2101      	movs	r1, #1
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e00a      	b.n	80059d6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2224      	movs	r2, #36	; 0x24
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80059ce:	2317      	movs	r3, #23
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80059d6:	2317      	movs	r3, #23
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	781b      	ldrb	r3, [r3, #0]
}
 80059dc:	0018      	movs	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	b006      	add	sp, #24
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e050      	b.n	8005a98 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2225      	movs	r2, #37	; 0x25
 80059fa:	5c9b      	ldrb	r3, [r3, r2]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d008      	beq.n	8005a14 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e041      	b.n	8005a98 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	210e      	movs	r1, #14
 8005a20:	438a      	bics	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	491c      	ldr	r1, [pc, #112]	; (8005aa0 <HAL_DMA_Abort+0xbc>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005a44:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <HAL_DMA_Abort+0xc0>)
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	221c      	movs	r2, #28
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2201      	movs	r2, #1
 8005a52:	409a      	lsls	r2, r3
 8005a54:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <HAL_DMA_Abort+0xc0>)
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <HAL_DMA_Abort+0xbc>)
 8005a78:	400a      	ands	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2225      	movs	r2, #37	; 0x25
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2224      	movs	r2, #36	; 0x24
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	fffffeff 	.word	0xfffffeff
 8005aa4:	40020000 	.word	0x40020000

08005aa8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab0:	210f      	movs	r1, #15
 8005ab2:	187b      	adds	r3, r7, r1
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2225      	movs	r2, #37	; 0x25
 8005abc:	5c9b      	ldrb	r3, [r3, r2]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d006      	beq.n	8005ad2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	2201      	movs	r2, #1
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e049      	b.n	8005b66 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	210e      	movs	r1, #14
 8005ade:	438a      	bics	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2101      	movs	r1, #1
 8005aee:	438a      	bics	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	491d      	ldr	r1, [pc, #116]	; (8005b74 <HAL_DMA_Abort_IT+0xcc>)
 8005afe:	400a      	ands	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <HAL_DMA_Abort_IT+0xd0>)
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	221c      	movs	r2, #28
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2201      	movs	r2, #1
 8005b10:	409a      	lsls	r2, r3
 8005b12:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <HAL_DMA_Abort_IT+0xd0>)
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b34:	490f      	ldr	r1, [pc, #60]	; (8005b74 <HAL_DMA_Abort_IT+0xcc>)
 8005b36:	400a      	ands	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2225      	movs	r2, #37	; 0x25
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	; 0x24
 8005b50:	2100      	movs	r1, #0
 8005b52:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	0010      	movs	r0, r2
 8005b64:	4798      	blx	r3
    }
  }
  return status;
 8005b66:	230f      	movs	r3, #15
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	781b      	ldrb	r3, [r3, #0]
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	fffffeff 	.word	0xfffffeff
 8005b78:	40020000 	.word	0x40020000

08005b7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005b84:	4b55      	ldr	r3, [pc, #340]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	221c      	movs	r2, #28
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	0013      	movs	r3, r2
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x7a>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	4013      	ands	r3, r2
 8005bac:	d023      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d107      	bne.n	8005bca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	438a      	bics	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005bca:	4b44      	ldr	r3, [pc, #272]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	221c      	movs	r2, #28
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	4b40      	ldr	r3, [pc, #256]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d100      	bne.n	8005bea <HAL_DMA_IRQHandler+0x6e>
 8005be8:	e073      	b.n	8005cd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	0010      	movs	r0, r2
 8005bf2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005bf4:	e06d      	b.n	8005cd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	221c      	movs	r2, #28
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2202      	movs	r2, #2
 8005c00:	409a      	lsls	r2, r3
 8005c02:	0013      	movs	r3, r2
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4013      	ands	r3, r2
 8005c08:	d02e      	beq.n	8005c68 <HAL_DMA_IRQHandler+0xec>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d02a      	beq.n	8005c68 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d10b      	bne.n	8005c36 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	210a      	movs	r1, #10
 8005c2a:	438a      	bics	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2225      	movs	r2, #37	; 0x25
 8005c32:	2101      	movs	r1, #1
 8005c34:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005c36:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	221c      	movs	r2, #28
 8005c40:	4013      	ands	r3, r2
 8005c42:	2202      	movs	r2, #2
 8005c44:	409a      	lsls	r2, r3
 8005c46:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	; 0x24
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d03a      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	0010      	movs	r0, r2
 8005c64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005c66:	e034      	b.n	8005cd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	221c      	movs	r2, #28
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2208      	movs	r2, #8
 8005c72:	409a      	lsls	r2, r3
 8005c74:	0013      	movs	r3, r2
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d02b      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x158>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2208      	movs	r2, #8
 8005c80:	4013      	ands	r3, r2
 8005c82:	d027      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	210e      	movs	r1, #14
 8005c90:	438a      	bics	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	221c      	movs	r2, #28
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <HAL_DMA_IRQHandler+0x160>)
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2225      	movs	r2, #37	; 0x25
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	0010      	movs	r0, r2
 8005cd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	46c0      	nop			; (mov r8, r8)
}
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b004      	add	sp, #16
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40020000 	.word	0x40020000

08005ce0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cf6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d08:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <DMA_SetConfig+0x7c>)
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	221c      	movs	r2, #28
 8005d14:	4013      	ands	r3, r2
 8005d16:	2201      	movs	r2, #1
 8005d18:	409a      	lsls	r2, r3
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <DMA_SetConfig+0x7c>)
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d108      	bne.n	8005d42 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d40:	e007      	b.n	8005d52 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b004      	add	sp, #16
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	40020000 	.word	0x40020000

08005d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005d70:	4694      	mov	ip, r2
 8005d72:	4463      	add	r3, ip
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	001a      	movs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	001a      	movs	r2, r3
 8005d82:	23ff      	movs	r3, #255	; 0xff
 8005d84:	4013      	ands	r3, r2
 8005d86:	3b08      	subs	r3, #8
 8005d88:	2114      	movs	r1, #20
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fa f9b8 	bl	8000100 <__udivsi3>
 8005d90:	0003      	movs	r3, r0
 8005d92:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005d98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	221f      	movs	r2, #31
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2201      	movs	r2, #1
 8005da2:	409a      	lsls	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005da8:	46c0      	nop			; (mov r8, r8)
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b004      	add	sp, #16
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	10008200 	.word	0x10008200
 8005db4:	40020880 	.word	0x40020880

08005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	223f      	movs	r2, #63	; 0x3f
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005dce:	4694      	mov	ip, r2
 8005dd0:	4463      	add	r3, ip
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	2203      	movs	r2, #3
 8005de6:	4013      	ands	r3, r2
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b004      	add	sp, #16
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	1000823f 	.word	0x1000823f
 8005dfc:	40020940 	.word	0x40020940

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0e:	e147      	b.n	80060a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4091      	lsls	r1, r2
 8005e1a:	000a      	movs	r2, r1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d100      	bne.n	8005e28 <HAL_GPIO_Init+0x28>
 8005e26:	e138      	b.n	800609a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d005      	beq.n	8005e40 <HAL_GPIO_Init+0x40>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d130      	bne.n	8005ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	0013      	movs	r3, r2
 8005e50:	43da      	mvns	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	409a      	lsls	r2, r3
 8005e62:	0013      	movs	r3, r2
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e76:	2201      	movs	r2, #1
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	0013      	movs	r3, r2
 8005e7e:	43da      	mvns	r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	401a      	ands	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	409a      	lsls	r2, r3
 8005e94:	0013      	movs	r3, r2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d017      	beq.n	8005ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	0013      	movs	r3, r2
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	0013      	movs	r3, r2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d123      	bne.n	8005f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	08da      	lsrs	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3208      	adds	r2, #8
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	58d3      	ldr	r3, [r2, r3]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2207      	movs	r2, #7
 8005efc:	4013      	ands	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	220f      	movs	r2, #15
 8005f02:	409a      	lsls	r2, r3
 8005f04:	0013      	movs	r3, r2
 8005f06:	43da      	mvns	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2107      	movs	r1, #7
 8005f16:	400b      	ands	r3, r1
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	0013      	movs	r3, r2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3208      	adds	r2, #8
 8005f2c:	0092      	lsls	r2, r2, #2
 8005f2e:	6939      	ldr	r1, [r7, #16]
 8005f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	0013      	movs	r3, r2
 8005f42:	43da      	mvns	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	401a      	ands	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	409a      	lsls	r2, r3
 8005f58:	0013      	movs	r3, r2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	23c0      	movs	r3, #192	; 0xc0
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d100      	bne.n	8005f74 <HAL_GPIO_Init+0x174>
 8005f72:	e092      	b.n	800609a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005f74:	4a50      	ldr	r2, [pc, #320]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	089b      	lsrs	r3, r3, #2
 8005f7a:	3318      	adds	r3, #24
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	589b      	ldr	r3, [r3, r2]
 8005f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2203      	movs	r2, #3
 8005f86:	4013      	ands	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	220f      	movs	r2, #15
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	0013      	movs	r3, r2
 8005f90:	43da      	mvns	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	23a0      	movs	r3, #160	; 0xa0
 8005f9c:	05db      	lsls	r3, r3, #23
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x1ca>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a45      	ldr	r2, [pc, #276]	; (80060bc <HAL_GPIO_Init+0x2bc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_GPIO_Init+0x1c6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <HAL_GPIO_Init+0x2c0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_GPIO_Init+0x1c2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a43      	ldr	r2, [pc, #268]	; (80060c4 <HAL_GPIO_Init+0x2c4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_GPIO_Init+0x1be>
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e006      	b.n	8005fcc <HAL_GPIO_Init+0x1cc>
 8005fbe:	2305      	movs	r3, #5
 8005fc0:	e004      	b.n	8005fcc <HAL_GPIO_Init+0x1cc>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e002      	b.n	8005fcc <HAL_GPIO_Init+0x1cc>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <HAL_GPIO_Init+0x1cc>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	2103      	movs	r1, #3
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	00d2      	lsls	r2, r2, #3
 8005fd4:	4093      	lsls	r3, r2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005fdc:	4936      	ldr	r1, [pc, #216]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fea:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	035b      	lsls	r3, r3, #13
 8006002:	4013      	ands	r3, r2
 8006004:	d003      	beq.n	800600e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800600e:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	43da      	mvns	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	039b      	lsls	r3, r3, #14
 800602c:	4013      	ands	r3, r2
 800602e:	d003      	beq.n	8006038 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006038:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800603e:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8006040:	2384      	movs	r3, #132	; 0x84
 8006042:	58d3      	ldr	r3, [r2, r3]
 8006044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	43da      	mvns	r2, r3
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4013      	ands	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	4013      	ands	r3, r2
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006064:	4914      	ldr	r1, [pc, #80]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8006066:	2284      	movs	r2, #132	; 0x84
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800606c:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	58d3      	ldr	r3, [r2, r3]
 8006072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	43da      	mvns	r2, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4013      	ands	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	4013      	ands	r3, r2
 8006088:	d003      	beq.n	8006092 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <HAL_GPIO_Init+0x2b8>)
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	3301      	adds	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	40da      	lsrs	r2, r3
 80060a8:	1e13      	subs	r3, r2, #0
 80060aa:	d000      	beq.n	80060ae <HAL_GPIO_Init+0x2ae>
 80060ac:	e6b0      	b.n	8005e10 <HAL_GPIO_Init+0x10>
  }
}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40021800 	.word	0x40021800
 80060bc:	50000400 	.word	0x50000400
 80060c0:	50000800 	.word	0x50000800
 80060c4:	50000c00 	.word	0x50000c00

080060c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	0008      	movs	r0, r1
 80060d2:	0011      	movs	r1, r2
 80060d4:	1cbb      	adds	r3, r7, #2
 80060d6:	1c02      	adds	r2, r0, #0
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	1c7b      	adds	r3, r7, #1
 80060dc:	1c0a      	adds	r2, r1, #0
 80060de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060e0:	1c7b      	adds	r3, r7, #1
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060e8:	1cbb      	adds	r3, r7, #2
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f0:	e003      	b.n	80060fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f2:	1cbb      	adds	r3, r7, #2
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b002      	add	sp, #8
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e082      	b.n	800621c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2241      	movs	r2, #65	; 0x41
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2240      	movs	r2, #64	; 0x40
 8006126:	2100      	movs	r1, #0
 8006128:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0018      	movs	r0, r3
 800612e:	f7fd f9a3 	bl	8003478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2241      	movs	r2, #65	; 0x41
 8006136:	2124      	movs	r1, #36	; 0x24
 8006138:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	438a      	bics	r2, r1
 8006148:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4934      	ldr	r1, [pc, #208]	; (8006224 <HAL_I2C_Init+0x120>)
 8006154:	400a      	ands	r2, r1
 8006156:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4931      	ldr	r1, [pc, #196]	; (8006228 <HAL_I2C_Init+0x124>)
 8006164:	400a      	ands	r2, r1
 8006166:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d108      	bne.n	8006182 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	0209      	lsls	r1, r1, #8
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	e007      	b.n	8006192 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2184      	movs	r1, #132	; 0x84
 800618c:	0209      	lsls	r1, r1, #8
 800618e:	430a      	orrs	r2, r1
 8006190:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d104      	bne.n	80061a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	491f      	ldr	r1, [pc, #124]	; (800622c <HAL_I2C_Init+0x128>)
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	491a      	ldr	r1, [pc, #104]	; (8006228 <HAL_I2C_Init+0x124>)
 80061c0:	400a      	ands	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69d9      	ldr	r1, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1a      	ldr	r2, [r3, #32]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2101      	movs	r1, #1
 80061fa:	430a      	orrs	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2241      	movs	r2, #65	; 0x41
 8006208:	2120      	movs	r1, #32
 800620a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2242      	movs	r2, #66	; 0x42
 8006216:	2100      	movs	r1, #0
 8006218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	0018      	movs	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}
 8006224:	f0ffffff 	.word	0xf0ffffff
 8006228:	ffff7fff 	.word	0xffff7fff
 800622c:	02008000 	.word	0x02008000

08006230 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b089      	sub	sp, #36	; 0x24
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	0008      	movs	r0, r1
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	0019      	movs	r1, r3
 800623e:	230a      	movs	r3, #10
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	1c02      	adds	r2, r0, #0
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	2308      	movs	r3, #8
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	1c0a      	adds	r2, r1, #0
 800624c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2241      	movs	r2, #65	; 0x41
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	d000      	beq.n	800625c <HAL_I2C_Master_Transmit+0x2c>
 800625a:	e0e7      	b.n	800642c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	5c9b      	ldrb	r3, [r3, r2]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_I2C_Master_Transmit+0x3a>
 8006266:	2302      	movs	r3, #2
 8006268:	e0e1      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2240      	movs	r2, #64	; 0x40
 800626e:	2101      	movs	r1, #1
 8006270:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006272:	f7ff f99b 	bl	80055ac <HAL_GetTick>
 8006276:	0003      	movs	r3, r0
 8006278:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	0219      	lsls	r1, r3, #8
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2319      	movs	r3, #25
 8006286:	2201      	movs	r2, #1
 8006288:	f000 fb96 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 800628c:	1e03      	subs	r3, r0, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2241      	movs	r2, #65	; 0x41
 8006298:	2121      	movs	r1, #33	; 0x21
 800629a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2242      	movs	r2, #66	; 0x42
 80062a0:	2110      	movs	r1, #16
 80062a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2208      	movs	r2, #8
 80062b4:	18ba      	adds	r2, r7, r2
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2bff      	cmp	r3, #255	; 0xff
 80062c8:	d911      	bls.n	80062ee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	22ff      	movs	r2, #255	; 0xff
 80062ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	045c      	lsls	r4, r3, #17
 80062da:	230a      	movs	r3, #10
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	8819      	ldrh	r1, [r3, #0]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	4b55      	ldr	r3, [pc, #340]	; (8006438 <HAL_I2C_Master_Transmit+0x208>)
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	0023      	movs	r3, r4
 80062e8:	f000 fd9a 	bl	8006e20 <I2C_TransferConfig>
 80062ec:	e075      	b.n	80063da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	049c      	lsls	r4, r3, #18
 8006302:	230a      	movs	r3, #10
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	8819      	ldrh	r1, [r3, #0]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <HAL_I2C_Master_Transmit+0x208>)
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	0023      	movs	r3, r4
 8006310:	f000 fd86 	bl	8006e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006314:	e061      	b.n	80063da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 fb8a 	bl	8006a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8006322:	1e03      	subs	r3, r0, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e081      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d03a      	beq.n	80063da <HAL_I2C_Master_Transmit+0x1aa>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	d136      	bne.n	80063da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800636c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	0013      	movs	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	2180      	movs	r1, #128	; 0x80
 800637a:	f000 fb1d 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 800637e:	1e03      	subs	r3, r0, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e053      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	2bff      	cmp	r3, #255	; 0xff
 800638e:	d911      	bls.n	80063b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	22ff      	movs	r2, #255	; 0xff
 8006394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639a:	b2da      	uxtb	r2, r3
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	045c      	lsls	r4, r3, #17
 80063a0:	230a      	movs	r3, #10
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	8819      	ldrh	r1, [r3, #0]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	2300      	movs	r3, #0
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	0023      	movs	r3, r4
 80063ae:	f000 fd37 	bl	8006e20 <I2C_TransferConfig>
 80063b2:	e012      	b.n	80063da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	049c      	lsls	r4, r3, #18
 80063c8:	230a      	movs	r3, #10
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	8819      	ldrh	r1, [r3, #0]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	0023      	movs	r3, r4
 80063d6:	f000 fd23 	bl	8006e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d198      	bne.n	8006316 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 fb62 	bl	8006ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063f0:	1e03      	subs	r3, r0, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e01a      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2220      	movs	r2, #32
 80063fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	490c      	ldr	r1, [pc, #48]	; (800643c <HAL_I2C_Master_Transmit+0x20c>)
 800640c:	400a      	ands	r2, r1
 800640e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2241      	movs	r2, #65	; 0x41
 8006414:	2120      	movs	r1, #32
 8006416:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2242      	movs	r2, #66	; 0x42
 800641c:	2100      	movs	r1, #0
 800641e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2240      	movs	r2, #64	; 0x40
 8006424:	2100      	movs	r1, #0
 8006426:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b007      	add	sp, #28
 8006434:	bd90      	pop	{r4, r7, pc}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	80002000 	.word	0x80002000
 800643c:	fe00e800 	.word	0xfe00e800

08006440 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	0008      	movs	r0, r1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	0019      	movs	r1, r3
 800644e:	230a      	movs	r3, #10
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	1c02      	adds	r2, r0, #0
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	2308      	movs	r3, #8
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	1c0a      	adds	r2, r1, #0
 800645c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2241      	movs	r2, #65	; 0x41
 8006462:	5c9b      	ldrb	r3, [r3, r2]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b20      	cmp	r3, #32
 8006468:	d000      	beq.n	800646c <HAL_I2C_Master_Receive+0x2c>
 800646a:	e0e8      	b.n	800663e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2240      	movs	r2, #64	; 0x40
 8006470:	5c9b      	ldrb	r3, [r3, r2]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_I2C_Master_Receive+0x3a>
 8006476:	2302      	movs	r3, #2
 8006478:	e0e2      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2240      	movs	r2, #64	; 0x40
 800647e:	2101      	movs	r1, #1
 8006480:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006482:	f7ff f893 	bl	80055ac <HAL_GetTick>
 8006486:	0003      	movs	r3, r0
 8006488:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	0219      	lsls	r1, r3, #8
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2319      	movs	r3, #25
 8006496:	2201      	movs	r2, #1
 8006498:	f000 fa8e 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 800649c:	1e03      	subs	r3, r0, #0
 800649e:	d001      	beq.n	80064a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0cd      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2241      	movs	r2, #65	; 0x41
 80064a8:	2122      	movs	r1, #34	; 0x22
 80064aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2242      	movs	r2, #66	; 0x42
 80064b0:	2110      	movs	r1, #16
 80064b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2208      	movs	r2, #8
 80064c4:	18ba      	adds	r2, r7, r2
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	d911      	bls.n	80064fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	22ff      	movs	r2, #255	; 0xff
 80064de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	045c      	lsls	r4, r3, #17
 80064ea:	230a      	movs	r3, #10
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	8819      	ldrh	r1, [r3, #0]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	4b55      	ldr	r3, [pc, #340]	; (8006648 <HAL_I2C_Master_Receive+0x208>)
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	0023      	movs	r3, r4
 80064f8:	f000 fc92 	bl	8006e20 <I2C_TransferConfig>
 80064fc:	e076      	b.n	80065ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	b2da      	uxtb	r2, r3
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	049c      	lsls	r4, r3, #18
 8006512:	230a      	movs	r3, #10
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	8819      	ldrh	r1, [r3, #0]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <HAL_I2C_Master_Receive+0x208>)
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	0023      	movs	r3, r4
 8006520:	f000 fc7e 	bl	8006e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006524:	e062      	b.n	80065ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	0018      	movs	r0, r3
 800652e:	f000 fafd 	bl	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006532:	1e03      	subs	r3, r0, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e082      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d03a      	beq.n	80065ec <HAL_I2C_Master_Receive+0x1ac>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d136      	bne.n	80065ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800657e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	0013      	movs	r3, r2
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	f000 fa14 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 8006590:	1e03      	subs	r3, r0, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e053      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d911      	bls.n	80065c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	045c      	lsls	r4, r3, #17
 80065b2:	230a      	movs	r3, #10
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	8819      	ldrh	r1, [r3, #0]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	0023      	movs	r3, r4
 80065c0:	f000 fc2e 	bl	8006e20 <I2C_TransferConfig>
 80065c4:	e012      	b.n	80065ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	049c      	lsls	r4, r3, #18
 80065da:	230a      	movs	r3, #10
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	8819      	ldrh	r1, [r3, #0]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	2300      	movs	r3, #0
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	0023      	movs	r3, r4
 80065e8:	f000 fc1a 	bl	8006e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d197      	bne.n	8006526 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 fa59 	bl	8006ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006602:	1e03      	subs	r3, r0, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e01a      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2220      	movs	r2, #32
 8006610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	490b      	ldr	r1, [pc, #44]	; (800664c <HAL_I2C_Master_Receive+0x20c>)
 800661e:	400a      	ands	r2, r1
 8006620:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2241      	movs	r2, #65	; 0x41
 8006626:	2120      	movs	r1, #32
 8006628:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2242      	movs	r2, #66	; 0x42
 800662e:	2100      	movs	r1, #0
 8006630:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2240      	movs	r2, #64	; 0x40
 8006636:	2100      	movs	r1, #0
 8006638:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
  }
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b007      	add	sp, #28
 8006646:	bd90      	pop	{r4, r7, pc}
 8006648:	80002400 	.word	0x80002400
 800664c:	fe00e800 	.word	0xfe00e800

08006650 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b089      	sub	sp, #36	; 0x24
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	000c      	movs	r4, r1
 800665a:	0010      	movs	r0, r2
 800665c:	0019      	movs	r1, r3
 800665e:	230a      	movs	r3, #10
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	1c22      	adds	r2, r4, #0
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	2308      	movs	r3, #8
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	1c02      	adds	r2, r0, #0
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	1dbb      	adds	r3, r7, #6
 8006670:	1c0a      	adds	r2, r1, #0
 8006672:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2241      	movs	r2, #65	; 0x41
 8006678:	5c9b      	ldrb	r3, [r3, r2]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b20      	cmp	r3, #32
 800667e:	d000      	beq.n	8006682 <HAL_I2C_Mem_Write+0x32>
 8006680:	e10c      	b.n	800689c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <HAL_I2C_Mem_Write+0x42>
 8006688:	232c      	movs	r3, #44	; 0x2c
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d105      	bne.n	800669e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2280      	movs	r2, #128	; 0x80
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0ff      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2240      	movs	r2, #64	; 0x40
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_I2C_Mem_Write+0x5c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e0f8      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2240      	movs	r2, #64	; 0x40
 80066b0:	2101      	movs	r1, #1
 80066b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066b4:	f7fe ff7a 	bl	80055ac <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	0219      	lsls	r1, r3, #8
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	2319      	movs	r3, #25
 80066c8:	2201      	movs	r2, #1
 80066ca:	f000 f975 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 80066ce:	1e03      	subs	r3, r0, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e0e3      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2241      	movs	r2, #65	; 0x41
 80066da:	2121      	movs	r1, #33	; 0x21
 80066dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2242      	movs	r2, #66	; 0x42
 80066e2:	2140      	movs	r1, #64	; 0x40
 80066e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	222c      	movs	r2, #44	; 0x2c
 80066f6:	18ba      	adds	r2, r7, r2
 80066f8:	8812      	ldrh	r2, [r2, #0]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006702:	1dbb      	adds	r3, r7, #6
 8006704:	881c      	ldrh	r4, [r3, #0]
 8006706:	2308      	movs	r3, #8
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	230a      	movs	r3, #10
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	8819      	ldrh	r1, [r3, #0]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	0023      	movs	r3, r4
 800671e:	f000 f8c5 	bl	80068ac <I2C_RequestMemoryWrite>
 8006722:	1e03      	subs	r3, r0, #0
 8006724:	d005      	beq.n	8006732 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	2100      	movs	r1, #0
 800672c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e0b5      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006736:	b29b      	uxth	r3, r3
 8006738:	2bff      	cmp	r3, #255	; 0xff
 800673a:	d911      	bls.n	8006760 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	22ff      	movs	r2, #255	; 0xff
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006746:	b2da      	uxtb	r2, r3
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	045c      	lsls	r4, r3, #17
 800674c:	230a      	movs	r3, #10
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	8819      	ldrh	r1, [r3, #0]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	2300      	movs	r3, #0
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	0023      	movs	r3, r4
 800675a:	f000 fb61 	bl	8006e20 <I2C_TransferConfig>
 800675e:	e012      	b.n	8006786 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676e:	b2da      	uxtb	r2, r3
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	049c      	lsls	r4, r3, #18
 8006774:	230a      	movs	r3, #10
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	8819      	ldrh	r1, [r3, #0]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	2300      	movs	r3, #0
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	0023      	movs	r3, r4
 8006782:	f000 fb4d 	bl	8006e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 f952 	bl	8006a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8006792:	1e03      	subs	r3, r0, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e081      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03a      	beq.n	800684a <HAL_I2C_Mem_Write+0x1fa>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d136      	bne.n	800684a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	0013      	movs	r3, r2
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	f000 f8e5 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	1e03      	subs	r3, r0, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e053      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2bff      	cmp	r3, #255	; 0xff
 80067fe:	d911      	bls.n	8006824 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	22ff      	movs	r2, #255	; 0xff
 8006804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680a:	b2da      	uxtb	r2, r3
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	045c      	lsls	r4, r3, #17
 8006810:	230a      	movs	r3, #10
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	8819      	ldrh	r1, [r3, #0]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	2300      	movs	r3, #0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	0023      	movs	r3, r4
 800681e:	f000 faff 	bl	8006e20 <I2C_TransferConfig>
 8006822:	e012      	b.n	800684a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	b2da      	uxtb	r2, r3
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	049c      	lsls	r4, r3, #18
 8006838:	230a      	movs	r3, #10
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	8819      	ldrh	r1, [r3, #0]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	0023      	movs	r3, r4
 8006846:	f000 faeb 	bl	8006e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d198      	bne.n	8006786 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0018      	movs	r0, r3
 800685c:	f000 f92a 	bl	8006ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006860:	1e03      	subs	r3, r0, #0
 8006862:	d001      	beq.n	8006868 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e01a      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2220      	movs	r2, #32
 800686e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	490b      	ldr	r1, [pc, #44]	; (80068a8 <HAL_I2C_Mem_Write+0x258>)
 800687c:	400a      	ands	r2, r1
 800687e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2241      	movs	r2, #65	; 0x41
 8006884:	2120      	movs	r1, #32
 8006886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2242      	movs	r2, #66	; 0x42
 800688c:	2100      	movs	r1, #0
 800688e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	2100      	movs	r1, #0
 8006896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b007      	add	sp, #28
 80068a4:	bd90      	pop	{r4, r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	fe00e800 	.word	0xfe00e800

080068ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80068ac:	b5b0      	push	{r4, r5, r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	000c      	movs	r4, r1
 80068b6:	0010      	movs	r0, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	250a      	movs	r5, #10
 80068bc:	197b      	adds	r3, r7, r5
 80068be:	1c22      	adds	r2, r4, #0
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	2308      	movs	r3, #8
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	1c02      	adds	r2, r0, #0
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	1dbb      	adds	r3, r7, #6
 80068cc:	1c0a      	adds	r2, r1, #0
 80068ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068d0:	1dbb      	adds	r3, r7, #6
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	045c      	lsls	r4, r3, #17
 80068da:	197b      	adds	r3, r7, r5
 80068dc:	8819      	ldrh	r1, [r3, #0]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4b23      	ldr	r3, [pc, #140]	; (8006970 <I2C_RequestMemoryWrite+0xc4>)
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	0023      	movs	r3, r4
 80068e6:	f000 fa9b 	bl	8006e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	6a39      	ldr	r1, [r7, #32]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 f8a0 	bl	8006a36 <I2C_WaitOnTXISFlagUntilTimeout>
 80068f6:	1e03      	subs	r3, r0, #0
 80068f8:	d001      	beq.n	80068fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e033      	b.n	8006966 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068fe:	1dbb      	adds	r3, r7, #6
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006906:	2308      	movs	r3, #8
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
 8006914:	e019      	b.n	800694a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006916:	2308      	movs	r3, #8
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	b29b      	uxth	r3, r3
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	6a39      	ldr	r1, [r7, #32]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f881 	bl	8006a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8006934:	1e03      	subs	r3, r0, #0
 8006936:	d001      	beq.n	800693c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e014      	b.n	8006966 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800693c:	2308      	movs	r3, #8
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	0013      	movs	r3, r2
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	f000 f82e 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 800695c:	1e03      	subs	r3, r0, #0
 800695e:	d001      	beq.n	8006964 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b004      	add	sp, #16
 800696c:	bdb0      	pop	{r4, r5, r7, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	80002000 	.word	0x80002000

08006974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2202      	movs	r2, #2
 8006984:	4013      	ands	r3, r2
 8006986:	2b02      	cmp	r3, #2
 8006988:	d103      	bne.n	8006992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2201      	movs	r2, #1
 800699a:	4013      	ands	r3, r2
 800699c:	2b01      	cmp	r3, #1
 800699e:	d007      	beq.n	80069b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2101      	movs	r1, #1
 80069ac:	430a      	orrs	r2, r1
 80069ae:	619a      	str	r2, [r3, #24]
  }
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	1dfb      	adds	r3, r7, #7
 80069c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c8:	e021      	b.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	d01e      	beq.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d0:	f7fe fdec 	bl	80055ac <HAL_GetTick>
 80069d4:	0002      	movs	r2, r0
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d113      	bne.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	2220      	movs	r2, #32
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2241      	movs	r2, #65	; 0x41
 80069f6:	2120      	movs	r1, #32
 80069f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2242      	movs	r2, #66	; 0x42
 80069fe:	2100      	movs	r1, #0
 8006a00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2240      	movs	r2, #64	; 0x40
 8006a06:	2100      	movs	r1, #0
 8006a08:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00f      	b.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	425a      	negs	r2, r3
 8006a1e:	4153      	adcs	r3, r2
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	001a      	movs	r2, r3
 8006a24:	1dfb      	adds	r3, r7, #7
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d0ce      	beq.n	80069ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b004      	add	sp, #16
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a42:	e02b      	b.n	8006a9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 f8e8 	bl	8006c20 <I2C_IsErrorOccurred>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d001      	beq.n	8006a58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e029      	b.n	8006aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	d01e      	beq.n	8006a9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5e:	f7fe fda5 	bl	80055ac <HAL_GetTick>
 8006a62:	0002      	movs	r2, r0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d113      	bne.n	8006a9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a78:	2220      	movs	r2, #32
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2241      	movs	r2, #65	; 0x41
 8006a84:	2120      	movs	r1, #32
 8006a86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2242      	movs	r2, #66	; 0x42
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2240      	movs	r2, #64	; 0x40
 8006a94:	2100      	movs	r1, #0
 8006a96:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e007      	b.n	8006aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d1cc      	bne.n	8006a44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b004      	add	sp, #16
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac0:	e028      	b.n	8006b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 f8a9 	bl	8006c20 <I2C_IsErrorOccurred>
 8006ace:	1e03      	subs	r3, r0, #0
 8006ad0:	d001      	beq.n	8006ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e026      	b.n	8006b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad6:	f7fe fd69 	bl	80055ac <HAL_GetTick>
 8006ada:	0002      	movs	r2, r0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d113      	bne.n	8006b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af0:	2220      	movs	r2, #32
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2241      	movs	r2, #65	; 0x41
 8006afc:	2120      	movs	r1, #32
 8006afe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2242      	movs	r2, #66	; 0x42
 8006b04:	2100      	movs	r1, #0
 8006b06:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e007      	b.n	8006b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d1cf      	bne.n	8006ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b38:	e064      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f000 f86d 	bl	8006c20 <I2C_IsErrorOccurred>
 8006b46:	1e03      	subs	r3, r0, #0
 8006b48:	d001      	beq.n	8006b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e062      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2220      	movs	r2, #32
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d138      	bne.n	8006bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d105      	bne.n	8006b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e04e      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d107      	bne.n	8006b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2210      	movs	r2, #16
 8006b8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
 8006b92:	e002      	b.n	8006b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	491b      	ldr	r1, [pc, #108]	; (8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2241      	movs	r2, #65	; 0x41
 8006bb6:	2120      	movs	r1, #32
 8006bb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2242      	movs	r2, #66	; 0x42
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2240      	movs	r2, #64	; 0x40
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e022      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fe fced 	bl	80055ac <HAL_GetTick>
 8006bd2:	0002      	movs	r2, r0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10f      	bne.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	2220      	movs	r2, #32
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2241      	movs	r2, #65	; 0x41
 8006bf4:	2120      	movs	r1, #32
 8006bf6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2240      	movs	r2, #64	; 0x40
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e007      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d193      	bne.n	8006b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	fe00e800 	.word	0xfe00e800

08006c20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b08b      	sub	sp, #44	; 0x2c
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2c:	2327      	movs	r3, #39	; 0x27
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2210      	movs	r2, #16
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d100      	bne.n	8006c4e <I2C_IsErrorOccurred+0x2e>
 8006c4c:	e082      	b.n	8006d54 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2210      	movs	r2, #16
 8006c54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c56:	e060      	b.n	8006d1a <I2C_IsErrorOccurred+0xfa>
 8006c58:	2427      	movs	r4, #39	; 0x27
 8006c5a:	193b      	adds	r3, r7, r4
 8006c5c:	193a      	adds	r2, r7, r4
 8006c5e:	7812      	ldrb	r2, [r2, #0]
 8006c60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3301      	adds	r3, #1
 8006c66:	d058      	beq.n	8006d1a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c68:	f7fe fca0 	bl	80055ac <HAL_GetTick>
 8006c6c:	0002      	movs	r2, r0
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d306      	bcc.n	8006c86 <I2C_IsErrorOccurred+0x66>
 8006c78:	193b      	adds	r3, r7, r4
 8006c7a:	193a      	adds	r2, r7, r4
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d149      	bne.n	8006d1a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	4013      	ands	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c94:	2013      	movs	r0, #19
 8006c96:	183b      	adds	r3, r7, r0
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	2142      	movs	r1, #66	; 0x42
 8006c9c:	5c52      	ldrb	r2, [r2, r1]
 8006c9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	401a      	ands	r2, r3
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d126      	bne.n	8006d02 <I2C_IsErrorOccurred+0xe2>
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	2380      	movs	r3, #128	; 0x80
 8006cb8:	01db      	lsls	r3, r3, #7
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d021      	beq.n	8006d02 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006cbe:	183b      	adds	r3, r7, r0
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d01d      	beq.n	8006d02 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	01c9      	lsls	r1, r1, #7
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006cd8:	f7fe fc68 	bl	80055ac <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ce0:	e00f      	b.n	8006d02 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ce2:	f7fe fc63 	bl	80055ac <HAL_GetTick>
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b19      	cmp	r3, #25
 8006cee:	d908      	bls.n	8006d02 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006cf8:	2327      	movs	r3, #39	; 0x27
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]

              break;
 8006d00:	e00b      	b.n	8006d1a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2127      	movs	r1, #39	; 0x27
 8006d0e:	187a      	adds	r2, r7, r1
 8006d10:	1879      	adds	r1, r7, r1
 8006d12:	7809      	ldrb	r1, [r1, #0]
 8006d14:	7011      	strb	r1, [r2, #0]
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d1e3      	bne.n	8006ce2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2220      	movs	r2, #32
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d004      	beq.n	8006d32 <I2C_IsErrorOccurred+0x112>
 8006d28:	2327      	movs	r3, #39	; 0x27
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d092      	beq.n	8006c58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d32:	2327      	movs	r3, #39	; 0x27
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2220      	movs	r2, #32
 8006d42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2204      	movs	r2, #4
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d4c:	2327      	movs	r3, #39	; 0x27
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	2380      	movs	r3, #128	; 0x80
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4013      	ands	r3, r2
 8006d64:	d00c      	beq.n	8006d80 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2280      	movs	r2, #128	; 0x80
 8006d74:	0052      	lsls	r2, r2, #1
 8006d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d78:	2327      	movs	r3, #39	; 0x27
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4013      	ands	r3, r2
 8006d88:	d00c      	beq.n	8006da4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2280      	movs	r2, #128	; 0x80
 8006d98:	00d2      	lsls	r2, r2, #3
 8006d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d9c:	2327      	movs	r3, #39	; 0x27
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4013      	ands	r3, r2
 8006dac:	d00c      	beq.n	8006dc8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4313      	orrs	r3, r2
 8006db4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2280      	movs	r2, #128	; 0x80
 8006dbc:	0092      	lsls	r2, r2, #2
 8006dbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dc0:	2327      	movs	r3, #39	; 0x27
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006dc8:	2327      	movs	r3, #39	; 0x27
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01d      	beq.n	8006e0e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff fdcd 	bl	8006974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	490d      	ldr	r1, [pc, #52]	; (8006e1c <I2C_IsErrorOccurred+0x1fc>)
 8006de6:	400a      	ands	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2241      	movs	r2, #65	; 0x41
 8006dfa:	2120      	movs	r1, #32
 8006dfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2242      	movs	r2, #66	; 0x42
 8006e02:	2100      	movs	r1, #0
 8006e04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2240      	movs	r2, #64	; 0x40
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006e0e:	2327      	movs	r3, #39	; 0x27
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	781b      	ldrb	r3, [r3, #0]
}
 8006e14:	0018      	movs	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	b00b      	add	sp, #44	; 0x2c
 8006e1a:	bd90      	pop	{r4, r7, pc}
 8006e1c:	fe00e800 	.word	0xfe00e800

08006e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	0008      	movs	r0, r1
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	240a      	movs	r4, #10
 8006e30:	193b      	adds	r3, r7, r4
 8006e32:	1c02      	adds	r2, r0, #0
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	2009      	movs	r0, #9
 8006e38:	183b      	adds	r3, r7, r0
 8006e3a:	1c0a      	adds	r2, r1, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e3e:	193b      	adds	r3, r7, r4
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	059b      	lsls	r3, r3, #22
 8006e44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e46:	183b      	adds	r3, r7, r0
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	0419      	lsls	r1, r3, #16
 8006e4c:	23ff      	movs	r3, #255	; 0xff
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e6a:	0d51      	lsrs	r1, r2, #21
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	00d2      	lsls	r2, r2, #3
 8006e70:	400a      	ands	r2, r1
 8006e72:	4907      	ldr	r1, [pc, #28]	; (8006e90 <I2C_TransferConfig+0x70>)
 8006e74:	430a      	orrs	r2, r1
 8006e76:	43d2      	mvns	r2, r2
 8006e78:	401a      	ands	r2, r3
 8006e7a:	0011      	movs	r1, r2
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b007      	add	sp, #28
 8006e8c:	bd90      	pop	{r4, r7, pc}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	03ff63ff 	.word	0x03ff63ff

08006e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2241      	movs	r2, #65	; 0x41
 8006ea2:	5c9b      	ldrb	r3, [r3, r2]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d138      	bne.n	8006f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2240      	movs	r2, #64	; 0x40
 8006eae:	5c9b      	ldrb	r3, [r3, r2]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e032      	b.n	8006f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2240      	movs	r2, #64	; 0x40
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2241      	movs	r2, #65	; 0x41
 8006ec4:	2124      	movs	r1, #36	; 0x24
 8006ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	438a      	bics	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4911      	ldr	r1, [pc, #68]	; (8006f28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006ee4:	400a      	ands	r2, r1
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2101      	movs	r1, #1
 8006f04:	430a      	orrs	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2241      	movs	r2, #65	; 0x41
 8006f0c:	2120      	movs	r1, #32
 8006f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2240      	movs	r2, #64	; 0x40
 8006f14:	2100      	movs	r1, #0
 8006f16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e000      	b.n	8006f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	0018      	movs	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	ffffefff 	.word	0xffffefff

08006f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2241      	movs	r2, #65	; 0x41
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d139      	bne.n	8006fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	5c9b      	ldrb	r3, [r3, r2]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e033      	b.n	8006fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2240      	movs	r2, #64	; 0x40
 8006f54:	2101      	movs	r1, #1
 8006f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2241      	movs	r2, #65	; 0x41
 8006f5c:	2124      	movs	r1, #36	; 0x24
 8006f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a11      	ldr	r2, [pc, #68]	; (8006fc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2241      	movs	r2, #65	; 0x41
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2240      	movs	r2, #64	; 0x40
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b004      	add	sp, #16
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	fffff0ff 	.word	0xfffff0ff

08006fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a19      	ldr	r2, [pc, #100]	; (8007038 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d11f      	bne.n	8007028 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	0013      	movs	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	189b      	adds	r3, r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4912      	ldr	r1, [pc, #72]	; (8007040 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7f9 f882 	bl	8000100 <__udivsi3>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007002:	e008      	b.n	8007016 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b01      	subs	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e001      	b.n	8007016 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e009      	b.n	800702a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	2380      	movs	r3, #128	; 0x80
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	401a      	ands	r2, r3
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	429a      	cmp	r2, r3
 8007026:	d0ed      	beq.n	8007004 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	0018      	movs	r0, r3
 800702c:	46bd      	mov	sp, r7
 800702e:	b004      	add	sp, #16
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	40007000 	.word	0x40007000
 8007038:	fffff9ff 	.word	0xfffff9ff
 800703c:	20000004 	.word	0x20000004
 8007040:	000f4240 	.word	0x000f4240

08007044 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007048:	4b03      	ldr	r3, [pc, #12]	; (8007058 <LL_RCC_GetAPB1Prescaler+0x14>)
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	23e0      	movs	r3, #224	; 0xe0
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	4013      	ands	r3, r2
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000

0800705c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e2f3      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	4013      	ands	r3, r2
 8007076:	d100      	bne.n	800707a <HAL_RCC_OscConfig+0x1e>
 8007078:	e07c      	b.n	8007174 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707a:	4bc3      	ldr	r3, [pc, #780]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2238      	movs	r2, #56	; 0x38
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007084:	4bc0      	ldr	r3, [pc, #768]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2203      	movs	r2, #3
 800708a:	4013      	ands	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b10      	cmp	r3, #16
 8007092:	d102      	bne.n	800709a <HAL_RCC_OscConfig+0x3e>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d002      	beq.n	80070a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d10b      	bne.n	80070b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a0:	4bb9      	ldr	r3, [pc, #740]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	2380      	movs	r3, #128	; 0x80
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	4013      	ands	r3, r2
 80070aa:	d062      	beq.n	8007172 <HAL_RCC_OscConfig+0x116>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d15e      	bne.n	8007172 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e2ce      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	025b      	lsls	r3, r3, #9
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d107      	bne.n	80070d4 <HAL_RCC_OscConfig+0x78>
 80070c4:	4bb0      	ldr	r3, [pc, #704]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4baf      	ldr	r3, [pc, #700]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070ca:	2180      	movs	r1, #128	; 0x80
 80070cc:	0249      	lsls	r1, r1, #9
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e020      	b.n	8007116 <HAL_RCC_OscConfig+0xba>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	23a0      	movs	r3, #160	; 0xa0
 80070da:	02db      	lsls	r3, r3, #11
 80070dc:	429a      	cmp	r2, r3
 80070de:	d10e      	bne.n	80070fe <HAL_RCC_OscConfig+0xa2>
 80070e0:	4ba9      	ldr	r3, [pc, #676]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4ba8      	ldr	r3, [pc, #672]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	02c9      	lsls	r1, r1, #11
 80070ea:	430a      	orrs	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	4ba6      	ldr	r3, [pc, #664]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4ba5      	ldr	r3, [pc, #660]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80070f4:	2180      	movs	r1, #128	; 0x80
 80070f6:	0249      	lsls	r1, r1, #9
 80070f8:	430a      	orrs	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e00b      	b.n	8007116 <HAL_RCC_OscConfig+0xba>
 80070fe:	4ba2      	ldr	r3, [pc, #648]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007104:	49a1      	ldr	r1, [pc, #644]	; (800738c <HAL_RCC_OscConfig+0x330>)
 8007106:	400a      	ands	r2, r1
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	4b9f      	ldr	r3, [pc, #636]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b9e      	ldr	r3, [pc, #632]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007110:	499f      	ldr	r1, [pc, #636]	; (8007390 <HAL_RCC_OscConfig+0x334>)
 8007112:	400a      	ands	r2, r1
 8007114:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d014      	beq.n	8007148 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fe fa45 	bl	80055ac <HAL_GetTick>
 8007122:	0003      	movs	r3, r0
 8007124:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007128:	f7fe fa40 	bl	80055ac <HAL_GetTick>
 800712c:	0002      	movs	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	; 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e28d      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713a:	4b93      	ldr	r3, [pc, #588]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	4013      	ands	r3, r2
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0xcc>
 8007146:	e015      	b.n	8007174 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fe fa30 	bl	80055ac <HAL_GetTick>
 800714c:	0003      	movs	r3, r0
 800714e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007152:	f7fe fa2b 	bl	80055ac <HAL_GetTick>
 8007156:	0002      	movs	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b64      	cmp	r3, #100	; 0x64
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e278      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	4013      	ands	r3, r2
 800716e:	d1f0      	bne.n	8007152 <HAL_RCC_OscConfig+0xf6>
 8007170:	e000      	b.n	8007174 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007172:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2202      	movs	r2, #2
 800717a:	4013      	ands	r3, r2
 800717c:	d100      	bne.n	8007180 <HAL_RCC_OscConfig+0x124>
 800717e:	e099      	b.n	80072b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007180:	4b81      	ldr	r3, [pc, #516]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2238      	movs	r2, #56	; 0x38
 8007186:	4013      	ands	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800718a:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	2203      	movs	r2, #3
 8007190:	4013      	ands	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b10      	cmp	r3, #16
 8007198:	d102      	bne.n	80071a0 <HAL_RCC_OscConfig+0x144>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d002      	beq.n	80071a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d135      	bne.n	8007212 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a6:	4b78      	ldr	r3, [pc, #480]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4013      	ands	r3, r2
 80071b0:	d005      	beq.n	80071be <HAL_RCC_OscConfig+0x162>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e24b      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071be:	4b72      	ldr	r3, [pc, #456]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4a74      	ldr	r2, [pc, #464]	; (8007394 <HAL_RCC_OscConfig+0x338>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	0019      	movs	r1, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	021a      	lsls	r2, r3, #8
 80071ce:	4b6e      	ldr	r3, [pc, #440]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d112      	bne.n	8007200 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071da:	4b6b      	ldr	r3, [pc, #428]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a6e      	ldr	r2, [pc, #440]	; (8007398 <HAL_RCC_OscConfig+0x33c>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	0019      	movs	r1, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	4b67      	ldr	r3, [pc, #412]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071ea:	430a      	orrs	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80071ee:	4b66      	ldr	r3, [pc, #408]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	0adb      	lsrs	r3, r3, #11
 80071f4:	2207      	movs	r2, #7
 80071f6:	4013      	ands	r3, r2
 80071f8:	4a68      	ldr	r2, [pc, #416]	; (800739c <HAL_RCC_OscConfig+0x340>)
 80071fa:	40da      	lsrs	r2, r3
 80071fc:	4b68      	ldr	r3, [pc, #416]	; (80073a0 <HAL_RCC_OscConfig+0x344>)
 80071fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007200:	4b68      	ldr	r3, [pc, #416]	; (80073a4 <HAL_RCC_OscConfig+0x348>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	0018      	movs	r0, r3
 8007206:	f7fe f975 	bl	80054f4 <HAL_InitTick>
 800720a:	1e03      	subs	r3, r0, #0
 800720c:	d051      	beq.n	80072b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e221      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d030      	beq.n	800727c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800721a:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a5e      	ldr	r2, [pc, #376]	; (8007398 <HAL_RCC_OscConfig+0x33c>)
 8007220:	4013      	ands	r3, r2
 8007222:	0019      	movs	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	4b57      	ldr	r3, [pc, #348]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800722a:	430a      	orrs	r2, r1
 800722c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800722e:	4b56      	ldr	r3, [pc, #344]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b55      	ldr	r3, [pc, #340]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007234:	2180      	movs	r1, #128	; 0x80
 8007236:	0049      	lsls	r1, r1, #1
 8007238:	430a      	orrs	r2, r1
 800723a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fe f9b6 	bl	80055ac <HAL_GetTick>
 8007240:	0003      	movs	r3, r0
 8007242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007246:	f7fe f9b1 	bl	80055ac <HAL_GetTick>
 800724a:	0002      	movs	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e1fe      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007258:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4013      	ands	r3, r2
 8007262:	d0f0      	beq.n	8007246 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007264:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	4a4a      	ldr	r2, [pc, #296]	; (8007394 <HAL_RCC_OscConfig+0x338>)
 800726a:	4013      	ands	r3, r2
 800726c:	0019      	movs	r1, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	4b44      	ldr	r3, [pc, #272]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	e01b      	b.n	80072b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800727c:	4b42      	ldr	r3, [pc, #264]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b41      	ldr	r3, [pc, #260]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007282:	4949      	ldr	r1, [pc, #292]	; (80073a8 <HAL_RCC_OscConfig+0x34c>)
 8007284:	400a      	ands	r2, r1
 8007286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fe f990 	bl	80055ac <HAL_GetTick>
 800728c:	0003      	movs	r3, r0
 800728e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007292:	f7fe f98b 	bl	80055ac <HAL_GetTick>
 8007296:	0002      	movs	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e1d8      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072a4:	4b38      	ldr	r3, [pc, #224]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4013      	ands	r3, r2
 80072ae:	d1f0      	bne.n	8007292 <HAL_RCC_OscConfig+0x236>
 80072b0:	e000      	b.n	80072b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2208      	movs	r2, #8
 80072ba:	4013      	ands	r3, r2
 80072bc:	d047      	beq.n	800734e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80072be:	4b32      	ldr	r3, [pc, #200]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2238      	movs	r2, #56	; 0x38
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b18      	cmp	r3, #24
 80072c8:	d10a      	bne.n	80072e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80072ca:	4b2f      	ldr	r3, [pc, #188]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	2202      	movs	r2, #2
 80072d0:	4013      	ands	r3, r2
 80072d2:	d03c      	beq.n	800734e <HAL_RCC_OscConfig+0x2f2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d138      	bne.n	800734e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e1ba      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80072e8:	4b27      	ldr	r3, [pc, #156]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80072ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072ec:	4b26      	ldr	r3, [pc, #152]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 80072ee:	2101      	movs	r1, #1
 80072f0:	430a      	orrs	r2, r1
 80072f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fe f95a 	bl	80055ac <HAL_GetTick>
 80072f8:	0003      	movs	r3, r0
 80072fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fe:	f7fe f955 	bl	80055ac <HAL_GetTick>
 8007302:	0002      	movs	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1a2      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007310:	4b1d      	ldr	r3, [pc, #116]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007314:	2202      	movs	r2, #2
 8007316:	4013      	ands	r3, r2
 8007318:	d0f1      	beq.n	80072fe <HAL_RCC_OscConfig+0x2a2>
 800731a:	e018      	b.n	800734e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800731c:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 800731e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007322:	2101      	movs	r1, #1
 8007324:	438a      	bics	r2, r1
 8007326:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007328:	f7fe f940 	bl	80055ac <HAL_GetTick>
 800732c:	0003      	movs	r3, r0
 800732e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007330:	e008      	b.n	8007344 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007332:	f7fe f93b 	bl	80055ac <HAL_GetTick>
 8007336:	0002      	movs	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e188      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007344:	4b10      	ldr	r3, [pc, #64]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	2202      	movs	r2, #2
 800734a:	4013      	ands	r3, r2
 800734c:	d1f1      	bne.n	8007332 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2204      	movs	r2, #4
 8007354:	4013      	ands	r3, r2
 8007356:	d100      	bne.n	800735a <HAL_RCC_OscConfig+0x2fe>
 8007358:	e0c6      	b.n	80074e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800735a:	231f      	movs	r3, #31
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2238      	movs	r2, #56	; 0x38
 8007368:	4013      	ands	r3, r2
 800736a:	2b20      	cmp	r3, #32
 800736c:	d11e      	bne.n	80073ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_RCC_OscConfig+0x32c>)
 8007370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007372:	2202      	movs	r2, #2
 8007374:	4013      	ands	r3, r2
 8007376:	d100      	bne.n	800737a <HAL_RCC_OscConfig+0x31e>
 8007378:	e0b6      	b.n	80074e8 <HAL_RCC_OscConfig+0x48c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d000      	beq.n	8007384 <HAL_RCC_OscConfig+0x328>
 8007382:	e0b1      	b.n	80074e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e166      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
 8007388:	40021000 	.word	0x40021000
 800738c:	fffeffff 	.word	0xfffeffff
 8007390:	fffbffff 	.word	0xfffbffff
 8007394:	ffff80ff 	.word	0xffff80ff
 8007398:	ffffc7ff 	.word	0xffffc7ff
 800739c:	00f42400 	.word	0x00f42400
 80073a0:	20000004 	.word	0x20000004
 80073a4:	20000008 	.word	0x20000008
 80073a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073ac:	4bac      	ldr	r3, [pc, #688]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80073ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	055b      	lsls	r3, r3, #21
 80073b4:	4013      	ands	r3, r2
 80073b6:	d101      	bne.n	80073bc <HAL_RCC_OscConfig+0x360>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <HAL_RCC_OscConfig+0x362>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d011      	beq.n	80073e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80073c2:	4ba7      	ldr	r3, [pc, #668]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80073c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c6:	4ba6      	ldr	r3, [pc, #664]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	0549      	lsls	r1, r1, #21
 80073cc:	430a      	orrs	r2, r1
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80073d0:	4ba3      	ldr	r3, [pc, #652]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80073d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	055b      	lsls	r3, r3, #21
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80073de:	231f      	movs	r3, #31
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	2201      	movs	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e6:	4b9f      	ldr	r3, [pc, #636]	; (8007664 <HAL_RCC_OscConfig+0x608>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	; 0x80
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	d11a      	bne.n	8007428 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073f2:	4b9c      	ldr	r3, [pc, #624]	; (8007664 <HAL_RCC_OscConfig+0x608>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4b9b      	ldr	r3, [pc, #620]	; (8007664 <HAL_RCC_OscConfig+0x608>)
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	0049      	lsls	r1, r1, #1
 80073fc:	430a      	orrs	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007400:	f7fe f8d4 	bl	80055ac <HAL_GetTick>
 8007404:	0003      	movs	r3, r0
 8007406:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800740a:	f7fe f8cf 	bl	80055ac <HAL_GetTick>
 800740e:	0002      	movs	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e11c      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800741c:	4b91      	ldr	r3, [pc, #580]	; (8007664 <HAL_RCC_OscConfig+0x608>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4013      	ands	r3, r2
 8007426:	d0f0      	beq.n	800740a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d106      	bne.n	800743e <HAL_RCC_OscConfig+0x3e2>
 8007430:	4b8b      	ldr	r3, [pc, #556]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007434:	4b8a      	ldr	r3, [pc, #552]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007436:	2101      	movs	r1, #1
 8007438:	430a      	orrs	r2, r1
 800743a:	65da      	str	r2, [r3, #92]	; 0x5c
 800743c:	e01c      	b.n	8007478 <HAL_RCC_OscConfig+0x41c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b05      	cmp	r3, #5
 8007444:	d10c      	bne.n	8007460 <HAL_RCC_OscConfig+0x404>
 8007446:	4b86      	ldr	r3, [pc, #536]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800744a:	4b85      	ldr	r3, [pc, #532]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800744c:	2104      	movs	r1, #4
 800744e:	430a      	orrs	r2, r1
 8007450:	65da      	str	r2, [r3, #92]	; 0x5c
 8007452:	4b83      	ldr	r3, [pc, #524]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007456:	4b82      	ldr	r3, [pc, #520]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007458:	2101      	movs	r1, #1
 800745a:	430a      	orrs	r2, r1
 800745c:	65da      	str	r2, [r3, #92]	; 0x5c
 800745e:	e00b      	b.n	8007478 <HAL_RCC_OscConfig+0x41c>
 8007460:	4b7f      	ldr	r3, [pc, #508]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007464:	4b7e      	ldr	r3, [pc, #504]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007466:	2101      	movs	r1, #1
 8007468:	438a      	bics	r2, r1
 800746a:	65da      	str	r2, [r3, #92]	; 0x5c
 800746c:	4b7c      	ldr	r3, [pc, #496]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800746e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007470:	4b7b      	ldr	r3, [pc, #492]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007472:	2104      	movs	r1, #4
 8007474:	438a      	bics	r2, r1
 8007476:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d014      	beq.n	80074aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fe f894 	bl	80055ac <HAL_GetTick>
 8007484:	0003      	movs	r3, r0
 8007486:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007488:	e009      	b.n	800749e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748a:	f7fe f88f 	bl	80055ac <HAL_GetTick>
 800748e:	0002      	movs	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	4a74      	ldr	r2, [pc, #464]	; (8007668 <HAL_RCC_OscConfig+0x60c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e0db      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800749e:	4b70      	ldr	r3, [pc, #448]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80074a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a2:	2202      	movs	r2, #2
 80074a4:	4013      	ands	r3, r2
 80074a6:	d0f0      	beq.n	800748a <HAL_RCC_OscConfig+0x42e>
 80074a8:	e013      	b.n	80074d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074aa:	f7fe f87f 	bl	80055ac <HAL_GetTick>
 80074ae:	0003      	movs	r3, r0
 80074b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074b2:	e009      	b.n	80074c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fe f87a 	bl	80055ac <HAL_GetTick>
 80074b8:	0002      	movs	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	4a6a      	ldr	r2, [pc, #424]	; (8007668 <HAL_RCC_OscConfig+0x60c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e0c6      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074c8:	4b65      	ldr	r3, [pc, #404]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	2202      	movs	r2, #2
 80074ce:	4013      	ands	r3, r2
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80074d2:	231f      	movs	r3, #31
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d105      	bne.n	80074e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80074dc:	4b60      	ldr	r3, [pc, #384]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80074de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e0:	4b5f      	ldr	r3, [pc, #380]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80074e2:	4962      	ldr	r1, [pc, #392]	; (800766c <HAL_RCC_OscConfig+0x610>)
 80074e4:	400a      	ands	r2, r1
 80074e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d100      	bne.n	80074f2 <HAL_RCC_OscConfig+0x496>
 80074f0:	e0b0      	b.n	8007654 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074f2:	4b5b      	ldr	r3, [pc, #364]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2238      	movs	r2, #56	; 0x38
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d100      	bne.n	8007500 <HAL_RCC_OscConfig+0x4a4>
 80074fe:	e078      	b.n	80075f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d153      	bne.n	80075b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007508:	4b55      	ldr	r3, [pc, #340]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4b54      	ldr	r3, [pc, #336]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800750e:	4958      	ldr	r1, [pc, #352]	; (8007670 <HAL_RCC_OscConfig+0x614>)
 8007510:	400a      	ands	r2, r1
 8007512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fe f84a 	bl	80055ac <HAL_GetTick>
 8007518:	0003      	movs	r3, r0
 800751a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800751e:	f7fe f845 	bl	80055ac <HAL_GetTick>
 8007522:	0002      	movs	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e092      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007530:	4b4b      	ldr	r3, [pc, #300]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	2380      	movs	r3, #128	; 0x80
 8007536:	049b      	lsls	r3, r3, #18
 8007538:	4013      	ands	r3, r2
 800753a:	d1f0      	bne.n	800751e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800753c:	4b48      	ldr	r3, [pc, #288]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4a4c      	ldr	r2, [pc, #304]	; (8007674 <HAL_RCC_OscConfig+0x618>)
 8007542:	4013      	ands	r3, r2
 8007544:	0019      	movs	r1, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	431a      	orrs	r2, r3
 8007564:	4b3e      	ldr	r3, [pc, #248]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007566:	430a      	orrs	r2, r1
 8007568:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800756a:	4b3d      	ldr	r3, [pc, #244]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b3c      	ldr	r3, [pc, #240]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007570:	2180      	movs	r1, #128	; 0x80
 8007572:	0449      	lsls	r1, r1, #17
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007578:	4b39      	ldr	r3, [pc, #228]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	4b38      	ldr	r3, [pc, #224]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	0549      	lsls	r1, r1, #21
 8007582:	430a      	orrs	r2, r1
 8007584:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007586:	f7fe f811 	bl	80055ac <HAL_GetTick>
 800758a:	0003      	movs	r3, r0
 800758c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007590:	f7fe f80c 	bl	80055ac <HAL_GetTick>
 8007594:	0002      	movs	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e059      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075a2:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	049b      	lsls	r3, r3, #18
 80075aa:	4013      	ands	r3, r2
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0x534>
 80075ae:	e051      	b.n	8007654 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b0:	4b2b      	ldr	r3, [pc, #172]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4b2a      	ldr	r3, [pc, #168]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075b6:	492e      	ldr	r1, [pc, #184]	; (8007670 <HAL_RCC_OscConfig+0x614>)
 80075b8:	400a      	ands	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fd fff6 	bl	80055ac <HAL_GetTick>
 80075c0:	0003      	movs	r3, r0
 80075c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c6:	f7fd fff1 	bl	80055ac <HAL_GetTick>
 80075ca:	0002      	movs	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e03e      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d8:	4b21      	ldr	r3, [pc, #132]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	049b      	lsls	r3, r3, #18
 80075e0:	4013      	ands	r3, r2
 80075e2:	d1f0      	bne.n	80075c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80075e4:	4b1e      	ldr	r3, [pc, #120]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 80075ea:	4923      	ldr	r1, [pc, #140]	; (8007678 <HAL_RCC_OscConfig+0x61c>)
 80075ec:	400a      	ands	r2, r1
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	e030      	b.n	8007654 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e02b      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80075fe:	4b18      	ldr	r3, [pc, #96]	; (8007660 <HAL_RCC_OscConfig+0x604>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2203      	movs	r2, #3
 8007608:	401a      	ands	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	429a      	cmp	r2, r3
 8007610:	d11e      	bne.n	8007650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2270      	movs	r2, #112	; 0x70
 8007616:	401a      	ands	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d117      	bne.n	8007650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	23fe      	movs	r3, #254	; 0xfe
 8007624:	01db      	lsls	r3, r3, #7
 8007626:	401a      	ands	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800762e:	429a      	cmp	r2, r3
 8007630:	d10e      	bne.n	8007650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	23f8      	movs	r3, #248	; 0xf8
 8007636:	039b      	lsls	r3, r3, #14
 8007638:	401a      	ands	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800763e:	429a      	cmp	r2, r3
 8007640:	d106      	bne.n	8007650 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	0f5b      	lsrs	r3, r3, #29
 8007646:	075a      	lsls	r2, r3, #29
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	0018      	movs	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	b008      	add	sp, #32
 800765c:	bd80      	pop	{r7, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	40021000 	.word	0x40021000
 8007664:	40007000 	.word	0x40007000
 8007668:	00001388 	.word	0x00001388
 800766c:	efffffff 	.word	0xefffffff
 8007670:	feffffff 	.word	0xfeffffff
 8007674:	1fc1808c 	.word	0x1fc1808c
 8007678:	effefffc 	.word	0xeffefffc

0800767c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0e9      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007690:	4b76      	ldr	r3, [pc, #472]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2207      	movs	r2, #7
 8007696:	4013      	ands	r3, r2
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d91e      	bls.n	80076dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769e:	4b73      	ldr	r3, [pc, #460]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2207      	movs	r2, #7
 80076a4:	4393      	bics	r3, r2
 80076a6:	0019      	movs	r1, r3
 80076a8:	4b70      	ldr	r3, [pc, #448]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b0:	f7fd ff7c 	bl	80055ac <HAL_GetTick>
 80076b4:	0003      	movs	r3, r0
 80076b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80076b8:	e009      	b.n	80076ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ba:	f7fd ff77 	bl	80055ac <HAL_GetTick>
 80076be:	0002      	movs	r2, r0
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	4a6a      	ldr	r2, [pc, #424]	; (8007870 <HAL_RCC_ClockConfig+0x1f4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0ca      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80076ce:	4b67      	ldr	r3, [pc, #412]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2207      	movs	r2, #7
 80076d4:	4013      	ands	r3, r2
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1ee      	bne.n	80076ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2202      	movs	r2, #2
 80076e2:	4013      	ands	r3, r2
 80076e4:	d015      	beq.n	8007712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2204      	movs	r2, #4
 80076ec:	4013      	ands	r3, r2
 80076ee:	d006      	beq.n	80076fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80076f0:	4b60      	ldr	r3, [pc, #384]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	4b5f      	ldr	r3, [pc, #380]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 80076f6:	21e0      	movs	r1, #224	; 0xe0
 80076f8:	01c9      	lsls	r1, r1, #7
 80076fa:	430a      	orrs	r2, r1
 80076fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076fe:	4b5d      	ldr	r3, [pc, #372]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4a5d      	ldr	r2, [pc, #372]	; (8007878 <HAL_RCC_ClockConfig+0x1fc>)
 8007704:	4013      	ands	r3, r2
 8007706:	0019      	movs	r1, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	4b59      	ldr	r3, [pc, #356]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800770e:	430a      	orrs	r2, r1
 8007710:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2201      	movs	r2, #1
 8007718:	4013      	ands	r3, r2
 800771a:	d057      	beq.n	80077cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d107      	bne.n	8007734 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007724:	4b53      	ldr	r3, [pc, #332]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	2380      	movs	r3, #128	; 0x80
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	4013      	ands	r3, r2
 800772e:	d12b      	bne.n	8007788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e097      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d107      	bne.n	800774c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800773c:	4b4d      	ldr	r3, [pc, #308]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	049b      	lsls	r3, r3, #18
 8007744:	4013      	ands	r3, r2
 8007746:	d11f      	bne.n	8007788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e08b      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d107      	bne.n	8007764 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007754:	4b47      	ldr	r3, [pc, #284]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4013      	ands	r3, r2
 800775e:	d113      	bne.n	8007788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e07f      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d106      	bne.n	800777a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800776c:	4b41      	ldr	r3, [pc, #260]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800776e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007770:	2202      	movs	r2, #2
 8007772:	4013      	ands	r3, r2
 8007774:	d108      	bne.n	8007788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e074      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800777a:	4b3e      	ldr	r3, [pc, #248]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	2202      	movs	r2, #2
 8007780:	4013      	ands	r3, r2
 8007782:	d101      	bne.n	8007788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e06d      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007788:	4b3a      	ldr	r3, [pc, #232]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2207      	movs	r2, #7
 800778e:	4393      	bics	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b37      	ldr	r3, [pc, #220]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007798:	430a      	orrs	r2, r1
 800779a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779c:	f7fd ff06 	bl	80055ac <HAL_GetTick>
 80077a0:	0003      	movs	r3, r0
 80077a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a4:	e009      	b.n	80077ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a6:	f7fd ff01 	bl	80055ac <HAL_GetTick>
 80077aa:	0002      	movs	r2, r0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	4a2f      	ldr	r2, [pc, #188]	; (8007870 <HAL_RCC_ClockConfig+0x1f4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e054      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ba:	4b2e      	ldr	r3, [pc, #184]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2238      	movs	r2, #56	; 0x38
 80077c0:	401a      	ands	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d1ec      	bne.n	80077a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077cc:	4b27      	ldr	r3, [pc, #156]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2207      	movs	r2, #7
 80077d2:	4013      	ands	r3, r2
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d21e      	bcs.n	8007818 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2207      	movs	r2, #7
 80077e0:	4393      	bics	r3, r2
 80077e2:	0019      	movs	r1, r3
 80077e4:	4b21      	ldr	r3, [pc, #132]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077ec:	f7fd fede 	bl	80055ac <HAL_GetTick>
 80077f0:	0003      	movs	r3, r0
 80077f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077f4:	e009      	b.n	800780a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f6:	f7fd fed9 	bl	80055ac <HAL_GetTick>
 80077fa:	0002      	movs	r2, r0
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <HAL_RCC_ClockConfig+0x1f4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d901      	bls.n	800780a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e02c      	b.n	8007864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800780a:	4b18      	ldr	r3, [pc, #96]	; (800786c <HAL_RCC_ClockConfig+0x1f0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2207      	movs	r2, #7
 8007810:	4013      	ands	r3, r2
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d1ee      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2204      	movs	r2, #4
 800781e:	4013      	ands	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4a15      	ldr	r2, [pc, #84]	; (800787c <HAL_RCC_ClockConfig+0x200>)
 8007828:	4013      	ands	r3, r2
 800782a:	0019      	movs	r1, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 8007832:	430a      	orrs	r2, r1
 8007834:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007836:	f000 f829 	bl	800788c <HAL_RCC_GetSysClockFreq>
 800783a:	0001      	movs	r1, r0
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <HAL_RCC_ClockConfig+0x1f8>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	220f      	movs	r2, #15
 8007844:	401a      	ands	r2, r3
 8007846:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <HAL_RCC_ClockConfig+0x204>)
 8007848:	0092      	lsls	r2, r2, #2
 800784a:	58d3      	ldr	r3, [r2, r3]
 800784c:	221f      	movs	r2, #31
 800784e:	4013      	ands	r3, r2
 8007850:	000a      	movs	r2, r1
 8007852:	40da      	lsrs	r2, r3
 8007854:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <HAL_RCC_ClockConfig+0x208>)
 8007856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007858:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <HAL_RCC_ClockConfig+0x20c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	0018      	movs	r0, r3
 800785e:	f7fd fe49 	bl	80054f4 <HAL_InitTick>
 8007862:	0003      	movs	r3, r0
}
 8007864:	0018      	movs	r0, r3
 8007866:	46bd      	mov	sp, r7
 8007868:	b004      	add	sp, #16
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40022000 	.word	0x40022000
 8007870:	00001388 	.word	0x00001388
 8007874:	40021000 	.word	0x40021000
 8007878:	fffff0ff 	.word	0xfffff0ff
 800787c:	ffff8fff 	.word	0xffff8fff
 8007880:	0800b40c 	.word	0x0800b40c
 8007884:	20000004 	.word	0x20000004
 8007888:	20000008 	.word	0x20000008

0800788c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007892:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2238      	movs	r2, #56	; 0x38
 8007898:	4013      	ands	r3, r2
 800789a:	d10f      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800789c:	4b39      	ldr	r3, [pc, #228]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	0adb      	lsrs	r3, r3, #11
 80078a2:	2207      	movs	r2, #7
 80078a4:	4013      	ands	r3, r2
 80078a6:	2201      	movs	r2, #1
 80078a8:	409a      	lsls	r2, r3
 80078aa:	0013      	movs	r3, r2
 80078ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	4835      	ldr	r0, [pc, #212]	; (8007988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80078b2:	f7f8 fc25 	bl	8000100 <__udivsi3>
 80078b6:	0003      	movs	r3, r0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e05d      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078bc:	4b31      	ldr	r3, [pc, #196]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2238      	movs	r2, #56	; 0x38
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d102      	bne.n	80078ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078c8:	4b30      	ldr	r3, [pc, #192]	; (800798c <HAL_RCC_GetSysClockFreq+0x100>)
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	e054      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078ce:	4b2d      	ldr	r3, [pc, #180]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2238      	movs	r2, #56	; 0x38
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d138      	bne.n	800794c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2203      	movs	r2, #3
 80078e0:	4013      	ands	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078e4:	4b27      	ldr	r3, [pc, #156]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	2207      	movs	r2, #7
 80078ec:	4013      	ands	r3, r2
 80078ee:	3301      	adds	r3, #1
 80078f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d10d      	bne.n	8007914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4824      	ldr	r0, [pc, #144]	; (800798c <HAL_RCC_GetSysClockFreq+0x100>)
 80078fc:	f7f8 fc00 	bl	8000100 <__udivsi3>
 8007900:	0003      	movs	r3, r0
 8007902:	0019      	movs	r1, r3
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	227f      	movs	r2, #127	; 0x7f
 800790c:	4013      	ands	r3, r2
 800790e:	434b      	muls	r3, r1
 8007910:	617b      	str	r3, [r7, #20]
        break;
 8007912:	e00d      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	481c      	ldr	r0, [pc, #112]	; (8007988 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007918:	f7f8 fbf2 	bl	8000100 <__udivsi3>
 800791c:	0003      	movs	r3, r0
 800791e:	0019      	movs	r1, r3
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	227f      	movs	r2, #127	; 0x7f
 8007928:	4013      	ands	r3, r2
 800792a:	434b      	muls	r3, r1
 800792c:	617b      	str	r3, [r7, #20]
        break;
 800792e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007930:	4b14      	ldr	r3, [pc, #80]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	0f5b      	lsrs	r3, r3, #29
 8007936:	2207      	movs	r2, #7
 8007938:	4013      	ands	r3, r2
 800793a:	3301      	adds	r3, #1
 800793c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	6978      	ldr	r0, [r7, #20]
 8007942:	f7f8 fbdd 	bl	8000100 <__udivsi3>
 8007946:	0003      	movs	r3, r0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e015      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2238      	movs	r2, #56	; 0x38
 8007952:	4013      	ands	r3, r2
 8007954:	2b20      	cmp	r3, #32
 8007956:	d103      	bne.n	8007960 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007958:	2380      	movs	r3, #128	; 0x80
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	e00b      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007960:	4b08      	ldr	r3, [pc, #32]	; (8007984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2238      	movs	r2, #56	; 0x38
 8007966:	4013      	ands	r3, r2
 8007968:	2b18      	cmp	r3, #24
 800796a:	d103      	bne.n	8007974 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800796c:	23fa      	movs	r3, #250	; 0xfa
 800796e:	01db      	lsls	r3, r3, #7
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e001      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007978:	693b      	ldr	r3, [r7, #16]
}
 800797a:	0018      	movs	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	b006      	add	sp, #24
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	40021000 	.word	0x40021000
 8007988:	00f42400 	.word	0x00f42400
 800798c:	007a1200 	.word	0x007a1200

08007990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007996:	681b      	ldr	r3, [r3, #0]
}
 8007998:	0018      	movs	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	20000004 	.word	0x20000004

080079a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a4:	b5b0      	push	{r4, r5, r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079a8:	f7ff fff2 	bl	8007990 <HAL_RCC_GetHCLKFreq>
 80079ac:	0004      	movs	r4, r0
 80079ae:	f7ff fb49 	bl	8007044 <LL_RCC_GetAPB1Prescaler>
 80079b2:	0003      	movs	r3, r0
 80079b4:	0b1a      	lsrs	r2, r3, #12
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	58d3      	ldr	r3, [r2, r3]
 80079bc:	221f      	movs	r2, #31
 80079be:	4013      	ands	r3, r2
 80079c0:	40dc      	lsrs	r4, r3
 80079c2:	0023      	movs	r3, r4
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	0800b44c 	.word	0x0800b44c

080079d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80079d8:	2313      	movs	r3, #19
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079e0:	2312      	movs	r3, #18
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	029b      	lsls	r3, r3, #10
 80079f0:	4013      	ands	r3, r2
 80079f2:	d100      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80079f4:	e0a3      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079f6:	2011      	movs	r0, #17
 80079f8:	183b      	adds	r3, r7, r0
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079fe:	4b7f      	ldr	r3, [pc, #508]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	2380      	movs	r3, #128	; 0x80
 8007a04:	055b      	lsls	r3, r3, #21
 8007a06:	4013      	ands	r3, r2
 8007a08:	d110      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a0a:	4b7c      	ldr	r3, [pc, #496]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0e:	4b7b      	ldr	r3, [pc, #492]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a10:	2180      	movs	r1, #128	; 0x80
 8007a12:	0549      	lsls	r1, r1, #21
 8007a14:	430a      	orrs	r2, r1
 8007a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a18:	4b78      	ldr	r3, [pc, #480]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a1c:	2380      	movs	r3, #128	; 0x80
 8007a1e:	055b      	lsls	r3, r3, #21
 8007a20:	4013      	ands	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a26:	183b      	adds	r3, r7, r0
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a2c:	4b74      	ldr	r3, [pc, #464]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4b73      	ldr	r3, [pc, #460]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	0049      	lsls	r1, r1, #1
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a3a:	f7fd fdb7 	bl	80055ac <HAL_GetTick>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a42:	e00b      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a44:	f7fd fdb2 	bl	80055ac <HAL_GetTick>
 8007a48:	0002      	movs	r2, r0
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d904      	bls.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007a52:	2313      	movs	r3, #19
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	2203      	movs	r2, #3
 8007a58:	701a      	strb	r2, [r3, #0]
        break;
 8007a5a:	e005      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5c:	4b68      	ldr	r3, [pc, #416]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4013      	ands	r3, r2
 8007a66:	d0ed      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007a68:	2313      	movs	r3, #19
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d154      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a72:	4b62      	ldr	r3, [pc, #392]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a76:	23c0      	movs	r3, #192	; 0xc0
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d019      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d014      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a8e:	4b5b      	ldr	r3, [pc, #364]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a92:	4a5c      	ldr	r2, [pc, #368]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a98:	4b58      	ldr	r3, [pc, #352]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a9c:	4b57      	ldr	r3, [pc, #348]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	0249      	lsls	r1, r1, #9
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa6:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007aaa:	4b54      	ldr	r3, [pc, #336]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007aac:	4956      	ldr	r1, [pc, #344]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007aae:	400a      	ands	r2, r1
 8007ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ab2:	4b52      	ldr	r3, [pc, #328]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2201      	movs	r2, #1
 8007abc:	4013      	ands	r3, r2
 8007abe:	d016      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac0:	f7fd fd74 	bl	80055ac <HAL_GetTick>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac8:	e00c      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aca:	f7fd fd6f 	bl	80055ac <HAL_GetTick>
 8007ace:	0002      	movs	r2, r0
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	4a4d      	ldr	r2, [pc, #308]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d904      	bls.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007ada:	2313      	movs	r3, #19
 8007adc:	18fb      	adds	r3, r7, r3
 8007ade:	2203      	movs	r2, #3
 8007ae0:	701a      	strb	r2, [r3, #0]
            break;
 8007ae2:	e004      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ae4:	4b45      	ldr	r3, [pc, #276]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae8:	2202      	movs	r2, #2
 8007aea:	4013      	ands	r3, r2
 8007aec:	d0ed      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007aee:	2313      	movs	r3, #19
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af8:	4b40      	ldr	r3, [pc, #256]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afc:	4a41      	ldr	r2, [pc, #260]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	0019      	movs	r1, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b0c:	e00c      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b0e:	2312      	movs	r3, #18
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	2213      	movs	r2, #19
 8007b14:	18ba      	adds	r2, r7, r2
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e005      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	2312      	movs	r3, #18
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	2213      	movs	r2, #19
 8007b22:	18ba      	adds	r2, r7, r2
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b28:	2311      	movs	r3, #17
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d105      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b32:	4b32      	ldr	r3, [pc, #200]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b36:	4b31      	ldr	r3, [pc, #196]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b38:	4935      	ldr	r1, [pc, #212]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007b3a:	400a      	ands	r2, r1
 8007b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	d009      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b48:	4b2c      	ldr	r3, [pc, #176]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	4393      	bics	r3, r2
 8007b50:	0019      	movs	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	4b29      	ldr	r3, [pc, #164]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2220      	movs	r2, #32
 8007b62:	4013      	ands	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b66:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	0019      	movs	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	4b21      	ldr	r3, [pc, #132]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b76:	430a      	orrs	r2, r1
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	2380      	movs	r3, #128	; 0x80
 8007b80:	01db      	lsls	r3, r3, #7
 8007b82:	4013      	ands	r3, r2
 8007b84:	d015      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b86:	4b1d      	ldr	r3, [pc, #116]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	0899      	lsrs	r1, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b94:	430a      	orrs	r2, r1
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	05db      	lsls	r3, r3, #23
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007ba4:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	0249      	lsls	r1, r1, #9
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	2380      	movs	r3, #128	; 0x80
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d016      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	0019      	movs	r1, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	01db      	lsls	r3, r3, #7
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d106      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	0249      	lsls	r1, r1, #9
 8007be8:	430a      	orrs	r2, r1
 8007bea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007bec:	2312      	movs	r3, #18
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
}
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	b006      	add	sp, #24
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	40021000 	.word	0x40021000
 8007c00:	40007000 	.word	0x40007000
 8007c04:	fffffcff 	.word	0xfffffcff
 8007c08:	fffeffff 	.word	0xfffeffff
 8007c0c:	00001388 	.word	0x00001388
 8007c10:	efffffff 	.word	0xefffffff
 8007c14:	ffffcfff 	.word	0xffffcfff
 8007c18:	ffff3fff 	.word	0xffff3fff

08007c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e04a      	b.n	8007cc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	223d      	movs	r2, #61	; 0x3d
 8007c32:	5c9b      	ldrb	r3, [r3, r2]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	223c      	movs	r2, #60	; 0x3c
 8007c3e:	2100      	movs	r1, #0
 8007c40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f7fc fcdf 	bl	8004608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223d      	movs	r2, #61	; 0x3d
 8007c4e:	2102      	movs	r1, #2
 8007c50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	0019      	movs	r1, r3
 8007c5c:	0010      	movs	r0, r2
 8007c5e:	f000 faeb 	bl	8008238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2248      	movs	r2, #72	; 0x48
 8007c66:	2101      	movs	r1, #1
 8007c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	223e      	movs	r2, #62	; 0x3e
 8007c6e:	2101      	movs	r1, #1
 8007c70:	5499      	strb	r1, [r3, r2]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	223f      	movs	r2, #63	; 0x3f
 8007c76:	2101      	movs	r1, #1
 8007c78:	5499      	strb	r1, [r3, r2]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2240      	movs	r2, #64	; 0x40
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2241      	movs	r2, #65	; 0x41
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2242      	movs	r2, #66	; 0x42
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2243      	movs	r2, #67	; 0x43
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2244      	movs	r2, #68	; 0x44
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	5499      	strb	r1, [r3, r2]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2245      	movs	r2, #69	; 0x45
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2246      	movs	r2, #70	; 0x46
 8007cae:	2101      	movs	r1, #1
 8007cb0:	5499      	strb	r1, [r3, r2]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2247      	movs	r2, #71	; 0x47
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	223d      	movs	r2, #61	; 0x3d
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b002      	add	sp, #8
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e04a      	b.n	8007d74 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	223d      	movs	r2, #61	; 0x3d
 8007ce2:	5c9b      	ldrb	r3, [r3, r2]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	223c      	movs	r2, #60	; 0x3c
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f7fc fc69 	bl	80045cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	223d      	movs	r2, #61	; 0x3d
 8007cfe:	2102      	movs	r1, #2
 8007d00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	0019      	movs	r1, r3
 8007d0c:	0010      	movs	r0, r2
 8007d0e:	f000 fa93 	bl	8008238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2248      	movs	r2, #72	; 0x48
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	223e      	movs	r2, #62	; 0x3e
 8007d1e:	2101      	movs	r1, #1
 8007d20:	5499      	strb	r1, [r3, r2]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	223f      	movs	r2, #63	; 0x3f
 8007d26:	2101      	movs	r1, #1
 8007d28:	5499      	strb	r1, [r3, r2]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2240      	movs	r2, #64	; 0x40
 8007d2e:	2101      	movs	r1, #1
 8007d30:	5499      	strb	r1, [r3, r2]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2241      	movs	r2, #65	; 0x41
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2242      	movs	r2, #66	; 0x42
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2243      	movs	r2, #67	; 0x43
 8007d46:	2101      	movs	r1, #1
 8007d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2244      	movs	r2, #68	; 0x44
 8007d4e:	2101      	movs	r1, #1
 8007d50:	5499      	strb	r1, [r3, r2]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2245      	movs	r2, #69	; 0x45
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2246      	movs	r2, #70	; 0x46
 8007d5e:	2101      	movs	r1, #1
 8007d60:	5499      	strb	r1, [r3, r2]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2247      	movs	r2, #71	; 0x47
 8007d66:	2101      	movs	r1, #1
 8007d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	223d      	movs	r2, #61	; 0x3d
 8007d6e:	2101      	movs	r1, #1
 8007d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d108      	bne.n	8007d9e <HAL_TIM_PWM_Start+0x22>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	223e      	movs	r2, #62	; 0x3e
 8007d90:	5c9b      	ldrb	r3, [r3, r2]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	1e5a      	subs	r2, r3, #1
 8007d98:	4193      	sbcs	r3, r2
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	e037      	b.n	8007e0e <HAL_TIM_PWM_Start+0x92>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d108      	bne.n	8007db6 <HAL_TIM_PWM_Start+0x3a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	223f      	movs	r2, #63	; 0x3f
 8007da8:	5c9b      	ldrb	r3, [r3, r2]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	1e5a      	subs	r2, r3, #1
 8007db0:	4193      	sbcs	r3, r2
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e02b      	b.n	8007e0e <HAL_TIM_PWM_Start+0x92>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d108      	bne.n	8007dce <HAL_TIM_PWM_Start+0x52>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	5c9b      	ldrb	r3, [r3, r2]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	4193      	sbcs	r3, r2
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	e01f      	b.n	8007e0e <HAL_TIM_PWM_Start+0x92>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b0c      	cmp	r3, #12
 8007dd2:	d108      	bne.n	8007de6 <HAL_TIM_PWM_Start+0x6a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2241      	movs	r2, #65	; 0x41
 8007dd8:	5c9b      	ldrb	r3, [r3, r2]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	1e5a      	subs	r2, r3, #1
 8007de0:	4193      	sbcs	r3, r2
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e013      	b.n	8007e0e <HAL_TIM_PWM_Start+0x92>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d108      	bne.n	8007dfe <HAL_TIM_PWM_Start+0x82>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2242      	movs	r2, #66	; 0x42
 8007df0:	5c9b      	ldrb	r3, [r3, r2]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	4193      	sbcs	r3, r2
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e007      	b.n	8007e0e <HAL_TIM_PWM_Start+0x92>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2243      	movs	r2, #67	; 0x43
 8007e02:	5c9b      	ldrb	r3, [r3, r2]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	1e5a      	subs	r2, r3, #1
 8007e0a:	4193      	sbcs	r3, r2
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e07b      	b.n	8007f0e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_PWM_Start+0xaa>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	223e      	movs	r2, #62	; 0x3e
 8007e20:	2102      	movs	r1, #2
 8007e22:	5499      	strb	r1, [r3, r2]
 8007e24:	e023      	b.n	8007e6e <HAL_TIM_PWM_Start+0xf2>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start+0xba>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	223f      	movs	r2, #63	; 0x3f
 8007e30:	2102      	movs	r1, #2
 8007e32:	5499      	strb	r1, [r3, r2]
 8007e34:	e01b      	b.n	8007e6e <HAL_TIM_PWM_Start+0xf2>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start+0xca>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2240      	movs	r2, #64	; 0x40
 8007e40:	2102      	movs	r1, #2
 8007e42:	5499      	strb	r1, [r3, r2]
 8007e44:	e013      	b.n	8007e6e <HAL_TIM_PWM_Start+0xf2>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start+0xda>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2241      	movs	r2, #65	; 0x41
 8007e50:	2102      	movs	r1, #2
 8007e52:	5499      	strb	r1, [r3, r2]
 8007e54:	e00b      	b.n	8007e6e <HAL_TIM_PWM_Start+0xf2>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b10      	cmp	r3, #16
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0xea>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2242      	movs	r2, #66	; 0x42
 8007e60:	2102      	movs	r1, #2
 8007e62:	5499      	strb	r1, [r3, r2]
 8007e64:	e003      	b.n	8007e6e <HAL_TIM_PWM_Start+0xf2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2243      	movs	r2, #67	; 0x43
 8007e6a:	2102      	movs	r1, #2
 8007e6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	2201      	movs	r2, #1
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 fce6 	bl	8008848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <HAL_TIM_PWM_Start+0x19c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x11e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <HAL_TIM_PWM_Start+0x1a0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x11e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a22      	ldr	r2, [pc, #136]	; (8007f20 <HAL_TIM_PWM_Start+0x1a4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_PWM_Start+0x122>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x124>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	0209      	lsls	r1, r1, #8
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <HAL_TIM_PWM_Start+0x19c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIM_PWM_Start+0x14e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_TIM_PWM_Start+0x1a8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d116      	bne.n	8007ef8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <HAL_TIM_PWM_Start+0x1ac>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b06      	cmp	r3, #6
 8007eda:	d016      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x18e>
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	2380      	movs	r3, #128	; 0x80
 8007ee0:	025b      	lsls	r3, r3, #9
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d011      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef6:	e008      	b.n	8007f0a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2101      	movs	r1, #1
 8007f04:	430a      	orrs	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	e000      	b.n	8007f0c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	0018      	movs	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b004      	add	sp, #16
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	40012c00 	.word	0x40012c00
 8007f1c:	40014400 	.word	0x40014400
 8007f20:	40014800 	.word	0x40014800
 8007f24:	40000400 	.word	0x40000400
 8007f28:	00010007 	.word	0x00010007

08007f2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 fc82 	bl	8008848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a35      	ldr	r2, [pc, #212]	; (8008020 <HAL_TIM_PWM_Stop+0xf4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d009      	beq.n	8007f62 <HAL_TIM_PWM_Stop+0x36>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_TIM_PWM_Stop+0xf8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d004      	beq.n	8007f62 <HAL_TIM_PWM_Stop+0x36>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a32      	ldr	r2, [pc, #200]	; (8008028 <HAL_TIM_PWM_Stop+0xfc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d101      	bne.n	8007f66 <HAL_TIM_PWM_Stop+0x3a>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <HAL_TIM_PWM_Stop+0x3c>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	4a2e      	ldr	r2, [pc, #184]	; (800802c <HAL_TIM_PWM_Stop+0x100>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	d10d      	bne.n	8007f94 <HAL_TIM_PWM_Stop+0x68>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	4a2c      	ldr	r2, [pc, #176]	; (8008030 <HAL_TIM_PWM_Stop+0x104>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	d107      	bne.n	8007f94 <HAL_TIM_PWM_Stop+0x68>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4929      	ldr	r1, [pc, #164]	; (8008034 <HAL_TIM_PWM_Stop+0x108>)
 8007f90:	400a      	ands	r2, r1
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	4a24      	ldr	r2, [pc, #144]	; (800802c <HAL_TIM_PWM_Stop+0x100>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	d10d      	bne.n	8007fbc <HAL_TIM_PWM_Stop+0x90>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	4a22      	ldr	r2, [pc, #136]	; (8008030 <HAL_TIM_PWM_Stop+0x104>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_PWM_Stop+0x90>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	438a      	bics	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <HAL_TIM_PWM_Stop+0xa0>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	223e      	movs	r2, #62	; 0x3e
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	5499      	strb	r1, [r3, r2]
 8007fca:	e023      	b.n	8008014 <HAL_TIM_PWM_Stop+0xe8>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d104      	bne.n	8007fdc <HAL_TIM_PWM_Stop+0xb0>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	223f      	movs	r2, #63	; 0x3f
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	5499      	strb	r1, [r3, r2]
 8007fda:	e01b      	b.n	8008014 <HAL_TIM_PWM_Stop+0xe8>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d104      	bne.n	8007fec <HAL_TIM_PWM_Stop+0xc0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2240      	movs	r2, #64	; 0x40
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	5499      	strb	r1, [r3, r2]
 8007fea:	e013      	b.n	8008014 <HAL_TIM_PWM_Stop+0xe8>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b0c      	cmp	r3, #12
 8007ff0:	d104      	bne.n	8007ffc <HAL_TIM_PWM_Stop+0xd0>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2241      	movs	r2, #65	; 0x41
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	5499      	strb	r1, [r3, r2]
 8007ffa:	e00b      	b.n	8008014 <HAL_TIM_PWM_Stop+0xe8>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d104      	bne.n	800800c <HAL_TIM_PWM_Stop+0xe0>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2242      	movs	r2, #66	; 0x42
 8008006:	2101      	movs	r1, #1
 8008008:	5499      	strb	r1, [r3, r2]
 800800a:	e003      	b.n	8008014 <HAL_TIM_PWM_Stop+0xe8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2243      	movs	r2, #67	; 0x43
 8008010:	2101      	movs	r1, #1
 8008012:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b002      	add	sp, #8
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800
 800802c:	00001111 	.word	0x00001111
 8008030:	00000444 	.word	0x00000444
 8008034:	ffff7fff 	.word	0xffff7fff

08008038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008044:	2317      	movs	r3, #23
 8008046:	18fb      	adds	r3, r7, r3
 8008048:	2200      	movs	r2, #0
 800804a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	223c      	movs	r2, #60	; 0x3c
 8008050:	5c9b      	ldrb	r3, [r3, r2]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_TIM_PWM_ConfigChannel+0x22>
 8008056:	2302      	movs	r3, #2
 8008058:	e0e5      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	223c      	movs	r2, #60	; 0x3c
 800805e:	2101      	movs	r1, #1
 8008060:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b14      	cmp	r3, #20
 8008066:	d900      	bls.n	800806a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008068:	e0d1      	b.n	800820e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	009a      	lsls	r2, r3, #2
 800806e:	4b70      	ldr	r3, [pc, #448]	; (8008230 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008070:	18d3      	adds	r3, r2, r3
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	0011      	movs	r1, r2
 800807e:	0018      	movs	r0, r3
 8008080:	f000 f946 	bl	8008310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2108      	movs	r1, #8
 8008090:	430a      	orrs	r2, r1
 8008092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2104      	movs	r1, #4
 80080a0:	438a      	bics	r2, r1
 80080a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6999      	ldr	r1, [r3, #24]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	619a      	str	r2, [r3, #24]
      break;
 80080b6:	e0af      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0011      	movs	r1, r2
 80080c0:	0018      	movs	r0, r3
 80080c2:	f000 f9a5 	bl	8008410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2180      	movs	r1, #128	; 0x80
 80080d2:	0109      	lsls	r1, r1, #4
 80080d4:	430a      	orrs	r2, r1
 80080d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4954      	ldr	r1, [pc, #336]	; (8008234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80080e4:	400a      	ands	r2, r1
 80080e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	021a      	lsls	r2, r3, #8
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	619a      	str	r2, [r3, #24]
      break;
 80080fc:	e08c      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	0011      	movs	r1, r2
 8008106:	0018      	movs	r0, r3
 8008108:	f000 fa00 	bl	800850c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2108      	movs	r1, #8
 8008118:	430a      	orrs	r2, r1
 800811a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69da      	ldr	r2, [r3, #28]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2104      	movs	r1, #4
 8008128:	438a      	bics	r2, r1
 800812a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69d9      	ldr	r1, [r3, #28]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	61da      	str	r2, [r3, #28]
      break;
 800813e:	e06b      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	0011      	movs	r1, r2
 8008148:	0018      	movs	r0, r3
 800814a:	f000 fa61 	bl	8008610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	0109      	lsls	r1, r1, #4
 800815c:	430a      	orrs	r2, r1
 800815e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4932      	ldr	r1, [pc, #200]	; (8008234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800816c:	400a      	ands	r2, r1
 800816e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69d9      	ldr	r1, [r3, #28]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	021a      	lsls	r2, r3, #8
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	61da      	str	r2, [r3, #28]
      break;
 8008184:	e048      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	0011      	movs	r1, r2
 800818e:	0018      	movs	r0, r3
 8008190:	f000 faa2 	bl	80086d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2108      	movs	r1, #8
 80081a0:	430a      	orrs	r2, r1
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2104      	movs	r1, #4
 80081b0:	438a      	bics	r2, r1
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081c6:	e027      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	0011      	movs	r1, r2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f000 fadb 	bl	800878c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2180      	movs	r1, #128	; 0x80
 80081e2:	0109      	lsls	r1, r1, #4
 80081e4:	430a      	orrs	r2, r1
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4910      	ldr	r1, [pc, #64]	; (8008234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80081f4:	400a      	ands	r2, r1
 80081f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800820c:	e004      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800820e:	2317      	movs	r3, #23
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	223c      	movs	r2, #60	; 0x3c
 800821c:	2100      	movs	r1, #0
 800821e:	5499      	strb	r1, [r3, r2]

  return status;
 8008220:	2317      	movs	r3, #23
 8008222:	18fb      	adds	r3, r7, r3
 8008224:	781b      	ldrb	r3, [r3, #0]
}
 8008226:	0018      	movs	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	b006      	add	sp, #24
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	0800b46c 	.word	0x0800b46c
 8008234:	fffffbff 	.word	0xfffffbff

08008238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <TIM_Base_SetConfig+0xc0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_Base_SetConfig+0x20>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <TIM_Base_SetConfig+0xc4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d108      	bne.n	800826a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2270      	movs	r2, #112	; 0x70
 800825c:	4393      	bics	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a22      	ldr	r2, [pc, #136]	; (80082f8 <TIM_Base_SetConfig+0xc0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00f      	beq.n	8008292 <TIM_Base_SetConfig+0x5a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a21      	ldr	r2, [pc, #132]	; (80082fc <TIM_Base_SetConfig+0xc4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00b      	beq.n	8008292 <TIM_Base_SetConfig+0x5a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a20      	ldr	r2, [pc, #128]	; (8008300 <TIM_Base_SetConfig+0xc8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_Base_SetConfig+0x5a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <TIM_Base_SetConfig+0xcc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_Base_SetConfig+0x5a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a1e      	ldr	r2, [pc, #120]	; (8008308 <TIM_Base_SetConfig+0xd0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a1d      	ldr	r2, [pc, #116]	; (800830c <TIM_Base_SetConfig+0xd4>)
 8008296:	4013      	ands	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2280      	movs	r2, #128	; 0x80
 80082a8:	4393      	bics	r3, r2
 80082aa:	001a      	movs	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <TIM_Base_SetConfig+0xc0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0xaa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <TIM_Base_SetConfig+0xcc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0xaa>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <TIM_Base_SetConfig+0xd0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d103      	bne.n	80082ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	615a      	str	r2, [r3, #20]
}
 80082f0:	46c0      	nop			; (mov r8, r8)
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b004      	add	sp, #16
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40012c00 	.word	0x40012c00
 80082fc:	40000400 	.word	0x40000400
 8008300:	40002000 	.word	0x40002000
 8008304:	40014400 	.word	0x40014400
 8008308:	40014800 	.word	0x40014800
 800830c:	fffffcff 	.word	0xfffffcff

08008310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	2201      	movs	r2, #1
 8008320:	4393      	bics	r3, r2
 8008322:	001a      	movs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a2e      	ldr	r2, [pc, #184]	; (80083f8 <TIM_OC1_SetConfig+0xe8>)
 800833e:	4013      	ands	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2203      	movs	r2, #3
 8008346:	4393      	bics	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2202      	movs	r2, #2
 8008358:	4393      	bics	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a24      	ldr	r2, [pc, #144]	; (80083fc <TIM_OC1_SetConfig+0xec>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d007      	beq.n	800837e <TIM_OC1_SetConfig+0x6e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a23      	ldr	r2, [pc, #140]	; (8008400 <TIM_OC1_SetConfig+0xf0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_OC1_SetConfig+0x6e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a22      	ldr	r2, [pc, #136]	; (8008404 <TIM_OC1_SetConfig+0xf4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d10c      	bne.n	8008398 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2208      	movs	r2, #8
 8008382:	4393      	bics	r3, r2
 8008384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2204      	movs	r2, #4
 8008394:	4393      	bics	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a18      	ldr	r2, [pc, #96]	; (80083fc <TIM_OC1_SetConfig+0xec>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_OC1_SetConfig+0xa0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a17      	ldr	r2, [pc, #92]	; (8008400 <TIM_OC1_SetConfig+0xf0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_OC1_SetConfig+0xa0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a16      	ldr	r2, [pc, #88]	; (8008404 <TIM_OC1_SetConfig+0xf4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d111      	bne.n	80083d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <TIM_OC1_SetConfig+0xf8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	4a14      	ldr	r2, [pc, #80]	; (800840c <TIM_OC1_SetConfig+0xfc>)
 80083bc:	4013      	ands	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	46bd      	mov	sp, r7
 80083f2:	b006      	add	sp, #24
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	fffeff8f 	.word	0xfffeff8f
 80083fc:	40012c00 	.word	0x40012c00
 8008400:	40014400 	.word	0x40014400
 8008404:	40014800 	.word	0x40014800
 8008408:	fffffeff 	.word	0xfffffeff
 800840c:	fffffdff 	.word	0xfffffdff

08008410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	2210      	movs	r2, #16
 8008420:	4393      	bics	r3, r2
 8008422:	001a      	movs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4a2c      	ldr	r2, [pc, #176]	; (80084f0 <TIM_OC2_SetConfig+0xe0>)
 800843e:	4013      	ands	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a2b      	ldr	r2, [pc, #172]	; (80084f4 <TIM_OC2_SetConfig+0xe4>)
 8008446:	4013      	ands	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2220      	movs	r2, #32
 800845a:	4393      	bics	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a22      	ldr	r2, [pc, #136]	; (80084f8 <TIM_OC2_SetConfig+0xe8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10d      	bne.n	800848e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2280      	movs	r2, #128	; 0x80
 8008476:	4393      	bics	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2240      	movs	r2, #64	; 0x40
 800848a:	4393      	bics	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a19      	ldr	r2, [pc, #100]	; (80084f8 <TIM_OC2_SetConfig+0xe8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_OC2_SetConfig+0x96>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a18      	ldr	r2, [pc, #96]	; (80084fc <TIM_OC2_SetConfig+0xec>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC2_SetConfig+0x96>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a17      	ldr	r2, [pc, #92]	; (8008500 <TIM_OC2_SetConfig+0xf0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d113      	bne.n	80084ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <TIM_OC2_SetConfig+0xf4>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	4a15      	ldr	r2, [pc, #84]	; (8008508 <TIM_OC2_SetConfig+0xf8>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	621a      	str	r2, [r3, #32]
}
 80084e8:	46c0      	nop			; (mov r8, r8)
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b006      	add	sp, #24
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	feff8fff 	.word	0xfeff8fff
 80084f4:	fffffcff 	.word	0xfffffcff
 80084f8:	40012c00 	.word	0x40012c00
 80084fc:	40014400 	.word	0x40014400
 8008500:	40014800 	.word	0x40014800
 8008504:	fffffbff 	.word	0xfffffbff
 8008508:	fffff7ff 	.word	0xfffff7ff

0800850c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	4a33      	ldr	r2, [pc, #204]	; (80085e8 <TIM_OC3_SetConfig+0xdc>)
 800851c:	401a      	ands	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <TIM_OC3_SetConfig+0xe0>)
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2203      	movs	r2, #3
 8008540:	4393      	bics	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	4a27      	ldr	r2, [pc, #156]	; (80085f0 <TIM_OC3_SetConfig+0xe4>)
 8008552:	4013      	ands	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a23      	ldr	r2, [pc, #140]	; (80085f4 <TIM_OC3_SetConfig+0xe8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d10d      	bne.n	8008586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	4a22      	ldr	r2, [pc, #136]	; (80085f8 <TIM_OC3_SetConfig+0xec>)
 800856e:	4013      	ands	r3, r2
 8008570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <TIM_OC3_SetConfig+0xf0>)
 8008582:	4013      	ands	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1a      	ldr	r2, [pc, #104]	; (80085f4 <TIM_OC3_SetConfig+0xe8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d007      	beq.n	800859e <TIM_OC3_SetConfig+0x92>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <TIM_OC3_SetConfig+0xf4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d003      	beq.n	800859e <TIM_OC3_SetConfig+0x92>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1a      	ldr	r2, [pc, #104]	; (8008604 <TIM_OC3_SetConfig+0xf8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d113      	bne.n	80085c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4a19      	ldr	r2, [pc, #100]	; (8008608 <TIM_OC3_SetConfig+0xfc>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	4a18      	ldr	r2, [pc, #96]	; (800860c <TIM_OC3_SetConfig+0x100>)
 80085aa:	4013      	ands	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	46c0      	nop			; (mov r8, r8)
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b006      	add	sp, #24
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	fffffeff 	.word	0xfffffeff
 80085ec:	fffeff8f 	.word	0xfffeff8f
 80085f0:	fffffdff 	.word	0xfffffdff
 80085f4:	40012c00 	.word	0x40012c00
 80085f8:	fffff7ff 	.word	0xfffff7ff
 80085fc:	fffffbff 	.word	0xfffffbff
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800
 8008608:	ffffefff 	.word	0xffffefff
 800860c:	ffffdfff 	.word	0xffffdfff

08008610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	4a26      	ldr	r2, [pc, #152]	; (80086b8 <TIM_OC4_SetConfig+0xa8>)
 8008620:	401a      	ands	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a20      	ldr	r2, [pc, #128]	; (80086bc <TIM_OC4_SetConfig+0xac>)
 800863c:	4013      	ands	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <TIM_OC4_SetConfig+0xb0>)
 8008644:	4013      	ands	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <TIM_OC4_SetConfig+0xb4>)
 8008658:	4013      	ands	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	031b      	lsls	r3, r3, #12
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <TIM_OC4_SetConfig+0xb8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d007      	beq.n	8008680 <TIM_OC4_SetConfig+0x70>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a16      	ldr	r2, [pc, #88]	; (80086cc <TIM_OC4_SetConfig+0xbc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d003      	beq.n	8008680 <TIM_OC4_SetConfig+0x70>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a15      	ldr	r2, [pc, #84]	; (80086d0 <TIM_OC4_SetConfig+0xc0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d109      	bne.n	8008694 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4a14      	ldr	r2, [pc, #80]	; (80086d4 <TIM_OC4_SetConfig+0xc4>)
 8008684:	4013      	ands	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	019b      	lsls	r3, r3, #6
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b006      	add	sp, #24
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	46c0      	nop			; (mov r8, r8)
 80086b8:	ffffefff 	.word	0xffffefff
 80086bc:	feff8fff 	.word	0xfeff8fff
 80086c0:	fffffcff 	.word	0xfffffcff
 80086c4:	ffffdfff 	.word	0xffffdfff
 80086c8:	40012c00 	.word	0x40012c00
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800
 80086d4:	ffffbfff 	.word	0xffffbfff

080086d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	4a23      	ldr	r2, [pc, #140]	; (8008774 <TIM_OC5_SetConfig+0x9c>)
 80086e8:	401a      	ands	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a1d      	ldr	r2, [pc, #116]	; (8008778 <TIM_OC5_SetConfig+0xa0>)
 8008704:	4013      	ands	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4a19      	ldr	r2, [pc, #100]	; (800877c <TIM_OC5_SetConfig+0xa4>)
 8008716:	4013      	ands	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <TIM_OC5_SetConfig+0xa8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d007      	beq.n	800873e <TIM_OC5_SetConfig+0x66>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a14      	ldr	r2, [pc, #80]	; (8008784 <TIM_OC5_SetConfig+0xac>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC5_SetConfig+0x66>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <TIM_OC5_SetConfig+0xb0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d109      	bne.n	8008752 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	4a0c      	ldr	r2, [pc, #48]	; (8008774 <TIM_OC5_SetConfig+0x9c>)
 8008742:	4013      	ands	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	46c0      	nop			; (mov r8, r8)
 800876e:	46bd      	mov	sp, r7
 8008770:	b006      	add	sp, #24
 8008772:	bd80      	pop	{r7, pc}
 8008774:	fffeffff 	.word	0xfffeffff
 8008778:	fffeff8f 	.word	0xfffeff8f
 800877c:	fffdffff 	.word	0xfffdffff
 8008780:	40012c00 	.word	0x40012c00
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800

0800878c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	4a24      	ldr	r2, [pc, #144]	; (800882c <TIM_OC6_SetConfig+0xa0>)
 800879c:	401a      	ands	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <TIM_OC6_SetConfig+0xa4>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4a1a      	ldr	r2, [pc, #104]	; (8008834 <TIM_OC6_SetConfig+0xa8>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	051b      	lsls	r3, r3, #20
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a16      	ldr	r2, [pc, #88]	; (8008838 <TIM_OC6_SetConfig+0xac>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d007      	beq.n	80087f4 <TIM_OC6_SetConfig+0x68>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a15      	ldr	r2, [pc, #84]	; (800883c <TIM_OC6_SetConfig+0xb0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_OC6_SetConfig+0x68>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a14      	ldr	r2, [pc, #80]	; (8008840 <TIM_OC6_SetConfig+0xb4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d109      	bne.n	8008808 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4a13      	ldr	r2, [pc, #76]	; (8008844 <TIM_OC6_SetConfig+0xb8>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	029b      	lsls	r3, r3, #10
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	46c0      	nop			; (mov r8, r8)
 8008824:	46bd      	mov	sp, r7
 8008826:	b006      	add	sp, #24
 8008828:	bd80      	pop	{r7, pc}
 800882a:	46c0      	nop			; (mov r8, r8)
 800882c:	ffefffff 	.word	0xffefffff
 8008830:	feff8fff 	.word	0xfeff8fff
 8008834:	ffdfffff 	.word	0xffdfffff
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40014400 	.word	0x40014400
 8008840:	40014800 	.word	0x40014800
 8008844:	fffbffff 	.word	0xfffbffff

08008848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	221f      	movs	r2, #31
 8008858:	4013      	ands	r3, r2
 800885a:	2201      	movs	r2, #1
 800885c:	409a      	lsls	r2, r3
 800885e:	0013      	movs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	43d2      	mvns	r2, r2
 800886a:	401a      	ands	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	211f      	movs	r1, #31
 8008878:	400b      	ands	r3, r1
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4099      	lsls	r1, r3
 800887e:	000b      	movs	r3, r1
 8008880:	431a      	orrs	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	46bd      	mov	sp, r7
 800888a:	b006      	add	sp, #24
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	223c      	movs	r2, #60	; 0x3c
 800889e:	5c9b      	ldrb	r3, [r3, r2]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e04a      	b.n	800893e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	223c      	movs	r2, #60	; 0x3c
 80088ac:	2101      	movs	r1, #1
 80088ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	223d      	movs	r2, #61	; 0x3d
 80088b4:	2102      	movs	r1, #2
 80088b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d108      	bne.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4a1d      	ldr	r2, [pc, #116]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2270      	movs	r2, #112	; 0x70
 80088e8:	4393      	bics	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a11      	ldr	r2, [pc, #68]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a10      	ldr	r2, [pc, #64]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d10c      	bne.n	800892c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2280      	movs	r2, #128	; 0x80
 8008916:	4393      	bics	r3, r2
 8008918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4313      	orrs	r3, r2
 8008922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	223d      	movs	r2, #61	; 0x3d
 8008930:	2101      	movs	r1, #1
 8008932:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	223c      	movs	r2, #60	; 0x3c
 8008938:	2100      	movs	r1, #0
 800893a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	0018      	movs	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	b004      	add	sp, #16
 8008944:	bd80      	pop	{r7, pc}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	40012c00 	.word	0x40012c00
 800894c:	ff0fffff 	.word	0xff0fffff
 8008950:	40000400 	.word	0x40000400

08008954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e046      	b.n	80089f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2288      	movs	r2, #136	; 0x88
 800896a:	589b      	ldr	r3, [r3, r2]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d107      	bne.n	8008980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2284      	movs	r2, #132	; 0x84
 8008974:	2100      	movs	r1, #0
 8008976:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	0018      	movs	r0, r3
 800897c:	f7fb ff70 	bl	8004860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2288      	movs	r2, #136	; 0x88
 8008984:	2124      	movs	r1, #36	; 0x24
 8008986:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2101      	movs	r1, #1
 8008994:	438a      	bics	r2, r1
 8008996:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	0018      	movs	r0, r3
 800899c:	f000 fc72 	bl	8009284 <UART_SetConfig>
 80089a0:	0003      	movs	r3, r0
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e024      	b.n	80089f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	0018      	movs	r0, r3
 80089b6:	f000 fdcf 	bl	8009558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	490d      	ldr	r1, [pc, #52]	; (80089fc <HAL_UART_Init+0xa8>)
 80089c6:	400a      	ands	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	212a      	movs	r1, #42	; 0x2a
 80089d6:	438a      	bics	r2, r1
 80089d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2101      	movs	r1, #1
 80089e6:	430a      	orrs	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	0018      	movs	r0, r3
 80089ee:	f000 fe67 	bl	80096c0 <UART_CheckIdleState>
 80089f2:	0003      	movs	r3, r0
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	ffffb7ff 	.word	0xffffb7ff

08008a00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	; 0x30
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	1dbb      	adds	r3, r7, #6
 8008a0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2288      	movs	r2, #136	; 0x88
 8008a12:	589b      	ldr	r3, [r3, r2]
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d000      	beq.n	8008a1a <HAL_UART_Transmit_IT+0x1a>
 8008a18:	e08d      	b.n	8008b36 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <HAL_UART_Transmit_IT+0x28>
 8008a20:	1dbb      	adds	r3, r7, #6
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e085      	b.n	8008b38 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	015b      	lsls	r3, r3, #5
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d109      	bne.n	8008a4c <HAL_UART_Transmit_IT+0x4c>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2201      	movs	r2, #1
 8008a44:	4013      	ands	r3, r2
 8008a46:	d001      	beq.n	8008a4c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e075      	b.n	8008b38 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1dba      	adds	r2, r7, #6
 8008a56:	2154      	movs	r1, #84	; 0x54
 8008a58:	8812      	ldrh	r2, [r2, #0]
 8008a5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	1dba      	adds	r2, r7, #6
 8008a60:	2156      	movs	r1, #86	; 0x56
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2290      	movs	r2, #144	; 0x90
 8008a70:	2100      	movs	r1, #0
 8008a72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2288      	movs	r2, #136	; 0x88
 8008a78:	2121      	movs	r1, #33	; 0x21
 8008a7a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a80:	2380      	movs	r3, #128	; 0x80
 8008a82:	059b      	lsls	r3, r3, #22
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d12a      	bne.n	8008ade <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	2380      	movs	r3, #128	; 0x80
 8008a8e:	015b      	lsls	r3, r3, #5
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d107      	bne.n	8008aa4 <HAL_UART_Transmit_IT+0xa4>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4a28      	ldr	r2, [pc, #160]	; (8008b40 <HAL_UART_Transmit_IT+0x140>)
 8008aa0:	679a      	str	r2, [r3, #120]	; 0x78
 8008aa2:	e002      	b.n	8008aaa <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4a27      	ldr	r2, [pc, #156]	; (8008b44 <HAL_UART_Transmit_IT+0x144>)
 8008aa8:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8008aae:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ab0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	f383 8810 	msr	PRIMASK, r3
}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2180      	movs	r1, #128	; 0x80
 8008acc:	0409      	lsls	r1, r1, #16
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	609a      	str	r2, [r3, #8]
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	f383 8810 	msr	PRIMASK, r3
}
 8008adc:	e029      	b.n	8008b32 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	015b      	lsls	r3, r3, #5
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d107      	bne.n	8008afa <HAL_UART_Transmit_IT+0xfa>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a14      	ldr	r2, [pc, #80]	; (8008b48 <HAL_UART_Transmit_IT+0x148>)
 8008af6:	679a      	str	r2, [r3, #120]	; 0x78
 8008af8:	e002      	b.n	8008b00 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <HAL_UART_Transmit_IT+0x14c>)
 8008afe:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b00:	f3ef 8310 	mrs	r3, PRIMASK
 8008b04:	613b      	str	r3, [r7, #16]
  return(result);
 8008b06:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f383 8810 	msr	PRIMASK, r3
}
 8008b14:	46c0      	nop			; (mov r8, r8)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2180      	movs	r1, #128	; 0x80
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f383 8810 	msr	PRIMASK, r3
}
 8008b30:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e000      	b.n	8008b38 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8008b36:	2302      	movs	r3, #2
  }
}
 8008b38:	0018      	movs	r0, r3
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	b00c      	add	sp, #48	; 0x30
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	0800a009 	.word	0x0800a009
 8008b44:	08009f1d 	.word	0x08009f1d
 8008b48:	08009e5f 	.word	0x08009e5f
 8008b4c:	08009dab 	.word	0x08009dab

08008b50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	1dbb      	adds	r3, r7, #6
 8008b5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	228c      	movs	r2, #140	; 0x8c
 8008b62:	589b      	ldr	r3, [r3, r2]
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d145      	bne.n	8008bf4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_UART_Receive_DMA+0x26>
 8008b6e:	1dbb      	adds	r3, r7, #6
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e03d      	b.n	8008bf6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	015b      	lsls	r3, r3, #5
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d109      	bne.n	8008b9a <HAL_UART_Receive_DMA+0x4a>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2201      	movs	r2, #1
 8008b92:	4013      	ands	r3, r2
 8008b94:	d001      	beq.n	8008b9a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e02d      	b.n	8008bf6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	2380      	movs	r3, #128	; 0x80
 8008ba8:	041b      	lsls	r3, r3, #16
 8008baa:	4013      	ands	r3, r2
 8008bac:	d019      	beq.n	8008be2 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bae:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8008bb4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f383 8810 	msr	PRIMASK, r3
}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2180      	movs	r1, #128	; 0x80
 8008bd0:	04c9      	lsls	r1, r1, #19
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	f383 8810 	msr	PRIMASK, r3
}
 8008be0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008be2:	1dbb      	adds	r3, r7, #6
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	0018      	movs	r0, r3
 8008bec:	f000 fe7e 	bl	80098ec <UART_Start_Receive_DMA>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	e000      	b.n	8008bf6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
  }
}
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	b008      	add	sp, #32
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c00:	b5b0      	push	{r4, r5, r7, lr}
 8008c02:	b0aa      	sub	sp, #168	; 0xa8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	22a4      	movs	r2, #164	; 0xa4
 8008c10:	18b9      	adds	r1, r7, r2
 8008c12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	20a0      	movs	r0, #160	; 0xa0
 8008c1c:	1839      	adds	r1, r7, r0
 8008c1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	249c      	movs	r4, #156	; 0x9c
 8008c28:	1939      	adds	r1, r7, r4
 8008c2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c2c:	0011      	movs	r1, r2
 8008c2e:	18bb      	adds	r3, r7, r2
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4aa2      	ldr	r2, [pc, #648]	; (8008ebc <HAL_UART_IRQHandler+0x2bc>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	2298      	movs	r2, #152	; 0x98
 8008c38:	18bd      	adds	r5, r7, r2
 8008c3a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008c3c:	18bb      	adds	r3, r7, r2
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d11a      	bne.n	8008c7a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d015      	beq.n	8008c7a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c4e:	183b      	adds	r3, r7, r0
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2220      	movs	r2, #32
 8008c54:	4013      	ands	r3, r2
 8008c56:	d105      	bne.n	8008c64 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c58:	193b      	adds	r3, r7, r4
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	055b      	lsls	r3, r3, #21
 8008c60:	4013      	ands	r3, r2
 8008c62:	d00a      	beq.n	8008c7a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d100      	bne.n	8008c6e <HAL_UART_IRQHandler+0x6e>
 8008c6c:	e2dc      	b.n	8009228 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	0010      	movs	r0, r2
 8008c76:	4798      	blx	r3
      }
      return;
 8008c78:	e2d6      	b.n	8009228 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c7a:	2398      	movs	r3, #152	; 0x98
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d100      	bne.n	8008c86 <HAL_UART_IRQHandler+0x86>
 8008c84:	e122      	b.n	8008ecc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c86:	239c      	movs	r3, #156	; 0x9c
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a8c      	ldr	r2, [pc, #560]	; (8008ec0 <HAL_UART_IRQHandler+0x2c0>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d106      	bne.n	8008ca0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c92:	23a0      	movs	r3, #160	; 0xa0
 8008c94:	18fb      	adds	r3, r7, r3
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a8a      	ldr	r2, [pc, #552]	; (8008ec4 <HAL_UART_IRQHandler+0x2c4>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d100      	bne.n	8008ca0 <HAL_UART_IRQHandler+0xa0>
 8008c9e:	e115      	b.n	8008ecc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ca0:	23a4      	movs	r3, #164	; 0xa4
 8008ca2:	18fb      	adds	r3, r7, r3
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d012      	beq.n	8008cd2 <HAL_UART_IRQHandler+0xd2>
 8008cac:	23a0      	movs	r3, #160	; 0xa0
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2290      	movs	r2, #144	; 0x90
 8008cc6:	589b      	ldr	r3, [r3, r2]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2190      	movs	r1, #144	; 0x90
 8008cd0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cd2:	23a4      	movs	r3, #164	; 0xa4
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d011      	beq.n	8008d02 <HAL_UART_IRQHandler+0x102>
 8008cde:	239c      	movs	r3, #156	; 0x9c
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d00b      	beq.n	8008d02 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2290      	movs	r2, #144	; 0x90
 8008cf6:	589b      	ldr	r3, [r3, r2]
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2190      	movs	r1, #144	; 0x90
 8008d00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d02:	23a4      	movs	r3, #164	; 0xa4
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	d011      	beq.n	8008d32 <HAL_UART_IRQHandler+0x132>
 8008d0e:	239c      	movs	r3, #156	; 0x9c
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2201      	movs	r2, #1
 8008d16:	4013      	ands	r3, r2
 8008d18:	d00b      	beq.n	8008d32 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2204      	movs	r2, #4
 8008d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2290      	movs	r2, #144	; 0x90
 8008d26:	589b      	ldr	r3, [r3, r2]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2190      	movs	r1, #144	; 0x90
 8008d30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d32:	23a4      	movs	r3, #164	; 0xa4
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2208      	movs	r2, #8
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d017      	beq.n	8008d6e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d3e:	23a0      	movs	r3, #160	; 0xa0
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2220      	movs	r2, #32
 8008d46:	4013      	ands	r3, r2
 8008d48:	d105      	bne.n	8008d56 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d4a:	239c      	movs	r3, #156	; 0x9c
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a5b      	ldr	r2, [pc, #364]	; (8008ec0 <HAL_UART_IRQHandler+0x2c0>)
 8008d52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d54:	d00b      	beq.n	8008d6e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2290      	movs	r2, #144	; 0x90
 8008d62:	589b      	ldr	r3, [r3, r2]
 8008d64:	2208      	movs	r2, #8
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2190      	movs	r1, #144	; 0x90
 8008d6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d6e:	23a4      	movs	r3, #164	; 0xa4
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	4013      	ands	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <HAL_UART_IRQHandler+0x1a4>
 8008d7c:	23a0      	movs	r3, #160	; 0xa0
 8008d7e:	18fb      	adds	r3, r7, r3
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	2380      	movs	r3, #128	; 0x80
 8008d84:	04db      	lsls	r3, r3, #19
 8008d86:	4013      	ands	r3, r2
 8008d88:	d00c      	beq.n	8008da4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2280      	movs	r2, #128	; 0x80
 8008d90:	0112      	lsls	r2, r2, #4
 8008d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2290      	movs	r2, #144	; 0x90
 8008d98:	589b      	ldr	r3, [r3, r2]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2190      	movs	r1, #144	; 0x90
 8008da2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2290      	movs	r2, #144	; 0x90
 8008da8:	589b      	ldr	r3, [r3, r2]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d100      	bne.n	8008db0 <HAL_UART_IRQHandler+0x1b0>
 8008dae:	e23d      	b.n	800922c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008db0:	23a4      	movs	r3, #164	; 0xa4
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2220      	movs	r2, #32
 8008db8:	4013      	ands	r3, r2
 8008dba:	d015      	beq.n	8008de8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dbc:	23a0      	movs	r3, #160	; 0xa0
 8008dbe:	18fb      	adds	r3, r7, r3
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	d106      	bne.n	8008dd6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008dc8:	239c      	movs	r3, #156	; 0x9c
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	2380      	movs	r3, #128	; 0x80
 8008dd0:	055b      	lsls	r3, r3, #21
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	d008      	beq.n	8008de8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	0010      	movs	r0, r2
 8008de6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2290      	movs	r2, #144	; 0x90
 8008dec:	589b      	ldr	r3, [r3, r2]
 8008dee:	2194      	movs	r1, #148	; 0x94
 8008df0:	187a      	adds	r2, r7, r1
 8008df2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2240      	movs	r2, #64	; 0x40
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d004      	beq.n	8008e0c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e02:	187b      	adds	r3, r7, r1
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2228      	movs	r2, #40	; 0x28
 8008e08:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e0a:	d04c      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 fe52 	bl	8009ab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2240      	movs	r2, #64	; 0x40
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d13c      	bne.n	8008e9c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e22:	f3ef 8310 	mrs	r3, PRIMASK
 8008e26:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2a:	2090      	movs	r0, #144	; 0x90
 8008e2c:	183a      	adds	r2, r7, r0
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	2301      	movs	r3, #1
 8008e32:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e36:	f383 8810 	msr	PRIMASK, r3
}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2140      	movs	r1, #64	; 0x40
 8008e48:	438a      	bics	r2, r1
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	183b      	adds	r3, r7, r0
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e54:	f383 8810 	msr	PRIMASK, r3
}
 8008e58:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2280      	movs	r2, #128	; 0x80
 8008e5e:	589b      	ldr	r3, [r3, r2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2280      	movs	r2, #128	; 0x80
 8008e68:	589b      	ldr	r3, [r3, r2]
 8008e6a:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <HAL_UART_IRQHandler+0x2c8>)
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2280      	movs	r2, #128	; 0x80
 8008e72:	589b      	ldr	r3, [r3, r2]
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7fc fe17 	bl	8005aa8 <HAL_DMA_Abort_IT>
 8008e7a:	1e03      	subs	r3, r0, #0
 8008e7c:	d01c      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2280      	movs	r2, #128	; 0x80
 8008e82:	589b      	ldr	r3, [r3, r2]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	2180      	movs	r1, #128	; 0x80
 8008e8a:	5852      	ldr	r2, [r2, r1]
 8008e8c:	0010      	movs	r0, r2
 8008e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e90:	e012      	b.n	8008eb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	0018      	movs	r0, r3
 8008e96:	f000 f9e1 	bl	800925c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9a:	e00d      	b.n	8008eb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f000 f9dc 	bl	800925c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	e008      	b.n	8008eb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 f9d7 	bl	800925c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2290      	movs	r2, #144	; 0x90
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008eb6:	e1b9      	b.n	800922c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	46c0      	nop			; (mov r8, r8)
    return;
 8008eba:	e1b7      	b.n	800922c <HAL_UART_IRQHandler+0x62c>
 8008ebc:	0000080f 	.word	0x0000080f
 8008ec0:	10000001 	.word	0x10000001
 8008ec4:	04000120 	.word	0x04000120
 8008ec8:	08009d7d 	.word	0x08009d7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d000      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x2d6>
 8008ed4:	e13e      	b.n	8009154 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ed6:	23a4      	movs	r3, #164	; 0xa4
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2210      	movs	r2, #16
 8008ede:	4013      	ands	r3, r2
 8008ee0:	d100      	bne.n	8008ee4 <HAL_UART_IRQHandler+0x2e4>
 8008ee2:	e137      	b.n	8009154 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ee4:	23a0      	movs	r3, #160	; 0xa0
 8008ee6:	18fb      	adds	r3, r7, r3
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2210      	movs	r2, #16
 8008eec:	4013      	ands	r3, r2
 8008eee:	d100      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x2f2>
 8008ef0:	e130      	b.n	8009154 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2240      	movs	r2, #64	; 0x40
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d000      	beq.n	8008f0a <HAL_UART_IRQHandler+0x30a>
 8008f08:	e0a4      	b.n	8009054 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2280      	movs	r2, #128	; 0x80
 8008f0e:	589b      	ldr	r3, [r3, r2]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	217e      	movs	r1, #126	; 0x7e
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008f1a:	187b      	adds	r3, r7, r1
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d100      	bne.n	8008f24 <HAL_UART_IRQHandler+0x324>
 8008f22:	e185      	b.n	8009230 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	225c      	movs	r2, #92	; 0x5c
 8008f28:	5a9b      	ldrh	r3, [r3, r2]
 8008f2a:	187a      	adds	r2, r7, r1
 8008f2c:	8812      	ldrh	r2, [r2, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d300      	bcc.n	8008f34 <HAL_UART_IRQHandler+0x334>
 8008f32:	e17d      	b.n	8009230 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	187a      	adds	r2, r7, r1
 8008f38:	215e      	movs	r1, #94	; 0x5e
 8008f3a:	8812      	ldrh	r2, [r2, #0]
 8008f3c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2280      	movs	r2, #128	; 0x80
 8008f42:	589b      	ldr	r3, [r3, r2]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	d170      	bne.n	8009030 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f56:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f58:	2301      	movs	r3, #1
 8008f5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	49b4      	ldr	r1, [pc, #720]	; (8009240 <HAL_UART_IRQHandler+0x640>)
 8008f70:	400a      	ands	r2, r1
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	f383 8810 	msr	PRIMASK, r3
}
 8008f7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f80:	f3ef 8310 	mrs	r3, PRIMASK
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	677b      	str	r3, [r7, #116]	; 0x74
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f90:	f383 8810 	msr	PRIMASK, r3
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	438a      	bics	r2, r1
 8008fa4:	609a      	str	r2, [r3, #8]
 8008fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fa8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fac:	f383 8810 	msr	PRIMASK, r3
}
 8008fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fba:	673b      	str	r3, [r7, #112]	; 0x70
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc2:	f383 8810 	msr	PRIMASK, r3
}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2140      	movs	r1, #64	; 0x40
 8008fd4:	438a      	bics	r2, r1
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fde:	f383 8810 	msr	PRIMASK, r3
}
 8008fe2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	228c      	movs	r2, #140	; 0x8c
 8008fe8:	2120      	movs	r1, #32
 8008fea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009002:	f383 8810 	msr	PRIMASK, r3
}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2110      	movs	r1, #16
 8009014:	438a      	bics	r2, r1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800901e:	f383 8810 	msr	PRIMASK, r3
}
 8009022:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2280      	movs	r2, #128	; 0x80
 8009028:	589b      	ldr	r3, [r3, r2]
 800902a:	0018      	movs	r0, r3
 800902c:	f7fc fcda 	bl	80059e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	225c      	movs	r2, #92	; 0x5c
 800903a:	5a9a      	ldrh	r2, [r3, r2]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	215e      	movs	r1, #94	; 0x5e
 8009040:	5a5b      	ldrh	r3, [r3, r1]
 8009042:	b29b      	uxth	r3, r3
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f000 f90d 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009052:	e0ed      	b.n	8009230 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	225c      	movs	r2, #92	; 0x5c
 8009058:	5a99      	ldrh	r1, [r3, r2]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	225e      	movs	r2, #94	; 0x5e
 800905e:	5a9b      	ldrh	r3, [r3, r2]
 8009060:	b29a      	uxth	r2, r3
 8009062:	208e      	movs	r0, #142	; 0x8e
 8009064:	183b      	adds	r3, r7, r0
 8009066:	1a8a      	subs	r2, r1, r2
 8009068:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	225e      	movs	r2, #94	; 0x5e
 800906e:	5a9b      	ldrh	r3, [r3, r2]
 8009070:	b29b      	uxth	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d100      	bne.n	8009078 <HAL_UART_IRQHandler+0x478>
 8009076:	e0dd      	b.n	8009234 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8009078:	183b      	adds	r3, r7, r0
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d100      	bne.n	8009082 <HAL_UART_IRQHandler+0x482>
 8009080:	e0d8      	b.n	8009234 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009082:	f3ef 8310 	mrs	r3, PRIMASK
 8009086:	60fb      	str	r3, [r7, #12]
  return(result);
 8009088:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800908a:	2488      	movs	r4, #136	; 0x88
 800908c:	193a      	adds	r2, r7, r4
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	2301      	movs	r3, #1
 8009092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f383 8810 	msr	PRIMASK, r3
}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4967      	ldr	r1, [pc, #412]	; (8009244 <HAL_UART_IRQHandler+0x644>)
 80090a8:	400a      	ands	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	193b      	adds	r3, r7, r4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f383 8810 	msr	PRIMASK, r3
}
 80090b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ba:	f3ef 8310 	mrs	r3, PRIMASK
 80090be:	61bb      	str	r3, [r7, #24]
  return(result);
 80090c0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c2:	2484      	movs	r4, #132	; 0x84
 80090c4:	193a      	adds	r2, r7, r4
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	2301      	movs	r3, #1
 80090ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	495a      	ldr	r1, [pc, #360]	; (8009248 <HAL_UART_IRQHandler+0x648>)
 80090e0:	400a      	ands	r2, r1
 80090e2:	609a      	str	r2, [r3, #8]
 80090e4:	193b      	adds	r3, r7, r4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	f383 8810 	msr	PRIMASK, r3
}
 80090f0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	228c      	movs	r2, #140	; 0x8c
 80090f6:	2120      	movs	r1, #32
 80090f8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009106:	f3ef 8310 	mrs	r3, PRIMASK
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910e:	2480      	movs	r4, #128	; 0x80
 8009110:	193a      	adds	r2, r7, r4
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	2301      	movs	r3, #1
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2110      	movs	r1, #16
 800912c:	438a      	bics	r2, r1
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	193b      	adds	r3, r7, r4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	f383 8810 	msr	PRIMASK, r3
}
 800913c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2202      	movs	r2, #2
 8009142:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009144:	183b      	adds	r3, r7, r0
 8009146:	881a      	ldrh	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	0011      	movs	r1, r2
 800914c:	0018      	movs	r0, r3
 800914e:	f000 f88d 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009152:	e06f      	b.n	8009234 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009154:	23a4      	movs	r3, #164	; 0xa4
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	2380      	movs	r3, #128	; 0x80
 800915c:	035b      	lsls	r3, r3, #13
 800915e:	4013      	ands	r3, r2
 8009160:	d010      	beq.n	8009184 <HAL_UART_IRQHandler+0x584>
 8009162:	239c      	movs	r3, #156	; 0x9c
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	2380      	movs	r3, #128	; 0x80
 800916a:	03db      	lsls	r3, r3, #15
 800916c:	4013      	ands	r3, r2
 800916e:	d009      	beq.n	8009184 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2280      	movs	r2, #128	; 0x80
 8009176:	0352      	lsls	r2, r2, #13
 8009178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	0018      	movs	r0, r3
 800917e:	f000 ffe9 	bl	800a154 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009182:	e05a      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009184:	23a4      	movs	r3, #164	; 0xa4
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2280      	movs	r2, #128	; 0x80
 800918c:	4013      	ands	r3, r2
 800918e:	d016      	beq.n	80091be <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009190:	23a0      	movs	r3, #160	; 0xa0
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2280      	movs	r2, #128	; 0x80
 8009198:	4013      	ands	r3, r2
 800919a:	d106      	bne.n	80091aa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800919c:	239c      	movs	r3, #156	; 0x9c
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	2380      	movs	r3, #128	; 0x80
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4013      	ands	r3, r2
 80091a8:	d009      	beq.n	80091be <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d042      	beq.n	8009238 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	0010      	movs	r0, r2
 80091ba:	4798      	blx	r3
    }
    return;
 80091bc:	e03c      	b.n	8009238 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091be:	23a4      	movs	r3, #164	; 0xa4
 80091c0:	18fb      	adds	r3, r7, r3
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2240      	movs	r2, #64	; 0x40
 80091c6:	4013      	ands	r3, r2
 80091c8:	d00a      	beq.n	80091e0 <HAL_UART_IRQHandler+0x5e0>
 80091ca:	23a0      	movs	r3, #160	; 0xa0
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2240      	movs	r2, #64	; 0x40
 80091d2:	4013      	ands	r3, r2
 80091d4:	d004      	beq.n	80091e0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 ff8f 	bl	800a0fc <UART_EndTransmit_IT>
    return;
 80091de:	e02c      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091e0:	23a4      	movs	r3, #164	; 0xa4
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	2380      	movs	r3, #128	; 0x80
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	4013      	ands	r3, r2
 80091ec:	d00b      	beq.n	8009206 <HAL_UART_IRQHandler+0x606>
 80091ee:	23a0      	movs	r3, #160	; 0xa0
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	2380      	movs	r3, #128	; 0x80
 80091f6:	05db      	lsls	r3, r3, #23
 80091f8:	4013      	ands	r3, r2
 80091fa:	d004      	beq.n	8009206 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	0018      	movs	r0, r3
 8009200:	f000 ffb8 	bl	800a174 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009204:	e019      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009206:	23a4      	movs	r3, #164	; 0xa4
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	045b      	lsls	r3, r3, #17
 8009210:	4013      	ands	r3, r2
 8009212:	d012      	beq.n	800923a <HAL_UART_IRQHandler+0x63a>
 8009214:	23a0      	movs	r3, #160	; 0xa0
 8009216:	18fb      	adds	r3, r7, r3
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	da0d      	bge.n	800923a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	0018      	movs	r0, r3
 8009222:	f000 ff9f 	bl	800a164 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009226:	e008      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
      return;
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	e006      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
    return;
 800922c:	46c0      	nop			; (mov r8, r8)
 800922e:	e004      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
      return;
 8009230:	46c0      	nop			; (mov r8, r8)
 8009232:	e002      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
      return;
 8009234:	46c0      	nop			; (mov r8, r8)
 8009236:	e000      	b.n	800923a <HAL_UART_IRQHandler+0x63a>
    return;
 8009238:	46c0      	nop			; (mov r8, r8)
  }
}
 800923a:	46bd      	mov	sp, r7
 800923c:	b02a      	add	sp, #168	; 0xa8
 800923e:	bdb0      	pop	{r4, r5, r7, pc}
 8009240:	fffffeff 	.word	0xfffffeff
 8009244:	fffffedf 	.word	0xfffffedf
 8009248:	effffffe 	.word	0xeffffffe

0800924c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009254:	46c0      	nop			; (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	b002      	add	sp, #8
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009264:	46c0      	nop			; (mov r8, r8)
 8009266:	46bd      	mov	sp, r7
 8009268:	b002      	add	sp, #8
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	000a      	movs	r2, r1
 8009276:	1cbb      	adds	r3, r7, #2
 8009278:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	46bd      	mov	sp, r7
 800927e:	b002      	add	sp, #8
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800928c:	231a      	movs	r3, #26
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4aa1      	ldr	r2, [pc, #644]	; (8009538 <UART_SetConfig+0x2b4>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	0019      	movs	r1, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	430a      	orrs	r2, r1
 80092c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a9c      	ldr	r2, [pc, #624]	; (800953c <UART_SetConfig+0x2b8>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	0019      	movs	r1, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	4a93      	ldr	r2, [pc, #588]	; (8009540 <UART_SetConfig+0x2bc>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	0019      	movs	r1, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	220f      	movs	r2, #15
 8009308:	4393      	bics	r3, r2
 800930a:	0019      	movs	r1, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a89      	ldr	r2, [pc, #548]	; (8009544 <UART_SetConfig+0x2c0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d127      	bne.n	8009372 <UART_SetConfig+0xee>
 8009322:	4b89      	ldr	r3, [pc, #548]	; (8009548 <UART_SetConfig+0x2c4>)
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	2203      	movs	r2, #3
 8009328:	4013      	ands	r3, r2
 800932a:	2b03      	cmp	r3, #3
 800932c:	d017      	beq.n	800935e <UART_SetConfig+0xda>
 800932e:	d81b      	bhi.n	8009368 <UART_SetConfig+0xe4>
 8009330:	2b02      	cmp	r3, #2
 8009332:	d00a      	beq.n	800934a <UART_SetConfig+0xc6>
 8009334:	d818      	bhi.n	8009368 <UART_SetConfig+0xe4>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <UART_SetConfig+0xbc>
 800933a:	2b01      	cmp	r3, #1
 800933c:	d00a      	beq.n	8009354 <UART_SetConfig+0xd0>
 800933e:	e013      	b.n	8009368 <UART_SetConfig+0xe4>
 8009340:	231b      	movs	r3, #27
 8009342:	18fb      	adds	r3, r7, r3
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	e021      	b.n	800938e <UART_SetConfig+0x10a>
 800934a:	231b      	movs	r3, #27
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	2202      	movs	r2, #2
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	e01c      	b.n	800938e <UART_SetConfig+0x10a>
 8009354:	231b      	movs	r3, #27
 8009356:	18fb      	adds	r3, r7, r3
 8009358:	2204      	movs	r2, #4
 800935a:	701a      	strb	r2, [r3, #0]
 800935c:	e017      	b.n	800938e <UART_SetConfig+0x10a>
 800935e:	231b      	movs	r3, #27
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	2208      	movs	r2, #8
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e012      	b.n	800938e <UART_SetConfig+0x10a>
 8009368:	231b      	movs	r3, #27
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	2210      	movs	r2, #16
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	e00d      	b.n	800938e <UART_SetConfig+0x10a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a75      	ldr	r2, [pc, #468]	; (800954c <UART_SetConfig+0x2c8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d104      	bne.n	8009386 <UART_SetConfig+0x102>
 800937c:	231b      	movs	r3, #27
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	e003      	b.n	800938e <UART_SetConfig+0x10a>
 8009386:	231b      	movs	r3, #27
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	2210      	movs	r2, #16
 800938c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	2380      	movs	r3, #128	; 0x80
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	429a      	cmp	r2, r3
 8009398:	d000      	beq.n	800939c <UART_SetConfig+0x118>
 800939a:	e065      	b.n	8009468 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800939c:	231b      	movs	r3, #27
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d015      	beq.n	80093d2 <UART_SetConfig+0x14e>
 80093a6:	dc18      	bgt.n	80093da <UART_SetConfig+0x156>
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d00d      	beq.n	80093c8 <UART_SetConfig+0x144>
 80093ac:	dc15      	bgt.n	80093da <UART_SetConfig+0x156>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <UART_SetConfig+0x134>
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d005      	beq.n	80093c2 <UART_SetConfig+0x13e>
 80093b6:	e010      	b.n	80093da <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b8:	f7fe faf4 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 80093bc:	0003      	movs	r3, r0
 80093be:	617b      	str	r3, [r7, #20]
        break;
 80093c0:	e012      	b.n	80093e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093c2:	4b63      	ldr	r3, [pc, #396]	; (8009550 <UART_SetConfig+0x2cc>)
 80093c4:	617b      	str	r3, [r7, #20]
        break;
 80093c6:	e00f      	b.n	80093e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093c8:	f7fe fa60 	bl	800788c <HAL_RCC_GetSysClockFreq>
 80093cc:	0003      	movs	r3, r0
 80093ce:	617b      	str	r3, [r7, #20]
        break;
 80093d0:	e00a      	b.n	80093e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d2:	2380      	movs	r3, #128	; 0x80
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	617b      	str	r3, [r7, #20]
        break;
 80093d8:	e006      	b.n	80093e8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093de:	231a      	movs	r3, #26
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	2201      	movs	r2, #1
 80093e4:	701a      	strb	r2, [r3, #0]
        break;
 80093e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d100      	bne.n	80093f0 <UART_SetConfig+0x16c>
 80093ee:	e08d      	b.n	800950c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f4:	4b57      	ldr	r3, [pc, #348]	; (8009554 <UART_SetConfig+0x2d0>)
 80093f6:	0052      	lsls	r2, r2, #1
 80093f8:	5ad3      	ldrh	r3, [r2, r3]
 80093fa:	0019      	movs	r1, r3
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	f7f6 fe7f 	bl	8000100 <__udivsi3>
 8009402:	0003      	movs	r3, r0
 8009404:	005a      	lsls	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	18d2      	adds	r2, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	0019      	movs	r1, r3
 8009414:	0010      	movs	r0, r2
 8009416:	f7f6 fe73 	bl	8000100 <__udivsi3>
 800941a:	0003      	movs	r3, r0
 800941c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d91c      	bls.n	800945e <UART_SetConfig+0x1da>
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	2380      	movs	r3, #128	; 0x80
 8009428:	025b      	lsls	r3, r3, #9
 800942a:	429a      	cmp	r2, r3
 800942c:	d217      	bcs.n	800945e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	b29a      	uxth	r2, r3
 8009432:	200e      	movs	r0, #14
 8009434:	183b      	adds	r3, r7, r0
 8009436:	210f      	movs	r1, #15
 8009438:	438a      	bics	r2, r1
 800943a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	b29b      	uxth	r3, r3
 8009442:	2207      	movs	r2, #7
 8009444:	4013      	ands	r3, r2
 8009446:	b299      	uxth	r1, r3
 8009448:	183b      	adds	r3, r7, r0
 800944a:	183a      	adds	r2, r7, r0
 800944c:	8812      	ldrh	r2, [r2, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	183a      	adds	r2, r7, r0
 8009458:	8812      	ldrh	r2, [r2, #0]
 800945a:	60da      	str	r2, [r3, #12]
 800945c:	e056      	b.n	800950c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800945e:	231a      	movs	r3, #26
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e051      	b.n	800950c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009468:	231b      	movs	r3, #27
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b08      	cmp	r3, #8
 8009470:	d015      	beq.n	800949e <UART_SetConfig+0x21a>
 8009472:	dc18      	bgt.n	80094a6 <UART_SetConfig+0x222>
 8009474:	2b04      	cmp	r3, #4
 8009476:	d00d      	beq.n	8009494 <UART_SetConfig+0x210>
 8009478:	dc15      	bgt.n	80094a6 <UART_SetConfig+0x222>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <UART_SetConfig+0x200>
 800947e:	2b02      	cmp	r3, #2
 8009480:	d005      	beq.n	800948e <UART_SetConfig+0x20a>
 8009482:	e010      	b.n	80094a6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009484:	f7fe fa8e 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 8009488:	0003      	movs	r3, r0
 800948a:	617b      	str	r3, [r7, #20]
        break;
 800948c:	e012      	b.n	80094b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800948e:	4b30      	ldr	r3, [pc, #192]	; (8009550 <UART_SetConfig+0x2cc>)
 8009490:	617b      	str	r3, [r7, #20]
        break;
 8009492:	e00f      	b.n	80094b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009494:	f7fe f9fa 	bl	800788c <HAL_RCC_GetSysClockFreq>
 8009498:	0003      	movs	r3, r0
 800949a:	617b      	str	r3, [r7, #20]
        break;
 800949c:	e00a      	b.n	80094b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800949e:	2380      	movs	r3, #128	; 0x80
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	617b      	str	r3, [r7, #20]
        break;
 80094a4:	e006      	b.n	80094b4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094aa:	231a      	movs	r3, #26
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
        break;
 80094b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d028      	beq.n	800950c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094be:	4b25      	ldr	r3, [pc, #148]	; (8009554 <UART_SetConfig+0x2d0>)
 80094c0:	0052      	lsls	r2, r2, #1
 80094c2:	5ad3      	ldrh	r3, [r2, r3]
 80094c4:	0019      	movs	r1, r3
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f7f6 fe1a 	bl	8000100 <__udivsi3>
 80094cc:	0003      	movs	r3, r0
 80094ce:	001a      	movs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	18d2      	adds	r2, r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	0019      	movs	r1, r3
 80094de:	0010      	movs	r0, r2
 80094e0:	f7f6 fe0e 	bl	8000100 <__udivsi3>
 80094e4:	0003      	movs	r3, r0
 80094e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	d90a      	bls.n	8009504 <UART_SetConfig+0x280>
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	025b      	lsls	r3, r3, #9
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d205      	bcs.n	8009504 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60da      	str	r2, [r3, #12]
 8009502:	e003      	b.n	800950c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8009504:	231a      	movs	r3, #26
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	2201      	movs	r2, #1
 800950a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	226a      	movs	r2, #106	; 0x6a
 8009510:	2101      	movs	r1, #1
 8009512:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2268      	movs	r2, #104	; 0x68
 8009518:	2101      	movs	r1, #1
 800951a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009528:	231a      	movs	r3, #26
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	781b      	ldrb	r3, [r3, #0]
}
 800952e:	0018      	movs	r0, r3
 8009530:	46bd      	mov	sp, r7
 8009532:	b008      	add	sp, #32
 8009534:	bd80      	pop	{r7, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	cfff69f3 	.word	0xcfff69f3
 800953c:	ffffcfff 	.word	0xffffcfff
 8009540:	11fff4ff 	.word	0x11fff4ff
 8009544:	40013800 	.word	0x40013800
 8009548:	40021000 	.word	0x40021000
 800954c:	40004400 	.word	0x40004400
 8009550:	00f42400 	.word	0x00f42400
 8009554:	0800b4c0 	.word	0x0800b4c0

08009558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	2201      	movs	r2, #1
 8009566:	4013      	ands	r3, r2
 8009568:	d00b      	beq.n	8009582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a4a      	ldr	r2, [pc, #296]	; (800969c <UART_AdvFeatureConfig+0x144>)
 8009572:	4013      	ands	r3, r2
 8009574:	0019      	movs	r1, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009586:	2202      	movs	r2, #2
 8009588:	4013      	ands	r3, r2
 800958a:	d00b      	beq.n	80095a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	4a43      	ldr	r2, [pc, #268]	; (80096a0 <UART_AdvFeatureConfig+0x148>)
 8009594:	4013      	ands	r3, r2
 8009596:	0019      	movs	r1, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a8:	2204      	movs	r2, #4
 80095aa:	4013      	ands	r3, r2
 80095ac:	d00b      	beq.n	80095c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a3b      	ldr	r2, [pc, #236]	; (80096a4 <UART_AdvFeatureConfig+0x14c>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	0019      	movs	r1, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	2208      	movs	r2, #8
 80095cc:	4013      	ands	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4a34      	ldr	r2, [pc, #208]	; (80096a8 <UART_AdvFeatureConfig+0x150>)
 80095d8:	4013      	ands	r3, r2
 80095da:	0019      	movs	r1, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	2210      	movs	r2, #16
 80095ee:	4013      	ands	r3, r2
 80095f0:	d00b      	beq.n	800960a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	4a2c      	ldr	r2, [pc, #176]	; (80096ac <UART_AdvFeatureConfig+0x154>)
 80095fa:	4013      	ands	r3, r2
 80095fc:	0019      	movs	r1, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	2220      	movs	r2, #32
 8009610:	4013      	ands	r3, r2
 8009612:	d00b      	beq.n	800962c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	4a25      	ldr	r2, [pc, #148]	; (80096b0 <UART_AdvFeatureConfig+0x158>)
 800961c:	4013      	ands	r3, r2
 800961e:	0019      	movs	r1, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	2240      	movs	r2, #64	; 0x40
 8009632:	4013      	ands	r3, r2
 8009634:	d01d      	beq.n	8009672 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	4a1d      	ldr	r2, [pc, #116]	; (80096b4 <UART_AdvFeatureConfig+0x15c>)
 800963e:	4013      	ands	r3, r2
 8009640:	0019      	movs	r1, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	035b      	lsls	r3, r3, #13
 8009656:	429a      	cmp	r2, r3
 8009658:	d10b      	bne.n	8009672 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <UART_AdvFeatureConfig+0x160>)
 8009662:	4013      	ands	r3, r2
 8009664:	0019      	movs	r1, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	2280      	movs	r2, #128	; 0x80
 8009678:	4013      	ands	r3, r2
 800967a:	d00b      	beq.n	8009694 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4a0e      	ldr	r2, [pc, #56]	; (80096bc <UART_AdvFeatureConfig+0x164>)
 8009684:	4013      	ands	r3, r2
 8009686:	0019      	movs	r1, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	605a      	str	r2, [r3, #4]
  }
}
 8009694:	46c0      	nop			; (mov r8, r8)
 8009696:	46bd      	mov	sp, r7
 8009698:	b002      	add	sp, #8
 800969a:	bd80      	pop	{r7, pc}
 800969c:	fffdffff 	.word	0xfffdffff
 80096a0:	fffeffff 	.word	0xfffeffff
 80096a4:	fffbffff 	.word	0xfffbffff
 80096a8:	ffff7fff 	.word	0xffff7fff
 80096ac:	ffffefff 	.word	0xffffefff
 80096b0:	ffffdfff 	.word	0xffffdfff
 80096b4:	ffefffff 	.word	0xffefffff
 80096b8:	ff9fffff 	.word	0xff9fffff
 80096bc:	fff7ffff 	.word	0xfff7ffff

080096c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2290      	movs	r2, #144	; 0x90
 80096cc:	2100      	movs	r1, #0
 80096ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d0:	f7fb ff6c 	bl	80055ac <HAL_GetTick>
 80096d4:	0003      	movs	r3, r0
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2208      	movs	r2, #8
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d10c      	bne.n	8009700 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2280      	movs	r2, #128	; 0x80
 80096ea:	0391      	lsls	r1, r2, #14
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4a1a      	ldr	r2, [pc, #104]	; (8009758 <UART_CheckIdleState+0x98>)
 80096f0:	9200      	str	r2, [sp, #0]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f000 f832 	bl	800975c <UART_WaitOnFlagUntilTimeout>
 80096f8:	1e03      	subs	r3, r0, #0
 80096fa:	d001      	beq.n	8009700 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e026      	b.n	800974e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2204      	movs	r2, #4
 8009708:	4013      	ands	r3, r2
 800970a:	2b04      	cmp	r3, #4
 800970c:	d10c      	bne.n	8009728 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2280      	movs	r2, #128	; 0x80
 8009712:	03d1      	lsls	r1, r2, #15
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4a10      	ldr	r2, [pc, #64]	; (8009758 <UART_CheckIdleState+0x98>)
 8009718:	9200      	str	r2, [sp, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	f000 f81e 	bl	800975c <UART_WaitOnFlagUntilTimeout>
 8009720:	1e03      	subs	r3, r0, #0
 8009722:	d001      	beq.n	8009728 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e012      	b.n	800974e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2288      	movs	r2, #136	; 0x88
 800972c:	2120      	movs	r1, #32
 800972e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	228c      	movs	r2, #140	; 0x8c
 8009734:	2120      	movs	r1, #32
 8009736:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2284      	movs	r2, #132	; 0x84
 8009748:	2100      	movs	r1, #0
 800974a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	0018      	movs	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	b004      	add	sp, #16
 8009754:	bd80      	pop	{r7, pc}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	01ffffff 	.word	0x01ffffff

0800975c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b094      	sub	sp, #80	; 0x50
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	1dfb      	adds	r3, r7, #7
 800976a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976c:	e0a7      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800976e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009770:	3301      	adds	r3, #1
 8009772:	d100      	bne.n	8009776 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009774:	e0a3      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009776:	f7fb ff19 	bl	80055ac <HAL_GetTick>
 800977a:	0002      	movs	r2, r0
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <UART_WaitOnFlagUntilTimeout+0x30>
 8009786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009788:	2b00      	cmp	r3, #0
 800978a:	d13f      	bne.n	800980c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978c:	f3ef 8310 	mrs	r3, PRIMASK
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009794:	647b      	str	r3, [r7, #68]	; 0x44
 8009796:	2301      	movs	r3, #1
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	46c0      	nop			; (mov r8, r8)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	494e      	ldr	r1, [pc, #312]	; (80098e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80097ae:	400a      	ands	r2, r1
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	f383 8810 	msr	PRIMASK, r3
}
 80097bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097be:	f3ef 8310 	mrs	r3, PRIMASK
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c6:	643b      	str	r3, [r7, #64]	; 0x40
 80097c8:	2301      	movs	r3, #1
 80097ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f383 8810 	msr	PRIMASK, r3
}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2101      	movs	r1, #1
 80097e0:	438a      	bics	r2, r1
 80097e2:	609a      	str	r2, [r3, #8]
 80097e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ea:	f383 8810 	msr	PRIMASK, r3
}
 80097ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2288      	movs	r2, #136	; 0x88
 80097f4:	2120      	movs	r1, #32
 80097f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	228c      	movs	r2, #140	; 0x8c
 80097fc:	2120      	movs	r1, #32
 80097fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2284      	movs	r2, #132	; 0x84
 8009804:	2100      	movs	r1, #0
 8009806:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e069      	b.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	4013      	ands	r3, r2
 8009816:	d052      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	69da      	ldr	r2, [r3, #28]
 800981e:	2380      	movs	r3, #128	; 0x80
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	401a      	ands	r2, r3
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	429a      	cmp	r2, r3
 800982a:	d148      	bne.n	80098be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	0112      	lsls	r2, r2, #4
 8009834:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009836:	f3ef 8310 	mrs	r3, PRIMASK
 800983a:	613b      	str	r3, [r7, #16]
  return(result);
 800983c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f383 8810 	msr	PRIMASK, r3
}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4924      	ldr	r1, [pc, #144]	; (80098e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009858:	400a      	ands	r2, r1
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f383 8810 	msr	PRIMASK, r3
}
 8009866:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009868:	f3ef 8310 	mrs	r3, PRIMASK
 800986c:	61fb      	str	r3, [r7, #28]
  return(result);
 800986e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009870:	64bb      	str	r3, [r7, #72]	; 0x48
 8009872:	2301      	movs	r3, #1
 8009874:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	f383 8810 	msr	PRIMASK, r3
}
 800987c:	46c0      	nop			; (mov r8, r8)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2101      	movs	r1, #1
 800988a:	438a      	bics	r2, r1
 800988c:	609a      	str	r2, [r3, #8]
 800988e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	f383 8810 	msr	PRIMASK, r3
}
 8009898:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2288      	movs	r2, #136	; 0x88
 800989e:	2120      	movs	r1, #32
 80098a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	228c      	movs	r2, #140	; 0x8c
 80098a6:	2120      	movs	r1, #32
 80098a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2290      	movs	r2, #144	; 0x90
 80098ae:	2120      	movs	r1, #32
 80098b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2284      	movs	r2, #132	; 0x84
 80098b6:	2100      	movs	r1, #0
 80098b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e010      	b.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4013      	ands	r3, r2
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	425a      	negs	r2, r3
 80098ce:	4153      	adcs	r3, r2
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	001a      	movs	r2, r3
 80098d4:	1dfb      	adds	r3, r7, #7
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d100      	bne.n	80098de <UART_WaitOnFlagUntilTimeout+0x182>
 80098dc:	e747      	b.n	800976e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b014      	add	sp, #80	; 0x50
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	fffffe5f 	.word	0xfffffe5f

080098ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b090      	sub	sp, #64	; 0x40
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	1dbb      	adds	r3, r7, #6
 80098f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	1dba      	adds	r2, r7, #6
 8009904:	215c      	movs	r1, #92	; 0x5c
 8009906:	8812      	ldrh	r2, [r2, #0]
 8009908:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2290      	movs	r2, #144	; 0x90
 800990e:	2100      	movs	r1, #0
 8009910:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	228c      	movs	r2, #140	; 0x8c
 8009916:	2122      	movs	r1, #34	; 0x22
 8009918:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2280      	movs	r2, #128	; 0x80
 800991e:	589b      	ldr	r3, [r3, r2]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02d      	beq.n	8009980 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2280      	movs	r2, #128	; 0x80
 8009928:	589b      	ldr	r3, [r3, r2]
 800992a:	4a40      	ldr	r2, [pc, #256]	; (8009a2c <UART_Start_Receive_DMA+0x140>)
 800992c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	589b      	ldr	r3, [r3, r2]
 8009934:	4a3e      	ldr	r2, [pc, #248]	; (8009a30 <UART_Start_Receive_DMA+0x144>)
 8009936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2280      	movs	r2, #128	; 0x80
 800993c:	589b      	ldr	r3, [r3, r2]
 800993e:	4a3d      	ldr	r2, [pc, #244]	; (8009a34 <UART_Start_Receive_DMA+0x148>)
 8009940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2280      	movs	r2, #128	; 0x80
 8009946:	589b      	ldr	r3, [r3, r2]
 8009948:	2200      	movs	r2, #0
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2280      	movs	r2, #128	; 0x80
 8009950:	5898      	ldr	r0, [r3, r2]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3324      	adds	r3, #36	; 0x24
 8009958:	0019      	movs	r1, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	001a      	movs	r2, r3
 8009960:	1dbb      	adds	r3, r7, #6
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	f7fb ffb8 	bl	80058d8 <HAL_DMA_Start_IT>
 8009968:	1e03      	subs	r3, r0, #0
 800996a:	d009      	beq.n	8009980 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2290      	movs	r2, #144	; 0x90
 8009970:	2110      	movs	r1, #16
 8009972:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	228c      	movs	r2, #140	; 0x8c
 8009978:	2120      	movs	r1, #32
 800997a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e050      	b.n	8009a22 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d019      	beq.n	80099bc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009988:	f3ef 8310 	mrs	r3, PRIMASK
 800998c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009992:	2301      	movs	r3, #1
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	f383 8810 	msr	PRIMASK, r3
}
 800999c:	46c0      	nop			; (mov r8, r8)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	0049      	lsls	r1, r1, #1
 80099ac:	430a      	orrs	r2, r1
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	f383 8810 	msr	PRIMASK, r3
}
 80099ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099bc:	f3ef 8310 	mrs	r3, PRIMASK
 80099c0:	613b      	str	r3, [r7, #16]
  return(result);
 80099c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c6:	2301      	movs	r3, #1
 80099c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f383 8810 	msr	PRIMASK, r3
}
 80099d0:	46c0      	nop			; (mov r8, r8)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2101      	movs	r1, #1
 80099de:	430a      	orrs	r2, r1
 80099e0:	609a      	str	r2, [r3, #8]
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f383 8810 	msr	PRIMASK, r3
}
 80099ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ee:	f3ef 8310 	mrs	r3, PRIMASK
 80099f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80099f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	2301      	movs	r3, #1
 80099fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	f383 8810 	msr	PRIMASK, r3
}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2140      	movs	r1, #64	; 0x40
 8009a10:	430a      	orrs	r2, r1
 8009a12:	609a      	str	r2, [r3, #8]
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	f383 8810 	msr	PRIMASK, r3
}
 8009a1e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	0018      	movs	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	b010      	add	sp, #64	; 0x40
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	46c0      	nop			; (mov r8, r8)
 8009a2c:	08009b85 	.word	0x08009b85
 8009a30:	08009cb5 	.word	0x08009cb5
 8009a34:	08009cf7 	.word	0x08009cf7

08009a38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a40:	f3ef 8310 	mrs	r3, PRIMASK
 8009a44:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a46:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f383 8810 	msr	PRIMASK, r3
}
 8009a54:	46c0      	nop			; (mov r8, r8)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	21c0      	movs	r1, #192	; 0xc0
 8009a62:	438a      	bics	r2, r1
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f383 8810 	msr	PRIMASK, r3
}
 8009a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a72:	f3ef 8310 	mrs	r3, PRIMASK
 8009a76:	617b      	str	r3, [r7, #20]
  return(result);
 8009a78:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a7a:	623b      	str	r3, [r7, #32]
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	46c0      	nop			; (mov r8, r8)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4908      	ldr	r1, [pc, #32]	; (8009ab4 <UART_EndTxTransfer+0x7c>)
 8009a94:	400a      	ands	r2, r1
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f383 8810 	msr	PRIMASK, r3
}
 8009aa2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2288      	movs	r2, #136	; 0x88
 8009aa8:	2120      	movs	r1, #32
 8009aaa:	5099      	str	r1, [r3, r2]
}
 8009aac:	46c0      	nop			; (mov r8, r8)
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b00a      	add	sp, #40	; 0x28
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	ff7fffff 	.word	0xff7fffff

08009ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08e      	sub	sp, #56	; 0x38
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ac6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8009aca:	2301      	movs	r3, #1
 8009acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	f383 8810 	msr	PRIMASK, r3
}
 8009ad4:	46c0      	nop			; (mov r8, r8)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4926      	ldr	r1, [pc, #152]	; (8009b7c <UART_EndRxTransfer+0xc4>)
 8009ae2:	400a      	ands	r2, r1
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	f383 8810 	msr	PRIMASK, r3
}
 8009af0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af2:	f3ef 8310 	mrs	r3, PRIMASK
 8009af6:	623b      	str	r3, [r7, #32]
  return(result);
 8009af8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009afa:	633b      	str	r3, [r7, #48]	; 0x30
 8009afc:	2301      	movs	r3, #1
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	f383 8810 	msr	PRIMASK, r3
}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	491b      	ldr	r1, [pc, #108]	; (8009b80 <UART_EndRxTransfer+0xc8>)
 8009b14:	400a      	ands	r2, r1
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	f383 8810 	msr	PRIMASK, r3
}
 8009b22:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d118      	bne.n	8009b5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b36:	2301      	movs	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f383 8810 	msr	PRIMASK, r3
}
 8009b40:	46c0      	nop			; (mov r8, r8)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2110      	movs	r1, #16
 8009b4e:	438a      	bics	r2, r1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f383 8810 	msr	PRIMASK, r3
}
 8009b5c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	228c      	movs	r2, #140	; 0x8c
 8009b62:	2120      	movs	r1, #32
 8009b64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b72:	46c0      	nop			; (mov r8, r8)
 8009b74:	46bd      	mov	sp, r7
 8009b76:	b00e      	add	sp, #56	; 0x38
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	fffffedf 	.word	0xfffffedf
 8009b80:	effffffe 	.word	0xeffffffe

08009b84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b094      	sub	sp, #80	; 0x50
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	d16f      	bne.n	8009c7e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba0:	225e      	movs	r2, #94	; 0x5e
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8009baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f383 8810 	msr	PRIMASK, r3
}
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	493a      	ldr	r1, [pc, #232]	; (8009cb0 <UART_DMAReceiveCplt+0x12c>)
 8009bc8:	400a      	ands	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	f383 8810 	msr	PRIMASK, r3
}
 8009bd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be0:	647b      	str	r3, [r7, #68]	; 0x44
 8009be2:	2301      	movs	r3, #1
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	f383 8810 	msr	PRIMASK, r3
}
 8009bec:	46c0      	nop			; (mov r8, r8)
 8009bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	438a      	bics	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]
 8009bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	f383 8810 	msr	PRIMASK, r3
}
 8009c08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	643b      	str	r3, [r7, #64]	; 0x40
 8009c14:	2301      	movs	r3, #1
 8009c16:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1a:	f383 8810 	msr	PRIMASK, r3
}
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2140      	movs	r1, #64	; 0x40
 8009c2c:	438a      	bics	r2, r1
 8009c2e:	609a      	str	r2, [r3, #8]
 8009c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	f383 8810 	msr	PRIMASK, r3
}
 8009c3a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3e:	228c      	movs	r2, #140	; 0x8c
 8009c40:	2120      	movs	r1, #32
 8009c42:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d118      	bne.n	8009c7e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c52:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c56:	2301      	movs	r3, #1
 8009c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f383 8810 	msr	PRIMASK, r3
}
 8009c60:	46c0      	nop			; (mov r8, r8)
 8009c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2110      	movs	r1, #16
 8009c6e:	438a      	bics	r2, r1
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f383 8810 	msr	PRIMASK, r3
}
 8009c7c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c80:	2200      	movs	r2, #0
 8009c82:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d108      	bne.n	8009c9e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8e:	225c      	movs	r2, #92	; 0x5c
 8009c90:	5a9a      	ldrh	r2, [r3, r2]
 8009c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c94:	0011      	movs	r1, r2
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7ff fae8 	bl	800926c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c9c:	e003      	b.n	8009ca6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	f7fa fa45 	bl	8004130 <HAL_UART_RxCpltCallback>
}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	b014      	add	sp, #80	; 0x50
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	fffffeff 	.word	0xfffffeff

08009cb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d10a      	bne.n	8009ce6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	225c      	movs	r2, #92	; 0x5c
 8009cd4:	5a9b      	ldrh	r3, [r3, r2]
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	0011      	movs	r1, r2
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f7ff fac4 	bl	800926c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ce4:	e003      	b.n	8009cee <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f7ff faaf 	bl	800924c <HAL_UART_RxHalfCpltCallback>
}
 8009cee:	46c0      	nop			; (mov r8, r8)
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b004      	add	sp, #16
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2288      	movs	r2, #136	; 0x88
 8009d08:	589b      	ldr	r3, [r3, r2]
 8009d0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	228c      	movs	r2, #140	; 0x8c
 8009d10:	589b      	ldr	r3, [r3, r2]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	2280      	movs	r2, #128	; 0x80
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b80      	cmp	r3, #128	; 0x80
 8009d20:	d10a      	bne.n	8009d38 <UART_DMAError+0x42>
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b21      	cmp	r3, #33	; 0x21
 8009d26:	d107      	bne.n	8009d38 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2256      	movs	r2, #86	; 0x56
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	0018      	movs	r0, r3
 8009d34:	f7ff fe80 	bl	8009a38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2240      	movs	r2, #64	; 0x40
 8009d40:	4013      	ands	r3, r2
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d10a      	bne.n	8009d5c <UART_DMAError+0x66>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b22      	cmp	r3, #34	; 0x22
 8009d4a:	d107      	bne.n	8009d5c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	225e      	movs	r2, #94	; 0x5e
 8009d50:	2100      	movs	r1, #0
 8009d52:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	0018      	movs	r0, r3
 8009d58:	f7ff feae 	bl	8009ab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2290      	movs	r2, #144	; 0x90
 8009d60:	589b      	ldr	r3, [r3, r2]
 8009d62:	2210      	movs	r2, #16
 8009d64:	431a      	orrs	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2190      	movs	r1, #144	; 0x90
 8009d6a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f7ff fa74 	bl	800925c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d74:	46c0      	nop			; (mov r8, r8)
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b006      	add	sp, #24
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	225e      	movs	r2, #94	; 0x5e
 8009d8e:	2100      	movs	r1, #0
 8009d90:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2256      	movs	r2, #86	; 0x56
 8009d96:	2100      	movs	r1, #0
 8009d98:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f7ff fa5d 	bl	800925c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	46bd      	mov	sp, r7
 8009da6:	b004      	add	sp, #16
 8009da8:	bd80      	pop	{r7, pc}

08009daa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b08a      	sub	sp, #40	; 0x28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2288      	movs	r2, #136	; 0x88
 8009db6:	589b      	ldr	r3, [r3, r2]
 8009db8:	2b21      	cmp	r3, #33	; 0x21
 8009dba:	d14c      	bne.n	8009e56 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2256      	movs	r2, #86	; 0x56
 8009dc0:	5a9b      	ldrh	r3, [r3, r2]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d132      	bne.n	8009e2e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dce:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f383 8810 	msr	PRIMASK, r3
}
 8009ddc:	46c0      	nop			; (mov r8, r8)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2180      	movs	r1, #128	; 0x80
 8009dea:	438a      	bics	r2, r1
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f383 8810 	msr	PRIMASK, r3
}
 8009df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8009e00:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e02:	623b      	str	r3, [r7, #32]
 8009e04:	2301      	movs	r3, #1
 8009e06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f383 8810 	msr	PRIMASK, r3
}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2140      	movs	r1, #64	; 0x40
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f383 8810 	msr	PRIMASK, r3
}
 8009e2a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009e2c:	e013      	b.n	8009e56 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2256      	movs	r2, #86	; 0x56
 8009e48:	5a9b      	ldrh	r3, [r3, r2]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b299      	uxth	r1, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2256      	movs	r2, #86	; 0x56
 8009e54:	5299      	strh	r1, [r3, r2]
}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b00a      	add	sp, #40	; 0x28
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b08c      	sub	sp, #48	; 0x30
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2288      	movs	r2, #136	; 0x88
 8009e6a:	589b      	ldr	r3, [r3, r2]
 8009e6c:	2b21      	cmp	r3, #33	; 0x21
 8009e6e:	d151      	bne.n	8009f14 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2256      	movs	r2, #86	; 0x56
 8009e74:	5a9b      	ldrh	r3, [r3, r2]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d132      	bne.n	8009ee2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e82:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e86:	2301      	movs	r3, #1
 8009e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f383 8810 	msr	PRIMASK, r3
}
 8009e90:	46c0      	nop			; (mov r8, r8)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2180      	movs	r1, #128	; 0x80
 8009e9e:	438a      	bics	r2, r1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f383 8810 	msr	PRIMASK, r3
}
 8009eac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eae:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8009eb4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb8:	2301      	movs	r3, #1
 8009eba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f383 8810 	msr	PRIMASK, r3
}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2140      	movs	r1, #64	; 0x40
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	f383 8810 	msr	PRIMASK, r3
}
 8009ede:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009ee0:	e018      	b.n	8009f14 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	001a      	movs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	05d2      	lsls	r2, r2, #23
 8009ef4:	0dd2      	lsrs	r2, r2, #23
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efc:	1c9a      	adds	r2, r3, #2
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2256      	movs	r2, #86	; 0x56
 8009f06:	5a9b      	ldrh	r3, [r3, r2]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b299      	uxth	r1, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2256      	movs	r2, #86	; 0x56
 8009f12:	5299      	strh	r1, [r3, r2]
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b00c      	add	sp, #48	; 0x30
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08c      	sub	sp, #48	; 0x30
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2288      	movs	r2, #136	; 0x88
 8009f28:	589b      	ldr	r3, [r3, r2]
 8009f2a:	2b21      	cmp	r3, #33	; 0x21
 8009f2c:	d165      	bne.n	8009ffa <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f2e:	232e      	movs	r3, #46	; 0x2e
 8009f30:	18fb      	adds	r3, r7, r3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	216a      	movs	r1, #106	; 0x6a
 8009f36:	5a52      	ldrh	r2, [r2, r1]
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	e059      	b.n	8009ff0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2256      	movs	r2, #86	; 0x56
 8009f40:	5a9b      	ldrh	r3, [r3, r2]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d133      	bne.n	8009fb0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f48:	f3ef 8310 	mrs	r3, PRIMASK
 8009f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f52:	2301      	movs	r3, #1
 8009f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f383 8810 	msr	PRIMASK, r3
}
 8009f5c:	46c0      	nop			; (mov r8, r8)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4926      	ldr	r1, [pc, #152]	; (800a004 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8009f6a:	400a      	ands	r2, r1
 8009f6c:	609a      	str	r2, [r3, #8]
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f383 8810 	msr	PRIMASK, r3
}
 8009f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f80:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
 8009f84:	2301      	movs	r3, #1
 8009f86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	f383 8810 	msr	PRIMASK, r3
}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2140      	movs	r1, #64	; 0x40
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	f383 8810 	msr	PRIMASK, r3
}
 8009faa:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8009fac:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8009fae:	e024      	b.n	8009ffa <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	2280      	movs	r2, #128	; 0x80
 8009fb8:	4013      	ands	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	781a      	ldrb	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2256      	movs	r2, #86	; 0x56
 8009fd6:	5a9b      	ldrh	r3, [r3, r2]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b299      	uxth	r1, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2256      	movs	r2, #86	; 0x56
 8009fe2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fe4:	212e      	movs	r1, #46	; 0x2e
 8009fe6:	187b      	adds	r3, r7, r1
 8009fe8:	881a      	ldrh	r2, [r3, #0]
 8009fea:	187b      	adds	r3, r7, r1
 8009fec:	3a01      	subs	r2, #1
 8009fee:	801a      	strh	r2, [r3, #0]
 8009ff0:	232e      	movs	r3, #46	; 0x2e
 8009ff2:	18fb      	adds	r3, r7, r3
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1a0      	bne.n	8009f3c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	b00c      	add	sp, #48	; 0x30
 800a000:	bd80      	pop	{r7, pc}
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	ff7fffff 	.word	0xff7fffff

0800a008 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08c      	sub	sp, #48	; 0x30
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2288      	movs	r2, #136	; 0x88
 800a014:	589b      	ldr	r3, [r3, r2]
 800a016:	2b21      	cmp	r3, #33	; 0x21
 800a018:	d16a      	bne.n	800a0f0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a01a:	232e      	movs	r3, #46	; 0x2e
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	216a      	movs	r1, #106	; 0x6a
 800a022:	5a52      	ldrh	r2, [r2, r1]
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	e05e      	b.n	800a0e6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2256      	movs	r2, #86	; 0x56
 800a02c:	5a9b      	ldrh	r3, [r3, r2]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d133      	bne.n	800a09c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a034:	f3ef 8310 	mrs	r3, PRIMASK
 800a038:	60bb      	str	r3, [r7, #8]
  return(result);
 800a03a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
 800a03e:	2301      	movs	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f383 8810 	msr	PRIMASK, r3
}
 800a048:	46c0      	nop			; (mov r8, r8)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4928      	ldr	r1, [pc, #160]	; (800a0f8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800a056:	400a      	ands	r2, r1
 800a058:	609a      	str	r2, [r3, #8]
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f383 8810 	msr	PRIMASK, r3
}
 800a064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a066:	f3ef 8310 	mrs	r3, PRIMASK
 800a06a:	617b      	str	r3, [r7, #20]
  return(result);
 800a06c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a06e:	623b      	str	r3, [r7, #32]
 800a070:	2301      	movs	r3, #1
 800a072:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f383 8810 	msr	PRIMASK, r3
}
 800a07a:	46c0      	nop			; (mov r8, r8)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2140      	movs	r1, #64	; 0x40
 800a088:	430a      	orrs	r2, r1
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	f383 8810 	msr	PRIMASK, r3
}
 800a096:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800a098:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800a09a:	e029      	b.n	800a0f0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	2280      	movs	r2, #128	; 0x80
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	d018      	beq.n	800a0da <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	001a      	movs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	05d2      	lsls	r2, r2, #23
 800a0ba:	0dd2      	lsrs	r2, r2, #23
 800a0bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c2:	1c9a      	adds	r2, r3, #2
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2256      	movs	r2, #86	; 0x56
 800a0cc:	5a9b      	ldrh	r3, [r3, r2]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b299      	uxth	r1, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2256      	movs	r2, #86	; 0x56
 800a0d8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a0da:	212e      	movs	r1, #46	; 0x2e
 800a0dc:	187b      	adds	r3, r7, r1
 800a0de:	881a      	ldrh	r2, [r3, #0]
 800a0e0:	187b      	adds	r3, r7, r1
 800a0e2:	3a01      	subs	r2, #1
 800a0e4:	801a      	strh	r2, [r3, #0]
 800a0e6:	232e      	movs	r3, #46	; 0x2e
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d19b      	bne.n	800a028 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800a0f0:	46c0      	nop			; (mov r8, r8)
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b00c      	add	sp, #48	; 0x30
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	ff7fffff 	.word	0xff7fffff

0800a0fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a104:	f3ef 8310 	mrs	r3, PRIMASK
 800a108:	60bb      	str	r3, [r7, #8]
  return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a10c:	617b      	str	r3, [r7, #20]
 800a10e:	2301      	movs	r3, #1
 800a110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f383 8810 	msr	PRIMASK, r3
}
 800a118:	46c0      	nop			; (mov r8, r8)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	438a      	bics	r2, r1
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f383 8810 	msr	PRIMASK, r3
}
 800a134:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2288      	movs	r2, #136	; 0x88
 800a13a:	2120      	movs	r1, #32
 800a13c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	0018      	movs	r0, r3
 800a148:	f7fa f806 	bl	8004158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a14c:	46c0      	nop			; (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	b006      	add	sp, #24
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a15c:	46c0      	nop			; (mov r8, r8)
 800a15e:	46bd      	mov	sp, r7
 800a160:	b002      	add	sp, #8
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a16c:	46c0      	nop			; (mov r8, r8)
 800a16e:	46bd      	mov	sp, r7
 800a170:	b002      	add	sp, #8
 800a172:	bd80      	pop	{r7, pc}

0800a174 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a17c:	46c0      	nop			; (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b002      	add	sp, #8
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2284      	movs	r2, #132	; 0x84
 800a190:	5c9b      	ldrb	r3, [r3, r2]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_UARTEx_DisableFifoMode+0x16>
 800a196:	2302      	movs	r3, #2
 800a198:	e027      	b.n	800a1ea <HAL_UARTEx_DisableFifoMode+0x66>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2284      	movs	r2, #132	; 0x84
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2288      	movs	r2, #136	; 0x88
 800a1a6:	2124      	movs	r1, #36	; 0x24
 800a1a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2101      	movs	r1, #1
 800a1be:	438a      	bics	r2, r1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4a0b      	ldr	r2, [pc, #44]	; (800a1f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2288      	movs	r2, #136	; 0x88
 800a1dc:	2120      	movs	r1, #32
 800a1de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2284      	movs	r2, #132	; 0x84
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b004      	add	sp, #16
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	dfffffff 	.word	0xdfffffff

0800a1f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2284      	movs	r2, #132	; 0x84
 800a206:	5c9b      	ldrb	r3, [r3, r2]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e02e      	b.n	800a26e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2284      	movs	r2, #132	; 0x84
 800a214:	2101      	movs	r1, #1
 800a216:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2288      	movs	r2, #136	; 0x88
 800a21c:	2124      	movs	r1, #36	; 0x24
 800a21e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2101      	movs	r1, #1
 800a234:	438a      	bics	r2, r1
 800a236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	08d9      	lsrs	r1, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	0018      	movs	r0, r3
 800a250:	f000 f854 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2288      	movs	r2, #136	; 0x88
 800a260:	2120      	movs	r1, #32
 800a262:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2284      	movs	r2, #132	; 0x84
 800a268:	2100      	movs	r1, #0
 800a26a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	0018      	movs	r0, r3
 800a270:	46bd      	mov	sp, r7
 800a272:	b004      	add	sp, #16
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2284      	movs	r2, #132	; 0x84
 800a286:	5c9b      	ldrb	r3, [r3, r2]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e02f      	b.n	800a2f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2284      	movs	r2, #132	; 0x84
 800a294:	2101      	movs	r1, #1
 800a296:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2288      	movs	r2, #136	; 0x88
 800a29c:	2124      	movs	r1, #36	; 0x24
 800a29e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	438a      	bics	r2, r1
 800a2b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	4a0e      	ldr	r2, [pc, #56]	; (800a2f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	0019      	movs	r1, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 f813 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2288      	movs	r2, #136	; 0x88
 800a2e2:	2120      	movs	r1, #32
 800a2e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2284      	movs	r2, #132	; 0x84
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b004      	add	sp, #16
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	f1ffffff 	.word	0xf1ffffff

0800a2fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	226a      	movs	r2, #106	; 0x6a
 800a310:	2101      	movs	r1, #1
 800a312:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2268      	movs	r2, #104	; 0x68
 800a318:	2101      	movs	r1, #1
 800a31a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a31c:	e043      	b.n	800a3a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a31e:	260f      	movs	r6, #15
 800a320:	19bb      	adds	r3, r7, r6
 800a322:	2208      	movs	r2, #8
 800a324:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a326:	200e      	movs	r0, #14
 800a328:	183b      	adds	r3, r7, r0
 800a32a:	2208      	movs	r2, #8
 800a32c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	0e5b      	lsrs	r3, r3, #25
 800a336:	b2da      	uxtb	r2, r3
 800a338:	240d      	movs	r4, #13
 800a33a:	193b      	adds	r3, r7, r4
 800a33c:	2107      	movs	r1, #7
 800a33e:	400a      	ands	r2, r1
 800a340:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	0f5b      	lsrs	r3, r3, #29
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	250c      	movs	r5, #12
 800a34e:	197b      	adds	r3, r7, r5
 800a350:	2107      	movs	r1, #7
 800a352:	400a      	ands	r2, r1
 800a354:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a356:	183b      	adds	r3, r7, r0
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	197a      	adds	r2, r7, r5
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	4914      	ldr	r1, [pc, #80]	; (800a3b0 <UARTEx_SetNbDataToProcess+0xb4>)
 800a360:	5c8a      	ldrb	r2, [r1, r2]
 800a362:	435a      	muls	r2, r3
 800a364:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a366:	197b      	adds	r3, r7, r5
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4a12      	ldr	r2, [pc, #72]	; (800a3b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800a36c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a36e:	0019      	movs	r1, r3
 800a370:	f7f5 ff50 	bl	8000214 <__divsi3>
 800a374:	0003      	movs	r3, r0
 800a376:	b299      	uxth	r1, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	226a      	movs	r2, #106	; 0x6a
 800a37c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a37e:	19bb      	adds	r3, r7, r6
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	193a      	adds	r2, r7, r4
 800a384:	7812      	ldrb	r2, [r2, #0]
 800a386:	490a      	ldr	r1, [pc, #40]	; (800a3b0 <UARTEx_SetNbDataToProcess+0xb4>)
 800a388:	5c8a      	ldrb	r2, [r1, r2]
 800a38a:	435a      	muls	r2, r3
 800a38c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a38e:	193b      	adds	r3, r7, r4
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	4a08      	ldr	r2, [pc, #32]	; (800a3b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800a394:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a396:	0019      	movs	r1, r3
 800a398:	f7f5 ff3c 	bl	8000214 <__divsi3>
 800a39c:	0003      	movs	r3, r0
 800a39e:	b299      	uxth	r1, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2268      	movs	r2, #104	; 0x68
 800a3a4:	5299      	strh	r1, [r3, r2]
}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b005      	add	sp, #20
 800a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	0800b4d8 	.word	0x0800b4d8
 800a3b4:	0800b4e0 	.word	0x0800b4e0

0800a3b8 <memset>:
 800a3b8:	0003      	movs	r3, r0
 800a3ba:	1882      	adds	r2, r0, r2
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d100      	bne.n	800a3c2 <memset+0xa>
 800a3c0:	4770      	bx	lr
 800a3c2:	7019      	strb	r1, [r3, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	e7f9      	b.n	800a3bc <memset+0x4>

0800a3c8 <__errno>:
 800a3c8:	4b01      	ldr	r3, [pc, #4]	; (800a3d0 <__errno+0x8>)
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	4770      	bx	lr
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	2000005c 	.word	0x2000005c

0800a3d4 <__libc_init_array>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	2600      	movs	r6, #0
 800a3d8:	4c0c      	ldr	r4, [pc, #48]	; (800a40c <__libc_init_array+0x38>)
 800a3da:	4d0d      	ldr	r5, [pc, #52]	; (800a410 <__libc_init_array+0x3c>)
 800a3dc:	1b64      	subs	r4, r4, r5
 800a3de:	10a4      	asrs	r4, r4, #2
 800a3e0:	42a6      	cmp	r6, r4
 800a3e2:	d109      	bne.n	800a3f8 <__libc_init_array+0x24>
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	f000 ffc5 	bl	800b374 <_init>
 800a3ea:	4c0a      	ldr	r4, [pc, #40]	; (800a414 <__libc_init_array+0x40>)
 800a3ec:	4d0a      	ldr	r5, [pc, #40]	; (800a418 <__libc_init_array+0x44>)
 800a3ee:	1b64      	subs	r4, r4, r5
 800a3f0:	10a4      	asrs	r4, r4, #2
 800a3f2:	42a6      	cmp	r6, r4
 800a3f4:	d105      	bne.n	800a402 <__libc_init_array+0x2e>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	00b3      	lsls	r3, r6, #2
 800a3fa:	58eb      	ldr	r3, [r5, r3]
 800a3fc:	4798      	blx	r3
 800a3fe:	3601      	adds	r6, #1
 800a400:	e7ee      	b.n	800a3e0 <__libc_init_array+0xc>
 800a402:	00b3      	lsls	r3, r6, #2
 800a404:	58eb      	ldr	r3, [r5, r3]
 800a406:	4798      	blx	r3
 800a408:	3601      	adds	r6, #1
 800a40a:	e7f2      	b.n	800a3f2 <__libc_init_array+0x1e>
 800a40c:	0800b8d8 	.word	0x0800b8d8
 800a410:	0800b8d8 	.word	0x0800b8d8
 800a414:	0800b8dc 	.word	0x0800b8dc
 800a418:	0800b8d8 	.word	0x0800b8d8

0800a41c <memcpy>:
 800a41c:	2300      	movs	r3, #0
 800a41e:	b510      	push	{r4, lr}
 800a420:	429a      	cmp	r2, r3
 800a422:	d100      	bne.n	800a426 <memcpy+0xa>
 800a424:	bd10      	pop	{r4, pc}
 800a426:	5ccc      	ldrb	r4, [r1, r3]
 800a428:	54c4      	strb	r4, [r0, r3]
 800a42a:	3301      	adds	r3, #1
 800a42c:	e7f8      	b.n	800a420 <memcpy+0x4>

0800a42e <sqrtf>:
 800a42e:	b570      	push	{r4, r5, r6, lr}
 800a430:	1c05      	adds	r5, r0, #0
 800a432:	f000 f999 	bl	800a768 <__ieee754_sqrtf>
 800a436:	1c29      	adds	r1, r5, #0
 800a438:	1c04      	adds	r4, r0, #0
 800a43a:	1c28      	adds	r0, r5, #0
 800a43c:	f7f6 fe80 	bl	8001140 <__aeabi_fcmpun>
 800a440:	2800      	cmp	r0, #0
 800a442:	d10e      	bne.n	800a462 <sqrtf+0x34>
 800a444:	2100      	movs	r1, #0
 800a446:	1c28      	adds	r0, r5, #0
 800a448:	f7f5 ffe2 	bl	8000410 <__aeabi_fcmplt>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d008      	beq.n	800a462 <sqrtf+0x34>
 800a450:	f7ff ffba 	bl	800a3c8 <__errno>
 800a454:	2321      	movs	r3, #33	; 0x21
 800a456:	2100      	movs	r1, #0
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	1c08      	adds	r0, r1, #0
 800a45c:	f7f6 f9b8 	bl	80007d0 <__aeabi_fdiv>
 800a460:	1c04      	adds	r4, r0, #0
 800a462:	1c20      	adds	r0, r4, #0
 800a464:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a468 <atanf>:
 800a468:	23a1      	movs	r3, #161	; 0xa1
 800a46a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a46c:	0045      	lsls	r5, r0, #1
 800a46e:	1c04      	adds	r4, r0, #0
 800a470:	9001      	str	r0, [sp, #4]
 800a472:	086d      	lsrs	r5, r5, #1
 800a474:	05db      	lsls	r3, r3, #23
 800a476:	429d      	cmp	r5, r3
 800a478:	db0f      	blt.n	800a49a <atanf+0x32>
 800a47a:	23ff      	movs	r3, #255	; 0xff
 800a47c:	05db      	lsls	r3, r3, #23
 800a47e:	429d      	cmp	r5, r3
 800a480:	dd04      	ble.n	800a48c <atanf+0x24>
 800a482:	1c01      	adds	r1, r0, #0
 800a484:	f7f6 f804 	bl	8000490 <__aeabi_fadd>
 800a488:	1c04      	adds	r4, r0, #0
 800a48a:	e004      	b.n	800a496 <atanf+0x2e>
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd00      	ble.n	800a494 <atanf+0x2c>
 800a492:	e0cc      	b.n	800a62e <atanf+0x1c6>
 800a494:	4c67      	ldr	r4, [pc, #412]	; (800a634 <atanf+0x1cc>)
 800a496:	1c20      	adds	r0, r4, #0
 800a498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a49a:	4b67      	ldr	r3, [pc, #412]	; (800a638 <atanf+0x1d0>)
 800a49c:	429d      	cmp	r5, r3
 800a49e:	dc0f      	bgt.n	800a4c0 <atanf+0x58>
 800a4a0:	23c4      	movs	r3, #196	; 0xc4
 800a4a2:	059b      	lsls	r3, r3, #22
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	da08      	bge.n	800a4ba <atanf+0x52>
 800a4a8:	4964      	ldr	r1, [pc, #400]	; (800a63c <atanf+0x1d4>)
 800a4aa:	f7f5 fff1 	bl	8000490 <__aeabi_fadd>
 800a4ae:	21fe      	movs	r1, #254	; 0xfe
 800a4b0:	0589      	lsls	r1, r1, #22
 800a4b2:	f7f5 ffc1 	bl	8000438 <__aeabi_fcmpgt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d1ed      	bne.n	800a496 <atanf+0x2e>
 800a4ba:	2601      	movs	r6, #1
 800a4bc:	4276      	negs	r6, r6
 800a4be:	e01b      	b.n	800a4f8 <atanf+0x90>
 800a4c0:	f000 f916 	bl	800a6f0 <fabsf>
 800a4c4:	4b5e      	ldr	r3, [pc, #376]	; (800a640 <atanf+0x1d8>)
 800a4c6:	1c04      	adds	r4, r0, #0
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	dc7b      	bgt.n	800a5c4 <atanf+0x15c>
 800a4cc:	4b5d      	ldr	r3, [pc, #372]	; (800a644 <atanf+0x1dc>)
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	dc67      	bgt.n	800a5a2 <atanf+0x13a>
 800a4d2:	1c01      	adds	r1, r0, #0
 800a4d4:	f7f5 ffdc 	bl	8000490 <__aeabi_fadd>
 800a4d8:	21fe      	movs	r1, #254	; 0xfe
 800a4da:	0589      	lsls	r1, r1, #22
 800a4dc:	f7f6 fc90 	bl	8000e00 <__aeabi_fsub>
 800a4e0:	2180      	movs	r1, #128	; 0x80
 800a4e2:	1c05      	adds	r5, r0, #0
 800a4e4:	05c9      	lsls	r1, r1, #23
 800a4e6:	1c20      	adds	r0, r4, #0
 800a4e8:	f7f5 ffd2 	bl	8000490 <__aeabi_fadd>
 800a4ec:	1c01      	adds	r1, r0, #0
 800a4ee:	1c28      	adds	r0, r5, #0
 800a4f0:	f7f6 f96e 	bl	80007d0 <__aeabi_fdiv>
 800a4f4:	2600      	movs	r6, #0
 800a4f6:	1c04      	adds	r4, r0, #0
 800a4f8:	1c21      	adds	r1, r4, #0
 800a4fa:	1c20      	adds	r0, r4, #0
 800a4fc:	f7f6 fb32 	bl	8000b64 <__aeabi_fmul>
 800a500:	1c01      	adds	r1, r0, #0
 800a502:	1c07      	adds	r7, r0, #0
 800a504:	f7f6 fb2e 	bl	8000b64 <__aeabi_fmul>
 800a508:	494f      	ldr	r1, [pc, #316]	; (800a648 <atanf+0x1e0>)
 800a50a:	1c05      	adds	r5, r0, #0
 800a50c:	f7f6 fb2a 	bl	8000b64 <__aeabi_fmul>
 800a510:	494e      	ldr	r1, [pc, #312]	; (800a64c <atanf+0x1e4>)
 800a512:	f7f5 ffbd 	bl	8000490 <__aeabi_fadd>
 800a516:	1c29      	adds	r1, r5, #0
 800a518:	f7f6 fb24 	bl	8000b64 <__aeabi_fmul>
 800a51c:	494c      	ldr	r1, [pc, #304]	; (800a650 <atanf+0x1e8>)
 800a51e:	f7f5 ffb7 	bl	8000490 <__aeabi_fadd>
 800a522:	1c29      	adds	r1, r5, #0
 800a524:	f7f6 fb1e 	bl	8000b64 <__aeabi_fmul>
 800a528:	494a      	ldr	r1, [pc, #296]	; (800a654 <atanf+0x1ec>)
 800a52a:	f7f5 ffb1 	bl	8000490 <__aeabi_fadd>
 800a52e:	1c29      	adds	r1, r5, #0
 800a530:	f7f6 fb18 	bl	8000b64 <__aeabi_fmul>
 800a534:	4948      	ldr	r1, [pc, #288]	; (800a658 <atanf+0x1f0>)
 800a536:	f7f5 ffab 	bl	8000490 <__aeabi_fadd>
 800a53a:	1c29      	adds	r1, r5, #0
 800a53c:	f7f6 fb12 	bl	8000b64 <__aeabi_fmul>
 800a540:	4946      	ldr	r1, [pc, #280]	; (800a65c <atanf+0x1f4>)
 800a542:	f7f5 ffa5 	bl	8000490 <__aeabi_fadd>
 800a546:	1c39      	adds	r1, r7, #0
 800a548:	f7f6 fb0c 	bl	8000b64 <__aeabi_fmul>
 800a54c:	4944      	ldr	r1, [pc, #272]	; (800a660 <atanf+0x1f8>)
 800a54e:	1c07      	adds	r7, r0, #0
 800a550:	1c28      	adds	r0, r5, #0
 800a552:	f7f6 fb07 	bl	8000b64 <__aeabi_fmul>
 800a556:	4943      	ldr	r1, [pc, #268]	; (800a664 <atanf+0x1fc>)
 800a558:	f7f6 fc52 	bl	8000e00 <__aeabi_fsub>
 800a55c:	1c29      	adds	r1, r5, #0
 800a55e:	f7f6 fb01 	bl	8000b64 <__aeabi_fmul>
 800a562:	4941      	ldr	r1, [pc, #260]	; (800a668 <atanf+0x200>)
 800a564:	f7f6 fc4c 	bl	8000e00 <__aeabi_fsub>
 800a568:	1c29      	adds	r1, r5, #0
 800a56a:	f7f6 fafb 	bl	8000b64 <__aeabi_fmul>
 800a56e:	493f      	ldr	r1, [pc, #252]	; (800a66c <atanf+0x204>)
 800a570:	f7f6 fc46 	bl	8000e00 <__aeabi_fsub>
 800a574:	1c29      	adds	r1, r5, #0
 800a576:	f7f6 faf5 	bl	8000b64 <__aeabi_fmul>
 800a57a:	493d      	ldr	r1, [pc, #244]	; (800a670 <atanf+0x208>)
 800a57c:	f7f6 fc40 	bl	8000e00 <__aeabi_fsub>
 800a580:	1c29      	adds	r1, r5, #0
 800a582:	f7f6 faef 	bl	8000b64 <__aeabi_fmul>
 800a586:	1c01      	adds	r1, r0, #0
 800a588:	1c38      	adds	r0, r7, #0
 800a58a:	f7f5 ff81 	bl	8000490 <__aeabi_fadd>
 800a58e:	1c21      	adds	r1, r4, #0
 800a590:	f7f6 fae8 	bl	8000b64 <__aeabi_fmul>
 800a594:	1c73      	adds	r3, r6, #1
 800a596:	d134      	bne.n	800a602 <atanf+0x19a>
 800a598:	1c01      	adds	r1, r0, #0
 800a59a:	1c20      	adds	r0, r4, #0
 800a59c:	f7f6 fc30 	bl	8000e00 <__aeabi_fsub>
 800a5a0:	e772      	b.n	800a488 <atanf+0x20>
 800a5a2:	21fe      	movs	r1, #254	; 0xfe
 800a5a4:	0589      	lsls	r1, r1, #22
 800a5a6:	f7f6 fc2b 	bl	8000e00 <__aeabi_fsub>
 800a5aa:	21fe      	movs	r1, #254	; 0xfe
 800a5ac:	1c05      	adds	r5, r0, #0
 800a5ae:	0589      	lsls	r1, r1, #22
 800a5b0:	1c20      	adds	r0, r4, #0
 800a5b2:	f7f5 ff6d 	bl	8000490 <__aeabi_fadd>
 800a5b6:	1c01      	adds	r1, r0, #0
 800a5b8:	1c28      	adds	r0, r5, #0
 800a5ba:	f7f6 f909 	bl	80007d0 <__aeabi_fdiv>
 800a5be:	2601      	movs	r6, #1
 800a5c0:	1c04      	adds	r4, r0, #0
 800a5c2:	e799      	b.n	800a4f8 <atanf+0x90>
 800a5c4:	4b2b      	ldr	r3, [pc, #172]	; (800a674 <atanf+0x20c>)
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	dc14      	bgt.n	800a5f4 <atanf+0x18c>
 800a5ca:	21ff      	movs	r1, #255	; 0xff
 800a5cc:	0589      	lsls	r1, r1, #22
 800a5ce:	f7f6 fc17 	bl	8000e00 <__aeabi_fsub>
 800a5d2:	21ff      	movs	r1, #255	; 0xff
 800a5d4:	1c05      	adds	r5, r0, #0
 800a5d6:	0589      	lsls	r1, r1, #22
 800a5d8:	1c20      	adds	r0, r4, #0
 800a5da:	f7f6 fac3 	bl	8000b64 <__aeabi_fmul>
 800a5de:	21fe      	movs	r1, #254	; 0xfe
 800a5e0:	0589      	lsls	r1, r1, #22
 800a5e2:	f7f5 ff55 	bl	8000490 <__aeabi_fadd>
 800a5e6:	1c01      	adds	r1, r0, #0
 800a5e8:	1c28      	adds	r0, r5, #0
 800a5ea:	f7f6 f8f1 	bl	80007d0 <__aeabi_fdiv>
 800a5ee:	2602      	movs	r6, #2
 800a5f0:	1c04      	adds	r4, r0, #0
 800a5f2:	e781      	b.n	800a4f8 <atanf+0x90>
 800a5f4:	1c01      	adds	r1, r0, #0
 800a5f6:	4820      	ldr	r0, [pc, #128]	; (800a678 <atanf+0x210>)
 800a5f8:	f7f6 f8ea 	bl	80007d0 <__aeabi_fdiv>
 800a5fc:	2603      	movs	r6, #3
 800a5fe:	1c04      	adds	r4, r0, #0
 800a600:	e77a      	b.n	800a4f8 <atanf+0x90>
 800a602:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <atanf+0x214>)
 800a604:	00b6      	lsls	r6, r6, #2
 800a606:	58f1      	ldr	r1, [r6, r3]
 800a608:	f7f6 fbfa 	bl	8000e00 <__aeabi_fsub>
 800a60c:	1c21      	adds	r1, r4, #0
 800a60e:	f7f6 fbf7 	bl	8000e00 <__aeabi_fsub>
 800a612:	4d1b      	ldr	r5, [pc, #108]	; (800a680 <atanf+0x218>)
 800a614:	1c01      	adds	r1, r0, #0
 800a616:	5970      	ldr	r0, [r6, r5]
 800a618:	f7f6 fbf2 	bl	8000e00 <__aeabi_fsub>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	1c04      	adds	r4, r0, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	db00      	blt.n	800a626 <atanf+0x1be>
 800a624:	e737      	b.n	800a496 <atanf+0x2e>
 800a626:	2380      	movs	r3, #128	; 0x80
 800a628:	061b      	lsls	r3, r3, #24
 800a62a:	18c4      	adds	r4, r0, r3
 800a62c:	e733      	b.n	800a496 <atanf+0x2e>
 800a62e:	4c15      	ldr	r4, [pc, #84]	; (800a684 <atanf+0x21c>)
 800a630:	e731      	b.n	800a496 <atanf+0x2e>
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	bfc90fdb 	.word	0xbfc90fdb
 800a638:	3edfffff 	.word	0x3edfffff
 800a63c:	7149f2ca 	.word	0x7149f2ca
 800a640:	3f97ffff 	.word	0x3f97ffff
 800a644:	3f2fffff 	.word	0x3f2fffff
 800a648:	3c8569d7 	.word	0x3c8569d7
 800a64c:	3d4bda59 	.word	0x3d4bda59
 800a650:	3d886b35 	.word	0x3d886b35
 800a654:	3dba2e6e 	.word	0x3dba2e6e
 800a658:	3e124925 	.word	0x3e124925
 800a65c:	3eaaaaab 	.word	0x3eaaaaab
 800a660:	bd15a221 	.word	0xbd15a221
 800a664:	3d6ef16b 	.word	0x3d6ef16b
 800a668:	3d9d8795 	.word	0x3d9d8795
 800a66c:	3de38e38 	.word	0x3de38e38
 800a670:	3e4ccccd 	.word	0x3e4ccccd
 800a674:	401bffff 	.word	0x401bffff
 800a678:	bf800000 	.word	0xbf800000
 800a67c:	0800b4f8 	.word	0x0800b4f8
 800a680:	0800b4e8 	.word	0x0800b4e8
 800a684:	3fc90fdb 	.word	0x3fc90fdb

0800a688 <cosf>:
 800a688:	b507      	push	{r0, r1, r2, lr}
 800a68a:	4a18      	ldr	r2, [pc, #96]	; (800a6ec <cosf+0x64>)
 800a68c:	0043      	lsls	r3, r0, #1
 800a68e:	2100      	movs	r1, #0
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	4293      	cmp	r3, r2
 800a694:	dd14      	ble.n	800a6c0 <cosf+0x38>
 800a696:	22ff      	movs	r2, #255	; 0xff
 800a698:	05d2      	lsls	r2, r2, #23
 800a69a:	4293      	cmp	r3, r2
 800a69c:	db03      	blt.n	800a6a6 <cosf+0x1e>
 800a69e:	1c01      	adds	r1, r0, #0
 800a6a0:	f7f6 fbae 	bl	8000e00 <__aeabi_fsub>
 800a6a4:	bd0e      	pop	{r1, r2, r3, pc}
 800a6a6:	4669      	mov	r1, sp
 800a6a8:	f000 f9ca 	bl	800aa40 <__ieee754_rem_pio2f>
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	4002      	ands	r2, r0
 800a6b0:	2a01      	cmp	r2, #1
 800a6b2:	d008      	beq.n	800a6c6 <cosf+0x3e>
 800a6b4:	2a02      	cmp	r2, #2
 800a6b6:	d00e      	beq.n	800a6d6 <cosf+0x4e>
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	d111      	bne.n	800a6e0 <cosf+0x58>
 800a6bc:	9901      	ldr	r1, [sp, #4]
 800a6be:	9800      	ldr	r0, [sp, #0]
 800a6c0:	f000 f8ca 	bl	800a858 <__kernel_cosf>
 800a6c4:	e7ee      	b.n	800a6a4 <cosf+0x1c>
 800a6c6:	9901      	ldr	r1, [sp, #4]
 800a6c8:	9800      	ldr	r0, [sp, #0]
 800a6ca:	f000 f945 	bl	800a958 <__kernel_sinf>
 800a6ce:	2380      	movs	r3, #128	; 0x80
 800a6d0:	061b      	lsls	r3, r3, #24
 800a6d2:	18c0      	adds	r0, r0, r3
 800a6d4:	e7e6      	b.n	800a6a4 <cosf+0x1c>
 800a6d6:	9901      	ldr	r1, [sp, #4]
 800a6d8:	9800      	ldr	r0, [sp, #0]
 800a6da:	f000 f8bd 	bl	800a858 <__kernel_cosf>
 800a6de:	e7f6      	b.n	800a6ce <cosf+0x46>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	9901      	ldr	r1, [sp, #4]
 800a6e4:	9800      	ldr	r0, [sp, #0]
 800a6e6:	f000 f937 	bl	800a958 <__kernel_sinf>
 800a6ea:	e7db      	b.n	800a6a4 <cosf+0x1c>
 800a6ec:	3f490fd8 	.word	0x3f490fd8

0800a6f0 <fabsf>:
 800a6f0:	0040      	lsls	r0, r0, #1
 800a6f2:	0840      	lsrs	r0, r0, #1
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <sinf>:
 800a6f8:	b507      	push	{r0, r1, r2, lr}
 800a6fa:	4a1a      	ldr	r2, [pc, #104]	; (800a764 <sinf+0x6c>)
 800a6fc:	0043      	lsls	r3, r0, #1
 800a6fe:	085b      	lsrs	r3, r3, #1
 800a700:	4293      	cmp	r3, r2
 800a702:	dc04      	bgt.n	800a70e <sinf+0x16>
 800a704:	2200      	movs	r2, #0
 800a706:	2100      	movs	r1, #0
 800a708:	f000 f926 	bl	800a958 <__kernel_sinf>
 800a70c:	e006      	b.n	800a71c <sinf+0x24>
 800a70e:	22ff      	movs	r2, #255	; 0xff
 800a710:	05d2      	lsls	r2, r2, #23
 800a712:	4293      	cmp	r3, r2
 800a714:	db03      	blt.n	800a71e <sinf+0x26>
 800a716:	1c01      	adds	r1, r0, #0
 800a718:	f7f6 fb72 	bl	8000e00 <__aeabi_fsub>
 800a71c:	bd0e      	pop	{r1, r2, r3, pc}
 800a71e:	4669      	mov	r1, sp
 800a720:	f000 f98e 	bl	800aa40 <__ieee754_rem_pio2f>
 800a724:	2303      	movs	r3, #3
 800a726:	4018      	ands	r0, r3
 800a728:	2801      	cmp	r0, #1
 800a72a:	d007      	beq.n	800a73c <sinf+0x44>
 800a72c:	2802      	cmp	r0, #2
 800a72e:	d00a      	beq.n	800a746 <sinf+0x4e>
 800a730:	2800      	cmp	r0, #0
 800a732:	d111      	bne.n	800a758 <sinf+0x60>
 800a734:	2201      	movs	r2, #1
 800a736:	9901      	ldr	r1, [sp, #4]
 800a738:	9800      	ldr	r0, [sp, #0]
 800a73a:	e7e5      	b.n	800a708 <sinf+0x10>
 800a73c:	9901      	ldr	r1, [sp, #4]
 800a73e:	9800      	ldr	r0, [sp, #0]
 800a740:	f000 f88a 	bl	800a858 <__kernel_cosf>
 800a744:	e7ea      	b.n	800a71c <sinf+0x24>
 800a746:	2201      	movs	r2, #1
 800a748:	9901      	ldr	r1, [sp, #4]
 800a74a:	9800      	ldr	r0, [sp, #0]
 800a74c:	f000 f904 	bl	800a958 <__kernel_sinf>
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	061b      	lsls	r3, r3, #24
 800a754:	18c0      	adds	r0, r0, r3
 800a756:	e7e1      	b.n	800a71c <sinf+0x24>
 800a758:	9901      	ldr	r1, [sp, #4]
 800a75a:	9800      	ldr	r0, [sp, #0]
 800a75c:	f000 f87c 	bl	800a858 <__kernel_cosf>
 800a760:	e7f6      	b.n	800a750 <sinf+0x58>
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	3f490fd8 	.word	0x3f490fd8

0800a768 <__ieee754_sqrtf>:
 800a768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a76a:	0003      	movs	r3, r0
 800a76c:	0042      	lsls	r2, r0, #1
 800a76e:	1c04      	adds	r4, r0, #0
 800a770:	20ff      	movs	r0, #255	; 0xff
 800a772:	0852      	lsrs	r2, r2, #1
 800a774:	05c0      	lsls	r0, r0, #23
 800a776:	4282      	cmp	r2, r0
 800a778:	d30a      	bcc.n	800a790 <__ieee754_sqrtf+0x28>
 800a77a:	1c21      	adds	r1, r4, #0
 800a77c:	1c20      	adds	r0, r4, #0
 800a77e:	f7f6 f9f1 	bl	8000b64 <__aeabi_fmul>
 800a782:	1c01      	adds	r1, r0, #0
 800a784:	1c20      	adds	r0, r4, #0
 800a786:	f7f5 fe83 	bl	8000490 <__aeabi_fadd>
 800a78a:	1c04      	adds	r4, r0, #0
 800a78c:	1c20      	adds	r0, r4, #0
 800a78e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a790:	2a00      	cmp	r2, #0
 800a792:	d0fb      	beq.n	800a78c <__ieee754_sqrtf+0x24>
 800a794:	2c00      	cmp	r4, #0
 800a796:	da07      	bge.n	800a7a8 <__ieee754_sqrtf+0x40>
 800a798:	1c21      	adds	r1, r4, #0
 800a79a:	1c20      	adds	r0, r4, #0
 800a79c:	f7f6 fb30 	bl	8000e00 <__aeabi_fsub>
 800a7a0:	1c01      	adds	r1, r0, #0
 800a7a2:	f7f6 f815 	bl	80007d0 <__aeabi_fdiv>
 800a7a6:	e7f0      	b.n	800a78a <__ieee754_sqrtf+0x22>
 800a7a8:	0022      	movs	r2, r4
 800a7aa:	15e1      	asrs	r1, r4, #23
 800a7ac:	4002      	ands	r2, r0
 800a7ae:	4204      	tst	r4, r0
 800a7b0:	d047      	beq.n	800a842 <__ieee754_sqrtf+0xda>
 800a7b2:	2280      	movs	r2, #128	; 0x80
 800a7b4:	0008      	movs	r0, r1
 800a7b6:	025b      	lsls	r3, r3, #9
 800a7b8:	0a5b      	lsrs	r3, r3, #9
 800a7ba:	0412      	lsls	r2, r2, #16
 800a7bc:	387f      	subs	r0, #127	; 0x7f
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	07c9      	lsls	r1, r1, #31
 800a7c2:	d400      	bmi.n	800a7c6 <__ieee754_sqrtf+0x5e>
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	2400      	movs	r4, #0
 800a7c8:	2180      	movs	r1, #128	; 0x80
 800a7ca:	1042      	asrs	r2, r0, #1
 800a7cc:	0026      	movs	r6, r4
 800a7ce:	2019      	movs	r0, #25
 800a7d0:	9201      	str	r2, [sp, #4]
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	0449      	lsls	r1, r1, #17
 800a7d6:	1875      	adds	r5, r6, r1
 800a7d8:	001a      	movs	r2, r3
 800a7da:	429d      	cmp	r5, r3
 800a7dc:	dc02      	bgt.n	800a7e4 <__ieee754_sqrtf+0x7c>
 800a7de:	186e      	adds	r6, r5, r1
 800a7e0:	1b5a      	subs	r2, r3, r5
 800a7e2:	1864      	adds	r4, r4, r1
 800a7e4:	3801      	subs	r0, #1
 800a7e6:	0053      	lsls	r3, r2, #1
 800a7e8:	0849      	lsrs	r1, r1, #1
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d1f3      	bne.n	800a7d6 <__ieee754_sqrtf+0x6e>
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d018      	beq.n	800a824 <__ieee754_sqrtf+0xbc>
 800a7f2:	4d17      	ldr	r5, [pc, #92]	; (800a850 <__ieee754_sqrtf+0xe8>)
 800a7f4:	4e17      	ldr	r6, [pc, #92]	; (800a854 <__ieee754_sqrtf+0xec>)
 800a7f6:	6828      	ldr	r0, [r5, #0]
 800a7f8:	6831      	ldr	r1, [r6, #0]
 800a7fa:	f7f6 fb01 	bl	8000e00 <__aeabi_fsub>
 800a7fe:	682f      	ldr	r7, [r5, #0]
 800a800:	1c01      	adds	r1, r0, #0
 800a802:	1c38      	adds	r0, r7, #0
 800a804:	f7f5 fe0e 	bl	8000424 <__aeabi_fcmple>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d00b      	beq.n	800a824 <__ieee754_sqrtf+0xbc>
 800a80c:	6828      	ldr	r0, [r5, #0]
 800a80e:	6831      	ldr	r1, [r6, #0]
 800a810:	f7f5 fe3e 	bl	8000490 <__aeabi_fadd>
 800a814:	682d      	ldr	r5, [r5, #0]
 800a816:	1c01      	adds	r1, r0, #0
 800a818:	1c28      	adds	r0, r5, #0
 800a81a:	f7f5 fdf9 	bl	8000410 <__aeabi_fcmplt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d012      	beq.n	800a848 <__ieee754_sqrtf+0xe0>
 800a822:	3402      	adds	r4, #2
 800a824:	22fc      	movs	r2, #252	; 0xfc
 800a826:	1063      	asrs	r3, r4, #1
 800a828:	0592      	lsls	r2, r2, #22
 800a82a:	189b      	adds	r3, r3, r2
 800a82c:	9a01      	ldr	r2, [sp, #4]
 800a82e:	05d4      	lsls	r4, r2, #23
 800a830:	18e4      	adds	r4, r4, r3
 800a832:	e7ab      	b.n	800a78c <__ieee754_sqrtf+0x24>
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	3201      	adds	r2, #1
 800a838:	4203      	tst	r3, r0
 800a83a:	d0fb      	beq.n	800a834 <__ieee754_sqrtf+0xcc>
 800a83c:	3a01      	subs	r2, #1
 800a83e:	1a89      	subs	r1, r1, r2
 800a840:	e7b7      	b.n	800a7b2 <__ieee754_sqrtf+0x4a>
 800a842:	2080      	movs	r0, #128	; 0x80
 800a844:	0400      	lsls	r0, r0, #16
 800a846:	e7f7      	b.n	800a838 <__ieee754_sqrtf+0xd0>
 800a848:	2301      	movs	r3, #1
 800a84a:	3401      	adds	r4, #1
 800a84c:	439c      	bics	r4, r3
 800a84e:	e7e9      	b.n	800a824 <__ieee754_sqrtf+0xbc>
 800a850:	20000060 	.word	0x20000060
 800a854:	20000064 	.word	0x20000064

0800a858 <__kernel_cosf>:
 800a858:	23c8      	movs	r3, #200	; 0xc8
 800a85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a85c:	0044      	lsls	r4, r0, #1
 800a85e:	1c06      	adds	r6, r0, #0
 800a860:	9101      	str	r1, [sp, #4]
 800a862:	0864      	lsrs	r4, r4, #1
 800a864:	059b      	lsls	r3, r3, #22
 800a866:	429c      	cmp	r4, r3
 800a868:	da03      	bge.n	800a872 <__kernel_cosf+0x1a>
 800a86a:	f7f6 fc7f 	bl	800116c <__aeabi_f2iz>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d05d      	beq.n	800a92e <__kernel_cosf+0xd6>
 800a872:	1c31      	adds	r1, r6, #0
 800a874:	1c30      	adds	r0, r6, #0
 800a876:	f7f6 f975 	bl	8000b64 <__aeabi_fmul>
 800a87a:	21fc      	movs	r1, #252	; 0xfc
 800a87c:	0589      	lsls	r1, r1, #22
 800a87e:	1c05      	adds	r5, r0, #0
 800a880:	f7f6 f970 	bl	8000b64 <__aeabi_fmul>
 800a884:	492b      	ldr	r1, [pc, #172]	; (800a934 <__kernel_cosf+0xdc>)
 800a886:	1c07      	adds	r7, r0, #0
 800a888:	1c28      	adds	r0, r5, #0
 800a88a:	f7f6 f96b 	bl	8000b64 <__aeabi_fmul>
 800a88e:	492a      	ldr	r1, [pc, #168]	; (800a938 <__kernel_cosf+0xe0>)
 800a890:	f7f5 fdfe 	bl	8000490 <__aeabi_fadd>
 800a894:	1c29      	adds	r1, r5, #0
 800a896:	f7f6 f965 	bl	8000b64 <__aeabi_fmul>
 800a89a:	4928      	ldr	r1, [pc, #160]	; (800a93c <__kernel_cosf+0xe4>)
 800a89c:	f7f6 fab0 	bl	8000e00 <__aeabi_fsub>
 800a8a0:	1c29      	adds	r1, r5, #0
 800a8a2:	f7f6 f95f 	bl	8000b64 <__aeabi_fmul>
 800a8a6:	4926      	ldr	r1, [pc, #152]	; (800a940 <__kernel_cosf+0xe8>)
 800a8a8:	f7f5 fdf2 	bl	8000490 <__aeabi_fadd>
 800a8ac:	1c29      	adds	r1, r5, #0
 800a8ae:	f7f6 f959 	bl	8000b64 <__aeabi_fmul>
 800a8b2:	4924      	ldr	r1, [pc, #144]	; (800a944 <__kernel_cosf+0xec>)
 800a8b4:	f7f6 faa4 	bl	8000e00 <__aeabi_fsub>
 800a8b8:	1c29      	adds	r1, r5, #0
 800a8ba:	f7f6 f953 	bl	8000b64 <__aeabi_fmul>
 800a8be:	4922      	ldr	r1, [pc, #136]	; (800a948 <__kernel_cosf+0xf0>)
 800a8c0:	f7f5 fde6 	bl	8000490 <__aeabi_fadd>
 800a8c4:	1c29      	adds	r1, r5, #0
 800a8c6:	f7f6 f94d 	bl	8000b64 <__aeabi_fmul>
 800a8ca:	1c29      	adds	r1, r5, #0
 800a8cc:	f7f6 f94a 	bl	8000b64 <__aeabi_fmul>
 800a8d0:	9901      	ldr	r1, [sp, #4]
 800a8d2:	1c05      	adds	r5, r0, #0
 800a8d4:	1c30      	adds	r0, r6, #0
 800a8d6:	f7f6 f945 	bl	8000b64 <__aeabi_fmul>
 800a8da:	1c01      	adds	r1, r0, #0
 800a8dc:	1c28      	adds	r0, r5, #0
 800a8de:	f7f6 fa8f 	bl	8000e00 <__aeabi_fsub>
 800a8e2:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <__kernel_cosf+0xf4>)
 800a8e4:	1c05      	adds	r5, r0, #0
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	dc09      	bgt.n	800a8fe <__kernel_cosf+0xa6>
 800a8ea:	1c01      	adds	r1, r0, #0
 800a8ec:	1c38      	adds	r0, r7, #0
 800a8ee:	f7f6 fa87 	bl	8000e00 <__aeabi_fsub>
 800a8f2:	1c01      	adds	r1, r0, #0
 800a8f4:	20fe      	movs	r0, #254	; 0xfe
 800a8f6:	0580      	lsls	r0, r0, #22
 800a8f8:	f7f6 fa82 	bl	8000e00 <__aeabi_fsub>
 800a8fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <__kernel_cosf+0xf8>)
 800a900:	429c      	cmp	r4, r3
 800a902:	dc12      	bgt.n	800a92a <__kernel_cosf+0xd2>
 800a904:	23ff      	movs	r3, #255	; 0xff
 800a906:	061b      	lsls	r3, r3, #24
 800a908:	18e4      	adds	r4, r4, r3
 800a90a:	20fe      	movs	r0, #254	; 0xfe
 800a90c:	1c21      	adds	r1, r4, #0
 800a90e:	0580      	lsls	r0, r0, #22
 800a910:	f7f6 fa76 	bl	8000e00 <__aeabi_fsub>
 800a914:	1c21      	adds	r1, r4, #0
 800a916:	1c06      	adds	r6, r0, #0
 800a918:	1c38      	adds	r0, r7, #0
 800a91a:	f7f6 fa71 	bl	8000e00 <__aeabi_fsub>
 800a91e:	1c29      	adds	r1, r5, #0
 800a920:	f7f6 fa6e 	bl	8000e00 <__aeabi_fsub>
 800a924:	1c01      	adds	r1, r0, #0
 800a926:	1c30      	adds	r0, r6, #0
 800a928:	e7e6      	b.n	800a8f8 <__kernel_cosf+0xa0>
 800a92a:	4c0a      	ldr	r4, [pc, #40]	; (800a954 <__kernel_cosf+0xfc>)
 800a92c:	e7ed      	b.n	800a90a <__kernel_cosf+0xb2>
 800a92e:	20fe      	movs	r0, #254	; 0xfe
 800a930:	0580      	lsls	r0, r0, #22
 800a932:	e7e3      	b.n	800a8fc <__kernel_cosf+0xa4>
 800a934:	ad47d74e 	.word	0xad47d74e
 800a938:	310f74f6 	.word	0x310f74f6
 800a93c:	3493f27c 	.word	0x3493f27c
 800a940:	37d00d01 	.word	0x37d00d01
 800a944:	3ab60b61 	.word	0x3ab60b61
 800a948:	3d2aaaab 	.word	0x3d2aaaab
 800a94c:	3e999999 	.word	0x3e999999
 800a950:	3f480000 	.word	0x3f480000
 800a954:	3e900000 	.word	0x3e900000

0800a958 <__kernel_sinf>:
 800a958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a95a:	9201      	str	r2, [sp, #4]
 800a95c:	22c8      	movs	r2, #200	; 0xc8
 800a95e:	0043      	lsls	r3, r0, #1
 800a960:	1c04      	adds	r4, r0, #0
 800a962:	9100      	str	r1, [sp, #0]
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	0592      	lsls	r2, r2, #22
 800a968:	4293      	cmp	r3, r2
 800a96a:	da03      	bge.n	800a974 <__kernel_sinf+0x1c>
 800a96c:	f7f6 fbfe 	bl	800116c <__aeabi_f2iz>
 800a970:	2800      	cmp	r0, #0
 800a972:	d035      	beq.n	800a9e0 <__kernel_sinf+0x88>
 800a974:	1c21      	adds	r1, r4, #0
 800a976:	1c20      	adds	r0, r4, #0
 800a978:	f7f6 f8f4 	bl	8000b64 <__aeabi_fmul>
 800a97c:	1c05      	adds	r5, r0, #0
 800a97e:	1c01      	adds	r1, r0, #0
 800a980:	1c20      	adds	r0, r4, #0
 800a982:	f7f6 f8ef 	bl	8000b64 <__aeabi_fmul>
 800a986:	4928      	ldr	r1, [pc, #160]	; (800aa28 <__kernel_sinf+0xd0>)
 800a988:	1c06      	adds	r6, r0, #0
 800a98a:	1c28      	adds	r0, r5, #0
 800a98c:	f7f6 f8ea 	bl	8000b64 <__aeabi_fmul>
 800a990:	4926      	ldr	r1, [pc, #152]	; (800aa2c <__kernel_sinf+0xd4>)
 800a992:	f7f6 fa35 	bl	8000e00 <__aeabi_fsub>
 800a996:	1c29      	adds	r1, r5, #0
 800a998:	f7f6 f8e4 	bl	8000b64 <__aeabi_fmul>
 800a99c:	4924      	ldr	r1, [pc, #144]	; (800aa30 <__kernel_sinf+0xd8>)
 800a99e:	f7f5 fd77 	bl	8000490 <__aeabi_fadd>
 800a9a2:	1c29      	adds	r1, r5, #0
 800a9a4:	f7f6 f8de 	bl	8000b64 <__aeabi_fmul>
 800a9a8:	4922      	ldr	r1, [pc, #136]	; (800aa34 <__kernel_sinf+0xdc>)
 800a9aa:	f7f6 fa29 	bl	8000e00 <__aeabi_fsub>
 800a9ae:	1c29      	adds	r1, r5, #0
 800a9b0:	f7f6 f8d8 	bl	8000b64 <__aeabi_fmul>
 800a9b4:	4920      	ldr	r1, [pc, #128]	; (800aa38 <__kernel_sinf+0xe0>)
 800a9b6:	f7f5 fd6b 	bl	8000490 <__aeabi_fadd>
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	1c07      	adds	r7, r0, #0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d110      	bne.n	800a9e4 <__kernel_sinf+0x8c>
 800a9c2:	1c01      	adds	r1, r0, #0
 800a9c4:	1c28      	adds	r0, r5, #0
 800a9c6:	f7f6 f8cd 	bl	8000b64 <__aeabi_fmul>
 800a9ca:	491c      	ldr	r1, [pc, #112]	; (800aa3c <__kernel_sinf+0xe4>)
 800a9cc:	f7f6 fa18 	bl	8000e00 <__aeabi_fsub>
 800a9d0:	1c31      	adds	r1, r6, #0
 800a9d2:	f7f6 f8c7 	bl	8000b64 <__aeabi_fmul>
 800a9d6:	1c01      	adds	r1, r0, #0
 800a9d8:	1c20      	adds	r0, r4, #0
 800a9da:	f7f5 fd59 	bl	8000490 <__aeabi_fadd>
 800a9de:	1c04      	adds	r4, r0, #0
 800a9e0:	1c20      	adds	r0, r4, #0
 800a9e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9e4:	21fc      	movs	r1, #252	; 0xfc
 800a9e6:	9800      	ldr	r0, [sp, #0]
 800a9e8:	0589      	lsls	r1, r1, #22
 800a9ea:	f7f6 f8bb 	bl	8000b64 <__aeabi_fmul>
 800a9ee:	1c39      	adds	r1, r7, #0
 800a9f0:	9001      	str	r0, [sp, #4]
 800a9f2:	1c30      	adds	r0, r6, #0
 800a9f4:	f7f6 f8b6 	bl	8000b64 <__aeabi_fmul>
 800a9f8:	1c01      	adds	r1, r0, #0
 800a9fa:	9801      	ldr	r0, [sp, #4]
 800a9fc:	f7f6 fa00 	bl	8000e00 <__aeabi_fsub>
 800aa00:	1c29      	adds	r1, r5, #0
 800aa02:	f7f6 f8af 	bl	8000b64 <__aeabi_fmul>
 800aa06:	9900      	ldr	r1, [sp, #0]
 800aa08:	f7f6 f9fa 	bl	8000e00 <__aeabi_fsub>
 800aa0c:	490b      	ldr	r1, [pc, #44]	; (800aa3c <__kernel_sinf+0xe4>)
 800aa0e:	1c05      	adds	r5, r0, #0
 800aa10:	1c30      	adds	r0, r6, #0
 800aa12:	f7f6 f8a7 	bl	8000b64 <__aeabi_fmul>
 800aa16:	1c01      	adds	r1, r0, #0
 800aa18:	1c28      	adds	r0, r5, #0
 800aa1a:	f7f5 fd39 	bl	8000490 <__aeabi_fadd>
 800aa1e:	1c01      	adds	r1, r0, #0
 800aa20:	1c20      	adds	r0, r4, #0
 800aa22:	f7f6 f9ed 	bl	8000e00 <__aeabi_fsub>
 800aa26:	e7da      	b.n	800a9de <__kernel_sinf+0x86>
 800aa28:	2f2ec9d3 	.word	0x2f2ec9d3
 800aa2c:	32d72f34 	.word	0x32d72f34
 800aa30:	3638ef1b 	.word	0x3638ef1b
 800aa34:	39500d01 	.word	0x39500d01
 800aa38:	3c088889 	.word	0x3c088889
 800aa3c:	3e2aaaab 	.word	0x3e2aaaab

0800aa40 <__ieee754_rem_pio2f>:
 800aa40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa42:	4ba0      	ldr	r3, [pc, #640]	; (800acc4 <__ieee754_rem_pio2f+0x284>)
 800aa44:	b08b      	sub	sp, #44	; 0x2c
 800aa46:	0045      	lsls	r5, r0, #1
 800aa48:	000c      	movs	r4, r1
 800aa4a:	9005      	str	r0, [sp, #20]
 800aa4c:	086d      	lsrs	r5, r5, #1
 800aa4e:	429d      	cmp	r5, r3
 800aa50:	dc04      	bgt.n	800aa5c <__ieee754_rem_pio2f+0x1c>
 800aa52:	2300      	movs	r3, #0
 800aa54:	6008      	str	r0, [r1, #0]
 800aa56:	604b      	str	r3, [r1, #4]
 800aa58:	2700      	movs	r7, #0
 800aa5a:	e01a      	b.n	800aa92 <__ieee754_rem_pio2f+0x52>
 800aa5c:	4b9a      	ldr	r3, [pc, #616]	; (800acc8 <__ieee754_rem_pio2f+0x288>)
 800aa5e:	429d      	cmp	r5, r3
 800aa60:	dc4a      	bgt.n	800aaf8 <__ieee754_rem_pio2f+0xb8>
 800aa62:	230f      	movs	r3, #15
 800aa64:	4e99      	ldr	r6, [pc, #612]	; (800accc <__ieee754_rem_pio2f+0x28c>)
 800aa66:	499a      	ldr	r1, [pc, #616]	; (800acd0 <__ieee754_rem_pio2f+0x290>)
 800aa68:	439d      	bics	r5, r3
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	dd22      	ble.n	800aab4 <__ieee754_rem_pio2f+0x74>
 800aa6e:	f7f6 f9c7 	bl	8000e00 <__aeabi_fsub>
 800aa72:	1c07      	adds	r7, r0, #0
 800aa74:	42b5      	cmp	r5, r6
 800aa76:	d00f      	beq.n	800aa98 <__ieee754_rem_pio2f+0x58>
 800aa78:	4996      	ldr	r1, [pc, #600]	; (800acd4 <__ieee754_rem_pio2f+0x294>)
 800aa7a:	f7f6 f9c1 	bl	8000e00 <__aeabi_fsub>
 800aa7e:	1c01      	adds	r1, r0, #0
 800aa80:	6020      	str	r0, [r4, #0]
 800aa82:	1c38      	adds	r0, r7, #0
 800aa84:	f7f6 f9bc 	bl	8000e00 <__aeabi_fsub>
 800aa88:	4992      	ldr	r1, [pc, #584]	; (800acd4 <__ieee754_rem_pio2f+0x294>)
 800aa8a:	f7f6 f9b9 	bl	8000e00 <__aeabi_fsub>
 800aa8e:	2701      	movs	r7, #1
 800aa90:	6060      	str	r0, [r4, #4]
 800aa92:	0038      	movs	r0, r7
 800aa94:	b00b      	add	sp, #44	; 0x2c
 800aa96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa98:	498f      	ldr	r1, [pc, #572]	; (800acd8 <__ieee754_rem_pio2f+0x298>)
 800aa9a:	f7f6 f9b1 	bl	8000e00 <__aeabi_fsub>
 800aa9e:	498f      	ldr	r1, [pc, #572]	; (800acdc <__ieee754_rem_pio2f+0x29c>)
 800aaa0:	1c05      	adds	r5, r0, #0
 800aaa2:	f7f6 f9ad 	bl	8000e00 <__aeabi_fsub>
 800aaa6:	1c01      	adds	r1, r0, #0
 800aaa8:	6020      	str	r0, [r4, #0]
 800aaaa:	1c28      	adds	r0, r5, #0
 800aaac:	f7f6 f9a8 	bl	8000e00 <__aeabi_fsub>
 800aab0:	498a      	ldr	r1, [pc, #552]	; (800acdc <__ieee754_rem_pio2f+0x29c>)
 800aab2:	e7ea      	b.n	800aa8a <__ieee754_rem_pio2f+0x4a>
 800aab4:	f7f5 fcec 	bl	8000490 <__aeabi_fadd>
 800aab8:	1c07      	adds	r7, r0, #0
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d00e      	beq.n	800aadc <__ieee754_rem_pio2f+0x9c>
 800aabe:	4985      	ldr	r1, [pc, #532]	; (800acd4 <__ieee754_rem_pio2f+0x294>)
 800aac0:	f7f5 fce6 	bl	8000490 <__aeabi_fadd>
 800aac4:	1c01      	adds	r1, r0, #0
 800aac6:	6020      	str	r0, [r4, #0]
 800aac8:	1c38      	adds	r0, r7, #0
 800aaca:	f7f6 f999 	bl	8000e00 <__aeabi_fsub>
 800aace:	4981      	ldr	r1, [pc, #516]	; (800acd4 <__ieee754_rem_pio2f+0x294>)
 800aad0:	f7f5 fcde 	bl	8000490 <__aeabi_fadd>
 800aad4:	2701      	movs	r7, #1
 800aad6:	6060      	str	r0, [r4, #4]
 800aad8:	427f      	negs	r7, r7
 800aada:	e7da      	b.n	800aa92 <__ieee754_rem_pio2f+0x52>
 800aadc:	497e      	ldr	r1, [pc, #504]	; (800acd8 <__ieee754_rem_pio2f+0x298>)
 800aade:	f7f5 fcd7 	bl	8000490 <__aeabi_fadd>
 800aae2:	497e      	ldr	r1, [pc, #504]	; (800acdc <__ieee754_rem_pio2f+0x29c>)
 800aae4:	1c05      	adds	r5, r0, #0
 800aae6:	f7f5 fcd3 	bl	8000490 <__aeabi_fadd>
 800aaea:	1c01      	adds	r1, r0, #0
 800aaec:	6020      	str	r0, [r4, #0]
 800aaee:	1c28      	adds	r0, r5, #0
 800aaf0:	f7f6 f986 	bl	8000e00 <__aeabi_fsub>
 800aaf4:	4979      	ldr	r1, [pc, #484]	; (800acdc <__ieee754_rem_pio2f+0x29c>)
 800aaf6:	e7eb      	b.n	800aad0 <__ieee754_rem_pio2f+0x90>
 800aaf8:	4b79      	ldr	r3, [pc, #484]	; (800ace0 <__ieee754_rem_pio2f+0x2a0>)
 800aafa:	429d      	cmp	r5, r3
 800aafc:	dd00      	ble.n	800ab00 <__ieee754_rem_pio2f+0xc0>
 800aafe:	e091      	b.n	800ac24 <__ieee754_rem_pio2f+0x1e4>
 800ab00:	f7ff fdf6 	bl	800a6f0 <fabsf>
 800ab04:	4977      	ldr	r1, [pc, #476]	; (800ace4 <__ieee754_rem_pio2f+0x2a4>)
 800ab06:	1c06      	adds	r6, r0, #0
 800ab08:	f7f6 f82c 	bl	8000b64 <__aeabi_fmul>
 800ab0c:	21fc      	movs	r1, #252	; 0xfc
 800ab0e:	0589      	lsls	r1, r1, #22
 800ab10:	f7f5 fcbe 	bl	8000490 <__aeabi_fadd>
 800ab14:	f7f6 fb2a 	bl	800116c <__aeabi_f2iz>
 800ab18:	0007      	movs	r7, r0
 800ab1a:	f7f6 fb47 	bl	80011ac <__aeabi_i2f>
 800ab1e:	496c      	ldr	r1, [pc, #432]	; (800acd0 <__ieee754_rem_pio2f+0x290>)
 800ab20:	9003      	str	r0, [sp, #12]
 800ab22:	f7f6 f81f 	bl	8000b64 <__aeabi_fmul>
 800ab26:	1c01      	adds	r1, r0, #0
 800ab28:	1c30      	adds	r0, r6, #0
 800ab2a:	f7f6 f969 	bl	8000e00 <__aeabi_fsub>
 800ab2e:	4969      	ldr	r1, [pc, #420]	; (800acd4 <__ieee754_rem_pio2f+0x294>)
 800ab30:	9002      	str	r0, [sp, #8]
 800ab32:	9803      	ldr	r0, [sp, #12]
 800ab34:	f7f6 f816 	bl	8000b64 <__aeabi_fmul>
 800ab38:	1c06      	adds	r6, r0, #0
 800ab3a:	2f1f      	cmp	r7, #31
 800ab3c:	dc0d      	bgt.n	800ab5a <__ieee754_rem_pio2f+0x11a>
 800ab3e:	23ff      	movs	r3, #255	; 0xff
 800ab40:	0029      	movs	r1, r5
 800ab42:	1e7a      	subs	r2, r7, #1
 800ab44:	4399      	bics	r1, r3
 800ab46:	4b68      	ldr	r3, [pc, #416]	; (800ace8 <__ieee754_rem_pio2f+0x2a8>)
 800ab48:	0092      	lsls	r2, r2, #2
 800ab4a:	58d3      	ldr	r3, [r2, r3]
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d004      	beq.n	800ab5a <__ieee754_rem_pio2f+0x11a>
 800ab50:	9802      	ldr	r0, [sp, #8]
 800ab52:	1c31      	adds	r1, r6, #0
 800ab54:	f7f6 f954 	bl	8000e00 <__aeabi_fsub>
 800ab58:	e00c      	b.n	800ab74 <__ieee754_rem_pio2f+0x134>
 800ab5a:	9802      	ldr	r0, [sp, #8]
 800ab5c:	1c31      	adds	r1, r6, #0
 800ab5e:	f7f6 f94f 	bl	8000e00 <__aeabi_fsub>
 800ab62:	22ff      	movs	r2, #255	; 0xff
 800ab64:	15eb      	asrs	r3, r5, #23
 800ab66:	9304      	str	r3, [sp, #16]
 800ab68:	0dc3      	lsrs	r3, r0, #23
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	9a04      	ldr	r2, [sp, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b08      	cmp	r3, #8
 800ab72:	dc01      	bgt.n	800ab78 <__ieee754_rem_pio2f+0x138>
 800ab74:	6020      	str	r0, [r4, #0]
 800ab76:	e026      	b.n	800abc6 <__ieee754_rem_pio2f+0x186>
 800ab78:	4957      	ldr	r1, [pc, #348]	; (800acd8 <__ieee754_rem_pio2f+0x298>)
 800ab7a:	9803      	ldr	r0, [sp, #12]
 800ab7c:	f7f5 fff2 	bl	8000b64 <__aeabi_fmul>
 800ab80:	1c06      	adds	r6, r0, #0
 800ab82:	1c01      	adds	r1, r0, #0
 800ab84:	9802      	ldr	r0, [sp, #8]
 800ab86:	f7f6 f93b 	bl	8000e00 <__aeabi_fsub>
 800ab8a:	1c01      	adds	r1, r0, #0
 800ab8c:	1c05      	adds	r5, r0, #0
 800ab8e:	9802      	ldr	r0, [sp, #8]
 800ab90:	f7f6 f936 	bl	8000e00 <__aeabi_fsub>
 800ab94:	1c31      	adds	r1, r6, #0
 800ab96:	f7f6 f933 	bl	8000e00 <__aeabi_fsub>
 800ab9a:	4950      	ldr	r1, [pc, #320]	; (800acdc <__ieee754_rem_pio2f+0x29c>)
 800ab9c:	1c06      	adds	r6, r0, #0
 800ab9e:	9803      	ldr	r0, [sp, #12]
 800aba0:	f7f5 ffe0 	bl	8000b64 <__aeabi_fmul>
 800aba4:	1c31      	adds	r1, r6, #0
 800aba6:	f7f6 f92b 	bl	8000e00 <__aeabi_fsub>
 800abaa:	1c01      	adds	r1, r0, #0
 800abac:	1c06      	adds	r6, r0, #0
 800abae:	1c28      	adds	r0, r5, #0
 800abb0:	f7f6 f926 	bl	8000e00 <__aeabi_fsub>
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	0dc3      	lsrs	r3, r0, #23
 800abb8:	4013      	ands	r3, r2
 800abba:	9a04      	ldr	r2, [sp, #16]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	2b19      	cmp	r3, #25
 800abc0:	dc15      	bgt.n	800abee <__ieee754_rem_pio2f+0x1ae>
 800abc2:	6020      	str	r0, [r4, #0]
 800abc4:	9502      	str	r5, [sp, #8]
 800abc6:	6825      	ldr	r5, [r4, #0]
 800abc8:	9802      	ldr	r0, [sp, #8]
 800abca:	1c29      	adds	r1, r5, #0
 800abcc:	f7f6 f918 	bl	8000e00 <__aeabi_fsub>
 800abd0:	1c31      	adds	r1, r6, #0
 800abd2:	f7f6 f915 	bl	8000e00 <__aeabi_fsub>
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	6060      	str	r0, [r4, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	db00      	blt.n	800abe0 <__ieee754_rem_pio2f+0x1a0>
 800abde:	e758      	b.n	800aa92 <__ieee754_rem_pio2f+0x52>
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	061b      	lsls	r3, r3, #24
 800abe4:	18ed      	adds	r5, r5, r3
 800abe6:	18c0      	adds	r0, r0, r3
 800abe8:	6025      	str	r5, [r4, #0]
 800abea:	6060      	str	r0, [r4, #4]
 800abec:	e774      	b.n	800aad8 <__ieee754_rem_pio2f+0x98>
 800abee:	493f      	ldr	r1, [pc, #252]	; (800acec <__ieee754_rem_pio2f+0x2ac>)
 800abf0:	9803      	ldr	r0, [sp, #12]
 800abf2:	f7f5 ffb7 	bl	8000b64 <__aeabi_fmul>
 800abf6:	1c06      	adds	r6, r0, #0
 800abf8:	1c01      	adds	r1, r0, #0
 800abfa:	1c28      	adds	r0, r5, #0
 800abfc:	f7f6 f900 	bl	8000e00 <__aeabi_fsub>
 800ac00:	1c01      	adds	r1, r0, #0
 800ac02:	9002      	str	r0, [sp, #8]
 800ac04:	1c28      	adds	r0, r5, #0
 800ac06:	f7f6 f8fb 	bl	8000e00 <__aeabi_fsub>
 800ac0a:	1c31      	adds	r1, r6, #0
 800ac0c:	f7f6 f8f8 	bl	8000e00 <__aeabi_fsub>
 800ac10:	4937      	ldr	r1, [pc, #220]	; (800acf0 <__ieee754_rem_pio2f+0x2b0>)
 800ac12:	1c05      	adds	r5, r0, #0
 800ac14:	9803      	ldr	r0, [sp, #12]
 800ac16:	f7f5 ffa5 	bl	8000b64 <__aeabi_fmul>
 800ac1a:	1c29      	adds	r1, r5, #0
 800ac1c:	f7f6 f8f0 	bl	8000e00 <__aeabi_fsub>
 800ac20:	1c06      	adds	r6, r0, #0
 800ac22:	e795      	b.n	800ab50 <__ieee754_rem_pio2f+0x110>
 800ac24:	23ff      	movs	r3, #255	; 0xff
 800ac26:	05db      	lsls	r3, r3, #23
 800ac28:	429d      	cmp	r5, r3
 800ac2a:	db05      	blt.n	800ac38 <__ieee754_rem_pio2f+0x1f8>
 800ac2c:	1c01      	adds	r1, r0, #0
 800ac2e:	f7f6 f8e7 	bl	8000e00 <__aeabi_fsub>
 800ac32:	6060      	str	r0, [r4, #4]
 800ac34:	6020      	str	r0, [r4, #0]
 800ac36:	e70f      	b.n	800aa58 <__ieee754_rem_pio2f+0x18>
 800ac38:	15ee      	asrs	r6, r5, #23
 800ac3a:	3e86      	subs	r6, #134	; 0x86
 800ac3c:	05f3      	lsls	r3, r6, #23
 800ac3e:	1aed      	subs	r5, r5, r3
 800ac40:	1c28      	adds	r0, r5, #0
 800ac42:	f7f6 fa93 	bl	800116c <__aeabi_f2iz>
 800ac46:	f7f6 fab1 	bl	80011ac <__aeabi_i2f>
 800ac4a:	1c01      	adds	r1, r0, #0
 800ac4c:	9007      	str	r0, [sp, #28]
 800ac4e:	1c28      	adds	r0, r5, #0
 800ac50:	f7f6 f8d6 	bl	8000e00 <__aeabi_fsub>
 800ac54:	2187      	movs	r1, #135	; 0x87
 800ac56:	05c9      	lsls	r1, r1, #23
 800ac58:	f7f5 ff84 	bl	8000b64 <__aeabi_fmul>
 800ac5c:	1c07      	adds	r7, r0, #0
 800ac5e:	f7f6 fa85 	bl	800116c <__aeabi_f2iz>
 800ac62:	f7f6 faa3 	bl	80011ac <__aeabi_i2f>
 800ac66:	1c01      	adds	r1, r0, #0
 800ac68:	9008      	str	r0, [sp, #32]
 800ac6a:	1c05      	adds	r5, r0, #0
 800ac6c:	1c38      	adds	r0, r7, #0
 800ac6e:	f7f6 f8c7 	bl	8000e00 <__aeabi_fsub>
 800ac72:	2187      	movs	r1, #135	; 0x87
 800ac74:	05c9      	lsls	r1, r1, #23
 800ac76:	f7f5 ff75 	bl	8000b64 <__aeabi_fmul>
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	9009      	str	r0, [sp, #36]	; 0x24
 800ac7e:	f7f5 fbc1 	bl	8000404 <__aeabi_fcmpeq>
 800ac82:	2303      	movs	r3, #3
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d006      	beq.n	800ac96 <__ieee754_rem_pio2f+0x256>
 800ac88:	2100      	movs	r1, #0
 800ac8a:	1c28      	adds	r0, r5, #0
 800ac8c:	f7f5 fbba 	bl	8000404 <__aeabi_fcmpeq>
 800ac90:	4243      	negs	r3, r0
 800ac92:	4143      	adcs	r3, r0
 800ac94:	3301      	adds	r3, #1
 800ac96:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <__ieee754_rem_pio2f+0x2b4>)
 800ac98:	0021      	movs	r1, r4
 800ac9a:	9201      	str	r2, [sp, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	a807      	add	r0, sp, #28
 800aca0:	9200      	str	r2, [sp, #0]
 800aca2:	0032      	movs	r2, r6
 800aca4:	f000 f828 	bl	800acf8 <__kernel_rem_pio2f>
 800aca8:	9b05      	ldr	r3, [sp, #20]
 800acaa:	0007      	movs	r7, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	db00      	blt.n	800acb2 <__ieee754_rem_pio2f+0x272>
 800acb0:	e6ef      	b.n	800aa92 <__ieee754_rem_pio2f+0x52>
 800acb2:	2280      	movs	r2, #128	; 0x80
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	0612      	lsls	r2, r2, #24
 800acb8:	189b      	adds	r3, r3, r2
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	189b      	adds	r3, r3, r2
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	e709      	b.n	800aad8 <__ieee754_rem_pio2f+0x98>
 800acc4:	3f490fd8 	.word	0x3f490fd8
 800acc8:	4016cbe3 	.word	0x4016cbe3
 800accc:	3fc90fd0 	.word	0x3fc90fd0
 800acd0:	3fc90f80 	.word	0x3fc90f80
 800acd4:	37354443 	.word	0x37354443
 800acd8:	37354400 	.word	0x37354400
 800acdc:	2e85a308 	.word	0x2e85a308
 800ace0:	43490f80 	.word	0x43490f80
 800ace4:	3f22f984 	.word	0x3f22f984
 800ace8:	0800b508 	.word	0x0800b508
 800acec:	2e85a300 	.word	0x2e85a300
 800acf0:	248d3132 	.word	0x248d3132
 800acf4:	0800b588 	.word	0x0800b588

0800acf8 <__kernel_rem_pio2f>:
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	b0dd      	sub	sp, #372	; 0x174
 800acfc:	9206      	str	r2, [sp, #24]
 800acfe:	9a62      	ldr	r2, [sp, #392]	; 0x188
 800ad00:	9307      	str	r3, [sp, #28]
 800ad02:	4bca      	ldr	r3, [pc, #808]	; (800b02c <__kernel_rem_pio2f+0x334>)
 800ad04:	0092      	lsls	r2, r2, #2
 800ad06:	58d3      	ldr	r3, [r2, r3]
 800ad08:	9009      	str	r0, [sp, #36]	; 0x24
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	9102      	str	r1, [sp, #8]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	9305      	str	r3, [sp, #20]
 800ad14:	2300      	movs	r3, #0
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	9b06      	ldr	r3, [sp, #24]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	db07      	blt.n	800ad2e <__kernel_rem_pio2f+0x36>
 800ad1e:	2107      	movs	r1, #7
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	1eda      	subs	r2, r3, #3
 800ad24:	17d3      	asrs	r3, r2, #31
 800ad26:	400b      	ands	r3, r1
 800ad28:	189b      	adds	r3, r3, r2
 800ad2a:	10db      	asrs	r3, r3, #3
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	ae20      	add	r6, sp, #128	; 0x80
 800ad32:	3301      	adds	r3, #1
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	9308      	str	r3, [sp, #32]
 800ad38:	9a08      	ldr	r2, [sp, #32]
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	9a05      	ldr	r2, [sp, #20]
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	1a9d      	subs	r5, r3, r2
 800ad46:	002c      	movs	r4, r5
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	189f      	adds	r7, r3, r2
 800ad4c:	1b63      	subs	r3, r4, r5
 800ad4e:	429f      	cmp	r7, r3
 800ad50:	da0d      	bge.n	800ad6e <__kernel_rem_pio2f+0x76>
 800ad52:	9c07      	ldr	r4, [sp, #28]
 800ad54:	af48      	add	r7, sp, #288	; 0x120
 800ad56:	9b07      	ldr	r3, [sp, #28]
 800ad58:	9a04      	ldr	r2, [sp, #16]
 800ad5a:	1ae3      	subs	r3, r4, r3
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	db25      	blt.n	800adac <__kernel_rem_pio2f+0xb4>
 800ad60:	ab20      	add	r3, sp, #128	; 0x80
 800ad62:	00a5      	lsls	r5, r4, #2
 800ad64:	18ed      	adds	r5, r5, r3
 800ad66:	2300      	movs	r3, #0
 800ad68:	2600      	movs	r6, #0
 800ad6a:	9303      	str	r3, [sp, #12]
 800ad6c:	e016      	b.n	800ad9c <__kernel_rem_pio2f+0xa4>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	db04      	blt.n	800ad7e <__kernel_rem_pio2f+0x86>
 800ad74:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800ad76:	00a3      	lsls	r3, r4, #2
 800ad78:	58d0      	ldr	r0, [r2, r3]
 800ad7a:	f7f6 fa17 	bl	80011ac <__aeabi_i2f>
 800ad7e:	c601      	stmia	r6!, {r0}
 800ad80:	3401      	adds	r4, #1
 800ad82:	e7e3      	b.n	800ad4c <__kernel_rem_pio2f+0x54>
 800ad84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad86:	00b3      	lsls	r3, r6, #2
 800ad88:	6829      	ldr	r1, [r5, #0]
 800ad8a:	58d0      	ldr	r0, [r2, r3]
 800ad8c:	f7f5 feea 	bl	8000b64 <__aeabi_fmul>
 800ad90:	1c01      	adds	r1, r0, #0
 800ad92:	9803      	ldr	r0, [sp, #12]
 800ad94:	f7f5 fb7c 	bl	8000490 <__aeabi_fadd>
 800ad98:	3601      	adds	r6, #1
 800ad9a:	9003      	str	r0, [sp, #12]
 800ad9c:	9b05      	ldr	r3, [sp, #20]
 800ad9e:	3d04      	subs	r5, #4
 800ada0:	429e      	cmp	r6, r3
 800ada2:	ddef      	ble.n	800ad84 <__kernel_rem_pio2f+0x8c>
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	3401      	adds	r4, #1
 800ada8:	c708      	stmia	r7!, {r3}
 800adaa:	e7d4      	b.n	800ad56 <__kernel_rem_pio2f+0x5e>
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	aa0c      	add	r2, sp, #48	; 0x30
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	189b      	adds	r3, r3, r2
 800adb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	18d3      	adds	r3, r2, r3
 800adbe:	9e04      	ldr	r6, [sp, #16]
 800adc0:	930a      	str	r3, [sp, #40]	; 0x28
 800adc2:	21f0      	movs	r1, #240	; 0xf0
 800adc4:	0035      	movs	r5, r6
 800adc6:	aa0c      	add	r2, sp, #48	; 0x30
 800adc8:	00b3      	lsls	r3, r6, #2
 800adca:	1852      	adds	r2, r2, r1
 800adcc:	af0c      	add	r7, sp, #48	; 0x30
 800adce:	58d4      	ldr	r4, [r2, r3]
 800add0:	9701      	str	r7, [sp, #4]
 800add2:	2d00      	cmp	r5, #0
 800add4:	dc64      	bgt.n	800aea0 <__kernel_rem_pio2f+0x1a8>
 800add6:	9900      	ldr	r1, [sp, #0]
 800add8:	1c20      	adds	r0, r4, #0
 800adda:	f000 fa37 	bl	800b24c <scalbnf>
 800adde:	21f8      	movs	r1, #248	; 0xf8
 800ade0:	0589      	lsls	r1, r1, #22
 800ade2:	1c04      	adds	r4, r0, #0
 800ade4:	f7f5 febe 	bl	8000b64 <__aeabi_fmul>
 800ade8:	f000 fa86 	bl	800b2f8 <floorf>
 800adec:	2182      	movs	r1, #130	; 0x82
 800adee:	05c9      	lsls	r1, r1, #23
 800adf0:	f7f5 feb8 	bl	8000b64 <__aeabi_fmul>
 800adf4:	1c01      	adds	r1, r0, #0
 800adf6:	1c20      	adds	r0, r4, #0
 800adf8:	f7f6 f802 	bl	8000e00 <__aeabi_fsub>
 800adfc:	1c04      	adds	r4, r0, #0
 800adfe:	f7f6 f9b5 	bl	800116c <__aeabi_f2iz>
 800ae02:	9003      	str	r0, [sp, #12]
 800ae04:	f7f6 f9d2 	bl	80011ac <__aeabi_i2f>
 800ae08:	1c01      	adds	r1, r0, #0
 800ae0a:	1c20      	adds	r0, r4, #0
 800ae0c:	f7f5 fff8 	bl	8000e00 <__aeabi_fsub>
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	1c04      	adds	r4, r0, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd65      	ble.n	800aee4 <__kernel_rem_pio2f+0x1ec>
 800ae18:	2008      	movs	r0, #8
 800ae1a:	1e73      	subs	r3, r6, #1
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	aa0c      	add	r2, sp, #48	; 0x30
 800ae20:	589a      	ldr	r2, [r3, r2]
 800ae22:	9900      	ldr	r1, [sp, #0]
 800ae24:	9d03      	ldr	r5, [sp, #12]
 800ae26:	1a40      	subs	r0, r0, r1
 800ae28:	0011      	movs	r1, r2
 800ae2a:	4101      	asrs	r1, r0
 800ae2c:	186d      	adds	r5, r5, r1
 800ae2e:	4081      	lsls	r1, r0
 800ae30:	1a52      	subs	r2, r2, r1
 800ae32:	a90c      	add	r1, sp, #48	; 0x30
 800ae34:	505a      	str	r2, [r3, r1]
 800ae36:	2307      	movs	r3, #7
 800ae38:	9900      	ldr	r1, [sp, #0]
 800ae3a:	9503      	str	r5, [sp, #12]
 800ae3c:	1a5b      	subs	r3, r3, r1
 800ae3e:	411a      	asrs	r2, r3
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dd5e      	ble.n	800af06 <__kernel_rem_pio2f+0x20e>
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	2301      	movs	r3, #1
 800ae52:	2080      	movs	r0, #128	; 0x80
 800ae54:	0015      	movs	r5, r2
 800ae56:	21ff      	movs	r1, #255	; 0xff
 800ae58:	469c      	mov	ip, r3
 800ae5a:	0040      	lsls	r0, r0, #1
 800ae5c:	4296      	cmp	r6, r2
 800ae5e:	dd00      	ble.n	800ae62 <__kernel_rem_pio2f+0x16a>
 800ae60:	e084      	b.n	800af6c <__kernel_rem_pio2f+0x274>
 800ae62:	9b00      	ldr	r3, [sp, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	dd05      	ble.n	800ae74 <__kernel_rem_pio2f+0x17c>
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d100      	bne.n	800ae6e <__kernel_rem_pio2f+0x176>
 800ae6c:	e08e      	b.n	800af8c <__kernel_rem_pio2f+0x294>
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d100      	bne.n	800ae74 <__kernel_rem_pio2f+0x17c>
 800ae72:	e094      	b.n	800af9e <__kernel_rem_pio2f+0x2a6>
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d145      	bne.n	800af06 <__kernel_rem_pio2f+0x20e>
 800ae7a:	20fe      	movs	r0, #254	; 0xfe
 800ae7c:	1c21      	adds	r1, r4, #0
 800ae7e:	0580      	lsls	r0, r0, #22
 800ae80:	f7f5 ffbe 	bl	8000e00 <__aeabi_fsub>
 800ae84:	1c04      	adds	r4, r0, #0
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	d03d      	beq.n	800af06 <__kernel_rem_pio2f+0x20e>
 800ae8a:	20fe      	movs	r0, #254	; 0xfe
 800ae8c:	9900      	ldr	r1, [sp, #0]
 800ae8e:	0580      	lsls	r0, r0, #22
 800ae90:	f000 f9dc 	bl	800b24c <scalbnf>
 800ae94:	1c01      	adds	r1, r0, #0
 800ae96:	1c20      	adds	r0, r4, #0
 800ae98:	f7f5 ffb2 	bl	8000e00 <__aeabi_fsub>
 800ae9c:	1c04      	adds	r4, r0, #0
 800ae9e:	e032      	b.n	800af06 <__kernel_rem_pio2f+0x20e>
 800aea0:	21ee      	movs	r1, #238	; 0xee
 800aea2:	1c20      	adds	r0, r4, #0
 800aea4:	0589      	lsls	r1, r1, #22
 800aea6:	f7f5 fe5d 	bl	8000b64 <__aeabi_fmul>
 800aeaa:	f7f6 f95f 	bl	800116c <__aeabi_f2iz>
 800aeae:	f7f6 f97d 	bl	80011ac <__aeabi_i2f>
 800aeb2:	2187      	movs	r1, #135	; 0x87
 800aeb4:	05c9      	lsls	r1, r1, #23
 800aeb6:	9003      	str	r0, [sp, #12]
 800aeb8:	f7f5 fe54 	bl	8000b64 <__aeabi_fmul>
 800aebc:	1c01      	adds	r1, r0, #0
 800aebe:	1c20      	adds	r0, r4, #0
 800aec0:	f7f5 ff9e 	bl	8000e00 <__aeabi_fsub>
 800aec4:	f7f6 f952 	bl	800116c <__aeabi_f2iz>
 800aec8:	21f0      	movs	r1, #240	; 0xf0
 800aeca:	9b01      	ldr	r3, [sp, #4]
 800aecc:	3d01      	subs	r5, #1
 800aece:	c301      	stmia	r3!, {r0}
 800aed0:	aa0c      	add	r2, sp, #48	; 0x30
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	1852      	adds	r2, r2, r1
 800aed6:	00ab      	lsls	r3, r5, #2
 800aed8:	58d1      	ldr	r1, [r2, r3]
 800aeda:	9803      	ldr	r0, [sp, #12]
 800aedc:	f7f5 fad8 	bl	8000490 <__aeabi_fadd>
 800aee0:	1c04      	adds	r4, r0, #0
 800aee2:	e776      	b.n	800add2 <__kernel_rem_pio2f+0xda>
 800aee4:	9b00      	ldr	r3, [sp, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <__kernel_rem_pio2f+0x200>
 800aeea:	1e73      	subs	r3, r6, #1
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	aa0c      	add	r2, sp, #48	; 0x30
 800aef0:	589b      	ldr	r3, [r3, r2]
 800aef2:	11db      	asrs	r3, r3, #7
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	e7a4      	b.n	800ae42 <__kernel_rem_pio2f+0x14a>
 800aef8:	21fc      	movs	r1, #252	; 0xfc
 800aefa:	0589      	lsls	r1, r1, #22
 800aefc:	f7f5 faa6 	bl	800044c <__aeabi_fcmpge>
 800af00:	2800      	cmp	r0, #0
 800af02:	d130      	bne.n	800af66 <__kernel_rem_pio2f+0x26e>
 800af04:	9001      	str	r0, [sp, #4]
 800af06:	2100      	movs	r1, #0
 800af08:	1c20      	adds	r0, r4, #0
 800af0a:	f7f5 fa7b 	bl	8000404 <__aeabi_fcmpeq>
 800af0e:	2800      	cmp	r0, #0
 800af10:	d100      	bne.n	800af14 <__kernel_rem_pio2f+0x21c>
 800af12:	e08f      	b.n	800b034 <__kernel_rem_pio2f+0x33c>
 800af14:	1e77      	subs	r7, r6, #1
 800af16:	003b      	movs	r3, r7
 800af18:	2200      	movs	r2, #0
 800af1a:	9904      	ldr	r1, [sp, #16]
 800af1c:	428b      	cmp	r3, r1
 800af1e:	da44      	bge.n	800afaa <__kernel_rem_pio2f+0x2b2>
 800af20:	2a00      	cmp	r2, #0
 800af22:	d05c      	beq.n	800afde <__kernel_rem_pio2f+0x2e6>
 800af24:	9b00      	ldr	r3, [sp, #0]
 800af26:	aa0c      	add	r2, sp, #48	; 0x30
 800af28:	3b08      	subs	r3, #8
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	00bb      	lsls	r3, r7, #2
 800af2e:	589b      	ldr	r3, [r3, r2]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d079      	beq.n	800b028 <__kernel_rem_pio2f+0x330>
 800af34:	20fe      	movs	r0, #254	; 0xfe
 800af36:	9900      	ldr	r1, [sp, #0]
 800af38:	0580      	lsls	r0, r0, #22
 800af3a:	f000 f987 	bl	800b24c <scalbnf>
 800af3e:	003d      	movs	r5, r7
 800af40:	1c04      	adds	r4, r0, #0
 800af42:	2d00      	cmp	r5, #0
 800af44:	db00      	blt.n	800af48 <__kernel_rem_pio2f+0x250>
 800af46:	e0ac      	b.n	800b0a2 <__kernel_rem_pio2f+0x3aa>
 800af48:	003c      	movs	r4, r7
 800af4a:	4b39      	ldr	r3, [pc, #228]	; (800b030 <__kernel_rem_pio2f+0x338>)
 800af4c:	9306      	str	r3, [sp, #24]
 800af4e:	2c00      	cmp	r4, #0
 800af50:	da00      	bge.n	800af54 <__kernel_rem_pio2f+0x25c>
 800af52:	e0d5      	b.n	800b100 <__kernel_rem_pio2f+0x408>
 800af54:	00a3      	lsls	r3, r4, #2
 800af56:	aa48      	add	r2, sp, #288	; 0x120
 800af58:	189b      	adds	r3, r3, r2
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	1b3b      	subs	r3, r7, r4
 800af5e:	2600      	movs	r6, #0
 800af60:	2500      	movs	r5, #0
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	e0be      	b.n	800b0e4 <__kernel_rem_pio2f+0x3ec>
 800af66:	2302      	movs	r3, #2
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	e76d      	b.n	800ae48 <__kernel_rem_pio2f+0x150>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2d00      	cmp	r5, #0
 800af70:	d108      	bne.n	800af84 <__kernel_rem_pio2f+0x28c>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <__kernel_rem_pio2f+0x284>
 800af76:	1ac3      	subs	r3, r0, r3
 800af78:	603b      	str	r3, [r7, #0]
 800af7a:	4663      	mov	r3, ip
 800af7c:	001d      	movs	r5, r3
 800af7e:	3201      	adds	r2, #1
 800af80:	3704      	adds	r7, #4
 800af82:	e76b      	b.n	800ae5c <__kernel_rem_pio2f+0x164>
 800af84:	1acb      	subs	r3, r1, r3
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	002b      	movs	r3, r5
 800af8a:	e7f7      	b.n	800af7c <__kernel_rem_pio2f+0x284>
 800af8c:	217f      	movs	r1, #127	; 0x7f
 800af8e:	1e73      	subs	r3, r6, #1
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	aa0c      	add	r2, sp, #48	; 0x30
 800af94:	589a      	ldr	r2, [r3, r2]
 800af96:	400a      	ands	r2, r1
 800af98:	a90c      	add	r1, sp, #48	; 0x30
 800af9a:	505a      	str	r2, [r3, r1]
 800af9c:	e76a      	b.n	800ae74 <__kernel_rem_pio2f+0x17c>
 800af9e:	1e73      	subs	r3, r6, #1
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	aa0c      	add	r2, sp, #48	; 0x30
 800afa4:	213f      	movs	r1, #63	; 0x3f
 800afa6:	589a      	ldr	r2, [r3, r2]
 800afa8:	e7f5      	b.n	800af96 <__kernel_rem_pio2f+0x29e>
 800afaa:	0099      	lsls	r1, r3, #2
 800afac:	a80c      	add	r0, sp, #48	; 0x30
 800afae:	5809      	ldr	r1, [r1, r0]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	430a      	orrs	r2, r1
 800afb4:	e7b1      	b.n	800af1a <__kernel_rem_pio2f+0x222>
 800afb6:	3301      	adds	r3, #1
 800afb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afba:	009a      	lsls	r2, r3, #2
 800afbc:	4252      	negs	r2, r2
 800afbe:	588a      	ldr	r2, [r1, r2]
 800afc0:	2a00      	cmp	r2, #0
 800afc2:	d0f8      	beq.n	800afb6 <__kernel_rem_pio2f+0x2be>
 800afc4:	9a07      	ldr	r2, [sp, #28]
 800afc6:	18f3      	adds	r3, r6, r3
 800afc8:	18b4      	adds	r4, r6, r2
 800afca:	00a4      	lsls	r4, r4, #2
 800afcc:	aa20      	add	r2, sp, #128	; 0x80
 800afce:	1c75      	adds	r5, r6, #1
 800afd0:	1914      	adds	r4, r2, r4
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	9b01      	ldr	r3, [sp, #4]
 800afd6:	42ab      	cmp	r3, r5
 800afd8:	da03      	bge.n	800afe2 <__kernel_rem_pio2f+0x2ea>
 800afda:	001e      	movs	r6, r3
 800afdc:	e6f1      	b.n	800adc2 <__kernel_rem_pio2f+0xca>
 800afde:	2301      	movs	r3, #1
 800afe0:	e7ea      	b.n	800afb8 <__kernel_rem_pio2f+0x2c0>
 800afe2:	00ab      	lsls	r3, r5, #2
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe8:	00aa      	lsls	r2, r5, #2
 800afea:	5898      	ldr	r0, [r3, r2]
 800afec:	f7f6 f8de 	bl	80011ac <__aeabi_i2f>
 800aff0:	2700      	movs	r7, #0
 800aff2:	2600      	movs	r6, #0
 800aff4:	6020      	str	r0, [r4, #0]
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	429f      	cmp	r7, r3
 800affa:	dd07      	ble.n	800b00c <__kernel_rem_pio2f+0x314>
 800affc:	21f0      	movs	r1, #240	; 0xf0
 800affe:	9a03      	ldr	r2, [sp, #12]
 800b000:	ab0c      	add	r3, sp, #48	; 0x30
 800b002:	185b      	adds	r3, r3, r1
 800b004:	509e      	str	r6, [r3, r2]
 800b006:	3501      	adds	r5, #1
 800b008:	3404      	adds	r4, #4
 800b00a:	e7e3      	b.n	800afd4 <__kernel_rem_pio2f+0x2dc>
 800b00c:	00bb      	lsls	r3, r7, #2
 800b00e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b010:	425a      	negs	r2, r3
 800b012:	58c9      	ldr	r1, [r1, r3]
 800b014:	58a0      	ldr	r0, [r4, r2]
 800b016:	f7f5 fda5 	bl	8000b64 <__aeabi_fmul>
 800b01a:	1c01      	adds	r1, r0, #0
 800b01c:	1c30      	adds	r0, r6, #0
 800b01e:	f7f5 fa37 	bl	8000490 <__aeabi_fadd>
 800b022:	3701      	adds	r7, #1
 800b024:	1c06      	adds	r6, r0, #0
 800b026:	e7e6      	b.n	800aff6 <__kernel_rem_pio2f+0x2fe>
 800b028:	3f01      	subs	r7, #1
 800b02a:	e77b      	b.n	800af24 <__kernel_rem_pio2f+0x22c>
 800b02c:	0800b8cc 	.word	0x0800b8cc
 800b030:	0800b8a0 	.word	0x0800b8a0
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	9a06      	ldr	r2, [sp, #24]
 800b038:	1c20      	adds	r0, r4, #0
 800b03a:	1a99      	subs	r1, r3, r2
 800b03c:	f000 f906 	bl	800b24c <scalbnf>
 800b040:	2187      	movs	r1, #135	; 0x87
 800b042:	05c9      	lsls	r1, r1, #23
 800b044:	1c04      	adds	r4, r0, #0
 800b046:	f7f5 fa01 	bl	800044c <__aeabi_fcmpge>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d021      	beq.n	800b092 <__kernel_rem_pio2f+0x39a>
 800b04e:	21ee      	movs	r1, #238	; 0xee
 800b050:	1c20      	adds	r0, r4, #0
 800b052:	0589      	lsls	r1, r1, #22
 800b054:	f7f5 fd86 	bl	8000b64 <__aeabi_fmul>
 800b058:	f7f6 f888 	bl	800116c <__aeabi_f2iz>
 800b05c:	f7f6 f8a6 	bl	80011ac <__aeabi_i2f>
 800b060:	2187      	movs	r1, #135	; 0x87
 800b062:	05c9      	lsls	r1, r1, #23
 800b064:	1c05      	adds	r5, r0, #0
 800b066:	f7f5 fd7d 	bl	8000b64 <__aeabi_fmul>
 800b06a:	1c01      	adds	r1, r0, #0
 800b06c:	1c20      	adds	r0, r4, #0
 800b06e:	f7f5 fec7 	bl	8000e00 <__aeabi_fsub>
 800b072:	f7f6 f87b 	bl	800116c <__aeabi_f2iz>
 800b076:	00b7      	lsls	r7, r6, #2
 800b078:	ab0c      	add	r3, sp, #48	; 0x30
 800b07a:	51d8      	str	r0, [r3, r7]
 800b07c:	9b00      	ldr	r3, [sp, #0]
 800b07e:	1c28      	adds	r0, r5, #0
 800b080:	3308      	adds	r3, #8
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	f7f6 f872 	bl	800116c <__aeabi_f2iz>
 800b088:	1c77      	adds	r7, r6, #1
 800b08a:	00bc      	lsls	r4, r7, #2
 800b08c:	ab0c      	add	r3, sp, #48	; 0x30
 800b08e:	5118      	str	r0, [r3, r4]
 800b090:	e750      	b.n	800af34 <__kernel_rem_pio2f+0x23c>
 800b092:	1c20      	adds	r0, r4, #0
 800b094:	f7f6 f86a 	bl	800116c <__aeabi_f2iz>
 800b098:	00b5      	lsls	r5, r6, #2
 800b09a:	ab0c      	add	r3, sp, #48	; 0x30
 800b09c:	0037      	movs	r7, r6
 800b09e:	5158      	str	r0, [r3, r5]
 800b0a0:	e748      	b.n	800af34 <__kernel_rem_pio2f+0x23c>
 800b0a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b0a4:	00ae      	lsls	r6, r5, #2
 800b0a6:	58f0      	ldr	r0, [r6, r3]
 800b0a8:	f7f6 f880 	bl	80011ac <__aeabi_i2f>
 800b0ac:	1c21      	adds	r1, r4, #0
 800b0ae:	f7f5 fd59 	bl	8000b64 <__aeabi_fmul>
 800b0b2:	22f0      	movs	r2, #240	; 0xf0
 800b0b4:	21ee      	movs	r1, #238	; 0xee
 800b0b6:	ab0c      	add	r3, sp, #48	; 0x30
 800b0b8:	189b      	adds	r3, r3, r2
 800b0ba:	5198      	str	r0, [r3, r6]
 800b0bc:	0589      	lsls	r1, r1, #22
 800b0be:	1c20      	adds	r0, r4, #0
 800b0c0:	f7f5 fd50 	bl	8000b64 <__aeabi_fmul>
 800b0c4:	3d01      	subs	r5, #1
 800b0c6:	1c04      	adds	r4, r0, #0
 800b0c8:	e73b      	b.n	800af42 <__kernel_rem_pio2f+0x24a>
 800b0ca:	9a05      	ldr	r2, [sp, #20]
 800b0cc:	00ab      	lsls	r3, r5, #2
 800b0ce:	58d1      	ldr	r1, [r2, r3]
 800b0d0:	9a06      	ldr	r2, [sp, #24]
 800b0d2:	3501      	adds	r5, #1
 800b0d4:	5898      	ldr	r0, [r3, r2]
 800b0d6:	f7f5 fd45 	bl	8000b64 <__aeabi_fmul>
 800b0da:	1c01      	adds	r1, r0, #0
 800b0dc:	1c30      	adds	r0, r6, #0
 800b0de:	f7f5 f9d7 	bl	8000490 <__aeabi_fadd>
 800b0e2:	1c06      	adds	r6, r0, #0
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	429d      	cmp	r5, r3
 800b0e8:	dc02      	bgt.n	800b0f0 <__kernel_rem_pio2f+0x3f8>
 800b0ea:	9b00      	ldr	r3, [sp, #0]
 800b0ec:	429d      	cmp	r5, r3
 800b0ee:	ddec      	ble.n	800b0ca <__kernel_rem_pio2f+0x3d2>
 800b0f0:	21a0      	movs	r1, #160	; 0xa0
 800b0f2:	9b00      	ldr	r3, [sp, #0]
 800b0f4:	aa0c      	add	r2, sp, #48	; 0x30
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	1852      	adds	r2, r2, r1
 800b0fa:	50d6      	str	r6, [r2, r3]
 800b0fc:	3c01      	subs	r4, #1
 800b0fe:	e726      	b.n	800af4e <__kernel_rem_pio2f+0x256>
 800b100:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b102:	2b02      	cmp	r3, #2
 800b104:	dc08      	bgt.n	800b118 <__kernel_rem_pio2f+0x420>
 800b106:	2b00      	cmp	r3, #0
 800b108:	dc5a      	bgt.n	800b1c0 <__kernel_rem_pio2f+0x4c8>
 800b10a:	d035      	beq.n	800b178 <__kernel_rem_pio2f+0x480>
 800b10c:	2007      	movs	r0, #7
 800b10e:	9b03      	ldr	r3, [sp, #12]
 800b110:	4003      	ands	r3, r0
 800b112:	0018      	movs	r0, r3
 800b114:	b05d      	add	sp, #372	; 0x174
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b118:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d1f6      	bne.n	800b10c <__kernel_rem_pio2f+0x414>
 800b11e:	00bb      	lsls	r3, r7, #2
 800b120:	aa34      	add	r2, sp, #208	; 0xd0
 800b122:	18d5      	adds	r5, r2, r3
 800b124:	002c      	movs	r4, r5
 800b126:	9700      	str	r7, [sp, #0]
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	3c04      	subs	r4, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc51      	bgt.n	800b1d4 <__kernel_rem_pio2f+0x4dc>
 800b130:	9700      	str	r7, [sp, #0]
 800b132:	9b00      	ldr	r3, [sp, #0]
 800b134:	3d04      	subs	r5, #4
 800b136:	2b01      	cmp	r3, #1
 800b138:	dc62      	bgt.n	800b200 <__kernel_rem_pio2f+0x508>
 800b13a:	2000      	movs	r0, #0
 800b13c:	ac34      	add	r4, sp, #208	; 0xd0
 800b13e:	2f01      	cmp	r7, #1
 800b140:	dc73      	bgt.n	800b22a <__kernel_rem_pio2f+0x532>
 800b142:	9901      	ldr	r1, [sp, #4]
 800b144:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	2900      	cmp	r1, #0
 800b14a:	d174      	bne.n	800b236 <__kernel_rem_pio2f+0x53e>
 800b14c:	9902      	ldr	r1, [sp, #8]
 800b14e:	604b      	str	r3, [r1, #4]
 800b150:	000b      	movs	r3, r1
 800b152:	600a      	str	r2, [r1, #0]
 800b154:	6098      	str	r0, [r3, #8]
 800b156:	e7d9      	b.n	800b10c <__kernel_rem_pio2f+0x414>
 800b158:	00bb      	lsls	r3, r7, #2
 800b15a:	5919      	ldr	r1, [r3, r4]
 800b15c:	f7f5 f998 	bl	8000490 <__aeabi_fadd>
 800b160:	3f01      	subs	r7, #1
 800b162:	2f00      	cmp	r7, #0
 800b164:	daf8      	bge.n	800b158 <__kernel_rem_pio2f+0x460>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <__kernel_rem_pio2f+0x47a>
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	061b      	lsls	r3, r3, #24
 800b170:	18c0      	adds	r0, r0, r3
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	6018      	str	r0, [r3, #0]
 800b176:	e7c9      	b.n	800b10c <__kernel_rem_pio2f+0x414>
 800b178:	2000      	movs	r0, #0
 800b17a:	ac34      	add	r4, sp, #208	; 0xd0
 800b17c:	e7f1      	b.n	800b162 <__kernel_rem_pio2f+0x46a>
 800b17e:	00a3      	lsls	r3, r4, #2
 800b180:	5959      	ldr	r1, [r3, r5]
 800b182:	f7f5 f985 	bl	8000490 <__aeabi_fadd>
 800b186:	3c01      	subs	r4, #1
 800b188:	2c00      	cmp	r4, #0
 800b18a:	daf8      	bge.n	800b17e <__kernel_rem_pio2f+0x486>
 800b18c:	9a01      	ldr	r2, [sp, #4]
 800b18e:	1c03      	adds	r3, r0, #0
 800b190:	2a00      	cmp	r2, #0
 800b192:	d002      	beq.n	800b19a <__kernel_rem_pio2f+0x4a2>
 800b194:	2380      	movs	r3, #128	; 0x80
 800b196:	061b      	lsls	r3, r3, #24
 800b198:	18c3      	adds	r3, r0, r3
 800b19a:	9a02      	ldr	r2, [sp, #8]
 800b19c:	1c01      	adds	r1, r0, #0
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800b1a2:	f7f5 fe2d 	bl	8000e00 <__aeabi_fsub>
 800b1a6:	2401      	movs	r4, #1
 800b1a8:	ad34      	add	r5, sp, #208	; 0xd0
 800b1aa:	42a7      	cmp	r7, r4
 800b1ac:	da0c      	bge.n	800b1c8 <__kernel_rem_pio2f+0x4d0>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <__kernel_rem_pio2f+0x4c2>
 800b1b4:	2380      	movs	r3, #128	; 0x80
 800b1b6:	061b      	lsls	r3, r3, #24
 800b1b8:	18c0      	adds	r0, r0, r3
 800b1ba:	9b02      	ldr	r3, [sp, #8]
 800b1bc:	6058      	str	r0, [r3, #4]
 800b1be:	e7a5      	b.n	800b10c <__kernel_rem_pio2f+0x414>
 800b1c0:	003c      	movs	r4, r7
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	ad34      	add	r5, sp, #208	; 0xd0
 800b1c6:	e7df      	b.n	800b188 <__kernel_rem_pio2f+0x490>
 800b1c8:	00a3      	lsls	r3, r4, #2
 800b1ca:	5959      	ldr	r1, [r3, r5]
 800b1cc:	f7f5 f960 	bl	8000490 <__aeabi_fadd>
 800b1d0:	3401      	adds	r4, #1
 800b1d2:	e7ea      	b.n	800b1aa <__kernel_rem_pio2f+0x4b2>
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	6826      	ldr	r6, [r4, #0]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	6863      	ldr	r3, [r4, #4]
 800b1de:	1c30      	adds	r0, r6, #0
 800b1e0:	1c19      	adds	r1, r3, #0
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	f7f5 f954 	bl	8000490 <__aeabi_fadd>
 800b1e8:	1c01      	adds	r1, r0, #0
 800b1ea:	9005      	str	r0, [sp, #20]
 800b1ec:	1c30      	adds	r0, r6, #0
 800b1ee:	f7f5 fe07 	bl	8000e00 <__aeabi_fsub>
 800b1f2:	9904      	ldr	r1, [sp, #16]
 800b1f4:	f7f5 f94c 	bl	8000490 <__aeabi_fadd>
 800b1f8:	9b05      	ldr	r3, [sp, #20]
 800b1fa:	6060      	str	r0, [r4, #4]
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	e793      	b.n	800b128 <__kernel_rem_pio2f+0x430>
 800b200:	682c      	ldr	r4, [r5, #0]
 800b202:	686e      	ldr	r6, [r5, #4]
 800b204:	9b00      	ldr	r3, [sp, #0]
 800b206:	1c31      	adds	r1, r6, #0
 800b208:	3b01      	subs	r3, #1
 800b20a:	1c20      	adds	r0, r4, #0
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	f7f5 f93f 	bl	8000490 <__aeabi_fadd>
 800b212:	1c01      	adds	r1, r0, #0
 800b214:	9004      	str	r0, [sp, #16]
 800b216:	1c20      	adds	r0, r4, #0
 800b218:	f7f5 fdf2 	bl	8000e00 <__aeabi_fsub>
 800b21c:	1c31      	adds	r1, r6, #0
 800b21e:	f7f5 f937 	bl	8000490 <__aeabi_fadd>
 800b222:	9b04      	ldr	r3, [sp, #16]
 800b224:	6068      	str	r0, [r5, #4]
 800b226:	602b      	str	r3, [r5, #0]
 800b228:	e783      	b.n	800b132 <__kernel_rem_pio2f+0x43a>
 800b22a:	00bb      	lsls	r3, r7, #2
 800b22c:	58e1      	ldr	r1, [r4, r3]
 800b22e:	f7f5 f92f 	bl	8000490 <__aeabi_fadd>
 800b232:	3f01      	subs	r7, #1
 800b234:	e783      	b.n	800b13e <__kernel_rem_pio2f+0x446>
 800b236:	2180      	movs	r1, #128	; 0x80
 800b238:	9c02      	ldr	r4, [sp, #8]
 800b23a:	0609      	lsls	r1, r1, #24
 800b23c:	185b      	adds	r3, r3, r1
 800b23e:	1852      	adds	r2, r2, r1
 800b240:	6063      	str	r3, [r4, #4]
 800b242:	6022      	str	r2, [r4, #0]
 800b244:	0023      	movs	r3, r4
 800b246:	1840      	adds	r0, r0, r1
 800b248:	e784      	b.n	800b154 <__kernel_rem_pio2f+0x45c>
 800b24a:	46c0      	nop			; (mov r8, r8)

0800b24c <scalbnf>:
 800b24c:	0043      	lsls	r3, r0, #1
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	0002      	movs	r2, r0
 800b252:	000c      	movs	r4, r1
 800b254:	085d      	lsrs	r5, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d006      	beq.n	800b268 <scalbnf+0x1c>
 800b25a:	21ff      	movs	r1, #255	; 0xff
 800b25c:	05c9      	lsls	r1, r1, #23
 800b25e:	428d      	cmp	r5, r1
 800b260:	d303      	bcc.n	800b26a <scalbnf+0x1e>
 800b262:	1c01      	adds	r1, r0, #0
 800b264:	f7f5 f914 	bl	8000490 <__aeabi_fadd>
 800b268:	bd70      	pop	{r4, r5, r6, pc}
 800b26a:	4208      	tst	r0, r1
 800b26c:	d118      	bne.n	800b2a0 <scalbnf+0x54>
 800b26e:	2198      	movs	r1, #152	; 0x98
 800b270:	05c9      	lsls	r1, r1, #23
 800b272:	f7f5 fc77 	bl	8000b64 <__aeabi_fmul>
 800b276:	4b19      	ldr	r3, [pc, #100]	; (800b2dc <scalbnf+0x90>)
 800b278:	429c      	cmp	r4, r3
 800b27a:	db0d      	blt.n	800b298 <scalbnf+0x4c>
 800b27c:	0002      	movs	r2, r0
 800b27e:	15c1      	asrs	r1, r0, #23
 800b280:	b2c9      	uxtb	r1, r1
 800b282:	3919      	subs	r1, #25
 800b284:	4b16      	ldr	r3, [pc, #88]	; (800b2e0 <scalbnf+0x94>)
 800b286:	429c      	cmp	r4, r3
 800b288:	dd0c      	ble.n	800b2a4 <scalbnf+0x58>
 800b28a:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <scalbnf+0x98>)
 800b28c:	2800      	cmp	r0, #0
 800b28e:	da00      	bge.n	800b292 <scalbnf+0x46>
 800b290:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <scalbnf+0x9c>)
 800b292:	4914      	ldr	r1, [pc, #80]	; (800b2e4 <scalbnf+0x98>)
 800b294:	1c18      	adds	r0, r3, #0
 800b296:	e000      	b.n	800b29a <scalbnf+0x4e>
 800b298:	4914      	ldr	r1, [pc, #80]	; (800b2ec <scalbnf+0xa0>)
 800b29a:	f7f5 fc63 	bl	8000b64 <__aeabi_fmul>
 800b29e:	e7e3      	b.n	800b268 <scalbnf+0x1c>
 800b2a0:	0e19      	lsrs	r1, r3, #24
 800b2a2:	e7ef      	b.n	800b284 <scalbnf+0x38>
 800b2a4:	1909      	adds	r1, r1, r4
 800b2a6:	29fe      	cmp	r1, #254	; 0xfe
 800b2a8:	dcef      	bgt.n	800b28a <scalbnf+0x3e>
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	dd04      	ble.n	800b2b8 <scalbnf+0x6c>
 800b2ae:	4810      	ldr	r0, [pc, #64]	; (800b2f0 <scalbnf+0xa4>)
 800b2b0:	05c9      	lsls	r1, r1, #23
 800b2b2:	4010      	ands	r0, r2
 800b2b4:	4308      	orrs	r0, r1
 800b2b6:	e7d7      	b.n	800b268 <scalbnf+0x1c>
 800b2b8:	000b      	movs	r3, r1
 800b2ba:	3316      	adds	r3, #22
 800b2bc:	da05      	bge.n	800b2ca <scalbnf+0x7e>
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <scalbnf+0xa0>)
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	da00      	bge.n	800b2c6 <scalbnf+0x7a>
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <scalbnf+0xa8>)
 800b2c6:	4909      	ldr	r1, [pc, #36]	; (800b2ec <scalbnf+0xa0>)
 800b2c8:	e7e4      	b.n	800b294 <scalbnf+0x48>
 800b2ca:	3119      	adds	r1, #25
 800b2cc:	05c8      	lsls	r0, r1, #23
 800b2ce:	21cc      	movs	r1, #204	; 0xcc
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <scalbnf+0xa4>)
 800b2d2:	0589      	lsls	r1, r1, #22
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	4310      	orrs	r0, r2
 800b2d8:	e7df      	b.n	800b29a <scalbnf+0x4e>
 800b2da:	46c0      	nop			; (mov r8, r8)
 800b2dc:	ffff3cb0 	.word	0xffff3cb0
 800b2e0:	0000c350 	.word	0x0000c350
 800b2e4:	7149f2ca 	.word	0x7149f2ca
 800b2e8:	f149f2ca 	.word	0xf149f2ca
 800b2ec:	0da24260 	.word	0x0da24260
 800b2f0:	807fffff 	.word	0x807fffff
 800b2f4:	8da24260 	.word	0x8da24260

0800b2f8 <floorf>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	0045      	lsls	r5, r0, #1
 800b2fc:	086e      	lsrs	r6, r5, #1
 800b2fe:	0e2d      	lsrs	r5, r5, #24
 800b300:	3d7f      	subs	r5, #127	; 0x7f
 800b302:	0004      	movs	r4, r0
 800b304:	2d16      	cmp	r5, #22
 800b306:	dc24      	bgt.n	800b352 <floorf+0x5a>
 800b308:	2d00      	cmp	r5, #0
 800b30a:	da0e      	bge.n	800b32a <floorf+0x32>
 800b30c:	4916      	ldr	r1, [pc, #88]	; (800b368 <floorf+0x70>)
 800b30e:	f7f5 f8bf 	bl	8000490 <__aeabi_fadd>
 800b312:	2100      	movs	r1, #0
 800b314:	f7f5 f890 	bl	8000438 <__aeabi_fcmpgt>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d004      	beq.n	800b326 <floorf+0x2e>
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	da20      	bge.n	800b362 <floorf+0x6a>
 800b320:	2e00      	cmp	r6, #0
 800b322:	d000      	beq.n	800b326 <floorf+0x2e>
 800b324:	4c11      	ldr	r4, [pc, #68]	; (800b36c <floorf+0x74>)
 800b326:	1c20      	adds	r0, r4, #0
 800b328:	e01a      	b.n	800b360 <floorf+0x68>
 800b32a:	4e11      	ldr	r6, [pc, #68]	; (800b370 <floorf+0x78>)
 800b32c:	412e      	asrs	r6, r5
 800b32e:	4206      	tst	r6, r0
 800b330:	d016      	beq.n	800b360 <floorf+0x68>
 800b332:	490d      	ldr	r1, [pc, #52]	; (800b368 <floorf+0x70>)
 800b334:	f7f5 f8ac 	bl	8000490 <__aeabi_fadd>
 800b338:	2100      	movs	r1, #0
 800b33a:	f7f5 f87d 	bl	8000438 <__aeabi_fcmpgt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d0f1      	beq.n	800b326 <floorf+0x2e>
 800b342:	2c00      	cmp	r4, #0
 800b344:	da03      	bge.n	800b34e <floorf+0x56>
 800b346:	2380      	movs	r3, #128	; 0x80
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	412b      	asrs	r3, r5
 800b34c:	18e4      	adds	r4, r4, r3
 800b34e:	43b4      	bics	r4, r6
 800b350:	e7e9      	b.n	800b326 <floorf+0x2e>
 800b352:	23ff      	movs	r3, #255	; 0xff
 800b354:	05db      	lsls	r3, r3, #23
 800b356:	429e      	cmp	r6, r3
 800b358:	d302      	bcc.n	800b360 <floorf+0x68>
 800b35a:	1c01      	adds	r1, r0, #0
 800b35c:	f7f5 f898 	bl	8000490 <__aeabi_fadd>
 800b360:	bd70      	pop	{r4, r5, r6, pc}
 800b362:	2400      	movs	r4, #0
 800b364:	e7df      	b.n	800b326 <floorf+0x2e>
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	7149f2ca 	.word	0x7149f2ca
 800b36c:	bf800000 	.word	0xbf800000
 800b370:	007fffff 	.word	0x007fffff

0800b374 <_init>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37a:	bc08      	pop	{r3}
 800b37c:	469e      	mov	lr, r3
 800b37e:	4770      	bx	lr

0800b380 <_fini>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b386:	bc08      	pop	{r3}
 800b388:	469e      	mov	lr, r3
 800b38a:	4770      	bx	lr
